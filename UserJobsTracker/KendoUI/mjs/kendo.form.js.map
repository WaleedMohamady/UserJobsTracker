{"version":3,"sources":["raw-mjs/kendo.form.js"],"names":["__meta__","id","name","category","description","depends","features","$","undefined$1","kendo","window","ui","NS","Widget","extend","encode","htmlEncode","VALIDATE","VALIDATEFIELD","CHANGE","CLICK","SUBMIT","CLEAR","EQUAL_SET","GROUP","ARIA_DESCRIBEDBY","DATA_STOP","DATA_ROLE","DOT","formStyles","form","horizontal","vertical","field","fieldsContainer","fieldWrap","fieldError","fieldHint","fieldset","layout","legend","label","emptyLabel","optional","buttonsContainer","buttonsEnd","submit","clear","invalid","hidden","formOrientation","Form","init","element","options","that","this","fn","call","deepExtend","formData","_wrapper","_setFields","_setModel","_renderContainers","renderButtons","_renderButtons","_editable","_renderBoolLabels","_renderFieldsHints","_setEvents","_applyCssClasses","events","orientation","validatable","validateOnBlur","validationSummary","errorTemplate","buttonsTemplate","messages","grid","items","formatLabel","focusFirst","size","_noLabelfieldTemplate","styles","colSpan","_fieldTemplate","encoded","text","_boolLabelTemplate","_groupTemplate","_errorTemplate","message","_hintTemplate","width","height","wrapper","addClass","css","layoutWrapper","_setupLayoutContainer","_flattenFields","fields","concat","item","shift","result","push","apply","_defaultLabel","fieldName","customFormat","length","isFunction","split","join","trim","_formatLabel","isPlainObject","_defaultFields","formDataFields","Object","keys","itemFields","defaultFormDataFields","i","fieldInfo","fieldValue","type","editor","attributes","defaultFields","_fields","parseDate","toString","Editable","editors","_isHidden","optionalText","isHidden","_isAntiForgeryToken","data","ObservableObject","_model","MyModel","Model","define","validatorOptions","_addEditableMvvmAttributes","editable","kendoEditable","model","clearContainer","skipFocus","target","getKendoEditable","validator","_removeEditableMvvmAttributes","attr","_getItemTemplate","antiForgeryTokenName","_renderField","fieldTemplate","isHorizontal","fieldType","isBoolField","template","_toggleFieldErrorState","state","closest","toggleClass","fieldElement","find","parent","after","fieldWidgetInstance","nextLabelElement","hint","_associateHintContainer","widgetInstance","next","_errorsByName","removeAttribute","insertAfter","input","hintId","nextFocusable","getWidgetFocusableElement","toggleAttribute","_toggleHint","_renderGroup","child","renderedGroup","append","container","targetContainer","_buttonsTemplate","buttons","kendoButton","themeColor","add","appendTarget","layoutContainer","rowsGap","colsGap","layoutClassNames","appendTo","cols","gutter","rows","bind","_validateField","_validate","on","_submit","_clear","_changeHandler","_change","ev","toJSON","valid","error","trigger","preventDefault","errors","value","jsonModel","validate","reset","unbind","isHiddenInput","is","val","hasClass","Upload","clearAllFiles","set","removeClass","_validateProxy","setOptions","newOptions","destroy","removeAttr","empty","off","cssProperties","registerPrefix","plugin","jQuery","kendo$1"],"mappings":";;;;;;;;MAAA,4BACA,oBAEA,IAAAA,SAAA,CACAC,GAAA,OACAC,KAAA,OACAC,SAAA,MACAC,YAAA,mBACAC,QAAA,CAAA,WAAA,UACAC,SAAA,CAAA,CACAL,GAAA,iBACAC,KAAA,YACAE,YAAA,+BACAC,QAAA,CAAA,eAAA,WAAA,cAAA,eAAA,wBACA,CACAJ,GAAA,mBACAC,KAAA,cACAE,YAAA,iCACAC,QAAA,CAAA,YAAA,aAAA,iBAAA,eACA,CACAJ,GAAA,cACAC,KAAA,SACAE,YAAA,4BACAC,QAAA,CAAA,iBAAA,gBAAA,SAAA,SAAA,SAAA,cAAA,aAAA,gBAAA,UAAA,WAAA,aACA,CACAJ,GAAA,cACAC,KAAA,SACAE,YAAA,4BACAC,QAAA,CAAA,cAIA,SAAAE,EAAAC,GACA,IAAAC,EAAAC,OAAAD,MACAE,EAAAF,EAAAE,GACAC,EAAA,aACAC,EAAAF,EAAAE,OACAC,EAAAP,EAAAO,OACAC,EAAAN,EAAAO,WACAC,EAAA,WACAC,EAAA,gBAEAC,EAAA,SACAC,EAAA,QAAAR,EACAS,EAAA,SACAC,EAAA,QAGAC,EAAA,WACAC,EAAA,QACAC,EAAA,mBACAC,EAAA,YACAC,EAAA,YAGAC,EAAA,IAIAC,EAAA,CACAC,KAAA,SACAC,WAAA,oBACAC,SAAA,GACAC,MAAA,eACAC,gBAAA,0BACAC,UAAA,oBACAC,WAAA,qBACAC,UAAA,cACAC,SAAA,kBACAC,OAAA,gBACAC,OAAA,gBACAC,MAAA,uBACAC,WAAA,gBACAC,SAAA,mBACAC,iBAAA,iBACAC,WAAA,gBACAC,OAAA,gBACAC,MAAA,eACAC,QAAA,YACAC,OAAA,YAGAC,EACA,aADAA,EAEA,WAGAC,EAAAtC,EAAAC,OAAA,CACAsC,KAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,KAEA3C,EAAA4C,GAAAL,KAAAM,KAAAH,EAAAF,EAAAC,GAEAC,EAAAD,QAAA7C,EAAAkD,WAAA,CAAA,EAAAJ,EAAAD,QAAAA,GAEAA,GAAAA,EAAAM,WACAL,EAAAD,QAAAM,SAAAN,EAAAM,UAGAL,EAAAM,WAEAN,EAAAO,aAEAP,EAAAQ,YAEAR,EAAAS,oBAEAT,EAAAD,QAAAW,eACAV,EAAAW,iBAGAX,EAAAY,YAEAZ,EAAAa,oBAEAb,EAAAc,qBAEAd,EAAAe,aAEAf,EAAAgB,kBACA,EAEAC,OAAA,CACAtD,EACAD,EACAE,EACAE,EACAC,GAGAgC,QAAA,CACApD,KAAA,OACAuE,YAAAvB,EACAwB,YAAA,CACAC,gBAAA,EACAC,mBAAA,EACAC,cAAA,MAEAC,gBAAA,KACAC,SAAA,CACAjC,OAAA,SACAC,MAAA,QACAJ,SAAA,cAEAJ,OAAA,GACAyC,KAAA,CAAA,EACApB,SAAA,CAAA,EACAqB,MAAA,GACAC,YAAA,KACAC,YAAA,EACAlB,eAAA,EACAmB,KAAA,UAGAC,sBAAA,EAAAC,SAAAC,UAAAtC,SAAAhB,WACA,eAAAlB,EAAAuE,EAAArD,UAAAsD,EAAA,aAAAxE,EAAAwE,iBAAAxE,EAAAwE,KAAA,MAAAtC,EAAAlC,EAAAuE,EAAArC,QAAA,oBACAlC,EAAAuE,EAAA7C,UAAA1B,EAAAuE,EAAA5C,0EACA3B,EAAAkB,mBAGAuD,eAAA,EAAAF,SAAAC,UAAAtC,SAAAhB,QAAAQ,QAAAxC,KAAA0C,cACA,eAAA5B,EAAAuE,EAAArD,UAAAsD,EAAA,aAAAxE,EAAAwE,iBAAAxE,EAAAwE,KAAA,MAAAtC,EAAA,GAAAlC,EAAAuE,EAAArC,UAAA,QACAR,IAAAQ,EACA,iBAAAlC,EAAAuE,EAAA7C,gBAAA1B,EAAAd,WAAAc,EAAAd,wBACA,IAAAwC,EAAAgD,UAAA,IAAAhD,EAAAgD,QACAhD,EAAAiD,MAAAjD,EACA1B,EAAA0B,EAAAiD,MAAAjD,KACAA,EAAAE,SAAA,gBAAA5B,EAAAuE,EAAA3C,cAAA5B,EAAA4B,YAAA,IACA,WACA,IACA,sDAAA5B,EAAAkB,mBAGA0D,mBAAA,EAAAL,SAAAC,UAAAtC,SAAAhB,QAAAQ,QAAAxC,KAAA0C,cACA,wCAAA5B,EAAAd,WAAAc,EAAAd,wBACA,IAAAwC,EAAAgD,UAAA,IAAAhD,EAAAgD,QACAhD,EAAAiD,MAAAjD,EACA1B,EAAA0B,EAAAiD,MAAAjD,KACAA,EAAAE,SAAA,gBAAA5B,EAAAuE,EAAA3C,cAAA5B,EAAA4B,YAAA,IACA,WAEAiD,eAAA,EAAAN,SAAAC,UAAA9C,WACA,oBAAA1B,EAAAuE,EAAAhD,aAAAiD,EAAA,aAAAxE,EAAAwE,iBAAAxE,EAAAwE,KAAA,sBACAxE,EAAAuE,EAAA9C,YAAAzB,EAAA0B,EAAAiD,MAAAjD,yBAGAoD,eAAA,EAAA5D,QAAA6D,aAAA,kCAAA7D,sBAAA6D,iBAEAC,cAAA,EAAA9F,KAAA6F,aAAA,gCAAA7F,sBAAA6F,iBAEAjC,SAAA,WACA,IAAAN,EAAAC,KACAF,EAAAC,EAAAD,QACAzB,EAAAsB,EAAAmC,OACAU,EAAA1C,EAAA0C,MACAC,EAAA3C,EAAA2C,OAEA1C,EAAA2C,QAAA3C,EAAAF,QACA8C,SAAAtE,EAAAC,MACAqE,SAAAtE,EAAAyB,EAAAmB,cAEAwB,GACA1C,EAAA2C,QAAAD,OAAAA,GAGAD,GACAzC,EAAA2C,QAAAE,IAhKA,YAgKAJ,GAGAzC,EAAA8C,cAAA9C,EAAA+C,sBAAA/C,EAAA2C,QAAA,CACAlB,KAAA1B,EAAA0B,KACAzC,OAAAe,EAAAf,QAEA,EAEAgE,eAAA,SAAAC,GAMA,IALA,IAAAvB,EAAA,GAAAwB,OAAAD,GACAE,EAAAzB,EAAA0B,QACAC,EAAA,GACAC,EAAA,GAAAA,KAEAH,GACAA,EAAAzB,MACA4B,EAAAC,MAAA7B,EAAAyB,EAAAzB,OAEA4B,EAAAnD,KAAAkD,EAAAF,GAGAA,EAAAzB,EAAA0B,QAGA,OAAAC,CACA,EAEAG,cAAA,SAAAC,GACA,IACAC,EADAzD,KACAF,QAAA4B,YAEA,GAAA8B,EAAAE,OAIA,OAAAzG,EAAA0G,WAAAF,GACAA,EAAAD,GAGAA,EAAAI,MAAA,sBAAAC,KAAA,KAAAC,OAAA,GACA,EAEAC,aAAA,SAAAtF,EAAAQ,GAIA,OA7NA,aA2NAlC,EAAAiH,cAAA/E,GAAAA,EAAAiD,KAAAjD,GAGAA,EAJAe,KAOAuD,cAAA9E,EACA,EAEAwF,eAAA,WACA,IAKAxF,EAJAqB,EADAE,KACAF,QACAoE,EAAAC,OAAAC,KAAAtE,EAAAM,UAAA,CAAA,GACAiE,EAAAvE,EAAA2B,OAAA,CAAA,EACA6C,EAAA,GAGA,GAAAD,EAAAX,OACA,OAAAW,EAGA,IAAA,IAAAE,EAAA,EAAAA,EAAAL,EAAAR,OAAAa,GAAA,EACA9F,EAAAyF,EAAAK,GAEAD,EAAAjB,KAAA,CACA5E,MAAAA,EACAhC,GAAAgC,IAIA,OAAA6F,CACA,EAEAhE,WAAA,WACA,IAGAkE,EAAAC,EAAAC,EAAAC,EAAAC,EAHA7E,EAAAC,KACA6E,EAAA9E,EAAAgD,eAAAhD,EAAAkE,kBACA7D,EAAAL,EAAAD,QAAAM,UAAA,CAAA,EAKA,IAAA,IAAA3B,KAFAsB,EAAA+E,QAAA,GAEAD,EAEAJ,EAAArE,GADAoE,EAAAK,EAAApG,IACAA,OAEAiG,EAAA,iBAAAF,EAAAG,OAAAH,EAAAG,OACA1H,EAAAyH,KAAAD,GAAAxH,EAAA8H,UAAAN,EAAAO,aAAAP,GAEAE,EAAA1H,EAAA0G,WAAAa,EAAAG,QAAAH,EAAAG,OACAxH,EAAA8H,SAAAhF,GAAAH,QAAAoF,QAAAR,GAAA,GAAAF,EAAAG,OAEA5E,EAAAoF,UAAAX,EAAAG,UACAH,EAAAvF,MACA2F,EAAA,CACA,kBAAAJ,EAAA/H,IAAA+H,EAAA/F,MAAA,eAEA+F,EAAAI,YAAAJ,EAAAI,WAAA,gBACAA,EAAA,CACA,aAAAJ,EAAA9H,MAAA8H,EAAA/F,SAKA+F,EAAAlH,GAAA,EAAA,CACA2B,MAAAuF,EAAAvF,OAAAuF,EAAA9H,MAAA8H,EAAA/F,MACA2G,aAAArF,EAAAD,QAAAyB,SAAApC,UACAqF,EAAA,CACA/H,GAAA+H,EAAA/H,IAAA+H,EAAA/F,MACA/B,KAAA8H,EAAA9H,MAAA8H,EAAA/F,MACAiG,KAAAA,EACAC,OAAAA,EACAC,WAAAA,EACAS,SAAAtF,EAAAoF,UAAAX,EAAAG,SAAA5E,EAAAuF,oBAAAd,EAAA9H,MAAA8H,EAAA/F,SAGAsB,EAAA+E,QAAArG,GAAA+F,CAEA,EAEAjE,UAAA,WACA,IAAAR,EAAAC,KACAF,EAAAC,EAAAD,QACAM,EAAAN,EAAAM,UAAA,CAAA,EAEA,GAAAN,EAAAM,oBAAAnD,EAAAsI,KAAAC,iBACAzF,EAAA0F,OAAArF,MADA,CAKA,IAAAsF,EAAAzI,EAAAsI,KAAAI,MAAAC,OAAA,CAAA5C,OAAAjD,EAAA+E,UAEA/E,EAAA0F,OAAA,IAAAC,EAAAtF,EAJA,CAKA,EAEAO,UAAA,WACA,IAAAZ,EAAAC,KACAF,EAAAC,EAAAD,QACA+F,EAAA9F,EAAAD,QAAAoB,YAEAnB,EAAA+F,6BAEA/F,EAAAgG,SAAAhG,EAAA2C,QAAAsD,cAAA,CACAC,MAAAlG,EAAA0F,OACAzC,OAAAjD,EAAA+E,SAAA,GACA3D,eAAA0E,EAAA1E,eACAC,kBAAAyE,EAAAzE,kBACAC,cAAAwE,EAAAxE,eAAAtB,EAAAsC,eACA6D,gBAAA,EACAC,WAAArG,EAAA6B,WACAyE,OAAArG,EACA6B,KAAA9B,EAAA8B,OACAyE,mBAEAtG,EAAAuG,UAAAvG,EAAAgG,SAAA7E,YAEAnB,EAAAwG,+BACA,EAEAT,2BAAA,WAEA9F,KAAA0C,QAAA8D,KAAArI,EA9TA,WA+TA,EAEAoI,8BAAA,WAEAvG,KAAA0C,QACA8D,KAAAtI,GAAA,GACAsI,KAAArI,EApUA,OAqUA,EAEAsI,iBAAA,SAAA/B,GAUA,OANAA,IAAA1G,EAHAgC,KAIAoC,eAJApC,KAMAgC,cAIA,EAEAmD,UAAA,SAAAR,GACA,MAAA,iBAAAA,GAAA,WAAAA,CACA,EAEAW,oBAAA,SAAA7G,GACA,OAAAA,IAAAtB,EAAA8H,SAAAyB,oBAEA,EAEAC,aAAA,SAAAzD,GACA,IAKA0D,EALA7G,EAAAC,KACA3B,EAAAsB,EAAAmC,OACA+E,EAAA9G,EAAAD,QAAAmB,cAAAvB,EACAoH,EAAA/G,EAAA0F,OAAAzC,QAAAjD,EAAA0F,OAAAzC,OAAAE,EAAAzE,QAAAsB,EAAA0F,OAAAzC,OAAAE,EAAAzE,OAAAiG,KACAqC,EAAAD,GAAA,YAAAA,EAmBA,OAfAF,EADAG,GAAAF,IAAA3D,EAAAyB,OACA5E,EAAA8B,sBAEA9B,EAAAiC,eAGA/E,EAAA+J,SAAAJ,EAAA,CAAA,CACA9E,OAAAzD,EACA5B,GAAAyG,EAAAzG,IAAAyG,EAAAzE,OAAA,GACAA,MAAAyE,EAAAzE,OAAA,GACAQ,MAAA8H,IAAA7D,EAAAyB,OAAA,KAAA5E,EAAAgE,aAAAb,EAAAzE,MAAAyE,EAAAjE,OACA8C,QAAAmB,EAAAnB,SAAA,GACA5C,SAAAY,EAAAD,QAAAyB,SAAApC,SACAM,OAAAM,EAAAoF,UAAAjC,EAAAyB,SAAA5E,EAAAuF,oBAAApC,EAAAzE,QAIA,EAEAwI,uBAAA,SAAApH,EAAAqH,GACA,IAAAzI,EAAAoB,EAAAsH,QAAA/I,EAAAC,EAAAI,OAEAA,EAAAiF,QACAjF,EAAA2I,YAAA/I,EAAAO,WAAAsI,EAEA,EAEAtG,kBAAA,WAMA,IALA,IAGAnC,EAAA4I,EAHAtH,EAAAC,KACA3B,EAAAsB,EAAAmC,OACAkB,EAAAjD,EAAA+E,QAGAP,EAAA,EAAAA,EAAAvB,EAAAU,OAAAa,GAAA,EACA9F,EAAAuE,EAAAuB,IACA8C,EAAAtH,EAAA2C,QAAA4E,KAAA,UAAA7I,EAAA/B,KAAA,6BAEA+B,EAAAQ,QAAAR,EAAA4G,UAAA,YAAA5G,EAAAiG,OAAAjG,EAAAkG,QAIA0C,EAAAE,SAAAC,MAAAvK,EAAA+J,SAAAjH,EAAAoC,mBAAAlF,CAAA,CACA6E,OAAAzD,EACA5B,GAAAgC,EAAAhC,IAAAgC,EAAAA,OAAA,GACAU,SAAAY,EAAAD,QAAAyB,SAAApC,SACAF,MAAAc,EAAAgE,aAAAtF,EAAAA,MAAAA,EAAAQ,SAGA,EAEA4B,mBAAA,WAKA,IAJA,IAEApC,EAAAgJ,EAAAJ,EAAAK,EAAAC,EAFA5H,EAAAC,KACAgD,EAAAjD,EAAA+E,QAGAP,EAAA,EAAAA,EAAAvB,EAAAU,OAAAa,GAAA,EACA9F,EAAAuE,EAAAuB,IACA8C,EAAAtH,EAAA2C,QAAA4E,KAAA,UAAA7I,EAAA/B,eAAA+B,EAAA/B,YAEA+B,EAAAkJ,OAAAlJ,EAAA4G,WAIAsC,EAAA5K,EAAAE,EAAA+J,SAAAjH,EAAAwC,cAAAtF,CAAA,CAAAqF,QAAA7D,EAAAkJ,MAAA,GAAAlL,GAAAgC,EAAAhC,MAEAsD,EAAA6H,wBAAAP,EAAAM,EAAAnB,KAAA,QAEAiB,EAAAxK,EAAA4K,eAAAR,MAIAA,GADAK,EAAAD,EAAA5H,QAAAiI,KAAA,cAAAL,EAAA5H,QAAA2G,KAAA,MAAA,OACA9C,OAAAgE,EAAAD,EAAA/E,SAGA3C,EAAAuG,UAAAyB,cAAAtJ,EAAA/B,MAAAgH,SACAiE,EAAAP,YAAA/I,EAAAoB,QACAxC,EAAA+K,gBAAAX,EAAApJ,EAAA0J,EAAAnB,KAAA,QAGAmB,EAAAM,YAAAZ,GAEA,EAEAO,wBAAA,SAAAM,EAAAC,GACA,IAAAC,EAAAnL,EAAAoL,0BAAAH,GAEAE,GAAAD,GAIAlL,EAAAqL,gBAAAF,EAAAnK,EAAAkK,EACA,EAEAI,YAAA,SAAA1I,EAAAqH,GACA,IAEAS,EADAlJ,EAAAoB,EAAAsH,QAAA/I,EAAAC,EAAAI,OAGAA,EAAAiF,SACAiE,EAAAlJ,EAAA6I,KAAAlJ,EAAAC,EAAAQ,YAEA6E,SACAiE,EAAAP,YAAA/I,EAAAoB,OAAAyH,GARAlH,KASA4H,wBAAA/H,EAAA8H,EAAAnB,KAAA,OAGA,EAEAgC,aAAA,SAAAtF,GACA,IAEAuF,EAAAC,EAAAhK,EAFAqB,EAAAC,KACA0E,EAAAxB,EAAAwB,KAGAhG,EAAAgK,EAAA3L,EAAAE,EAAA+J,SAAAjH,EAAA0G,iBAAA/B,GAAAzH,CAAA,CACA6E,OAAAzD,EACAY,MAAAiE,EAAAjE,OAAA,GACA8C,QAAAmB,EAAAnB,WAGArD,EAAAqB,EAAA+C,sBAAA4F,EAAA,CACAlH,KAAA0B,EAAA1B,KACAzC,OAAAmE,EAAAnE,UACA2J,EAEA,IAAA,IAAAnE,EAAA,EAAAA,EAAArB,EAAAzB,MAAAiC,OAAAa,GAAA,EACAkE,EAAAvF,EAAAzB,MAAA8C,GACA7F,EAAAiK,OAAA5I,EAAA4G,aAAA8B,IAGA,OAAAC,CACA,EAEAlI,kBAAA,WAOA,IANA,IAIA0C,EAAA0F,EAJA7I,EAAAC,KACA6E,EAAA9E,EAAAkE,iBAEA4E,EADA,SAAA9I,EAAAD,QAAAf,OACAgB,EAAA8C,cAAA9C,EAAA2C,QAGA6B,EAAA,EAAAA,EAAAM,EAAAnB,OAAAa,GAAA,EAKAqE,GAJA1F,EAAA2B,EAAAN,IACAG,OAEA1G,EACA+B,EAAAyI,aAAAtF,GAEAnD,EAAA4G,aAAAzD,GAGA2F,EAAAF,OAAAC,EAEA,EAEAE,iBAAA,WACA,IAGAC,EAAAzJ,EAAAC,EAHAO,EAAAE,KAAAF,QACAyB,EAAAzB,EAAAyB,SACAlD,EAAAsB,EAAAmC,OAqBA,OAlBA,OAAAhC,EAAAwB,gBACAyH,EAAA9L,EAAA+J,SAAAlH,EAAAwB,gBAAArE,CAAA,CACA6E,OAAAzD,EACAkD,SAAAA,KAGAjC,EAAAvC,EAAA,kBAAAsB,EAAAiB,OAAA,KAAA/B,EAAAgE,EAAAjC,QAAA,aAAA0J,YAAA,CACAtE,KAAA,SACAuE,WAAA,UACArH,KAAA9B,EAAA8B,OAEArC,EAAAxC,EAAA,kBAAAsB,EAAAkB,MAAA,KAAAhC,EAAAgE,EAAAhC,OAAA,aAAAyJ,YAAA,CACApH,KAAA9B,EAAA8B,OAGAmH,EAAAzJ,EAAA4J,IAAA3J,IAGAwJ,CACA,EAEArI,eAAA,WACA,IAMAqI,EANAhJ,EAAAC,KACA0C,EAAA3C,EAAA2C,QACA5C,EAAAC,EAAAD,QACAzB,EAAAsB,EAAAmC,OACA+E,EAAA/G,EAAAmB,cAAAvB,EACAN,EAAAsD,EAAA4E,KAAAlJ,EAAAC,EAAAe,kBAGAA,EAAAsE,SACAtE,EAAArC,EAAA,WACA4F,SAAAtE,EAAAe,kBACAuD,SAAAkE,EAAAxI,EAAAgB,WAAA,KAGA0J,EAAAhJ,EAAA+I,mBAEA1J,EAAAuJ,OAAAI,GAEAhJ,EAAAF,QAAA8I,OAAAvJ,EACA,EAEA0D,sBAAA,SAAAqG,EAAArJ,GACA,IAGAsJ,EAAAC,EAAAC,EAHAvK,EAAAe,EAAAf,OACAyC,EAAA1B,EAAA0B,KACA+H,EAAA,GAuCA,MApCA,iBAAAxK,GAAA,KAAAA,IACAqK,EAAArM,EAAA,eACAyM,SAAAL,GACAxG,SAAAtE,EAAAU,QAEAwK,EAAAlG,KAAA,OAAAtE,IAGA,SAAAA,GAAA,iBAAAyC,IACA,iBAAAA,EAAAiI,KACAF,EAAAlG,KAAA,eAAA7B,EAAAiI,MACA,iBAAAjI,EAAAiI,MACAL,EAAAxG,IAAA,wBAAApB,EAAAiI,MAGA,iBAAAjI,EAAAkI,QAAA,iBAAAlI,EAAAkI,OACAN,EAAAxG,IAAA,WAAApB,EAAAkI,QACA3M,EAAAiH,cAAAxC,EAAAkI,UAIA,iBAHAL,EAAA7H,EAAAkI,OAAAC,QAIAN,GAAA,MAEA,iBALAC,EAAA9H,EAAAkI,OAAAD,QAMAH,GAAA,MAGAF,EAAAxG,IAAA,WAAAyG,EAAA,IAAAC,KAIAF,GACAA,EAAAzG,SAAA4G,EAAA1F,KAAA,MAGAuF,CACA,EAEAtI,WAAA,WACA,IAAAf,EAAAC,KACAD,EAAAuG,UAGAsD,KA9mBA,gBA8mBA7J,EAAA8J,eAAAD,KAAA7J,IACA6J,KAAAnM,EAAAsC,EAAA+J,UAAAF,KAAA7J,IAEAA,EAAA2C,QACAqH,GAAAlM,EAAAT,EAAA2C,EAAAiK,QAAAJ,KAAA7J,IACAgK,GAAAjM,EAAAV,EAAA2C,EAAAkK,OAAAL,KAAA7J,IACAgK,GAAAnM,EAAAR,EAAAgB,EAAAC,EAAAkB,MAAAQ,EAAAkK,OAAAL,KAAA7J,IAEAA,EAAAmK,iBACAnK,EAAAmK,eAAAnK,EAAAoK,QAAAP,KAAA7J,IAGAA,EAAA0F,OAAAmE,KAAAjM,EAAAoC,EAAAmK,eACA,EAEAL,eAAA,SAAAO,GACA,IAAArK,EAAAC,KACAuF,EAAA,CACAU,MAAAlG,EAAA0F,OAAA4E,SACAC,MAAAF,EAAAE,MACA7L,MAAA2L,EAAA3L,MACA8L,MAAAH,EAAAG,MACArC,MAAAkC,EAAAlC,OAGAnI,EAAAkH,uBAAA1B,EAAA2C,OAAA3C,EAAA+E,OAEAvK,EAAAwI,YAAAhD,EAAA2C,OAAA3C,EAAA+E,OAEAvK,EAAAyK,QAAA9M,EAAA6H,IACA6E,EAAAK,gBAEA,EAEAX,UAAA,SAAAM,GACA,IACA7E,EAAA,CACAU,MAFAjG,KAEAyF,OAAA4E,SACAC,MAAAF,EAAAE,MACAI,OAAAN,EAAAM,QAJA1K,KAOAwK,QAAA/M,EAAA8H,EACA,EAEA4E,QAAA,SAAAC,GACA,IACA3L,EAAA2L,EAAA3L,MACA8G,EAAA,CACA9G,MAAAA,EACAkM,MAJA3K,KAIAyF,OAAAhH,IAJAuB,KAOAwK,QAAA7M,EAAA4H,EACA,EAEAyE,QAAA,SAAAI,GACA,IACAQ,EADA5K,KACAyF,OAAA4E,SADArK,KAGAwK,QAAA3M,EAAA,CAAAoI,MAAA2E,KACAR,EAAAK,gBAEA,EAEAR,OAAA,SAAAG,GAGAA,EAAAK,iBAFAzK,KAIAT,QAJAS,KAMAwK,QAAA1M,EACA,EAEA+M,SAAA,WACA,IACAvE,EADAtG,KACAsG,UAEA,GAAAA,EAIA,OAAAA,EAAAuE,UACA,EAEAtL,MAAA,WACA,IAAAQ,EAAAC,KACAgD,EAAAjD,EAAA+E,QACAmB,EAAAlG,EAAA0F,OACAM,EAAAhG,EAAAgG,SACA5E,EAAApB,EAAAuG,UAAAxG,QAAAqB,eAEApB,EAAAuG,UAAAwE,QAEA3J,GACA8E,EACA8E,OAzsBA,OA0sBAA,OAAAhN,GAGA,IAAA,IAAAwG,EAAA,EAAAA,EAAAvB,EAAAU,OAAAa,GAAA,EAAA,CACA,IAAA9F,EAAAuE,EAAAuB,GAAA9F,MACAoB,EAAAE,EAAA2C,QAAA4E,KAAA,UAAA7I,EAAA,MACAoJ,EAAA5K,EAAA4K,eAAAhI,GACAmL,EAAAnL,EAAAoL,GAAA,sBAEApL,EAAAoL,GAzsBA,gCAysBApL,EAAAoL,GA1sBA,6BA0sBAD,GACAnL,EAAAqL,IAAA,KAGArD,GAAAhI,EAAAsL,SAAA,cACAtD,EAAA5K,EAAA4K,eAAAhI,EAAAsH,QAAA,kBAGAU,IACA5K,EAAAE,GAAAiO,QAAAvD,aAAA5K,EAAAE,GAAAiO,OACAvD,EAAAwD,gBAEAxD,EAAA8C,MAAA,OAIA5K,EAAAwI,YAAA1I,GAAA,GAEA,kBAAAoG,EAAAxH,IACAoB,EAAAqL,IAAA,SACAjF,EAAAqF,IAAA7M,GAAA,IACAuM,GACA/E,EAAAqF,IAAA7M,EAAA,KAEA,CAEAsB,EAAA2C,QAAA4E,KAAAlJ,EAAAC,EAAAO,YACA2M,YAAAlN,EAAAO,YAEAuC,GACA8E,EACA2D,KAlvBA,MAkvBA7D,EAAAyF,gBACA5B,KAAA7L,EAAAgI,EAAAyF,eAEA,EAEAC,WAAA,SAAAC,GACA,IAAA3L,EAAAC,KAEAD,EAAA4L,UAEA5L,EAAA2C,QACA6I,YAAAlN,EAAAE,YACAqN,WAAA1N,GACA2N,QAEA9L,EAAAH,KAAAG,EAAAF,QAAA6L,EACA,EAEAC,QAAA,WACA,IAAA5L,EAAAC,KAEAD,EAAA2C,QAAAoJ,IAAA1O,GAEA2C,EAAA0F,SACA1F,EAAA0F,OAAAsF,OAAApN,EAAAoC,EAAAmK,gBACAnK,EAAAmK,eAAA,MAGA7M,EAAA4C,GAAA0L,QAAAzL,KAAAH,EAAAgG,UAEA1I,EAAA4C,GAAA0L,QAAAzL,KAAAH,GAEAA,EAAAgG,WACAhG,EAAAgG,SAAA4F,UACA5L,EAAAgG,SAAA,KAEA,IAGA9I,EAAA8O,cAAAC,eAAA,OAAA,WAEA7O,EAAA8O,OAAAtM,GAEArC,GAAA,EAAAqC,EAAA,CAAAmC,OAAAzD,GAEA,CA9yBA,CA8yBAnB,OAAAD,MAAAiP,QACA,IAAAC,QAAAlP,aAEAkP","file":"kendo.form.js","sourcesContent":["import './kendo.editable.js';\nimport './kendo.button.js';\n\nvar __meta__ = {\n        id: \"form\",\n        name: \"Form\",\n        category: \"web\",\n        description: \"The Form widget.\",\n        depends: [ \"editable\", \"button\" ],\n        features: [{\n            id: \"form-dropdowns\",\n            name: \"DropDowns\",\n            description: \"Support for DropDown editors\",\n            depends: [ \"autocomplete\", \"combobox\", \"multiselect\", \"dropdowntree\", \"multicolumncombobox\" ]\n        }, {\n            id: \"form-datepickers\",\n            name: \"DatePickers\",\n            description: \"Support for DatePicker editors\",\n            depends: [ \"dateinput\", \"datepicker\", \"datetimepicker\", \"timepicker\" ]\n        }, {\n            id: \"form-inputs\",\n            name: \"Inputs\",\n            description: \"Support for Input editors\",\n            depends: [ \"numerictextbox\", \"maskedtextbox\", \"switch\", \"rating\", \"slider\", \"colorpicker\", \"radiogroup\", \"checkboxgroup\", \"textbox\", \"textarea\", \"checkbox\" ]\n        }, {\n            id: \"form-editor\",\n            name: \"Editor\",\n            description: \"Support for Editor editor\",\n            depends: [ \"editor\" ]\n        }]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            NS = \".kendoForm\",\n            Widget = ui.Widget,\n            extend = $.extend,\n            encode = kendo.htmlEncode,\n            VALIDATE = \"validate\",\n            VALIDATEFIELD = \"validateField\",\n            VALIDATEINPUT = \"validateInput\",\n            CHANGE = \"change\",\n            CLICK = \"click\" + NS,\n            SUBMIT = \"submit\",\n            CLEAR = \"clear\",\n            MAX_WIDTH = \"max-width\",\n            SET = \"set\",\n            EQUAL_SET = \"equalSet\",\n            GROUP = \"group\",\n            ARIA_DESCRIBEDBY = \"aria-describedby\",\n            DATA_STOP = \"data-stop\",\n            DATA_ROLE = \"data-role\",\n            EDITABLE = \"editable\",\n            FORM = \"form\",\n            DOT = \".\",\n            DATA_ROLE_RADIO_GROUP = \"[data-role='radiogroup']\",\n            DATA_ROLE_CHECKBOX_GROUP = \"[data-role='checkboxgroup']\";\n\n        var formStyles = {\n            form: \"k-form\",\n            horizontal: \"k-form-horizontal\",\n            vertical: \"\",\n            field: \"k-form-field\",\n            fieldsContainer: \"k-form-fields-container\",\n            fieldWrap: \"k-form-field-wrap\",\n            fieldError: \"k-form-field-error\",\n            fieldHint: \"k-form-hint\",\n            fieldset: \"k-form-fieldset\",\n            layout: \"k-form-layout\",\n            legend: \"k-form-legend\",\n            label: \"k-label k-form-label\",\n            emptyLabel: \"k-label-empty\",\n            optional: \"k-label-optional\",\n            buttonsContainer: \"k-form-buttons\",\n            buttonsEnd: \"k-buttons-end\",\n            submit: \"k-form-submit\",\n            clear: \"k-form-clear\",\n            invalid: \"k-invalid\",\n            hidden: \"k-hidden\"\n        };\n\n        var formOrientation = {\n            horizontal: \"horizontal\",\n            vertical: \"vertical\"\n        };\n\n        var Form = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                Widget.fn.init.call(that, element, options);\n\n                that.options = kendo.deepExtend({}, that.options, options);\n\n                if (options && options.formData) {\n                    that.options.formData = options.formData;\n                }\n\n                that._wrapper();\n\n                that._setFields();\n\n                that._setModel();\n\n                that._renderContainers();\n\n                if (that.options.renderButtons) {\n                    that._renderButtons();\n                }\n\n                that._editable();\n\n                that._renderBoolLabels();\n\n                that._renderFieldsHints();\n\n                that._setEvents();\n\n                that._applyCssClasses();\n            },\n\n            events: [\n                VALIDATEFIELD,\n                VALIDATE,\n                CHANGE,\n                SUBMIT,\n                CLEAR\n            ],\n\n            options: {\n                name: \"Form\",\n                orientation: formOrientation.vertical,\n                validatable: {\n                    validateOnBlur: true,\n                    validationSummary: false,\n                    errorTemplate: null\n                },\n                buttonsTemplate: null,\n                messages: {\n                    submit: \"Submit\",\n                    clear: \"Clear\",\n                    optional: \"(Optional)\"\n                },\n                layout: \"\",\n                grid: {},\n                formData: {},\n                items: [],\n                formatLabel: null,\n                focusFirst: false,\n                renderButtons: true,\n                size: \"medium\"\n            },\n\n            _noLabelfieldTemplate: ({ styles, colSpan, hidden, field })=>\n                                    `<div class='${encode(styles.field)} ${colSpan ? `k-colspan-${encode(colSpan)} k-col-span-${encode(colSpan)}` : '' } ${hidden ? encode(styles.hidden) : '' }'>` +\n                                        `<span class='${encode(styles.label)} ${encode(styles.emptyLabel)}'></span>` +\n                                        `<div class='k-form-field-wrap' data-container-for='${encode(field)}'></div>` +\n                                    \"</div>\",\n\n            _fieldTemplate: ({ styles, colSpan, hidden, field, label, id, optional }) =>\n                            `<div class='${encode(styles.field)} ${colSpan ? `k-colspan-${encode(colSpan)} k-col-span-${encode(colSpan)}` : ''} ${hidden ? `${encode(styles.hidden)}` : ''}'>` +\n                                ((label && !hidden) ?\n                                `<label class='${encode(styles.label)}' for='${encode(id)}' id='${encode(id)}-form-label'>` +\n                                    ((typeof label.encoded != 'undefined' && label.encoded === false) ?\n                                    label.text || label\n                                    : encode(label.text || label)) +\n                                    (label.optional ? `<span class='${encode(styles.optional)}'>${encode(optional)}</span>` : '') +\n                                \"</label>\"\n                                : '' ) +\n                                `<div class='k-form-field-wrap' data-container-for='${encode(field)}'></div>` +\n                            \"</div>\",\n\n            _boolLabelTemplate: ({ styles, colSpan, hidden, field, label, id, optional }) =>\n                            `<label class='k-checkbox-label' for='${encode(id)}' id='${encode(id)}-form-label'>` +\n                                ((typeof label.encoded != 'undefined' && label.encoded === false) ?\n                                label.text || label\n                                : encode(label.text || label)) +\n                                (label.optional ? `<span class='${encode(styles.optional)}'>${encode(optional)}</span>` : '') +\n                            \"</label>\",\n\n            _groupTemplate: ({ styles, colSpan, label }) =>\n                            `<fieldset class='${encode(styles.fieldset)} ${colSpan ? `k-colspan-${encode(colSpan)} k-col-span-${encode(colSpan)}` : ''}'>` +\n                                `<legend class='${encode(styles.legend)}'>${encode(label.text || label)}</legend>` +\n                            \"</fieldset>\",\n\n            _errorTemplate: ({ field, message }) => `<span class='k-form-error' id='${field}-form-error'><div>${message}</div></span>`,\n\n            _hintTemplate: ({ id, message }) => `<div class='k-form-hint' id='${id}-form-hint'><span>${message}</span></div>`,\n\n            _wrapper: function() {\n                var that = this,\n                    options = that.options,\n                    formStyles = Form.styles,\n                    width = options.width,\n                    height = options.height;\n\n                that.wrapper = that.element\n                    .addClass(formStyles.form)\n                    .addClass(formStyles[options.orientation]);\n\n                if (height) {\n                    that.wrapper.height(height);\n                }\n\n                if (width) {\n                    that.wrapper.css(MAX_WIDTH, width);\n                }\n\n                that.layoutWrapper = that._setupLayoutContainer(that.wrapper, {\n                    grid: options.grid,\n                    layout: options.layout\n                });\n            },\n\n            _flattenFields: function(fields) {\n                var items = [].concat(fields),\n                    item = items.shift(),\n                    result = [],\n                    push = [].push;\n\n                while (item) {\n                    if (item.items) {\n                        push.apply(items, item.items);\n                    } else {\n                        push.call(result, item);\n                    }\n\n                    item = items.shift();\n                }\n\n                return result;\n            },\n\n            _defaultLabel: function(fieldName) {\n                var that = this,\n                    customFormat = that.options.formatLabel;\n\n                if (!fieldName.length) {\n                    return;\n                }\n\n                if (kendo.isFunction(customFormat)) {\n                    return customFormat(fieldName);\n                }\n\n                return fieldName.split(/(.*[a-z])(?=[A-Z])/).join(\" \").trim() + \":\";\n            },\n\n            _formatLabel: function(field, label) {\n                var that = this,\n                    text = $.isPlainObject(label) ? label.text : label;\n\n                if (text !== undefined$1) {\n                    return label;\n                }\n\n                return that._defaultLabel(field);\n            },\n\n            _defaultFields: function() {\n                var that = this,\n                    options = that.options,\n                    formDataFields = Object.keys(options.formData || {}),\n                    itemFields = options.items || {},\n                    defaultFormDataFields = [],\n                    field;\n\n                if (itemFields.length) {\n                    return itemFields;\n                }\n\n                for (var i = 0; i < formDataFields.length; i += 1) {\n                    field = formDataFields[i];\n\n                    defaultFormDataFields.push({\n                        field: field,\n                        id: field\n                    });\n                }\n\n                return defaultFormDataFields;\n            },\n\n            _setFields: function() {\n                var that = this,\n                    defaultFields = that._flattenFields(that._defaultFields()),\n                    formData = that.options.formData || {},\n                    fieldInfo, fieldValue, type, editor, attributes;\n\n                that._fields = [];\n\n                for (var field in defaultFields) {\n                    fieldInfo = defaultFields[field];\n                    fieldValue = formData[fieldInfo.field];\n\n                    type = typeof fieldInfo.editor === \"string\" ? fieldInfo.editor :\n                        kendo.type(fieldValue ? kendo.parseDate(fieldValue.toString()) || fieldValue : fieldValue);\n\n                    editor = kendo.isFunction(fieldInfo.editor) ? fieldInfo.editor :\n                         ui.Editable.fn.options.editors[type] ? \"\" : fieldInfo.editor;\n\n                    if (!that._isHidden(fieldInfo.editor)) {\n                        if (fieldInfo.label) {\n                            attributes = {\n                                \"aria-labelledby\": fieldInfo.id || fieldInfo.field + \"-form-label\"\n                            };\n                        } else if (!fieldInfo.attributes || !fieldInfo.attributes[\"aria-label\"]) {\n                            attributes = {\n                                \"aria-label\": fieldInfo.name || fieldInfo.field\n                            };\n                        }\n                    }\n\n                    fieldInfo = extend(true, {\n                        label: fieldInfo.label || fieldInfo.name || fieldInfo.field,\n                        optionalText: that.options.messages.optional\n                    }, fieldInfo, {\n                        id: fieldInfo.id || fieldInfo.field,\n                        name: fieldInfo.name || fieldInfo.field,\n                        type: type,\n                        editor: editor,\n                        attributes: attributes,\n                        isHidden: that._isHidden(fieldInfo.editor) || that._isAntiForgeryToken(fieldInfo.name || fieldInfo.field)\n                    });\n\n                    that._fields[field] = fieldInfo;\n                }\n            },\n\n            _setModel: function() {\n                var that = this,\n                    options = that.options,\n                    formData = options.formData || {};\n\n                if (options.formData instanceof kendo.data.ObservableObject) {\n                    that._model = formData;\n                    return;\n                }\n\n                var MyModel = kendo.data.Model.define({ fields: that._fields });\n\n                that._model = new MyModel(formData);\n            },\n\n            _editable: function() {\n                var that = this,\n                    options = that.options,\n                    validatorOptions = that.options.validatable;\n\n                that._addEditableMvvmAttributes();\n\n                that.editable = that.wrapper.kendoEditable({\n                    model: that._model,\n                    fields: that._fields || [],\n                    validateOnBlur: validatorOptions.validateOnBlur,\n                    validationSummary: validatorOptions.validationSummary,\n                    errorTemplate: validatorOptions.errorTemplate || that._errorTemplate,\n                    clearContainer: false,\n                    skipFocus: !options.focusFirst,\n                    target: that,\n                    size: options.size\n                }).getKendoEditable();\n\n                that.validator = that.editable.validatable;\n\n                that._removeEditableMvvmAttributes();\n            },\n\n            _addEditableMvvmAttributes: function() {\n                // required for two mvvm bindable widgets on one element\n                this.wrapper.attr(DATA_ROLE, EDITABLE);\n            },\n\n            _removeEditableMvvmAttributes: function() {\n                // required for two mvvm bindable widgets on one element\n                this.wrapper\n                    .attr(DATA_STOP, true)\n                    .attr(DATA_ROLE, FORM);\n            },\n\n            _getItemTemplate: function(type) {\n                var that = this,\n                    template;\n\n                if (type === GROUP) {\n                    template = that._groupTemplate;\n                } else {\n                    template = that._fieldTemplate;\n                }\n\n                return template;\n            },\n\n            _isHidden: function(editor) {\n                return typeof editor === \"string\" && editor === \"hidden\";\n            },\n\n            _isAntiForgeryToken: function(field) {\n                return field === ui.Editable.antiForgeryTokenName;\n\n            },\n\n            _renderField: function(item) {\n                var that = this,\n                    formStyles = Form.styles,\n                    isHorizontal = that.options.orientation === formOrientation.horizontal,\n                    fieldType = that._model.fields && that._model.fields[item.field] && that._model.fields[item.field].type,\n                    isBoolField = fieldType && fieldType === \"boolean\",\n                    fieldTemplate, renderedField;\n\n                if (isBoolField && isHorizontal && !item.editor) {\n                    fieldTemplate = that._noLabelfieldTemplate;\n                } else {\n                    fieldTemplate = that._fieldTemplate;\n                }\n\n                renderedField = (kendo.template(fieldTemplate)({\n                    styles: formStyles,\n                    id: item.id || item.field || \"\",\n                    field: item.field || \"\",\n                    label: isBoolField && !item.editor ? null : that._formatLabel(item.field, item.label),\n                    colSpan: item.colSpan || \"\",\n                    optional: that.options.messages.optional,\n                    hidden: that._isHidden(item.editor) || that._isAntiForgeryToken(item.field)\n                }));\n\n                return renderedField;\n            },\n\n            _toggleFieldErrorState: function(element, state) {\n                var field = element.closest(DOT + formStyles.field);\n\n                if (field.length) {\n                    field.toggleClass(formStyles.fieldError, state);\n                }\n            },\n\n            _renderBoolLabels: function() {\n                var that = this,\n                    formStyles = Form.styles,\n                    fields = that._fields,\n                    field, fieldElement;\n\n                for (var i = 0; i < fields.length; i += 1) {\n                    field = fields[i];\n                    fieldElement = that.wrapper.find(\"[name='\" + field.name + \"']:not([type='hidden'])\");\n\n                    if (!fieldElement || !field.label || field.isHidden || field.type !== \"boolean\" || field.editor) {\n                        continue;\n                    }\n\n                    fieldElement.parent().after(kendo.template(that._boolLabelTemplate)({\n                        styles: formStyles,\n                        id: field.id || field.field || \"\",\n                        optional: that.options.messages.optional,\n                        label: that._formatLabel(field.field, field.label)\n                    }));\n                }\n            },\n\n            _renderFieldsHints: function() {\n                var that = this,\n                    fields = that._fields,\n                    field, fieldWidgetInstance, fieldElement, nextLabelElement, hint;\n\n                for (var i = 0; i < fields.length; i += 1) {\n                    field = fields[i];\n                    fieldElement = that.wrapper.find(`[name='${field.name}'],[id='${field.name}']`);\n\n                    if (!fieldElement || !field.hint || field.isHidden) {\n                        continue;\n                    }\n\n                    hint = $(kendo.template(that._hintTemplate)({ message: field.hint || \"\", id: field.id }));\n\n                    that._associateHintContainer(fieldElement, hint.attr(\"id\"));\n\n                    fieldWidgetInstance = kendo.widgetInstance(fieldElement);\n\n                    if (fieldWidgetInstance) {\n                        nextLabelElement = fieldWidgetInstance.element.next(\"label[for='\" + fieldWidgetInstance.element.attr(\"id\") + \"']\");\n                        fieldElement = nextLabelElement.length ? nextLabelElement : fieldWidgetInstance.wrapper;\n                    }\n\n                    if (that.validator._errorsByName(field.name).length) {\n                        hint.toggleClass(formStyles.hidden);\n                        kendo.removeAttribute(fieldElement, ARIA_DESCRIBEDBY, hint.attr(\"id\"));\n                    }\n\n                    hint.insertAfter(fieldElement);\n                }\n            },\n\n            _associateHintContainer: function(input, hintId) {\n                var nextFocusable = kendo.getWidgetFocusableElement(input);\n\n                if (!nextFocusable || !hintId) {\n                    return;\n                }\n\n                kendo.toggleAttribute(nextFocusable, ARIA_DESCRIBEDBY, hintId);\n            },\n\n            _toggleHint: function(element, state) {\n                var that = this,\n                    field = element.closest(DOT + formStyles.field),\n                    hint;\n\n                if (field.length) {\n                    hint = field.find(DOT + formStyles.fieldHint);\n\n                    if (hint.length) {\n                        hint.toggleClass(formStyles.hidden, state);\n                        that._associateHintContainer(element, hint.attr(\"id\"));\n                    }\n                }\n            },\n\n            _renderGroup: function(item) {\n                var that = this,\n                    type = item.type,\n                    child, renderedGroup, fieldsContainer;\n\n                fieldsContainer = renderedGroup = $(kendo.template(that._getItemTemplate(type))({\n                    styles: formStyles,\n                    label: item.label || \"\",\n                    colSpan: item.colSpan\n                }));\n\n                fieldsContainer = that._setupLayoutContainer(renderedGroup, {\n                    grid: item.grid,\n                    layout: item.layout\n                }) || renderedGroup;\n\n                for (var i = 0; i < item.items.length; i += 1) {\n                    child = item.items[i];\n                    fieldsContainer.append(that._renderField(child));\n                }\n\n                return renderedGroup;\n            },\n\n            _renderContainers: function() {\n                var that = this,\n                    defaultFields = that._defaultFields(),\n                    columnsLayout = that.options.layout === \"grid\",\n                    targetContainer = columnsLayout ? that.layoutWrapper : that.wrapper,\n                    item, type, container;\n\n                for (var i = 0; i < defaultFields.length; i += 1) {\n                    item = defaultFields[i];\n                    type = item.type;\n\n                    if (type === GROUP) {\n                        container = that._renderGroup(item);\n                    } else {\n                        container = that._renderField(item);\n                    }\n\n                    targetContainer.append(container);\n                }\n            },\n\n            _buttonsTemplate: function() {\n                var options = this.options,\n                    messages = options.messages,\n                    formStyles = Form.styles,\n                    buttons, submit, clear;\n\n                if (options.buttonsTemplate !== null) {\n                    buttons = kendo.template(options.buttonsTemplate)({\n                        styles: formStyles,\n                        messages: messages\n                    });\n                } else {\n                    submit = $(\"<button class='\" + formStyles.submit + \"'>\" + encode(messages.submit) + \"</button>\").kendoButton({\n                        type: \"submit\",\n                        themeColor: \"primary\",\n                        size: options.size\n                    });\n                    clear = $(\"<button class='\" + formStyles.clear + \"'>\" + encode(messages.clear) + \"</button>\").kendoButton({\n                        size: options.size\n                    });\n\n                    buttons = submit.add(clear);\n                }\n\n                return buttons;\n            },\n\n            _renderButtons: function() {\n                var that = this,\n                    wrapper = that.wrapper,\n                    options = that.options,\n                    formStyles = Form.styles,\n                    isHorizontal = options.orientation === formOrientation.horizontal,\n                    buttonsContainer = wrapper.find(DOT + formStyles.buttonsContainer),\n                    buttons;\n\n                if (!buttonsContainer.length) {\n                    buttonsContainer = $(\"<div />\")\n                        .addClass(formStyles.buttonsContainer)\n                        .addClass(isHorizontal ? formStyles.buttonsEnd : \"\");\n                }\n\n                buttons = that._buttonsTemplate();\n\n                buttonsContainer.append(buttons);\n\n                that.element.append(buttonsContainer);\n            },\n\n            _setupLayoutContainer: function(appendTarget, options) {\n                var layout = options.layout,\n                    grid = options.grid,\n                    layoutClassNames = [],\n                    layoutContainer, rowsGap, colsGap;\n\n                if (typeof layout === \"string\" && layout !== \"\") {\n                    layoutContainer = $(\"<div></div>\")\n                        .appendTo(appendTarget)\n                        .addClass(formStyles.layout);\n\n                    layoutClassNames.push(\"k-d-\" + layout);\n                }\n\n                if (layout === \"grid\" && typeof grid === \"object\") {\n                    if (typeof grid.cols === \"number\") {\n                        layoutClassNames.push(\"k-grid-cols-\" + grid.cols);\n                    } else if (typeof grid.cols === \"string\") {\n                        layoutContainer.css(\"grid-template-columns\", grid.cols);\n                    }\n\n                    if (typeof grid.gutter === \"number\" || typeof grid.gutter === \"string\") {\n                        layoutContainer.css(\"grid-gap\", grid.gutter);\n                    } else if ($.isPlainObject(grid.gutter)) {\n                        rowsGap = grid.gutter.rows;\n                        colsGap = grid.gutter.cols;\n\n                        if (typeof rowsGap === \"number\") {\n                            rowsGap = rowsGap + \"px\";\n                        }\n                        if (typeof colsGap === \"number\") {\n                            colsGap = colsGap + \"px\";\n                        }\n\n                        layoutContainer.css(\"grid-gap\", rowsGap + \" \" + colsGap);\n                    }\n                }\n\n                if (layoutContainer) {\n                    layoutContainer.addClass(layoutClassNames.join(\" \"));\n                }\n\n                return layoutContainer;\n            },\n\n            _setEvents: function() {\n                var that = this,\n                    validator = that.validator;\n\n                validator\n                    .bind(VALIDATEINPUT, that._validateField.bind(that))\n                    .bind(VALIDATE, that._validate.bind(that));\n\n                that.wrapper\n                    .on(SUBMIT + NS, that._submit.bind(that))\n                    .on(CLEAR + NS, that._clear.bind(that))\n                    .on(CLICK + NS, DOT + formStyles.clear, that._clear.bind(that));\n\n                if (!that._changeHandler) {\n                    that._changeHandler = that._change.bind(that);\n                }\n\n                that._model.bind(CHANGE, that._changeHandler);\n            },\n\n            _validateField: function(ev) {\n                var that = this,\n                    data = {\n                        model: that._model.toJSON(),\n                        valid: ev.valid,\n                        field: ev.field,\n                        error: ev.error,\n                        input: ev.input\n                    };\n\n                that._toggleFieldErrorState(data.input, !data.valid);\n\n                that._toggleHint(data.input, !data.valid);\n\n                if (that.trigger(VALIDATEFIELD, data)) {\n                    ev.preventDefault();\n                }\n            },\n\n            _validate: function(ev) {\n                var that = this,\n                    data = {\n                        model: that._model.toJSON(),\n                        valid: ev.valid,\n                        errors: ev.errors\n                    };\n\n                that.trigger(VALIDATE, data);\n            },\n\n            _change: function(ev) {\n                var that = this,\n                    field = ev.field,\n                    data = {\n                        field: field,\n                        value: that._model[field]\n                    };\n\n                that.trigger(CHANGE, data);\n            },\n\n            _submit: function(ev) {\n                var that = this,\n                    jsonModel = that._model.toJSON();\n\n                if (that.trigger(SUBMIT, { model: jsonModel })) {\n                    ev.preventDefault();\n                }\n            },\n\n            _clear: function(ev) {\n                var that = this;\n\n                ev.preventDefault();\n\n                that.clear();\n\n                that.trigger(CLEAR);\n            },\n\n            validate: function() {\n                var that = this,\n                    validator = that.validator;\n\n                if (!validator) {\n                    return;\n                }\n\n                return validator.validate();\n            },\n\n            clear: function() {\n                var that = this,\n                    fields = that._fields,\n                    model = that._model,\n                    editable = that.editable,\n                    validateOnBlur = that.validator.options.validateOnBlur;\n\n                that.validator.reset();\n\n                if (validateOnBlur) {\n                    model\n                        .unbind(SET)\n                        .unbind(EQUAL_SET);\n                }\n\n                for (var i = 0; i < fields.length; i += 1) {\n                    var field = fields[i].field;\n                    var element = that.wrapper.find(\"[name='\" + field + \"']\");\n                    var widgetInstance = kendo.widgetInstance(element);\n                    var isHiddenInput = element.is(\"input[type=hidden]\");\n\n                    if (!element.is(DATA_ROLE_CHECKBOX_GROUP) && !element.is(DATA_ROLE_RADIO_GROUP) && !isHiddenInput) {\n                        element.val(\"\");\n                    }\n\n                    if (!widgetInstance && element.hasClass(\"k-hidden\")) {\n                        widgetInstance = kendo.widgetInstance(element.closest(\".k-signature\"));\n                    }\n\n                    if (widgetInstance) {\n                        if (kendo.ui.Upload && widgetInstance instanceof kendo.ui.Upload) {\n                            widgetInstance.clearAllFiles();\n                        } else {\n                            widgetInstance.value(null);\n                        }\n                    }\n\n                    that._toggleHint(element, false);\n\n                    if (typeof model[field] === \"boolean\") {\n                        element.val(\"false\");\n                        model.set(field, false);\n                    } else if (!isHiddenInput) {\n                        model.set(field, null);\n                    }\n                }\n\n                that.wrapper.find(DOT + formStyles.fieldError)\n                    .removeClass(formStyles.fieldError);\n\n                if (validateOnBlur) {\n                    model\n                        .bind(SET, editable._validateProxy)\n                        .bind(EQUAL_SET, editable._validateProxy);\n                }\n            },\n\n            setOptions: function(newOptions) {\n                var that = this;\n\n                that.destroy();\n\n                that.wrapper\n                    .removeClass(formStyles.horizontal)\n                    .removeAttr(DATA_STOP)\n                    .empty();\n\n                that.init(that.element, newOptions);\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.wrapper.off(NS);\n\n                if (that._model) {\n                    that._model.unbind(CHANGE, that._changeHandler);\n                    that._changeHandler = null;\n                }\n\n                Widget.fn.destroy.call(that.editable);\n\n                Widget.fn.destroy.call(that);\n\n                if (that.editable) {\n                    that.editable.destroy();\n                    that.editable = null;\n                }\n            }\n        });\n\n        kendo.cssProperties.registerPrefix(\"Form\", \"k-form-\");\n\n        ui.plugin(Form);\n\n        extend(true, Form, { styles: formStyles });\n\n  })(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}