{"version":3,"sources":["raw-mjs/kendo.groupable.js"],"names":["__meta__","id","name","category","depends","advanced","$","undefined$1","kendo","window","Widget","ui","outerWidth","_outerWidth","kendoAttr","attr","extend","each","isRtl","ASCENDING","GROUP_SORT","DROP_CONTAINER","hint","target","title","htmlEncode","html","prepend","icon","iconClass","dropCue","removeText","element","contents","filter","this","nodeType","remove","Groupable","init","options","draggable","horizontalCuePosition","that","group","guid","intializePositions","_intializePositions","bind","_dropCuePositions","fn","call","support","Draggable","draggableElements","groupContainer","kendoDropTarget","dragenter","e","_canDrag","currentTarget","find","css","appendTo","dragleave","drop","position","targetElement","field","colID","sourceIndicator","indicator","dropCuePositions","lastCuePosition","length","method","parentLeft","parent","left","sortOptions","sort","data","dir","hasClass","_dropCuePosition","getOffset","parseInt","_canDrop","before","buildIndicator","wrapper","_setIndicatorSortOptions","_change","_messageContainer","_list","show","add","kendoDraggable","dragcancel","_dragCancel","dragstart","marginLeft","elementPosition","dragend","_dragEnd","drag","_drag","allowDrag","preventDefault","dataSource","addClass","_createList","_refreshHandler","unbind","refresh","groups","fieldAttr","titleAttr","items","hide","index","compare","_invalidateGroupContainer","destroy","off","events","messages","empty","enableContextMenu","indicators","grep","item","removeHandler","_removeIndicator","sender","clickHandler","dirIcon","newDir","originalEvent","closest","kendoChip","label","removable","size","click","actions","first","ns","aggregates","names","idx","map","cell","aggregate","member","split","push","toArray","descriptors","indicatorSortOptions","trigger","removeData","is","Math","ceil","right","marginRight","event","x","location","source","next","dropped","list","text","kendoChipList","selectable","insertBefore","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.groupable.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.draganddrop.js';\nimport './kendo.chip.js';\nimport './kendo.chiplist.js';\nimport './kendo.icons.js';\n\nvar __meta__ = {\n    id: \"groupable\",\n    name: \"Groupable\",\n    category: \"framework\",\n    depends: [ \"core\", \"draganddrop\", \"icons\" ],\n    advanced: true\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n        outerWidth = kendo._outerWidth,\n        kendoAttr = kendo.attr,\n        extend = $.extend,\n        each = $.each,\n        isRtl = false,\n\n        DIR = \"dir\",\n        FIELD = \"field\",\n        TITLE = \"title\",\n        ASCENDING = \"asc\",\n        DESCENDING = \"desc\",\n        REMOVEGROUP = \"removeGroup\",\n        GROUP_SORT = \"group-sort\",\n        DROP_CONTAINER = \"k-grouping-drop-container\",\n        NS = \".kendoGroupable\",\n        CHANGE = \"change\",\n        hint = function(target) {\n            var title = target.attr(kendo.attr(\"title\"));\n            if (title) {\n                title = kendo.htmlEncode(title);\n            }\n\n            return $('<div class=\"k-group-clue k-drag-clue\" />')\n                .html(title || target.attr(kendo.attr(\"field\")))\n                .prepend(kendo.ui.icon({ icon: \"cancel\", iconClass: \"k-drag-status\" }));\n        },\n        dropCue = $('<div class=\"k-grouping-dropclue\"/>');\n\n\n    function removeText(element) {\n        element.contents().filter(function() {\n            return this.nodeType === 3;\n        }).remove();\n    }\n\n    var Groupable = Widget.extend({\n        init: function(element, options) {\n            var that = this,\n                group = kendo.guid(),\n                intializePositions = that._intializePositions.bind(that),\n                draggable,\n                horizontalCuePosition,\n                dropCuePositions = that._dropCuePositions = [];\n\n            Widget.fn.init.call(that, element, options);\n\n            isRtl = kendo.support.isRtl(element);\n            horizontalCuePosition = isRtl ? \"right\" : \"left\";\n\n            that.draggable = draggable = that.options.draggable || new kendo.ui.Draggable(that.element, {\n                filter: that.options.draggableElements,\n                hint: hint,\n                group: group\n            });\n\n            that.groupContainer = $(that.options.groupContainer, that.element)\n                .kendoDropTarget({\n                    group: draggable.options.group,\n                    dragenter: function(e) {\n                        if (that._canDrag(e.draggable.currentTarget)) {\n                            kendo.ui.icon(e.draggable.hint.find(\".k-drag-status\"), { icon: \"plus\" });\n                            dropCue.css(horizontalCuePosition, 0).appendTo(that.groupContainer);\n                        }\n                    },\n                    dragleave: function(e) {\n                        kendo.ui.icon(e.draggable.hint.find(\".k-drag-status\"), { icon: \"cancel\" });\n\n                        dropCue.remove();\n                    },\n                    drop: function(e) {\n                        var targetElement = e.draggable.currentTarget,\n                            field = targetElement.attr(kendo.attr(\"field\")),\n                            title = targetElement.attr(kendo.attr(\"title\")),\n                            colID = targetElement.attr(\"id\"),\n                            sourceIndicator = that.indicator(field),\n                            dropCuePositions = that._dropCuePositions,\n                            lastCuePosition = dropCuePositions[dropCuePositions.length - 1],\n                            position,\n                            method = \"after\",\n                            parentLeft = isRtl || !lastCuePosition ? 0 : lastCuePosition.element.parent().position().left;\n                        var sortOptions = extend({}, that.options.sort, targetElement.data(GROUP_SORT));\n                        var dir = sortOptions.dir;\n\n                        if (!targetElement.hasClass(\"k-chip\") && !that._canDrag(targetElement)) {\n                            return;\n                        }\n                        if (lastCuePosition) {\n                            position = that._dropCuePosition(kendo.getOffset(dropCue).left + parentLeft + parseInt(lastCuePosition.element.css(\"marginLeft\"), 10) * (isRtl ? -1 : 1) + parseInt(lastCuePosition.element.css(\"marginRight\"), 10));\n                            if (position && that._canDrop($(sourceIndicator), position.element, position.left)) {\n                                if (position.before) {\n                                    method = \"before\";\n                                }\n\n                                position.element[method](sourceIndicator || that.buildIndicator(field, title, dir, colID).wrapper);\n                                that._setIndicatorSortOptions(field, sortOptions);\n                                that._change();\n                            }\n                        } else {\n                            removeText(that._messageContainer);\n                            that._list.element.show();\n                            that._list.add(that.buildIndicator(field, title, dir, colID).element);\n                            that._setIndicatorSortOptions(field, sortOptions);\n                            that._change();\n                        }\n                    }\n                })\n                .kendoDraggable({\n                    filter: \"div.k-chip\",\n                    hint: hint,\n                    group: draggable.options.group,\n                    dragcancel: that._dragCancel.bind(that),\n                    dragstart: function(e) {\n                        var element = e.currentTarget,\n                            marginLeft = parseInt(element.css(\"marginLeft\"), 10),\n                            elementPosition = element.position(),\n                            left = isRtl ? elementPosition.left - marginLeft : elementPosition.left + outerWidth(element);\n\n                        intializePositions();\n                        dropCue.css(\"left\", left).appendTo(that.groupContainer);\n                        kendo.ui.icon(this.hint.find(\".k-drag-status\"), { icon: \"plus\" });\n                    },\n                    dragend: function() {\n                        that._dragEnd(this);\n                    },\n                    drag: that._drag.bind(that)\n                });\n\n            draggable.bind([ \"dragend\", \"dragcancel\", \"dragstart\", \"drag\" ],\n            {\n                dragend: function() {\n                    that._dragEnd(this);\n                },\n                dragcancel: that._dragCancel.bind(that),\n                dragstart: function(e) {\n\n                    if (!that.options.allowDrag && !that._canDrag(e.currentTarget)) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    intializePositions();\n                },\n                drag: that._drag.bind(that)\n            });\n\n            that.dataSource = that.options.dataSource;\n            that._messageContainer = that.groupContainer.find(\".\" + DROP_CONTAINER);\n\n            if (!that._messageContainer.length) {\n                that._messageContainer = $('<div/>').addClass(DROP_CONTAINER).appendTo(that.groupContainer);\n            }\n\n            that._createList();\n\n            if (that.dataSource && that._refreshHandler) {\n                that.dataSource.unbind(CHANGE, that._refreshHandler);\n            } else {\n                that._refreshHandler = that.refresh.bind(that);\n            }\n\n            if (that.dataSource) {\n                that.dataSource.bind(\"change\", that._refreshHandler);\n                that.refresh();\n            }\n        },\n\n        refresh: function() {\n            var that = this,\n                dataSource = that.dataSource;\n            var groups = dataSource.group() || [];\n            var fieldAttr = kendoAttr(FIELD);\n            var titleAttr = kendoAttr(TITLE);\n\n            if (that.groupContainer) {\n                if (that._list) {\n                    that._list.remove(that._list.items());\n                    that._list.element.hide();\n                }\n\n                if (groups.length) {\n                    removeText(that._messageContainer);\n                }\n\n                each(groups, function(index, group) {\n                    var field = group.field;\n                    var dir = group.dir;\n                    var element = that.element\n                        .find(that.options.filter)\n                        .filter(function() {\n                            return $(this).attr(fieldAttr) === field;\n                        });\n                    var indicator = that.buildIndicator(field, element.attr(titleAttr), dir, element.attr(\"id\"));\n\n                    that._list.add(indicator.element);\n                    that._list.element.show();\n                    that._setIndicatorSortOptions(field, extend({}, that.options.sort, { dir: dir, compare: group.compare }));\n                });\n            }\n\n            that._invalidateGroupContainer();\n        },\n\n        destroy: function() {\n            var that = this;\n\n            Widget.fn.destroy.call(that);\n\n            that.groupContainer.off(NS);\n\n            if (that.groupContainer.data(\"kendoDropTarget\")) {\n                that.groupContainer.data(\"kendoDropTarget\").destroy();\n            }\n\n            if (that.groupContainer.data(\"kendoDraggable\")) {\n                that.groupContainer.data(\"kendoDraggable\").destroy();\n            }\n\n            if (!that.options.draggable) {\n                that.draggable.destroy();\n            }\n\n            if (that.dataSource && that._refreshHandler) {\n                that.dataSource.unbind(\"change\", that._refreshHandler);\n                that._refreshHandler = null;\n            }\n\n            if (that._list) {\n                that._list.destroy();\n            }\n\n            that.groupContainer = that.element = that.draggable = null;\n        },\n\n        events: [\"change\", \"removeGroup\"],\n\n        options: {\n            name: \"Groupable\",\n            filter: \"th\",\n            draggableElements: \"th\",\n            messages: {\n                empty: \"Drag a column header and drop it here to group by that column\"\n            },\n            sort: {\n                dir: ASCENDING,\n                compare: null\n            },\n            enableContextMenu: false\n        },\n\n        indicator: function(field) {\n            var indicators = $(\".k-chip\", this.groupContainer);\n            return $.grep(indicators, function(item)\n                {\n                    return $(item).attr(kendo.attr(\"field\")) === field;\n                })[0];\n        },\n\n        removeHandler: function(e) {\n            var that = this;\n\n            that._removeIndicator(e.sender.wrapper);\n        },\n\n        clickHandler: function(e) {\n            var that = this;\n            var indicator = e.sender.wrapper;\n            var dirIcon = indicator.find(\".k-chip-icon\");\n            var newDir = dirIcon.attr(kendoAttr(DIR)) === ASCENDING ? DESCENDING : ASCENDING;\n\n            if ($(e.originalEvent.target).closest('.k-groupable-context-menu').length) {\n                return;\n            }\n\n            dirIcon.attr(kendoAttr(DIR), newDir);\n            that._change();\n        },\n\n        buildIndicator: function(field, title, dir, id) {\n            var that = this;\n            var indicator;\n            var icon;\n            var wrapper;\n\n            dir = dir || (that.options.sort || {}).dir || ASCENDING;\n            indicator = $(`<div/>`)\n                            .kendoChip({\n                                icon: `sort-${(dir || \"asc\") == \"asc\" ? \"asc-small\" : \"desc-small\"}`,\n                                iconClass: 'k-chip-icon',\n                                label: `${title || field}`,\n                                removable: true,\n                                size: that.options.size || \"medium\",\n                                remove: that.removeHandler.bind(that),\n                                click: that.clickHandler.bind(that),\n                                actions: that.options.enableContextMenu ? [\n                                    { icon: \"more-vertical\", iconClass: \"k-groupable-context-menu\" }\n                                ] : null\n                            }).data(\"kendoChip\");\n            wrapper = indicator.wrapper;\n            icon = wrapper.find(\".k-chip-icon\").first();\n            wrapper.attr(`data-${kendo.ns}field`, field);\n            wrapper.attr(`data-${kendo.ns}title`, title || \"\");\n\n            if (id) {\n                wrapper.attr(`data-${kendo.ns}id`, id);\n            }\n\n            icon.attr(\"title\", `(sorted ${dir == \"asc\" ? \"ascending\" : \"descending\"})`);\n            icon.attr(`data-${kendo.ns}dir`, dir);\n\n            return indicator;\n        },\n\n        _setIndicatorSortOptions: function(field, options) {\n            var indicator = $(this.indicator(field));\n            indicator.data(GROUP_SORT, options);\n        },\n\n        aggregates: function() {\n            var that = this;\n            var names;\n            var idx;\n            var length;\n\n            return that.element.find(that.options.filter).map(function() {\n                var cell = $(this),\n                    aggregate = cell.attr(kendo.attr(\"aggregates\")),\n                    member = cell.attr(kendo.attr(\"field\"));\n\n                if (aggregate && aggregate !== \"\") {\n                    names = aggregate.split(\",\");\n                    aggregate = [];\n                    for (idx = 0, length = names.length; idx < length; idx++) {\n                        aggregate.push({ field: member, aggregate: names[idx] });\n                    }\n                }\n                return aggregate;\n            }).toArray();\n        },\n\n        descriptors: function() {\n            var that = this,\n                indicators = $(\".k-chip\", that.groupContainer),\n                field,\n                aggregates = that.aggregates();\n\n            return $.map(indicators, function(item) {\n                item = $(item);\n                field = item.attr(kendo.attr(\"field\"));\n                var sortOptions = that.options.sort || {};\n                var indicatorSortOptions = item.data(GROUP_SORT) || {};\n                var dirIcon = item.find(\".k-chip-icon\");\n\n                return {\n                    field: field,\n                    dir: dirIcon.attr(kendo.attr(\"dir\")),\n                    aggregates: aggregates || [],\n                    colID: item.attr(kendo.attr(\"id\")),\n                    compare: indicatorSortOptions.compare || sortOptions.compare\n                };\n            });\n        },\n\n        _removeIndicator: function(indicator) {\n            var that = this;\n\n            that.trigger(REMOVEGROUP, {\n                field: indicator.attr(kendo.attr(\"field\")),\n                colID: indicator.attr(kendo.attr(\"id\")),\n            });\n            that._list.remove(indicator);\n            indicator.off();\n            indicator.removeData();\n            that._invalidateGroupContainer();\n            that._change();\n        },\n\n        _change: function() {\n            var that = this;\n            if (that.dataSource) {\n                var descriptors = that.descriptors();\n                if (that.trigger(\"change\", { groups: descriptors })) {\n                    that.refresh();\n                    return;\n                }\n                that.dataSource.group(descriptors);\n            }\n        },\n\n        _dropCuePosition: function(position) {\n            var that = this;\n            var dropCuePositions = this._dropCuePositions;\n            if (!dropCue.is(\":visible\") || dropCuePositions.length === 0) {\n                return;\n            }\n\n            position = Math.ceil(position);\n\n            var lastCuePosition = dropCuePositions[dropCuePositions.length - 1],\n                left = lastCuePosition.left,\n                right = lastCuePosition.right,\n                marginLeft = parseInt(lastCuePosition.element.css(\"marginLeft\"), 10),\n                marginRight = parseInt(lastCuePosition.element.css(\"marginRight\"), 10),\n                parentLeft = lastCuePosition.element.parent().position().left - parseInt(that.groupContainer.css(\"paddingLeft\"), 10);\n\n            if (position >= right && !isRtl || position < left && isRtl) {\n                position = {\n                    left: lastCuePosition.element.position().left + (!isRtl ? outerWidth(lastCuePosition.element) + marginRight : parentLeft - marginLeft),\n                    element: lastCuePosition.element,\n                    before: false\n                };\n            } else {\n                position = $.grep(dropCuePositions, function(item) {\n                    return (item.left <= position && position <= item.right) || (isRtl && position > item.right);\n                })[0];\n\n                if (position) {\n                    position = {\n                        left: isRtl ? position.element.position().left + outerWidth(position.element) + marginRight + parentLeft : position.element.position().left - marginLeft,\n                        element: position.element,\n                        before: true\n                    };\n                }\n            }\n\n            return position;\n        },\n        _drag: function(event) {\n            var position = this._dropCuePosition(event.x.location);\n\n            if (position) {\n                dropCue.css({ left: position.left, right: \"auto\" });\n            }\n        },\n        _canDrag: function(element) {\n            var field = element.attr(kendo.attr(\"field\"));\n\n            return element.attr(kendo.attr(\"groupable\")) != \"false\" &&\n                field &&\n                (element.hasClass(\"k-chip\") ||\n                    !this.indicator(field));\n        },\n        _canDrop: function(source, target, position) {\n            var next = source.next(),\n                result = source[0] !== target[0] && (!next[0] || target[0] !== next[0] || (!isRtl && position > next.position().left || isRtl && position < next.position().left));\n            return result;\n        },\n        _dragEnd: function(draggable) {\n            var that = this,\n                field = draggable.currentTarget.attr(kendo.attr(\"field\")),\n                sourceIndicator = that.indicator(field);\n\n            if (draggable !== that.options.draggable && !draggable.dropped && sourceIndicator) {\n                that._removeIndicator($(sourceIndicator));\n            }\n\n            that._dragCancel();\n        },\n        _dragCancel: function() {\n            dropCue.remove();\n            this._dropCuePositions = [];\n        },\n        _intializePositions: function() {\n            var that = this,\n                indicators = $(\".k-chip\", that.groupContainer),\n                left;\n\n            that._dropCuePositions = $.map(indicators, function(item) {\n                item = $(item);\n                left = kendo.getOffset(item).left;\n                return {\n                    left: parseInt(left, 10),\n                    right: parseInt(left + outerWidth(item), 10),\n                    element: item\n                };\n            });\n        },\n        _invalidateGroupContainer: function() {\n            var that = this;\n            var groupContainer = that.groupContainer;\n            var list = that._list;\n\n            if (groupContainer && list && list.element.is(\":empty\")) {\n                this._messageContainer.text(this.options.messages.empty);\n            }\n        },\n\n        _createList: function() {\n            var that = this;\n\n            that.groupContainer.find(\".k-chip-list\").remove();\n            that._list = $(\"<div/>\").kendoChipList({ selectable: \"none\", size: that.options.size || \"medium\" }).data(\"kendoChipList\");\n            that._list.element.insertBefore(that._messageContainer);\n        }\n    });\n\n    kendo.ui.plugin(Groupable);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}