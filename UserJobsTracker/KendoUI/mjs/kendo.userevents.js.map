{"version":3,"sources":["raw-mjs/kendo.userevents.js"],"names":["__meta__","id","name","category","depends","hidden","$","undefined$1","kendo","window","support","Class","Observable","now","Date","extend","OS","mobileOS","invalidZeroEvents","android","DEFAULT_MIN_HOLD","DEFAULT_THRESHOLD","browser","msie","PRESS","HOLD","SELECT","START","MOVE","END","CANCEL","TAP","DOUBLETAP","RELEASE","GESTURECHANGE","GESTUREEND","GESTURETAP","THRESHOLD","api","touch","mouse","pointer","ENABLE_GLOBAL_SURFACE","mouseAndTouchPresent","touchDelta","touch1","touch2","x1","x","location","y1","y","x2","y2","dx","dy","center","distance","Math","sqrt","getTouches","e","length","changedTouches","touches","originalEvent","currentTarget","idx","push","event","target","type","match","identifier","pointers","msPointers","pointerId","TouchAxis","init","axis","that","this","_updateLocationData","startLocation","velocity","delta","timeStamp","move","offset","timeDelta","initialDelta","client","screen","Touch","userEvents","touchInfo","useClickAsTap","threshold","initialTouch","pressEvent","_clicks","supportDoubleTap","_moved","_finished","press","_holdTimeout","setTimeout","_hold","bind","minHold","_trigger","_tap","_clickTimeout","preventMove","_shouldNotMove","_withinIgnoreThreshold","UserEvents","current","dispose","_start","end","endTime","clearTimeout","activeTouches","splice","inArray","skip","cancel","isMoved","startTime","jQueryEvent","data","notify","preventDefault","xDelta","yDelta","withEachUpEvent","callback","downEvents","eventMap","up","split","element","options","filter","ns","guid","_maxTouches","multiTouch","allowSelection","captureUpIfMoved","fastTap","delayedClick","eventNS","handler","fn","call","surface","global","ownerDocument","documentElement","stopPropagation","pressed","on","applyEventMap","version","defaultAction","css","touchAction","preventDragEvent","root","eventCapture","surfaceElement","preventIfMovingProxy","preventIfMoving","eventName","addEventListener","_isMoved","destroy","_destroyed","removeEventListener","kendoDestroy","removeData","_disposeAll","unbind","capture","trigger","_isMultiTouch","_apiCall","_maxTouchesReached","pop","grep","_select","which","_move","_eachTouch","_end","_click","pageX","clientX","pageY","clientY","methodName","matchingTouch","dict","noop","ClickMoveClick","_downStarted","_down","getTime","_downTarget","_up","currentMilestone","_preventCancel","clickMoveClick","defaultThreshold","value","jQuery","kendo$1"],"mappings":"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","file":"kendo.userevents.js","sourcesContent":["import './kendo.core.js';\n\nvar __meta__ = {\n    id: \"userevents\",\n    name: \"User Events\",\n    category: \"framework\",\n    depends: [ \"core\" ],\n    hidden: true\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        support = kendo.support,\n        Class = kendo.Class,\n        Observable = kendo.Observable,\n        now = Date.now,\n        extend = $.extend,\n        OS = support.mobileOS,\n        invalidZeroEvents = OS && OS.android,\n        DEFAULT_MIN_HOLD = 800,\n        CLICK_DELAY = 300,\n        DEFAULT_THRESHOLD = support.browser.msie ? 5 : 0, // WP8 and W8 are very sensitive and always report move.\n\n        // UserEvents events\n        PRESS = \"press\",\n        HOLD = \"hold\",\n        SELECT = \"select\",\n        START = \"start\",\n        MOVE = \"move\",\n        END = \"end\",\n        CANCEL = \"cancel\",\n        TAP = \"tap\",\n        DOUBLETAP = \"doubleTap\",\n        RELEASE = \"release\",\n        GESTURESTART = \"gesturestart\",\n        GESTURECHANGE = \"gesturechange\",\n        GESTUREEND = \"gestureend\",\n        GESTURETAP = \"gesturetap\";\n\n    var THRESHOLD = {\n        \"api\": 0,\n        \"touch\": 0,\n        \"mouse\": 9,\n        \"pointer\": 9\n    };\n\n    var ENABLE_GLOBAL_SURFACE = (!support.touch || support.mouseAndTouchPresent);\n\n    function touchDelta(touch1, touch2) {\n        var x1 = touch1.x.location,\n            y1 = touch1.y.location,\n            x2 = touch2.x.location,\n            y2 = touch2.y.location,\n            dx = x1 - x2,\n            dy = y1 - y2;\n\n        return {\n            center: {\n               x: (x1 + x2) / 2,\n               y: (y1 + y2) / 2\n            },\n\n            distance: Math.sqrt(dx * dx + dy * dy)\n        };\n    }\n\n    function getTouches(e) {\n        var touches = [],\n            originalEvent = e.originalEvent,\n            currentTarget = e.currentTarget,\n            idx = 0, length,\n            changedTouches,\n            touch;\n\n        if (e.api) {\n            touches.push({\n                id: 2, // hardcoded ID for API call;\n                event: e,\n                target: e.target,\n                currentTarget: e.target,\n                location: e,\n                type: \"api\"\n            });\n        }\n        else if (e.type.match(/touch/)) {\n            changedTouches = originalEvent ? originalEvent.changedTouches : [];\n            for (length = changedTouches.length; idx < length; idx ++) {\n                touch = changedTouches[idx];\n                touches.push({\n                    location: touch,\n                    event: e,\n                    target: touch.target,\n                    currentTarget: currentTarget,\n                    id: touch.identifier,\n                    type: \"touch\"\n                });\n            }\n        }\n        else if (support.pointers || support.msPointers) {\n            touches.push({\n                location: originalEvent,\n                event: e,\n                target: e.target,\n                currentTarget: currentTarget,\n                id: originalEvent.pointerId,\n                type: \"pointer\"\n            });\n        } else {\n            touches.push({\n                id: 1, // hardcoded ID for mouse event;\n                event: e,\n                target: e.target,\n                currentTarget: currentTarget,\n                location: e,\n                type: \"mouse\"\n            });\n        }\n\n        return touches;\n    }\n\n    var TouchAxis = Class.extend({\n        init: function(axis, location) {\n            var that = this;\n\n            that.axis = axis;\n\n            that._updateLocationData(location);\n\n            that.startLocation = that.location;\n            that.velocity = that.delta = 0;\n            that.timeStamp = now();\n        },\n\n        move: function(location) {\n            var that = this,\n                offset = location[\"page\" + that.axis],\n                timeStamp = now(),\n                timeDelta = (timeStamp - that.timeStamp) || 1; // Firing manually events in tests can make this 0;\n\n            if (!offset && invalidZeroEvents) {\n                return;\n            }\n\n            that.delta = offset - that.location;\n\n            that._updateLocationData(location);\n\n            that.initialDelta = offset - that.startLocation;\n            that.velocity = that.delta / timeDelta;\n            that.timeStamp = timeStamp;\n        },\n\n        _updateLocationData: function(location) {\n            var that = this, axis = that.axis;\n\n            that.location = location[\"page\" + axis];\n            that.client = location[\"client\" + axis];\n            that.screen = location[\"screen\" + axis];\n        }\n    });\n\n    var Touch = Class.extend({\n        init: function(userEvents, target, touchInfo) {\n            extend(this, {\n                x: new TouchAxis(\"X\", touchInfo.location),\n                y: new TouchAxis(\"Y\", touchInfo.location),\n                type: touchInfo.type,\n                useClickAsTap: userEvents.useClickAsTap,\n                threshold: userEvents.threshold || THRESHOLD[touchInfo.type],\n                userEvents: userEvents,\n                target: target,\n                currentTarget: touchInfo.currentTarget,\n                initialTouch: touchInfo.target,\n                id: touchInfo.id,\n                pressEvent: touchInfo,\n                _clicks: userEvents._clicks,\n                supportDoubleTap: userEvents.supportDoubleTap,\n                _moved: false,\n                _finished: false\n            });\n        },\n\n        press: function() {\n            this._holdTimeout = setTimeout(this._hold.bind(this), this.userEvents.minHold);\n            this._trigger(PRESS, this.pressEvent);\n        },\n\n        _tap: function(touchInfo) {\n            var that = this;\n            that.userEvents._clicks++;\n            if (that.userEvents._clicks == 1) {\n                that._clickTimeout = setTimeout(function() {\n                    if (that.userEvents._clicks == 1) {\n                        that._trigger(TAP, touchInfo);\n                    }\n                    else {\n                        that._trigger(DOUBLETAP, touchInfo);\n                    }\n                    that.userEvents._clicks = 0;\n                }, CLICK_DELAY);\n            }\n        },\n\n        _hold: function() {\n            this._trigger(HOLD, this.pressEvent);\n        },\n\n        move: function(touchInfo) {\n            var that = this;\n            var preventMove = touchInfo.type !== \"api\" && that.userEvents._shouldNotMove;\n\n            if (that._finished || preventMove) { return; }\n\n            that.x.move(touchInfo.location);\n            that.y.move(touchInfo.location);\n\n            if (!that._moved) {\n                if (that._withinIgnoreThreshold()) {\n                    return;\n                }\n\n                if (!UserEvents.current || UserEvents.current === that.userEvents) {\n                    that._start(touchInfo);\n                } else {\n                    return that.dispose();\n                }\n            }\n\n            // Event handlers may cancel the drag in the START event handler, hence the double check for pressed.\n            if (!that._finished) {\n                that._trigger(MOVE, touchInfo);\n            }\n        },\n\n        end: function(touchInfo) {\n            this.endTime = now();\n\n            if (this._finished) { return; }\n\n            // Mark the object as finished if there are blocking operations in the event handlers (alert/confirm)\n            this._finished = true;\n\n            this._trigger(RELEASE, touchInfo); // Release should be fired before TAP (as click is after mouseup/touchend)\n\n            if (this._moved) {\n                this._trigger(END, touchInfo);\n            } else {\n                if (!this.useClickAsTap) {\n                    if (this.supportDoubleTap) {\n                        this._tap(touchInfo);\n                    }\n                    else {\n                        this._trigger(TAP, touchInfo);\n                    }\n                }\n            }\n\n            clearTimeout(this._holdTimeout);\n\n            this.dispose();\n        },\n\n        dispose: function() {\n            var userEvents = this.userEvents,\n                activeTouches = userEvents.touches;\n\n            this._finished = true;\n            this.pressEvent = null;\n            clearTimeout(this._holdTimeout);\n\n            activeTouches.splice($.inArray(this, activeTouches), 1);\n        },\n\n        skip: function() {\n            this.dispose();\n        },\n\n        cancel: function() {\n            this.dispose();\n        },\n\n        isMoved: function() {\n            return this._moved;\n        },\n\n        _start: function(touchInfo) {\n            clearTimeout(this._holdTimeout);\n\n            this.startTime = now();\n            this._moved = true;\n            this._trigger(START, touchInfo);\n        },\n\n        _trigger: function(name, touchInfo) {\n            var that = this,\n                jQueryEvent = touchInfo.event,\n                data = {\n                    touch: that,\n                    x: that.x,\n                    y: that.y,\n                    target: that.target,\n                    event: jQueryEvent\n                };\n\n            if (that.userEvents.notify(name, data)) {\n                jQueryEvent.preventDefault();\n            }\n        },\n\n        _withinIgnoreThreshold: function() {\n            var xDelta = this.x.initialDelta,\n                yDelta = this.y.initialDelta;\n\n            return Math.sqrt(xDelta * xDelta + yDelta * yDelta) <= this.threshold;\n        }\n    });\n\n    function withEachUpEvent(callback) {\n        var downEvents = kendo.eventMap.up.split(\" \"),\n            idx = 0,\n            length = downEvents.length;\n\n        for (; idx < length; idx ++) {\n            callback(downEvents[idx]);\n        }\n    }\n\n    var UserEvents = Observable.extend({\n        init: function(element, options) {\n            var that = this,\n                filter,\n                ns = kendo.guid();\n\n            options = options || {};\n            filter = that.filter = options.filter;\n            that.threshold = options.threshold || DEFAULT_THRESHOLD;\n            that.minHold = options.minHold || DEFAULT_MIN_HOLD;\n            that.touches = [];\n            that._maxTouches = options.multiTouch ? 2 : 1;\n            that.allowSelection = options.allowSelection;\n            that.captureUpIfMoved = options.captureUpIfMoved;\n            that.useClickAsTap = !options.fastTap && !support.delayedClick();\n            that.eventNS = ns;\n            that._clicks = 0;\n            that.supportDoubleTap = options.supportDoubleTap;\n\n            element = $(element).handler(that);\n            Observable.fn.init.call(that);\n\n            extend(that, {\n                element: element,\n                // the touch events lock to the element anyway, so no need for the global setting\n                surface: options.global && ENABLE_GLOBAL_SURFACE ? $(element[0].ownerDocument.documentElement) : $(options.surface || element),\n                stopPropagation: options.stopPropagation,\n                pressed: false\n            });\n\n            that.surface.handler(that)\n                .on(kendo.applyEventMap(\"move\", ns), \"_move\")\n                .on(kendo.applyEventMap(\"up cancel\", ns), \"_end\");\n\n            element.on(kendo.applyEventMap(\"down\", ns), filter, \"_start\");\n\n            if (that.useClickAsTap) {\n                element.on(kendo.applyEventMap(\"click\", ns), filter, \"_click\");\n            }\n\n            if (support.pointers || support.msPointers) {\n                //touch-action:none will not work for IE10\n                if (support.browser.version < 11) {\n                    var defaultAction = \"pinch-zoom double-tap-zoom\";\n                    element.css(\"-ms-touch-action\", options.touchAction && options.touchAction != \"none\" ? defaultAction + \" \" + options.touchAction : defaultAction);\n                } else {\n                    element.css(\"touch-action\", options.touchAction || \"none\");\n                }\n            }\n\n            if (options.preventDragEvent) {\n                element.on(kendo.applyEventMap(\"dragstart\", ns), kendo.preventDefault);\n            }\n\n            element.on(kendo.applyEventMap(\"mousedown\", ns), filter, { root: element }, \"_select\");\n\n            if (that.captureUpIfMoved && support.eventCapture) {\n                var surfaceElement = that.surface[0],\n                    preventIfMovingProxy = that.preventIfMoving.bind(that);\n\n                withEachUpEvent(function(eventName) {\n                    surfaceElement.addEventListener(eventName, preventIfMovingProxy, true);\n                });\n            }\n\n            that.bind([\n            PRESS,\n            HOLD,\n            TAP,\n            DOUBLETAP,\n            START,\n            MOVE,\n            END,\n            RELEASE,\n            CANCEL,\n            GESTURESTART,\n            GESTURECHANGE,\n            GESTUREEND,\n            GESTURETAP,\n            SELECT\n            ], options);\n        },\n\n        preventIfMoving: function(e) {\n            if (this._isMoved()) {\n                e.preventDefault();\n            }\n        },\n\n        destroy: function() {\n            var that = this;\n\n            if (that._destroyed) {\n                return;\n            }\n\n            that._destroyed = true;\n\n            if (that.captureUpIfMoved && support.eventCapture) {\n                var surfaceElement = that.surface[0];\n                withEachUpEvent(function(eventName) {\n                    surfaceElement.removeEventListener(eventName, that.preventIfMoving);\n                });\n            }\n\n            that.element.kendoDestroy(that.eventNS);\n            that.surface.kendoDestroy(that.eventNS);\n            that.element.removeData(\"handler\");\n            that.surface.removeData(\"handler\");\n            that._disposeAll();\n\n            that.unbind();\n            delete that.surface;\n            delete that.element;\n            delete that.currentTarget;\n        },\n\n        capture: function() {\n            UserEvents.current = this;\n        },\n\n        cancel: function() {\n            this._disposeAll();\n            this.trigger(CANCEL);\n        },\n\n        notify: function(eventName, data) {\n            var that = this,\n                touches = that.touches;\n\n            if (this._isMultiTouch()) {\n                switch (eventName) {\n                    case MOVE:\n                        eventName = GESTURECHANGE;\n                        break;\n                    case END:\n                        eventName = GESTUREEND;\n                        break;\n                    case TAP:\n                        eventName = GESTURETAP;\n                        break;\n                }\n\n                extend(data, { touches: touches }, touchDelta(touches[0], touches[1]));\n            }\n\n            return this.trigger(eventName, extend(data, { type: eventName }));\n        },\n\n        // API\n        press: function(x, y, target) {\n            this._apiCall(\"_start\", x, y, target);\n        },\n\n        move: function(x, y) {\n            this._apiCall(\"_move\", x, y);\n        },\n\n        end: function(x, y) {\n            this._apiCall(\"_end\", x, y);\n        },\n\n        _isMultiTouch: function() {\n            return this.touches.length > 1;\n        },\n\n        _maxTouchesReached: function() {\n            return this.touches.length >= this._maxTouches;\n        },\n\n        _disposeAll: function() {\n            var touches = this.touches;\n            while (touches.length > 0) {\n                touches.pop().dispose();\n            }\n        },\n\n        _isMoved: function() {\n            return $.grep(this.touches, function(touch) {\n                return touch.isMoved();\n            }).length;\n        },\n\n        _select: function(e) {\n           if (!this.allowSelection || this.trigger(SELECT, { event: e })) {\n               e.preventDefault();\n           }\n        },\n\n        _start: function(e) {\n            var that = this,\n                idx = 0,\n                filter = that.filter,\n                target,\n                touches = getTouches(e),\n                length = touches.length,\n                touch,\n                which = e.which;\n\n            if ((which && which > 1) || (that._maxTouchesReached())) {\n                return;\n            }\n\n            UserEvents.current = null;\n\n            that.currentTarget = e.currentTarget;\n\n            if (that.stopPropagation) {\n                e.stopPropagation();\n            }\n\n            for (; idx < length; idx ++) {\n                if (that._maxTouchesReached()) {\n                    break;\n                }\n\n                touch = touches[idx];\n\n                if (filter) {\n                    target = $(touch.currentTarget); // target.is(filter) ? target : target.closest(filter, that.element);\n                } else {\n                    target = that.element;\n                }\n\n                if (!target.length) {\n                    continue;\n                }\n\n                touch = new Touch(that, target, touch);\n                that.touches.push(touch);\n                touch.press();\n\n                if (that._isMultiTouch()) {\n                    that.notify(\"gesturestart\", {});\n                }\n            }\n        },\n\n        _move: function(e) {\n            this._eachTouch(\"move\", e);\n        },\n\n        _end: function(e) {\n            this._eachTouch(\"end\", e);\n        },\n\n        _click: function(e) {\n            var data = {\n                touch: {\n                    initialTouch: e.target,\n                    target: $(e.currentTarget),\n                    endTime: now(),\n                    x: {\n                        location: e.pageX,\n                        client: e.clientX\n                    },\n                    y: {\n                        location: e.pageY,\n                        client: e.clientY\n                    }\n                },\n                x: e.pageX,\n                y: e.pageY,\n                target: $(e.currentTarget),\n                event: e,\n                type: \"tap\"\n            };\n\n            if (this.trigger(\"tap\", data)) {\n                e.preventDefault();\n            }\n        },\n\n        _eachTouch: function(methodName, e) {\n            var that = this,\n                dict = {},\n                touches = getTouches(e),\n                activeTouches = that.touches,\n                idx,\n                touch,\n                touchInfo,\n                matchingTouch;\n\n            for (idx = 0; idx < activeTouches.length; idx ++) {\n                touch = activeTouches[idx];\n                dict[touch.id] = touch;\n            }\n\n            for (idx = 0; idx < touches.length; idx ++) {\n                touchInfo = touches[idx];\n                matchingTouch = dict[touchInfo.id];\n\n                if (matchingTouch) {\n                    matchingTouch[methodName](touchInfo);\n                }\n            }\n        },\n\n        _apiCall: function(type, x, y, target) {\n            this[type]({\n                api: true,\n                pageX: x,\n                pageY: y,\n                clientX: x,\n                clientY: y,\n                target: $(target || this.element)[0],\n                stopPropagation: $.noop,\n                preventDefault: $.noop\n            });\n        }\n    });\n\n    var ClickMoveClick = Observable.extend({\n        init: function(element, options) {\n            var that = this,\n                filter,\n                ns = kendo.guid();\n\n            options = options || {};\n            filter = that.filter = options.filter;\n            that.touches = [];\n            that._maxTouches = 1;\n            that.eventNS = ns;\n            that._downStarted = 0;\n\n            element = $(element).handler(that);\n            Observable.fn.init.call(that);\n\n            extend(that, {\n                element: element,\n                // the touch events lock to the element anyway, so no need for the global setting\n                surface: options.global && ENABLE_GLOBAL_SURFACE ? $(element[0].ownerDocument.documentElement) : $(options.surface || element),\n                stopPropagation: options.stopPropagation,\n                pressed: false\n            });\n\n            that.surface.handler(that)\n                .on(kendo.applyEventMap(\"move\", ns), \"_move\")\n                .on(kendo.applyEventMap(\"cancel up\", ns), \"cancel\");\n\n            element.on(kendo.applyEventMap(\"down\", ns), filter, \"_down\")\n                .on(kendo.applyEventMap(\"up\", ns), filter, \"_up\");\n\n            that.bind([\n                START,\n                MOVE,\n                END,\n                HOLD,\n                CANCEL,\n                SELECT\n            ], options);\n        },\n\n        _down: function(e) {\n            if (e.which && e.which > 1) {\n                this.cancel();\n            } else {\n                this._downStarted = new Date().getTime();\n                this._downTarget = e.target;\n            }\n        },\n\n        _up: function(e) {\n            var currentMilestone = new Date().getTime(),\n                currentTarget = e.target;\n\n            if ((!e.which || e.which === 1) &&\n                currentMilestone < this._downStarted + CLICK_DELAY &&\n                currentTarget === this._downTarget) {\n                    if (this.touches && this.touches.length > 0) {\n                        this._end(e);\n                    } else {\n                        this._start(e);\n                    }\n\n                    this._preventCancel = true;\n            } else {\n                this.cancel();\n            }\n\n            this._downStarted = 0;\n            this._downTarget = null;\n        },\n\n        destroy: function() {\n            var that = this;\n\n            if (that._destroyed) {\n                return;\n            }\n\n            that._destroyed = true;\n\n            that.element.kendoDestroy(that.eventNS);\n            that.surface.kendoDestroy(that.eventNS);\n            that.element.removeData(\"handler\");\n            that.surface.removeData(\"handler\");\n            that._disposeAll();\n\n            that.unbind();\n            delete that.surface;\n            delete that.element;\n            delete that.currentTarget;\n        },\n\n        capture: function() {\n            ClickMoveClick.current = this;\n        },\n\n        cancel: function() {\n            if (this._preventCancel) {\n                this._preventCancel = false;\n                return;\n            } else if (this.touches && this.touches.length > 0) {\n                this._disposeAll();\n                this.trigger(CANCEL);\n            }\n        },\n\n        notify: function(eventName, data) {\n            data.clickMoveClick = true;\n            return this.trigger(eventName, extend(data, { type: eventName }));\n        },\n\n        _maxTouchesReached: function() {\n            return this.touches.length >= this._maxTouches;\n        },\n\n        _disposeAll: function() {\n            var touches = this.touches;\n\n            while (touches.length > 0) {\n                touches.pop().dispose();\n            }\n        },\n\n        _start: function(e) {\n            var that = this,\n                idx = 0,\n                filter = that.filter,\n                target,\n                touches = getTouches(e),\n                length = touches.length,\n                touch,\n                which = e.which;\n\n            if ((which && which > 1) || (that._maxTouchesReached())) {\n                return;\n            }\n\n            ClickMoveClick.current = null;\n\n            that.currentTarget = e.currentTarget;\n\n            if (that.stopPropagation) {\n                e.stopPropagation();\n            }\n\n            for (; idx < length; idx ++) {\n                if (that._maxTouchesReached()) {\n                    break;\n                }\n\n                touch = touches[idx];\n\n                if (filter) {\n                    target = $(touch.currentTarget);\n                } else {\n                    target = that.element;\n                }\n\n                if (!target.length) {\n                    continue;\n                }\n\n                touch = new Touch(that, target, touch);\n                that.touches.push(touch);\n                touch.press();\n                touch._start(touch);\n            }\n        },\n\n        _move: function(e) {\n            this._eachTouch(\"move\", e);\n        },\n\n        _end: function(e) {\n            this._eachTouch(\"move\", e);\n            this._eachTouch(\"end\", e);\n        },\n\n        _eachTouch: function(methodName, e) {\n            var that = this,\n                dict = {},\n                touches = getTouches(e),\n                activeTouches = that.touches,\n                idx,\n                touch,\n                touchInfo,\n                matchingTouch;\n\n            for (idx = 0; idx < activeTouches.length; idx ++) {\n                touch = activeTouches[idx];\n                dict[touch.id] = touch;\n            }\n\n            for (idx = 0; idx < touches.length; idx ++) {\n                touchInfo = touches[idx];\n                matchingTouch = dict[touchInfo.id];\n\n                if (matchingTouch) {\n                    matchingTouch.x.move(touchInfo.location);\n                    matchingTouch.y.move(touchInfo.location);\n                    matchingTouch[methodName](touchInfo);\n                }\n            }\n        }\n    });\n\n    UserEvents.defaultThreshold = function(value) {\n        DEFAULT_THRESHOLD = value;\n    };\n\n    UserEvents.minHold = function(value) {\n        DEFAULT_MIN_HOLD = value;\n    };\n\n    kendo.getTouches = getTouches;\n    kendo.touchDelta = touchDelta;\n    kendo.UserEvents = UserEvents;\n    kendo.ClickMoveClick = ClickMoveClick;\n })(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}