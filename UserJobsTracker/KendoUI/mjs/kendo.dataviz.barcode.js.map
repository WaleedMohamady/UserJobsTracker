{"version":3,"sources":["raw-mjs/kendo.dataviz.barcode.js"],"names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","Widget","ui","extend","deepExtend","inArray","isPlainObject","draw","drawing","geom","geometry","defined","util","dataviz","Box2D","TextBox","numberRegex","alphanumericRegex","getNext","value","index","count","substring","Encoding","Class","init","options","this","setOptions","that","quietZoneLength","addQuietZone","encode","width","height","initValue","addData","baseUnit","pattern","addCheckSum","push","invalidCharacterError","character","Error","format","encodings","code39Base","minBaseUnitLength","addStart","idx","length","addCharacter","charAt","pushCheckSum","addStop","prepareValues","charData","characterMap","addBase","code39ExtendedBase","charCodeAt","addExtended","code","patterns","i","extendedMappings","call","j","dataLength","shiftCharacters","String","fromCharCode","result","dataCharacter","specialAsciiCodes","Math","floor","shiftValuesAsciiCodes","code39","checkSumMod","minRatio","maxRatio","gapWidth","splitCharacter","patternString","minBaseUnit","ratio","minHeight","max","getBaseUnit","parseFloat","toFixed","minWidth","ceil","getBaseWidth","concat","replace","split","characterLength","addPattern","START","addCharacterGap","patternMappings","b","w","B","W","A","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","X","Y","Z","code39extended","SHIFT0","SHIFT1","SHIFT2","SHIFT3","code93","cCheckSumTotal","kCheckSumTotal","values","setBaseUnit","TERMINATION_BAR","checkValues","_getCheckValues","checksum","join","_findCharacterByValue","cValue","wightedSum","weightedValue","total","parseInt","code93extended","state128","encoding","is","move","pushState","state128AB","FNC4","states","_initMoves","isCode","encodingState","_moves","maxLength","numberMatch","substr","match","indexOf","getValue","_moveFNC","shiftKey","_shiftState","_moveState","fnc","previousState","key","SHIFT","shifted","MOVE","states128","next4","test","dependentStates","_initSubStates","subState","_getSubState","_initSubState","state","_pushStart","pushData","subStates","_getAll","FNC1","startState","startAI","endAI","current","nextStart","separatorLength","regexSeparators","RegExp","getBySeparator","getByLength","ai","validate","type","min","getAI","unsupportedAIError","start","end","applicationIdentifiers","multiKey","ids","ranges","code128Base","fn","_initStates","checkSum","totalUnits","position","getNextState","temp","STOP","toString","code128a","code128b","code128c","code128","msiBase","checkSumLength","checkSums","checkSumType","Modulo10","evenSum","oddSum","odd","Modulo11","checkValue","weightedSum","Modulo11Modulo10","mod11Value","Modulo10Modulo10","mod10Value","msimod10","msimod11","msimod1110","msimod1010","code11","kCheckSumMinLength","DASH_VALUE","DASH","getWeightedSum","kValue","isNaN","postnet","VALID_CODE_LENGTHS","DIGIT_SEPARATOR","baseHeight","pop","y1","y2","ean13","calculateChecksum","leftKey","leftPart","rightPart","addPieces","addSide","middle","keyTable","Array","prototype","slice","digits","reverse","arrToAdd","limitedHeight","even","ean8","Barcode","element","wrapper","addClass","css","surfaceWrap","appendTo","surface","Surface","create","renderAs","_setOptions","redraw","size","_getSize","clear","setSize","createVisual","visual","getSize","dimensions","_resize","_render","textToDisplay","textOptions","text","textMargin","getSpacing","margin","border","contentBox","unpad","padding","barHeight","Group","append","_getBackground","visible","measureText","font","top","bottom","_getText","_bandsGroup","_getBands","exportVisual","Size","step","item","x1","group","rect","Rect","fromPoints","Point","path","Path","fromRect","fill","color","stroke","box","toRect","background","dashType","_textbox","align","vAlign","reflow","renderVisual","toLowerCase","left","right","ExportMixin","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.dataviz.barcode.js","sourcesContent":["import './kendo.dataviz.core.js';\nimport './kendo.drawing.js';\n\nvar __meta__ = {\n    id: \"dataviz.barcode\",\n    name: \"Barcode\",\n    category: \"dataviz\",\n    description: \"Barcode widget\",\n    depends: [ \"dataviz.core\" ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n\n        extend = $.extend,\n        deepExtend = kendo.deepExtend,\n        inArray = $.inArray,\n        isPlainObject = $.isPlainObject,\n\n        draw = kendo.drawing,\n        geom = kendo.geometry,\n        util = kendo.drawing.util,\n        defined = util.defined,\n        dataviz = kendo.dataviz,\n        Box2D = dataviz.Box2D,\n        TextBox = dataviz.TextBox,\n        DEFAULT_WIDTH = 300,\n        DEFAULT_HEIGHT = 100,\n        DEFAULT_QUIETZONE_LENGTH = 10,\n        numberRegex = /^\\d+$/,\n        alphanumericRegex = /^[a-z0-9]+$/i,\n        InvalidCharacterErrorTemplate = \"Character '{0}' is not valid for symbology {1}\";\n\n    function getNext(value, index, count) {\n        return value.substring(index, index + count);\n    }\n\n    var Encoding = kendo.Class.extend({\n        init: function(options) {\n            this.setOptions(options);\n        },\n        setOptions: function(options) {\n            var that = this;\n            that.options = extend({}, that.options, options);\n            that.quietZoneLength = that.options.addQuietZone ? 2 * that.options.quietZoneLength : 0;\n        },\n        encode: function(value, width, height) {\n            var that = this;\n            if (defined(value)) {\n                value += '';\n            }\n\n            that.initValue(value, width, height);\n\n            if (that.options.addQuietZone) {\n                that.addQuietZone();\n            }\n\n            that.addData();\n\n            if (that.options.addQuietZone) {\n                that.addQuietZone();\n            }\n\n            return {\n                baseUnit: that.baseUnit,\n                pattern: that.pattern\n            };\n        },\n        options: {\n            quietZoneLength: DEFAULT_QUIETZONE_LENGTH,\n            addQuietZone: true,\n            addCheckSum: true\n        },\n        initValue: function() {},\n        addQuietZone: function() {\n            this.pattern.push(this.options.quietZoneLength || DEFAULT_QUIETZONE_LENGTH);\n        },\n        addData: function() {\n        },\n        invalidCharacterError: function(character) {\n            throw new Error(kendo.format(InvalidCharacterErrorTemplate, character, this.name));\n        }\n    });\n\n    var encodings = {};\n\n    var code39Base = Encoding.extend({\n        minBaseUnitLength: 0.7,\n        addData: function() {\n            var that = this,\n                value = that.value;\n\n            that.addStart();\n\n            for (var idx = 0; idx < value.length; idx++) {\n                that.addCharacter(value.charAt(idx));\n            }\n\n            if (that.options.addCheckSum) {\n                that.pushCheckSum();\n            }\n\n            that.addStop();\n            that.prepareValues();\n        },\n        addCharacter: function(character) {\n            var that = this,\n                charData = that.characterMap[character];\n            if (!charData) {\n                that.invalidCharacterError(character);\n            }\n            that.addBase(charData);\n        },\n        addBase: function() {}\n    });\n\n    var code39ExtendedBase = {\n        addCharacter: function(character) {\n            var that = this;\n            if (that.characterMap[character]) {\n                that.addBase(that.characterMap[character]);\n            }\n            else if (character.charCodeAt(0) > 127) {\n                that.invalidCharacterError(character);\n            }\n            else {\n                that.addExtended(character.charCodeAt(0));\n            }\n        },\n        addExtended: function(code) {\n            var that = this,\n                patterns;\n            for (var i = 0; i < that.extendedMappings.length; i++) {\n                if ((patterns = that.extendedMappings[i].call(that, code))) {\n                    for (var j = 0; j < patterns.length; j++) {\n                        that.addBase(patterns[j]);\n                    }\n                    that.dataLength += patterns.length - 1;\n                    return;\n                }\n            }\n        },\n        extendedMappings: [\n            function(code) {\n                if (97 <= code && code <= 122) {\n                    var that = this;\n                    return [that.characterMap[that.shiftCharacters[0]], that.characterMap[String.fromCharCode(code - 32)]];\n                }\n            },\n            function(code) {\n                if (33 <= code && code <= 58) {\n                    var that = this;\n                    return [that.characterMap[that.shiftCharacters[1]], that.characterMap[String.fromCharCode(code + 32)]];\n                }\n            },\n            function(code) {\n                if (1 <= code && code <= 26) {\n                    var that = this;\n                    return [that.characterMap[that.shiftCharacters[2]], that.characterMap[String.fromCharCode(code + 64)]];\n                }\n            },\n            function(code) {\n                var that = this,\n                    result,\n                    dataCharacter;\n                if (!that.specialAsciiCodes[code]) {\n                    dataCharacter = Math.floor(code / 32) * 6 + (code - 27) % 32 + 64;\n                    result = [that.characterMap[that.shiftCharacters[3]], that.characterMap[String.fromCharCode(dataCharacter)]];\n                }\n                else {\n                    result = [];\n                    for (var i = 0; i < that.specialAsciiCodes[code].length; i++) {\n                        result.push(that.characterMap[that.shiftCharacters[3]]);\n                        result.push(that.characterMap[that.specialAsciiCodes[code][i]]);\n                    }\n                }\n\n                return result;\n            }\n        ],\n        specialAsciiCodes: {\n            \"0\": [\"U\"],\n            \"64\": [\"V\"],\n            \"96\": [\"W\"],\n            \"127\": [\"T\",\"X\",\"Y\",\"Z\"]\n        },\n        shiftValuesAsciiCodes: {\n            \"39\": 36,\n            \"40\": 47,\n            \"41\": 43,\n            \"42\": 37\n        },\n        characterMap: {\n            \"+\": false,\n            \"/\": false,\n            \"$\": false,\n            \"%\": false\n        },\n        shiftCharacters: [\"SHIFT0\", \"SHIFT1\", \"SHIFT2\", \"SHIFT3\"]\n    };\n\n    encodings.code39 = code39Base.extend({\n        name: \"Code 39\",\n        checkSumMod: 43,\n        minRatio: 2.5,\n        maxRatio: 3,\n        gapWidth: 1,\n        splitCharacter: \"|\",\n        initValue: function(value, width, height) {\n            var that = this;\n            that.width = width;\n            that.height = height;\n            that.value = value;\n            that.dataLength = value.length;\n            that.pattern = [];\n            that.patternString = \"\";\n        },\n        prepareValues: function() {\n            var that = this,\n                baseUnit,\n                minBaseUnit = that.minBaseUnitLength,\n                ratio = that.maxRatio,\n                minRatio = that.minRatio,\n                minHeight = Math.max(0.15 * that.width, 24);\n            if (that.height < minHeight) {\n                throw new Error(\"Insufficient Height. The minimum height for value: \" + that.value + \" is: \" + minHeight);\n            }\n\n            while ((baseUnit = that.getBaseUnit(ratio)) < minBaseUnit && ratio > minRatio) {\n                ratio = parseFloat((ratio - 0.1).toFixed(1));\n            }\n\n            if (baseUnit < minBaseUnit) {\n                var minWidth = Math.ceil(that.getBaseWidth(minRatio) * minBaseUnit);\n                throw new Error(\"Insufficient width. The minimum width for value: \" + that.value + \" is: \" + minWidth);\n            }\n\n            that.ratio = ratio;\n            that.baseUnit = baseUnit;\n            that.patternString = that.patternString.substring(0, that.patternString.length - 1);\n            that.pattern = that.pattern.concat(that.patternString.replace(/ratio/g, ratio).split(that.splitCharacter));\n        },\n        getBaseUnit: function(ratio) {\n            return this.width / this.getBaseWidth(ratio);\n        },\n        getBaseWidth: function(ratio) {\n            var that = this,\n                characterLength = 3 * (ratio + 2);\n            return that.quietZoneLength + characterLength * (that.dataLength + 2) + that.gapWidth * (that.dataLength + 1);\n        },\n        addStart: function() {\n            var that = this;\n            that.addPattern(that.characterMap.START.pattern);\n            that.addCharacterGap();\n        },\n        addBase: function(character) {\n            this.addPattern(character.pattern);\n            this.addCharacterGap();\n        },\n        addStop: function() {\n            this.addPattern(this.characterMap.START.pattern);\n        },\n        addPattern: function(pattern) {\n            for (var i = 0; i < pattern.length; i++) {\n                 this.patternString += this.patternMappings[pattern.charAt(i)];\n            }\n        },\n        addCharacterGap: function() {\n            var that = this;\n            that.patternString += that.gapWidth + that.splitCharacter;\n        },\n        patternMappings: {\n            \"b\": \"1|\",\n            \"w\": \"1|\",\n            \"B\": \"ratio|\",\n            \"W\": \"ratio|\"\n        },\n        characterMap: {\n            \"0\": { \"pattern\": \"bwbWBwBwb\",\"value\": 0 },\n            \"1\": { \"pattern\": \"BwbWbwbwB\",\"value\": 1 },\n            \"2\": { \"pattern\": \"bwBWbwbwB\",\"value\": 2 },\n            \"3\": { \"pattern\": \"BwBWbwbwb\",\"value\": 3 },\n            \"4\": { \"pattern\": \"bwbWBwbwB\",\"value\": 4 },\n            \"5\": { \"pattern\": \"BwbWBwbwb\",\"value\": 5 },\n            \"6\": { \"pattern\": \"bwBWBwbwb\",\"value\": 6 },\n            \"7\": { \"pattern\": \"bwbWbwBwB\",\"value\": 7 },\n            \"8\": { \"pattern\": \"BwbWbwBwb\",\"value\": 8 },\n            \"9\": { \"pattern\": \"bwBWbwBwb\",\"value\": 9 },\n            \"A\": { \"pattern\": \"BwbwbWbwB\",\"value\": 10 },\n            \"B\": { \"pattern\": \"bwBwbWbwB\",\"value\": 11 },\n            \"C\": { \"pattern\": \"BwBwbWbwb\",\"value\": 12 },\n            \"D\": { \"pattern\": \"bwbwBWbwB\",\"value\": 13 },\n            \"E\": { \"pattern\": \"BwbwBWbwb\",\"value\": 14 },\n            \"F\": { \"pattern\": \"bwBwBWbwb\",\"value\": 15 },\n            \"G\": { \"pattern\": \"bwbwbWBwB\",\"value\": 16 },\n            \"H\": { \"pattern\": \"BwbwbWBwb\",\"value\": 17 },\n            \"I\": { \"pattern\": \"bwBwbWBwb\",\"value\": 18 },\n            \"J\": { \"pattern\": \"bwbwBWBwb\",\"value\": 19 },\n            \"K\": { \"pattern\": \"BwbwbwbWB\",\"value\": 20 },\n            \"L\": { \"pattern\": \"bwBwbwbWB\",\"value\": 21 },\n            \"M\": { \"pattern\": \"BwBwbwbWb\",\"value\": 22 },\n            \"N\": { \"pattern\": \"bwbwBwbWB\",\"value\": 23 },\n            \"O\": { \"pattern\": \"BwbwBwbWb\",\"value\": 24 },\n            \"P\": { \"pattern\": \"bwBwBwbWb\",\"value\": 25 },\n            \"Q\": { \"pattern\": \"bwbwbwBWB\",\"value\": 26 },\n            \"R\": { \"pattern\": \"BwbwbwBWb\",\"value\": 27 },\n            \"S\": { \"pattern\": \"bwBwbwBWb\",\"value\": 28 },\n            \"T\": { \"pattern\": \"bwbwBwBWb\",\"value\": 29 },\n            \"U\": { \"pattern\": \"BWbwbwbwB\",\"value\": 30 },\n            \"V\": { \"pattern\": \"bWBwbwbwB\",\"value\": 31 },\n            \"W\": { \"pattern\": \"BWBwbwbwb\",\"value\": 32 },\n            \"X\": { \"pattern\": \"bWbwBwbwB\",\"value\": 33 },\n            \"Y\": { \"pattern\": \"BWbwBwbwb\",\"value\": 34 },\n            \"Z\": { \"pattern\": \"bWBwBwbwb\",\"value\": 35 },\n            \"-\": { \"pattern\": \"bWbwbwBwB\",\"value\": 36 },\n            \".\": { \"pattern\": \"BWbwbwBwb\",\"value\": 37 },\n            \" \": { \"pattern\": \"bWBwbwBwb\",\"value\": 38 },\n            \"$\": { \"pattern\": \"bWbWbWbwb\",\"value\": 39 },\n            \"/\": { \"pattern\": \"bWbWbwbWb\",\"value\": 40 },\n            \"+\": { \"pattern\": \"bWbwbWbWb\",\"value\": 41 },\n            \"%\": { \"pattern\": \"bwbWbWbWb\",\"value\": 42 },\n            START: { pattern: \"bWbwBwBwb\" }\n        },\n        options: {\n            addCheckSum: false\n        }\n    });\n\n    encodings.code39extended = encodings.code39.extend(deepExtend({}, code39ExtendedBase, {\n        name: \"Code 39 extended\",\n        characterMap: {\n            SHIFT0: { \"pattern\": \"bWbwbWbWb\",\"value\": 41 },\n            SHIFT1: { \"pattern\": \"bWbWbwbWb\",\"value\": 40 },\n            SHIFT2: { \"pattern\": \"bWbWbWbwb\",\"value\": 39 },\n            SHIFT3: { \"pattern\": \"bwbWbWbWb\",\"value\": 42 }\n        }\n    }));\n\n    encodings.code93 = code39Base.extend({\n        name: \"Code 93\",\n        cCheckSumTotal: 20,\n        kCheckSumTotal: 15,\n        checkSumMod: 47,\n        initValue: function(value, width, height) {\n            var that = this;\n            that.value = value;\n            that.width = width;\n            that.height = height;\n            that.pattern = [];\n            that.values = [];\n            that.dataLength = value.length;\n        },\n        prepareValues: function() {\n            var that = this,\n                minHeight = Math.max(0.15 * that.width, 24);\n            if (that.height < minHeight) {\n                throw new Error(\"Insufficient Height\");\n            }\n\n            that.setBaseUnit();\n\n            if (that.baseUnit < that.minBaseUnitLength) {\n                throw new Error(\"Insufficient Width\");\n            }\n        },\n        setBaseUnit: function() {\n            var that = this,\n                checkSumLength = 2;\n            that.baseUnit = that.width / (9 * (that.dataLength + 2 + checkSumLength) + that.quietZoneLength + 1);\n        },\n        addStart: function() {\n            var pattern = this.characterMap.START.pattern;\n            this.addPattern(pattern);\n        },\n        addStop: function() {\n            var that = this;\n            that.addStart();\n            that.pattern.push(that.characterMap.TERMINATION_BAR);\n        },\n        addBase: function(charData) {\n            this.addPattern(charData.pattern);\n            this.values.push(charData.value);\n        },\n        pushCheckSum: function() {\n            var that = this,\n                checkValues = that._getCheckValues(),\n                charData;\n\n            that.checksum = checkValues.join(\"\");\n            for (var i = 0; i < checkValues.length; i++) {\n                charData = that.characterMap[that._findCharacterByValue(checkValues[i])];\n                that.addPattern(charData.pattern);\n            }\n        },\n        _getCheckValues: function() {\n            var that = this,\n                values = that.values,\n                length = values.length,\n                wightedSum = 0,\n                cValue,\n                kValue,\n                idx;\n\n            for (idx = length - 1; idx >= 0; idx--) {\n                wightedSum += that.weightedValue(values[idx],length - idx, that.cCheckSumTotal);\n            }\n            cValue = wightedSum % that.checkSumMod;\n\n            wightedSum = that.weightedValue(cValue, 1, that.kCheckSumTotal);\n            for (idx = length - 1; idx >= 0; idx--) {\n                wightedSum += that.weightedValue(values[idx], length - idx + 1, that.kCheckSumTotal);\n            }\n\n            kValue = wightedSum % that.checkSumMod;\n            return [cValue, kValue];\n        },\n        _findCharacterByValue: function(value) {\n            for (var character in this.characterMap) {\n                if (this.characterMap[character].value === value) {\n                    return character;\n                }\n            }\n        },\n        weightedValue: function(value, index, total) {\n            return (index % total || total) * value;\n        },\n        addPattern: function(pattern) {\n            var value;\n\n            for (var i = 0; i < pattern.length; i++) {\n                value = parseInt(pattern.charAt(i),10);\n                this.pattern.push(value);\n            }\n        },\n        characterMap: {\n            \"0\": { \"pattern\": \"131112\",\"value\": 0 },\n            \"1\": { \"pattern\": \"111213\",\"value\": 1 },\n            \"2\": { \"pattern\": \"111312\",\"value\": 2 },\n            \"3\": { \"pattern\": \"111411\",\"value\": 3 },\n            \"4\": { \"pattern\": \"121113\",\"value\": 4 },\n            \"5\": { \"pattern\": \"121212\",\"value\": 5 },\n            \"6\": { \"pattern\": \"121311\",\"value\": 6 },\n            \"7\": { \"pattern\": \"111114\",\"value\": 7 },\n            \"8\": { \"pattern\": \"131211\",\"value\": 8 },\n            \"9\": { \"pattern\": \"141111\",\"value\": 9 },\n            \"A\": { \"pattern\": \"211113\",\"value\": 10 },\n            \"B\": { \"pattern\": \"211212\",\"value\": 11 },\n            \"C\": { \"pattern\": \"211311\",\"value\": 12 },\n            \"D\": { \"pattern\": \"221112\",\"value\": 13 },\n            \"E\": { \"pattern\": \"221211\",\"value\": 14 },\n            \"F\": { \"pattern\": \"231111\",\"value\": 15 },\n            \"G\": { \"pattern\": \"112113\",\"value\": 16 },\n            \"H\": { \"pattern\": \"112212\",\"value\": 17 },\n            \"I\": { \"pattern\": \"112311\",\"value\": 18 },\n            \"J\": { \"pattern\": \"122112\",\"value\": 19 },\n            \"K\": { \"pattern\": \"132111\",\"value\": 20 },\n            \"L\": { \"pattern\": \"111123\",\"value\": 21 },\n            \"M\": { \"pattern\": \"111222\",\"value\": 22 },\n            \"N\": { \"pattern\": \"111321\",\"value\": 23 },\n            \"O\": { \"pattern\": \"121122\",\"value\": 24 },\n            \"P\": { \"pattern\": \"131121\",\"value\": 25 },\n            \"Q\": { \"pattern\": \"212112\",\"value\": 26 },\n            \"R\": { \"pattern\": \"212211\",\"value\": 27 },\n            \"S\": { \"pattern\": \"211122\",\"value\": 28 },\n            \"T\": { \"pattern\": \"211221\",\"value\": 29 },\n            \"U\": { \"pattern\": \"221121\",\"value\": 30 },\n            \"V\": { \"pattern\": \"222111\",\"value\": 31 },\n            \"W\": { \"pattern\": \"112122\",\"value\": 32 },\n            \"X\": { \"pattern\": \"112221\",\"value\": 33 },\n            \"Y\": { \"pattern\": \"122121\",\"value\": 34 },\n            \"Z\": { \"pattern\": \"123111\",\"value\": 35 },\n            \"-\": { \"pattern\": \"121131\",\"value\": 36 },\n            \".\": { \"pattern\": \"311112\",\"value\": 37 },\n            \" \": { \"pattern\": \"311211\",\"value\": 38 },\n            \"$\": { \"pattern\": \"321111\",\"value\": 39 },\n            \"/\": { \"pattern\": \"112131\",\"value\": 40 },\n            \"+\": { \"pattern\": \"113121\",\"value\": 41 },\n            \"%\": { \"pattern\": \"211131\",\"value\": 42 },\n            SHIFT0: { \"pattern\": \"122211\",\"value\": 46 },\n            SHIFT1: { \"pattern\": \"311121\",\"value\": 45 },\n            SHIFT2: { \"pattern\": \"121221\",\"value\": 43 },\n            SHIFT3: { \"pattern\": \"312111\",\"value\": 44 },\n            START: { \"pattern\": \"111141\" },\n            TERMINATION_BAR: \"1\"\n        }\n    });\n\n    encodings.code93extended = encodings.code93.extend(deepExtend({}, code39ExtendedBase, {\n        name: \"Code 93 extended\",\n        pushCheckSum: function() {\n            var that = this,\n                checkValues = that._getCheckValues(),\n                value;\n\n            that.checksum = checkValues.join(\"\");\n\n            for (var i = 0; i < checkValues.length; i++) {\n                value = checkValues[i];\n                if (that.shiftValuesAsciiCodes[value]) {\n                    that.addExtended(that.shiftValuesAsciiCodes[value]);\n                }\n                else {\n                    that.addPattern(that.characterMap[that._findCharacterByValue(value)].pattern);\n                }\n            }\n        }\n    }));\n\n    var state128 = kendo.Class.extend({\n        init: function(encoding) {\n            this.encoding = encoding;\n        },\n        addStart: function() {},\n        is: function() {},\n        move: function() {},\n        pushState: function() {}\n    });\n\n    var state128AB = state128.extend({\n        FNC4: \"FNC4\",\n        init: function(encoding, states) {\n            var that = this;\n            that.encoding = encoding;\n            that.states = states;\n            that._initMoves(states);\n        },\n        addStart: function() {\n            this.encoding.addPattern(this.START);\n        },\n        is: function(value, index) {\n            var code = value.charCodeAt(index);\n            return this.isCode(code);\n        },\n        move: function(encodingState) {\n            var that = this,\n                idx = 0;\n\n            while (!that._moves[idx].call(that, encodingState) && idx < that._moves.length) {\n                idx++;\n            }\n        },\n        pushState: function(encodingState) {\n            var that = this,\n                states = that.states,\n                value = encodingState.value,\n                maxLength = value.length,\n                code;\n\n            if (inArray(\"C\", states) >= 0) {\n                var numberMatch = value.substr(encodingState.index).match(/\\d{4,}/g);\n                if (numberMatch) {\n                    maxLength = value.indexOf(numberMatch[0], encodingState.index);\n                }\n            }\n\n            while ((code = encodingState.value.charCodeAt(encodingState.index)) >= 0 &&\n                that.isCode(code) && encodingState.index < maxLength) {\n                that.encoding.addPattern(that.getValue(code));\n                encodingState.index++;\n            }\n        },\n        _initMoves: function(states) {\n            var that = this;\n            that._moves = [];\n\n            if (inArray(that.FNC4, states) >= 0) {\n                that._moves.push(that._moveFNC);\n            }\n\n            if (inArray(that.shiftKey, states) >= 0) {\n                that._moves.push(that._shiftState);\n            }\n            that._moves.push(that._moveState);\n        },\n        _moveFNC: function(encodingState) {\n            if (encodingState.fnc) {\n                encodingState.fnc = false;\n                return encodingState.previousState == this.key;\n            }\n        },\n        _shiftState: function(encodingState) {\n            var that = this;\n            if (encodingState.previousState == that.shiftKey &&\n                (encodingState.index + 1 >= encodingState.value.length ||\n                    that.encoding[that.shiftKey].is(encodingState.value, encodingState.index + 1))) {\n                that.encoding.addPattern(that.SHIFT);\n                encodingState.shifted = true;\n                return true;\n            }\n        },\n        _moveState: function() {\n            this.encoding.addPattern(this.MOVE);\n            return true;\n        },\n        SHIFT: 98\n    });\n\n    var states128 = {};\n\n    states128.A = state128AB.extend({\n        key: \"A\",\n        shiftKey: \"B\",\n        isCode: function(code) {\n            return code >= 0 && code < 96;\n        },\n        getValue: function(code) {\n            if (code < 32) {\n                return code + 64;\n            }\n\n            return code - 32;\n        },\n        MOVE: 101,\n        START: 103\n    });\n\n    states128.B = state128AB.extend({\n        key: \"B\",\n        shiftKey: \"A\",\n        isCode: function(code) {\n            return code >= 32 && code < 128;\n        },\n        getValue: function(code) {\n            return code - 32;\n        },\n        MOVE: 100,\n        START: 104\n    });\n\n    states128.C = state128.extend({\n        key: \"C\",\n        addStart: function() {\n            this.encoding.addPattern(this.START);\n        },\n        is: function(value, index) {\n            var next4 = getNext(value, index, 4);\n            return (index + 4 <= value.length || value.length == 2) && numberRegex.test(next4);\n        },\n        move: function() {\n            this.encoding.addPattern(this.MOVE);\n        },\n        pushState: function(encodingState) {\n            var code;\n            while (( code = getNext(encodingState.value, encodingState.index, 2)) &&\n                numberRegex.test(code) && code.length == 2)\n            {\n                this.encoding.addPattern(parseInt(code, 10));\n                encodingState.index += 2;\n            }\n        },\n        getValue: function(code) {\n            return code;\n        },\n        MOVE: 99,\n        START: 105\n    });\n\n    states128.FNC4 = state128.extend({\n        key: \"FNC4\",\n        dependentStates: [\"A\",\"B\"],\n        init: function(encoding, states) {\n            this.encoding = encoding;\n            this._initSubStates(states);\n        },\n        addStart: function(encodingState) {\n            var code = encodingState.value.charCodeAt(0) - 128,\n                subState = this._getSubState(code);\n\n            this.encoding[subState].addStart();\n        },\n        is: function(value, index) {\n            var code = value.charCodeAt(index);\n            return this.isCode(code);\n        },\n        isCode: function(code) {\n            return code >= 128 && code < 256;\n        },\n        pushState: function(encodingState) {\n            var that = this,\n                subState = that._initSubState(encodingState),\n                encoding = that.encoding,\n                length = subState.value.length;\n            encodingState.index += length;\n\n            if (length < 3) {\n                var code;\n                for (; subState.index < length; subState.index++) {\n                    code = subState.value.charCodeAt(subState.index);\n                    subState.state = that._getSubState(code);\n                    if (subState.previousState != subState.state) {\n                        subState.previousState = subState.state;\n                        encoding[subState.state].move(subState);\n                    }\n                    encoding.addPattern(encoding[subState.state].MOVE);\n                    encoding.addPattern(encoding[subState.state].getValue(code));\n                }\n            }\n            else {\n                if (subState.state != subState.previousState) {\n                    encoding[subState.state].move(subState);\n                }\n                that._pushStart(subState);\n                encoding.pushData(subState, that.subStates);\n                if (encodingState.index < encodingState.value.length) {\n                    that._pushStart(subState);\n                }\n            }\n\n            encodingState.fnc = true;\n            encodingState.state = subState.state;\n        },\n        _pushStart: function(subState) {\n            var that = this;\n            that.encoding.addPattern(that.encoding[subState.state].MOVE);\n            that.encoding.addPattern(that.encoding[subState.state].MOVE);\n        },\n        _initSubState: function(encodingState) {\n            var that = this,\n                subState = {\n                    value: that._getAll(encodingState.value, encodingState.index),\n                    index: 0\n                };\n            subState.state = that._getSubState(subState.value.charCodeAt(0));\n            subState.previousState = encodingState.previousState == that.key ?\n                subState.state : encodingState.previousState;\n            return subState;\n        },\n        _initSubStates: function(states) {\n            var that = this;\n            that.subStates = [];\n            for (var i = 0; i < states.length; i++) {\n                if (inArray(states[i], that.dependentStates) >= 0) {\n                    that.subStates.push(states[i]);\n                }\n            }\n        },\n        _getSubState: function(code) {\n            var that = this;\n            for (var i = 0; i < that.subStates.length; i++) {\n                if (that.encoding[that.subStates[i]].isCode(code)) {\n                    return that.subStates[i];\n                }\n            }\n        },\n        _getAll: function(value, index) {\n            var code,\n                result = \"\";\n            while ((code = value.charCodeAt(index++)) && this.isCode(code)) {\n                result += String.fromCharCode(code - 128);\n            }\n            return result;\n        }\n    });\n\n    states128.FNC1 = state128.extend({\n        key: \"FNC1\",\n        startState: \"C\",\n        dependentStates: [\"C\",\"B\"],\n        startAI: \"(\",\n        endAI: \")\",\n        init: function(encoding, states) {\n            this.encoding = encoding;\n            this.states = states;\n        },\n        addStart: function() {\n            this.encoding[this.startState].addStart();\n        },\n        is: function() {\n            return inArray(this.key, this.states) >= 0;\n        },\n        pushState: function(encodingState) {\n            var that = this,\n                encoding = that.encoding,\n                value = encodingState.value.replace(/\\s/g, \"\"),\n                regexSeparators = new RegExp(\"[\" + that.startAI + that.endAI + \"]\", \"g\"),\n                index = encodingState.index,\n                subState = {\n                    state: that.startState\n                },\n                current,\n                nextStart,\n                separatorLength;\n\n            encoding.addPattern(that.START);\n\n            while (true) {\n                subState.index = 0;\n\n                separatorLength = value.charAt(index) === that.startAI ? 2 : 0;\n                current = separatorLength > 0 ? that.getBySeparator(value, index) : that.getByLength(value, index);\n                if (current.ai.length) {\n                    nextStart = index + separatorLength + current.id.length + current.ai.length;\n                }\n                else {\n                    nextStart = value.indexOf(that.startAI, index + 1);\n                    if (nextStart < 0) {\n                        if (index + current.ai.max + current.id.length + separatorLength < value.length) {\n                            throw new Error(\"Separators are required after variable length identifiers\");\n                        }\n                        nextStart = value.length;\n                    }\n                }\n                subState.value = value.substring(index, nextStart).replace(regexSeparators, \"\");\n                that.validate(current, subState.value);\n\n                encoding.pushData(subState, that.dependentStates);\n\n                if (nextStart >= value.length) {\n                    break;\n                }\n\n                index = nextStart;\n\n                if (subState.state != that.startState) {\n                    encoding[that.startState].move(subState);\n                    subState.state = that.startState;\n                }\n\n                if (!current.ai.length) {\n                    encoding.addPattern(that.START);\n                }\n            }\n            encodingState.index = encodingState.value.length;\n        },\n        validate: function(current, value) {\n            var code = value.substr(current.id.length),\n                ai = current.ai;\n            if (!ai.type && !numberRegex.test(code)) {\n                throw new Error(\"Application identifier \" + current.id + \" is numeric only but contains non numeric character(s).\");\n            }\n\n            if (ai.type == \"alphanumeric\" && !alphanumericRegex.test(code)) {\n                 throw new Error(\"Application identifier \" + current.id + \" is alphanumeric only but contains non alphanumeric character(s).\");\n            }\n\n            if (ai.length && ai.length !== code.length) {\n                 throw new Error(\"Application identifier \" + current.id + \" must be \" + ai.length + \" characters long.\");\n            }\n\n            if (ai.min && ai.min > code.length) {\n                 throw new Error(\"Application identifier \" + current.id + \" must be at least \" + ai.min + \" characters long.\");\n            }\n\n            if (ai.max && ai.max < code.length) {\n                 throw new Error(\"Application identifier \" + current.id + \" must be at most \" + ai.max + \" characters long.\");\n            }\n        },\n        getByLength: function(value, index) {\n            var that = this,\n                id,\n                ai;\n            for (var i = 2; i <= 4; i++) {\n                id = getNext(value, index, i);\n                ai = that.getAI(id) || that.getAI(id.substring(0, id.length - 1));\n                if (ai) {\n                    return {\n                        id: id,\n                        ai: ai\n                    };\n                }\n            }\n            that.unsupportedAIError(id);\n        },\n        unsupportedAIError: function(id) {\n            throw new Error(kendo.format(\"'{0}' is not a supported Application Identifier\"),id);\n        },\n        getBySeparator: function(value, index) {\n            var that = this,\n                start = value.indexOf(that.startAI, index),\n                end = value.indexOf(that.endAI, start),\n                id = value.substring(start + 1,end),\n                ai = that.getAI(id) || that.getAI(id.substr(id.length - 1));\n            if (!ai) {\n                that.unsupportedAIError(id);\n            }\n\n            return {\n                ai: ai,\n                id: id\n            };\n        },\n        getAI: function(id) {\n            var ai = this.applicationIdentifiers,\n                multiKey = ai.multiKey;\n            if (ai[id]) {\n                return ai[id];\n            }\n\n            for (var i = 0; i < multiKey.length; i++) {\n                if (multiKey[i].ids && inArray(id, multiKey[i].ids) >= 0) {\n                    return multiKey[i].type;\n                }\n                else if (multiKey[i].ranges) {\n                    var ranges = multiKey[i].ranges;\n                    for (var j = 0; j < ranges.length; j++) {\n                        if (ranges[j][0] <= id && id <= ranges[j][1]) {\n                            return multiKey[i].type;\n                        }\n                    }\n                }\n            }\n        },\n        applicationIdentifiers: {\n            \"22\": { max: 29, type: \"alphanumeric\" },\n            \"402\": { length: 17 },\n            \"7004\": { max: 4, type: \"alphanumeric\" },\n            \"242\": { max: 6, type: \"alphanumeric\" },\n            \"8020\": { max: 25, type: \"alphanumeric\" },\n            \"703\": { min: 3, max: 30, type: \"alphanumeric\" },\n            \"8008\": { min: 8, max: 12, type: \"alphanumeric\" },\n            \"253\": { min: 13, max: 17, type: \"alphanumeric\" },\n            \"8003\": { min: 14, max: 30, type: \"alphanumeric\" },\n            multiKey: [{\n                ids: [\"15\", \"17\", \"8005\", \"8100\"],\n                ranges: [\n                    [11, 13],\n                    [310, 316],\n                    [320, 336],\n                    [340, 369]\n                ],\n                type: { length: 6 }\n            },{\n                ids: [\"240\", \"241\", \"250\", \"251\", \"400\", \"401\", \"403\", \"7002\", \"8004\", \"8007\", \"8110\"],\n                ranges: [[90 - 99]],\n                type: { max: 30, type: \"alphanumeric\" }\n            },{\n                ids: [\"7001\"],\n                ranges: [[410, 414]],\n                type: { length: 13 }\n            },{\n                ids: [\"10\",\"21\", \"254\", \"420\", \"8002\"],\n                type: { max: 20, type: \"alphanumeric\" }\n            },{\n                ids: [\"00\", \"8006\", \"8017\", \"8018\"],\n                type: { length: 18 }\n            },{\n                ids: [\"01\", \"02\", \"8001\"],\n                type: { length: 14 }\n            },{\n                ids: [\"422\"],\n                ranges: [\n                    [424, 426]\n                ],\n                type: { length: 3 }\n            },{\n                ids: [\"20\", \"8102\"],\n                type: { length: 2 }\n            },{\n                ids: [\"30\",\"37\"],\n                type: { max: 8, type: \"alphanumeric\" }\n            },{\n                ids: [\"390\",\"392\"],\n                type: { max: 15, type: \"alphanumeric\" }\n            },{\n                ids: [\"421\", \"423\"],\n                type: { min: 3, max: 15, type: \"alphanumeric\" }\n            }, {\n                ids: [\"391\", \"393\"],\n                type: { min: 3, max: 18, type: \"alphanumeric\" }\n            },{\n                ids: [\"7003\", \"8101\"],\n                type: { length: 10 }\n            }]\n        },\n        START: 102\n    });\n\n    var code128Base = Encoding.extend({\n        init: function(options) {\n            Encoding.fn.init.call(this, options);\n            this._initStates();\n        },\n        _initStates: function() {\n            var that = this;\n            for (var i = 0; i < that.states.length; i++) {\n                that[that.states[i]] = new states128[that.states[i]](that, that.states);\n            }\n        },\n        initValue: function(value, width, height) {\n           var that = this;\n           that.pattern = [];\n           that.value = value;\n           that.width = width;\n           that.height = height;\n           that.checkSum = 0;\n           that.totalUnits = 0;\n           that.index = 0;\n           that.position = 1;\n        },\n        addData: function() {\n            var that = this,\n                encodingState = {\n                    value: that.value,\n                    index: 0,\n                    state: \"\"\n                };\n            if (that.value.length === 0) {\n                return;\n            }\n\n            encodingState.state =\n                encodingState.previousState = that.getNextState(encodingState, that.states);\n\n            that.addStart(encodingState);\n\n            that.pushData(encodingState, that.states);\n\n            that.addCheckSum();\n            that.addStop();\n            that.setBaseUnit();\n        },\n        pushData: function(encodingState, states) {\n            var that = this;\n            while (true) {\n                that[encodingState.state].pushState(encodingState);\n                if (encodingState.index >= encodingState.value.length) {\n                    break;\n                }\n\n                if (!encodingState.shifted) {\n                    encodingState.previousState = encodingState.state;\n                    encodingState.state = that.getNextState(encodingState, states);\n                    that[encodingState.state].move(encodingState);\n                }\n                else {\n                   var temp = encodingState.state;\n                   encodingState.state = encodingState.previousState;\n                   encodingState.previousState = temp;\n                   encodingState.shifted = false;\n                }\n            }\n        },\n        addStart: function(encodingState) {\n            this[encodingState.state].addStart(encodingState);\n            this.position = 1;\n        },\n        addCheckSum: function() {\n            var that = this;\n\n            that.checksum = that.checkSum % 103;\n            that.addPattern(that.checksum);\n        },\n        addStop: function() {\n            this.addPattern(this.STOP);\n        },\n        setBaseUnit: function() {\n            var that = this;\n            that.baseUnit = that.width / (that.totalUnits + that.quietZoneLength);\n        },\n        addPattern: function(code) {\n            var that = this,\n                pattern = that.characterMap[code].toString(),\n                value;\n\n            for (var i = 0; i < pattern.length; i++) {\n                value = parseInt(pattern.charAt(i),10);\n                that.pattern.push(value);\n                that.totalUnits += value;\n            }\n            that.checkSum += code * that.position++;\n        },\n        getNextState: function(encodingState, states) {\n            for (var i = 0; i < states.length; i++) {\n                if (this[states[i]].is(encodingState.value, encodingState.index)) {\n                    return states[i];\n                }\n            }\n            this.invalidCharacterError(encodingState.value.charAt(encodingState.index));\n        },\n        characterMap: [\n            212222,222122,222221,121223,121322,131222,122213,122312,132212,221213,\n            221312,231212,112232,122132,122231,113222,123122,123221,223211,221132,\n            221231,213212,223112,312131,311222,321122,321221,312212,322112,322211,\n            212123,212321,232121,111323,131123,131321,112313,132113,132311,211313,\n            231113,231311,112133,112331,132131,113123,113321,133121,313121,211331,\n            231131,213113,213311,213131,311123,311321,331121,312113,312311,332111,\n            314111,221411,431111,111224,111422,121124,121421,141122,141221,112214,\n            112412,122114,122411,142112,142211,241211,221114,413111,241112,134111,\n            111242,121142,121241,114212,124112,124211,411212,421112,421211,212141,\n            214121,412121,111143,111341,131141,114113,114311,411113,411311,113141,\n            114131,311141,411131,211412,211214,211232,2331112\n        ],\n        STOP: 106\n    });\n\n    encodings.code128a = code128Base.extend({\n        name: \"Code 128 A\",\n        states: [\"A\"]\n    });\n\n\n    encodings.code128b = code128Base.extend({\n        name: \"Code 128 B\",\n        states: [\"B\"]\n    });\n\n    encodings.code128c = code128Base.extend({\n        name: \"Code 128 C\",\n        states: [\"C\"]\n    });\n\n    encodings.code128 = code128Base.extend({\n        name: \"Code 128\",\n        states: [\"C\", \"B\", \"A\", \"FNC4\"]\n    });\n\n    encodings[\"gs1-128\"] = code128Base.extend({\n       name: \"Code GS1-128\",\n       states: [\"FNC1\", \"C\", \"B\"]\n    });\n\n    var msiBase = Encoding.extend({\n        initValue: function(value, width) {\n            var that = this;\n            that.pattern = [];\n            that.value = value;\n            that.checkSumLength = 0;\n            that.width = width;\n        },\n        setBaseUnit: function() {\n            var that = this,\n                startStopLength = 7;\n\n            that.baseUnit = that.width /\n                    ( 12 * (that.value.length + that.checkSumLength) + that.quietZoneLength + startStopLength);\n        },\n        addData: function() {\n            var that = this,\n                value = that.value;\n            that.addPattern(that.START);\n\n            for (var i = 0; i < value.length; i++) {\n                that.addCharacter(value.charAt(i));\n            }\n\n            if (that.options.addCheckSum) {\n                that.addCheckSum();\n            }\n\n            that.addPattern(that.STOP);\n            that.setBaseUnit();\n        },\n        addCharacter: function(character) {\n            var that = this,\n                pattern = that.characterMap[character];\n            if (!pattern) {\n                that.invalidCharacterError(character);\n            }\n            that.addPattern(pattern);\n        },\n        addPattern: function(pattern) {\n            for (var i = 0; i < pattern.length; i++) {\n                this.pattern.push(parseInt(pattern.charAt(i),10));\n            }\n        },\n        addCheckSum: function() {\n            var that = this,\n                checkSumFunction = that.checkSums[that.checkSumType],\n                checkValues;\n\n            checkValues = checkSumFunction.call(that.checkSums, that.value);\n\n            that.checksum = checkValues.join(\"\");\n            for (var i = 0; i < checkValues.length; i++) {\n                that.checkSumLength++;\n                that.addPattern(that.characterMap[checkValues[i]]);\n            }\n        },\n        checkSums: {\n            Modulo10: function(value) {\n                var checkValues = [0, \"\"],\n                odd = value.length % 2,\n                idx,\n                evenSum,\n                oddSum;\n\n                for (idx = 0; idx < value.length; idx++) {\n                    checkValues[(idx + odd) % 2] += parseInt(value.charAt(idx),10);\n                }\n\n                oddSum = checkValues[0];\n                evenSum = (checkValues[1] * 2).toString();\n\n                for (idx = 0; idx < evenSum.length; idx++) {\n                    oddSum += parseInt(evenSum.charAt(idx),10);\n                }\n\n                return [(10 - (oddSum % 10)) % 10];\n            },\n            Modulo11: function(value) {\n                var weightedSum = 0,\n                    mod = 11,\n                    length = value.length,\n                    weight,\n                    checkValue;\n\n                for (var i = 0; i < length; i++) {\n                    weight = ((length - i) % 6 || 6) + 1;\n                    weightedSum += weight * value.charAt(i);\n                }\n                checkValue = (mod - weightedSum % mod) % mod;\n                if (checkValue != 10) {\n                    return [checkValue];\n                }\n                return [1, 0];\n            },\n            Modulo11Modulo10: function(value) {\n                var checkValues = this.Modulo11(value),\n                    mod11Value;\n                mod11Value = value + checkValues[0];\n\n                return checkValues.concat(this.Modulo10(mod11Value));\n            },\n            Modulo10Modulo10: function(value) {\n                var checkValues = this.Modulo10(value),\n                    mod10Value;\n                mod10Value = value + checkValues[0];\n\n                return checkValues.concat(this.Modulo10(mod10Value));\n            }\n        },\n        characterMap: [\"12121212\", \"12121221\",\"12122112\", \"12122121\", \"12211212\", \"12211221\", \"12212112\", \"12212121\", \"21121212\", \"21121221\"],\n        START: \"21\",\n        STOP: \"121\",\n        checkSumType: \"\"\n    });\n\n    encodings.msimod10 = msiBase.extend({\n        name: \"MSI Modulo10\",\n        checkSumType: \"Modulo10\"\n    });\n\n    encodings.msimod11 = msiBase.extend({\n        name: \"MSI Modulo11\",\n        checkSumType: \"Modulo11\"\n    });\n\n    encodings.msimod1110 = msiBase.extend({\n        name: \"MSI Modulo11 Modulo10\",\n        checkSumType: \"Modulo11Modulo10\"\n    });\n\n    encodings.msimod1010 = msiBase.extend({\n        name: \"MSI Modulo10 Modulo10\",\n        checkSumType: \"Modulo10Modulo10\"\n    });\n\n    encodings.code11 = Encoding.extend({\n        name: \"Code 11\",\n        cCheckSumTotal: 10,\n        kCheckSumTotal: 9,\n        kCheckSumMinLength: 10,\n        checkSumMod: 11,\n        DASH_VALUE: 10,\n        DASH: \"-\",\n        START: \"112211\",\n        STOP: \"11221\",\n        initValue: function(value, width) {\n            var that = this;\n            that.pattern = [];\n            that.value = value;\n            that.width = width;\n            that.totalUnits = 0;\n        },\n        addData: function() {\n            var that = this;\n            var value = that.value;\n            that.addPattern(that.START);\n\n            for (var i = 0; i < value.length; i++) {\n                that.addCharacter(value.charAt(i));\n            }\n\n            if (that.options.addCheckSum) {\n                that.addCheckSum();\n            }\n\n            that.addPattern(that.STOP);\n            that.setBaseUnit();\n        },\n        setBaseUnit: function() {\n            var that = this;\n            that.baseUnit = that.width / (that.totalUnits + that.quietZoneLength);\n        },\n        addCheckSum: function() {\n            var that = this,\n                value = that.value,\n                length = value.length,\n                cValue;\n\n            cValue = that.getWeightedSum(value, length, that.cCheckSumTotal) % that.checkSumMod;\n            that.checksum = cValue + \"\";\n            that.addPattern(that.characterMap[cValue]);\n\n            length++;\n            if (length >= that.kCheckSumMinLength) {\n                var kValue = (cValue + that.getWeightedSum(value, length, that.kCheckSumTotal)) % that.checkSumMod;\n                that.checksum += kValue;\n                that.addPattern(that.characterMap[kValue]);\n            }\n        },\n        getWeightedSum: function(value, length, total) {\n            var weightedSum = 0;\n            for (var i = 0; i < value.length; i++) {\n                weightedSum += this.weightedValue(this.getValue(value.charAt(i)), length, i, total);\n            }\n\n            return weightedSum;\n        },\n        weightedValue: function(value, length, index, total) {\n            var weight = (length - index) % total || total;\n            return weight * value;\n        },\n        getValue: function(character) {\n            var that = this;\n            if (!isNaN(character)) {\n                return parseInt(character,10);\n            }\n            else if (character !== that.DASH) {\n                that.invalidCharacterError(character);\n            }\n            return that.DASH_VALUE;\n        },\n        addCharacter: function(character) {\n            var that = this,\n                value = that.getValue(character),\n                pattern = that.characterMap[value];\n            that.addPattern(pattern);\n        },\n        addPattern: function(pattern) {\n            var value;\n            for (var i = 0; i < pattern.length; i++) {\n                value = parseInt(pattern.charAt(i),10);\n                this.pattern.push(value);\n                this.totalUnits += value;\n            }\n        },\n        characterMap: [\"111121\", \"211121\", \"121121\", \"221111\", \"112121\", \"212111\", \"122111\", \"111221\", \"211211\", \"211111\", \"112111\"],\n        options: {\n            addCheckSum: true\n        }\n    });\n\n    encodings.postnet = Encoding.extend({\n        name: \"Postnet\",\n        START: \"2\",\n        VALID_CODE_LENGTHS: [5,9, 11],\n        DIGIT_SEPARATOR: \"-\",\n        initValue: function(value, width, height) {\n            var that = this;\n            that.height = height;\n            that.width = width;\n            that.baseHeight = height / 2;\n            that.value = value.replace(new RegExp(that.DIGIT_SEPARATOR,\"g\"), \"\");\n            that.pattern = [];\n            that.validate(that.value);\n            that.checkSum = 0;\n            that.setBaseUnit();\n        },\n        addData: function() {\n            var that = this,\n                value = that.value;\n            that.addPattern(that.START);\n\n            for (var i = 0; i < value.length; i++) {\n                that.addCharacter(value.charAt(i));\n            }\n\n            if (that.options.addCheckSum) {\n                that.addCheckSum();\n            }\n\n            that.addPattern(that.START);\n            that.pattern.pop();\n        },\n        addCharacter: function(character) {\n            var that = this,\n                pattern = that.characterMap[character];\n            that.checkSum += parseInt(character,10);\n            that.addPattern(pattern);\n        },\n        addCheckSum: function() {\n            var that = this;\n            that.checksum = (10 - (that.checkSum % 10)) % 10;\n            that.addCharacter(that.checksum);\n        },\n        setBaseUnit: function() {\n            var that = this,\n                startStopLength = 3;\n            that.baseUnit = that.width / ((that.value.length + 1) * 10 + startStopLength + that.quietZoneLength);\n        },\n        validate: function(value) {\n            var that = this;\n\n            if (!numberRegex.test(value)) {\n                that.invalidCharacterError(value.match(/[^0-9]/)[0]);\n            }\n            if (inArray(value.length, that.VALID_CODE_LENGTHS) < 0) {\n                throw new Error(\"Invalid value length. Valid lengths for the Postnet symbology are \" + that.VALID_CODE_LENGTHS.join(\",\"));\n            }\n        },\n        addPattern: function(pattern) {\n            var that = this,\n                y1;\n            for (var i = 0; i < pattern.length; i++) {\n                y1 = that.height - that.baseHeight * pattern.charAt(i);\n                that.pattern.push({ width: 1, y1: y1, y2: that.height });\n                that.pattern.push(1);\n            }\n        },\n        characterMap: [\"22111\", \"11122\", \"11212\", \"11221\", \"12112\", \"12121\", \"12211\", \"21112\", \"21121\", \"21211\"]\n    });\n\n    encodings.ean13 = Encoding.extend({\n        initValue: function(value, width, height) {\n            value += \"\";\n\n            if (value.length != 12 || /\\D/.test(value)) {\n                throw new Error('The value of the \"EAN13\" encoding should be 12 symbols');\n            }\n\n            var that = this;\n            that.pattern = [];\n            that.options.height = height;\n            that.baseUnit = width / (95 + that.quietZoneLength);\n            that.value = value;\n            that.checksum = that.calculateChecksum();\n            that.leftKey = value[0];\n            that.leftPart = value.substr(1,6);\n            that.rightPart = value.substr(7) + that.checksum;\n        },\n        addData: function() {\n            var that = this;\n            that.addPieces(that.characterMap.start);\n            that.addSide(that.leftPart,that.leftKey);\n            that.addPieces(that.characterMap.middle);\n            that.addSide(that.rightPart);\n            that.addPieces(that.characterMap.start);\n        },\n        addSide: function(leftPart,key) {\n            var that = this;\n            for (var i = 0; i < leftPart.length; i++) {\n                if (key && parseInt(that.keyTable[key].charAt(i),10)) {\n                    that.addPieces(Array.prototype.slice.call(that.characterMap.digits[leftPart.charAt(i)]).reverse(),true);\n                } else {\n                    that.addPieces(that.characterMap.digits[leftPart.charAt(i)],true);\n                }\n            }\n        },\n        addPieces: function(arrToAdd,limitedHeight) {\n            var that = this;\n            for (var i = 0; i < arrToAdd.length; i++) {\n                if (limitedHeight) {\n                    that.pattern.push({\n                        y1: 0,\n                        y2: that.options.height * 0.95,\n                        width: arrToAdd[i]\n                    });\n                } else {\n                    that.pattern.push(arrToAdd[i]);\n                }\n            }\n        },\n        calculateChecksum: function() {\n            var odd = 0,\n                even = 0,\n                value = this.value.split(\"\").reverse().join(\"\");\n            for (var i = 0; i < value.length; i++) {\n                if (i % 2) {\n                    even += parseInt(value.charAt(i),10);\n                }\n                else {\n                    odd += parseInt(value.charAt(i),10);\n                }\n            }\n            var checksum = (10 - ((3 * odd + even) % 10)) % 10;\n            return checksum;\n        },\n        keyTable: [\n            '000000',\n            '001011',\n            '001101',\n            '001110',\n            '010011',\n            '011001',\n            '011100',\n            '010101',\n            '010110',\n            '011010'\n        ],\n        characterMap: {\n            digits: [\n                [3,2,1,1],\n                [2,2,2,1],\n                [2,1,2,2],\n                [1,4,1,1],\n                [1,1,3,2],\n                [1,2,3,1],\n                [1,1,1,4],\n                [1,3,1,2],\n                [1,2,1,3],\n                [3,1,1,2]\n            ],\n            start: [1,1,1],\n            middle: [1,1,1,1,1]\n        }\n    });\n\n    encodings.ean8 = encodings.ean13.extend({\n        initValue: function(value, width, height) {\n            var that = this;\n            if (value.length != 7 || /\\D/.test(value)) {\n                throw new Error('Invalid value provided');\n            }\n            that.value = value;\n            that.options.height = height;\n            that.checksum = that.calculateChecksum(that.value);\n            that.leftPart = that.value.substr(0,4);\n            that.rightPart = that.value.substr(4) + that.checksum;\n            that.pattern = [];\n            that.baseUnit = width / (67 + that.quietZoneLength);\n        }\n    });\n\n    var Barcode = Widget.extend({\n        init: function(element, options) {\n             var that = this;\n             Widget.fn.init.call(that, element, options);\n             that.element = $(element);\n             that.wrapper = that.element;\n             that.element.addClass(\"k-barcode\").css(\"display\", \"block\");\n             that.surfaceWrap = $(\"<div />\").css(\"position\", \"relative\").appendTo(this.element);\n             that.surface = draw.Surface.create(that.surfaceWrap, {\n                 type: that.options.renderAs\n             });\n             that._setOptions(options);\n             if (options && defined(options.value)) {\n                 that.redraw();\n             }\n        },\n\n        setOptions: function(options) {\n            this._setOptions(options);\n            this.redraw();\n        },\n\n        redraw: function() {\n            var size = this._getSize();\n\n            this.surface.clear();\n            this.surface.setSize({\n                width: size.width,\n                height: size.height\n            });\n\n            this.createVisual();\n            this.surface.draw(this.visual);\n        },\n\n        getSize: function() {\n            return kendo.dimensions(this.element);\n        },\n\n        _resize: function() {\n            this.redraw();\n        },\n\n        createVisual: function() {\n            this.visual = this._render();\n        },\n\n        _render: function() {\n            var that = this,\n                options = that.options,\n                value = options.value,\n                textOptions = options.text,\n                textMargin = dataviz.getSpacing(textOptions.margin),\n                size = that._getSize(),\n                border = options.border || {},\n                encoding = that.encoding,\n                contentBox = new Box2D(0, 0, size.width, size.height).unpad(border.width).unpad(options.padding),\n                barHeight = contentBox.height(),\n                result, textToDisplay,\n                textHeight;\n\n            var visual = new draw.Group();\n\n            that.contentBox = contentBox;\n            visual.append(that._getBackground(size));\n\n            if (textOptions.visible) {\n                textHeight = draw.util.measureText(value, { font: textOptions.font }).height;\n                barHeight -= textHeight + textMargin.top + textMargin.bottom;\n            }\n\n            result = encoding.encode(value, contentBox.width(), barHeight);\n\n            if (textOptions.visible) {\n                textToDisplay = value;\n                if (options.checksum && defined(encoding.checksum)) {\n                    textToDisplay += \" \" + encoding.checksum;\n                }\n\n                visual.append(that._getText(textToDisplay));\n            }\n\n            that.barHeight = barHeight;\n            this._bandsGroup = this._getBands(result.pattern, result.baseUnit);\n            visual.append(this._bandsGroup);\n\n            return visual;\n        },\n\n        exportVisual: function() {\n            return this._render();\n        },\n\n        _getSize: function() {\n            var that = this,\n                element = that.element,\n                size = new geom.Size(DEFAULT_WIDTH, DEFAULT_HEIGHT);\n\n            if (element.width() > 0) {\n                size.width = element.width();\n            }\n            if (element.height() > 0) {\n                size.height = element.height();\n            }\n            if (that.options.width) {\n               size.width = that.options.width;\n            }\n            if (that.options.height) {\n               size.height = that.options.height;\n            }\n\n            return size;\n        },\n\n        value: function(value) {\n            var that = this;\n            if (!defined(value)) {\n                return that.options.value;\n            }\n            that.options.value = value + '';\n            that.redraw();\n        },\n\n        _getBands: function(pattern, baseUnit) {\n            var that = this,\n                contentBox = that.contentBox,\n                position = contentBox.x1,\n                step,\n                item;\n\n            var group = new draw.Group();\n            for (var i = 0; i < pattern.length; i++) {\n                item = isPlainObject(pattern[i]) ? pattern[i] : {\n                    width: pattern[i],\n                    y1: 0,\n                    y2: that.barHeight\n                };\n\n                step = item.width * baseUnit;\n\n                if (i % 2) {\n                    var rect = geom.Rect.fromPoints(\n                        new geom.Point(position, item.y1 + contentBox.y1),\n                        new geom.Point(position + step, item.y2 + contentBox.y1)\n                    );\n\n                    var path = draw.Path.fromRect(rect, {\n                        fill: {\n                            color: that.options.color\n                        },\n                        stroke: null\n                    });\n\n                    group.append(path);\n                }\n\n                position += step;\n            }\n\n            return group;\n        },\n\n        _getBackground: function(size) {\n            var that = this,\n                options = that.options,\n                border = options.border || {};\n\n            var box = new Box2D(0,0, size.width, size.height).unpad(border.width / 2);\n            var path = draw.Path.fromRect(box.toRect(), {\n                fill: {\n                    color: options.background\n                },\n                stroke: {\n                    color: border.width ? border.color : \"\",\n                    width: border.width,\n                    dashType: border.dashType\n                }\n            });\n\n            return path;\n        },\n\n        _getText: function(value) {\n            var that = this,\n                textOptions = that.options.text,\n                text = that._textbox = new TextBox(value, {\n                    font: textOptions.font,\n                    color: textOptions.color,\n                    align: \"center\",\n                    vAlign: \"bottom\",\n                    margin: textOptions.margin\n                });\n\n            text.reflow(that.contentBox);\n            text.renderVisual();\n\n            return text.visual;\n        },\n\n        _setOptions: function(options) {\n            var that = this;\n            that.type = (options.type || that.options.type).toLowerCase();\n\n            if (that.type == \"upca\") { //extend instead\n                that.type = \"ean13\";\n                options.value = '0' + options.value;\n            }\n\n            if (that.type == \"upce\") {\n                that.type = \"ean8\";\n                options.value = '0' + options.value;\n            }\n\n            if (!encodings[that.type]) {\n                throw new Error('Encoding ' + that.type + 'is not supported.');\n            }\n\n            that.encoding = new encodings[that.type]();\n\n            that.options = extend(true, that.options, options);\n        },\n\n        options: {\n            name: \"Barcode\",\n            renderAs: \"svg\",\n            value: \"\",\n            type: \"code39\",\n            checksum: false,\n            width: 0,\n            height: 0,\n            color: \"black\",\n            background: \"white\",\n            text: {\n                visible: true,\n                font: \"16px Consolas, Monaco, Sans Mono, monospace, sans-serif\",\n                color: \"black\",\n                margin: {\n                    top: 0,\n                    bottom: 0,\n                    left: 0,\n                    right: 0\n                }\n            },\n            border: {\n                width: 0,\n                dashType: \"solid\",\n                color: \"black\"\n            },\n            padding: {\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0\n            }\n        }\n    });\n    dataviz.ExportMixin.extend(Barcode.fn);\n\n    dataviz.ui.plugin(Barcode);\n\n    kendo.deepExtend(dataviz, {\n        encodings: encodings,\n        Encoding: Encoding\n    });\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}