{"version":3,"sources":["raw-mjs/kendo.dataviz.sankey.js"],"names":["$","window","kendo","dataviz","deepExtend","Box","setDefaultOptions","constants","geometry","drawing","ChartLegend","Legend","sum","array","mapFn","map","reduce","acc","curr","sortAsc","a","b","y0","index","y1","sortSource","source","sortTarget","target","value","node","sortLinks","nodes","forEach","targetLinks","link","sourceLinks","sort","calcLayer","maxDepth","align","depth","height","length","Sankey$1","Class","extend","init","options","ref","nodesOptions","offset","this","data","links","width","offsetX","offsetY","nodeWidth","nodePadding","padding","reverse","targetColumnIndex","loops","autoLayout","calculate","connectLinksToNodes","calculateNodeValues","circularLinks","calculateNodeHeights","columns","calculateNodeDepths","calculateNodeColumns","calculateNodeBreadths","applyNodesOffset","calculateLinkBreadths","nodesMap","Map","i","id","undefined","label","text","set","get","sourceId","targetId","push","Math","max","current","Set","next","currDepth","size","currentNodes","Array","from","n","l","add","nodesLength","currentHeight","eachNode","d","apply","columnWidth","layer","min","x0","x1","this$1$1","kSize","c","y","uncurlLinksToRight","uncurlLinksToLeft","left","top","column","kValue","targetTopPos","dy","arrangeNodesVertically","loop","j","sourceTopPos","endIndex","arrangeUp","arrangeDown","yPos","currentY","i$1","link$1","calculateSankey","rotationDirection","p1x","p1y","p2x","p2y","p3x","p3y","expression1","expression2","SankeyElement","Class$$1","call","createVisual","__proto__","prototype","Object","create","constructor","visual","createElement","exportVisual","customVisual","sender","getSender","visualOptions","getElement","Node","SankeyElement$$1","arguments","rect","Rect","Path","fromRect","fill","color","opacity","stroke","className","role","ariaRoleDescription","ariaLabel","nodeColor","nodeColors","resolveNodeOptions","nodeOptions","defined","util","Link","xC","moveTo","curveTo","INSIDE","BEFORE","Label","totalWidth","position","visible","nodeBox","textbox","TextBox","reflow","textSizeBox","box","goesOutside","textY","center","textOrigin","textRect","translate","renderVisual","font","border","margin","paintOrder","resolveLabelOptions","Title$1","Title$$1","drawingRect","title","Title","buildTitle","CENTER","getSpacing","sortData","item","area","background","areaBackground","areaOpacity","legend","markers","type","cursor","POINTER","BOTTOM","LINK","NODE","Sankey","Observable$$1","element","theme","_initTheme","_setOptions","_initElement","_initSurface","_redraw","_initResizeObserver","destroy","unbind","_destroySurface","_destroyResizeObserver","addClass","setAttribute","tabIndex","getAttribute","description","surface","_initSurfaceElement","_createSurface","observer","ResizeObserver","entries","entry","contentRect","setSize","resize","_resizeObserver","observe","Surface","surfaceElement","mouseenter","_mouseenter","bind","mouseleave","_mouseleave","mousemove","_mousemove","click","_click","currentTheme","setLinksOpacity","linksVisuals","setOpacity","linkOptions","setLinksInactivityOpacity","inactiveOpacity","highlight","linkValue","trigger","name","ev","event","targetType","dataItem","isLink","isNode","isLegendItem","Boolean","chartElement","highlightLinks","nodeVisual","nodesVisuals","originalEvent","relatedTarget","nodeName","tooltipTimeOut","clearTimeout","tooltipShown","tooltip","followPointer","delay","tooltipElType","mouseEvent","getBoundingClientRect","isLeft","clientX","isTop","clientY","tooltipData","popupOffset","pageX","pageY","popupAlign","horizontal","vertical","ref$1","nodeValue","nextDelay","setTimeout","_destroySurfaceElement","disconnect","document","appendChild","parentNode","removeChild","setOptions","clear","_getSize","draw","_render","titleBox","legendBox","calcOptions","sankeyOptions","labels","disableAutoLayout","sankeyBox","legendArea","clone","titleHeight","TOP","unpad","shrink","legendPosition","LEFT","RIGHT","calculatedNodes","console","warn","sankey","nodeEl","nodeOps","nodeInstance","wrap","rectToBox","rawBBox","labelVisual","x2","y2","permutation","columnsLength","results","crosses","link1","link2","f1","f2","f3","f4","linksLength","lNext","nextLink","crossesValue","minCrosses","r","bestResult","find","context","sankeyContext","labelOptions","Group","clip","titleVisual","append","visualNodes","sortedLinks","slice","sourceNode","targetNode","linkOps","colorType","resolveLinkOptions","linkVisual","diagramWidth","textOps","legendVisual","exportOptions","Observable","right","lineJoin","createSankeyData","dimensions","measure","linksMap","row","dimension","key","existingValue","nodesId","nodesArray","String","linksArray","jQuery","Widget","ui","encode","htmlEncode","styleAttr","tooltipContentWrapStyle","TootipText","Square","TooltipTemplates","icon","SankeyTooltip","fn","outerWidth","outerHeight","setContent","content","html","each","el","split","filter","s","parts","style","trim","removeAttribute","setPosition","offsetOption","css","show","hide","remove","Tooltip","ContentTemplates","template","KendoSankey","userOptions","empty","wrapper","_initSankey","_attachEvents","notify","_showWatermarkOverlay","currentOptions","events","eventName","_instance","themeOptions","_getThemeOptions","seriesColors","axisDefaults","seriesDefaults","line","strokeColor","_createSankey","themeName","SASS_THEMES","indexOf","toLowerCase","autoTheme","chart","themes","_events","handler","tooltipShow","tooltipHide","e","_tooltip","doc","ownerDocument","appendTo","body","nodeTemplate","linkTemplate","currentTemplate","format","messages","tooltipUnits","ExportMixin","PDFMixin","plugin","__meta__","category","depends","features","kendo$1"],"mappings":"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","file":"kendo.dataviz.sankey.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.color.js';\nimport './kendo.drawing.js';\nimport './kendo.dataviz.core.js';\nimport './kendo.dataviz.chart.js';\n\n/***********************************************************************\n * WARNING: this file is auto-generated.  If you change it directly,\n * your modifications will eventually be lost.  The source code is in\n * `kendo-charts` repository, you should make your changes there and\n * run `src-modules/sync.sh` in this repository.\n */\n\n(function($) {\n/* eslint-disable */\n\nwindow.kendo.dataviz = window.kendo.dataviz || {};\nvar dataviz = kendo.dataviz;\nvar deepExtend = dataviz.deepExtend;\nvar Box = dataviz.Box;\nvar setDefaultOptions = dataviz.setDefaultOptions;\nvar constants = dataviz.constants;\nvar geometry = kendo.geometry;\nvar drawing = kendo.drawing;\n\nvar ChartLegend = dataviz.Legend;\n\nvar max = function (array, mapFn) { return Math.max.apply(null, array.map(mapFn)); };\nvar min = function (array, mapFn) { return Math.min.apply(null, array.map(mapFn)); };\nvar sum = function (array, mapFn) { return array.map(mapFn).reduce(function (acc, curr) { return (acc + curr); }, 0); };\nvar sortAsc = function (a, b) { return (a.y0 === b.y0 ? a.index - b.index : a.y0 + a.y1 - b.y0 - b.y1); };\nvar sortSource = function (a, b) { return sortAsc(a.source, b.source); };\nvar sortTarget = function (a, b) { return sortAsc(a.target, b.target); };\nvar value = function (node) { return node.value; };\n\nfunction sortLinks(nodes) {\n    nodes.forEach(function (node) {\n        node.targetLinks.forEach(function (link) {\n            link.source.sourceLinks.sort(sortTarget);\n        });\n        node.sourceLinks.forEach(function (link) {\n            link.target.targetLinks.sort(sortSource);\n        });\n    });\n}\n\nvar calcLayer = function (node, maxDepth) {\n    if (node.align === 'left') {\n        return node.depth;\n    }\n\n    if (node.align === 'right') {\n        return maxDepth - node.height;\n    }\n\n    return node.sourceLinks.length ? node.depth : maxDepth;\n};\n\nvar Sankey$1 = kendo.Class.extend({\n    init: function(options) {\n        var ref = options.nodesOptions;\n        var offset = ref.offset; if (offset === void 0) { offset = {}; }\n        var align = ref.align;\n        this.data = {\n            nodes: options.nodes.map(function (node) { return deepExtend({}, { offset: offset, align: align }, node); }),\n            links: options.links.map(function (link) { return deepExtend({}, link); })\n        };\n\n        this.width = options.width;\n        this.height = options.height;\n        this.offsetX = options.offsetX || 0;\n        this.offsetY = options.offsetY || 0;\n        this.nodeWidth = options.nodesOptions.width;\n        this.nodePadding = options.nodesOptions.padding;\n        this.reverse = options.reverse;\n        this.targetColumnIndex = options.targetColumnIndex;\n        this.loops = options.loops;\n        this.autoLayout = options.autoLayout;\n    },\n\n    calculate: function() {\n        var ref = this.data;\n        var nodes = ref.nodes;\n        var links = ref.links;\n        this.connectLinksToNodes(nodes, links);\n        this.calculateNodeValues(nodes);\n\n        var circularLinks = this.calculateNodeHeights(nodes);\n\n        if (circularLinks) {\n            return { nodes: [], links: [], columns: [], circularLinks: circularLinks };\n        }\n\n        this.calculateNodeDepths(nodes);\n        var columns = this.calculateNodeColumns(nodes);\n        this.calculateNodeBreadths(columns);\n        this.applyNodesOffset(nodes);\n        this.calculateLinkBreadths(nodes);\n\n        return $.extend({}, this.data, {columns: columns});\n    },\n\n    connectLinksToNodes: function(nodes, links) {\n        var nodesMap = new Map();\n\n        nodes.forEach(function (node, i) {\n            node.index = i;\n            node.sourceLinks = [];\n            node.targetLinks = [];\n            node.id = node.id !== undefined ? node.id : node.label.text;\n            nodesMap.set(node.id, node);\n        });\n\n        links.forEach(function (link) {\n            link.source = nodesMap.get(link.sourceId);\n            link.target = nodesMap.get(link.targetId);\n            link.source.sourceLinks.push(link);\n            link.target.targetLinks.push(link);\n        });\n    },\n\n    calculateNodeValues: function(nodes) {\n        nodes.forEach(function (node) {\n            node.value = Math.max(\n                sum(node.sourceLinks, value),\n                sum(node.targetLinks, value)\n            );\n        });\n    },\n\n    calculateNodeDepths: function(nodes) {\n        var current = new Set(nodes);\n        var next = new Set();\n        var currDepth = 0;\n        while (current.size) {\n            var currentNodes = Array.from(current);\n            for (var n = 0; n < currentNodes.length; n++) {\n                var node = currentNodes[n];\n                node.depth = currDepth;\n                for (var l = 0; l < node.sourceLinks.length; l++) {\n                    var link = node.sourceLinks[l];\n                    next.add(link.target);\n                }\n            }\n            currDepth++;\n            current = next;\n            next = new Set();\n        }\n    },\n\n    calculateNodeHeights: function(nodes) {\n        var nodesLength = nodes.length;\n        var current = new Set(nodes);\n        var next = new Set;\n        var currentHeight = 0;\n        var eachNode = function (node) {\n            node.height = currentHeight;\n            node.targetLinks.forEach(function (link) {\n                next.add(link.source);\n            });\n        };\n        while (current.size) {\n            current.forEach(eachNode);\n            currentHeight++;\n            if (currentHeight > nodesLength) {\n                return true;\n            }\n            current = next;\n            next = new Set;\n        }\n        return false;\n    },\n\n    calculateNodeColumns: function(nodes) {\n        var this$1$1 = this;\n\n        var maxDepth = max(nodes, function (d) { return d.depth; });\n        var columnWidth = (this.width - this.offsetX - this.nodeWidth) / maxDepth;\n        var columns = new Array(maxDepth + 1);\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            var layer = Math.max(0, Math.min(maxDepth, calcLayer(node, maxDepth)));\n            node.x0 = this$1$1.offsetX + layer * columnWidth;\n            node.x1 = node.x0 + this$1$1.nodeWidth;\n            node.layer = layer;\n            columns[layer] = columns[layer] || [];\n            columns[layer].push(node);\n        }\n\n        return columns;\n    },\n\n    calculateNodeBreadths: function(columns) {\n        var this$1$1 = this;\n\n        var kSize = min(columns, function (c) { return (this$1$1.height - this$1$1.offsetY - (c.length - 1) * this$1$1.nodePadding) / sum(c, value); });\n\n        columns.forEach(function (nodes) {\n            var y = this$1$1.offsetY;\n            nodes.forEach(function (node) {\n                node.y0 = y;\n                node.y1 = y + node.value * kSize;\n                y = node.y1 + this$1$1.nodePadding;\n                node.sourceLinks.forEach(function (link) {\n                    link.width = link.value * kSize;\n                });\n            });\n            y = (this$1$1.height - y + this$1$1.nodePadding) / (nodes.length + 1);\n            nodes.forEach(function (node, i) {\n                node.y0 += y * (i + 1);\n                node.y1 += y * (i + 1);\n            });\n        });\n\n        if (this.autoLayout !== false) {\n            var loops = this.loops !== undefined ? this.loops : columns.length - 1;\n            var targetColumnIndex = this.targetColumnIndex || 1;\n\n            for (var i = 0; i < loops; i++) {\n                if (!this$1$1.reverse) {\n                    this$1$1.uncurlLinksToLeft(columns, targetColumnIndex);\n                    this$1$1.uncurlLinksToRight(columns, targetColumnIndex);\n                } else {\n                    this$1$1.uncurlLinksToRight(columns, targetColumnIndex);\n                    this$1$1.uncurlLinksToLeft(columns, targetColumnIndex);\n                }\n            }\n        }\n\n        columns.forEach(sortLinks);\n    },\n\n    applyNodesOffset: function(nodes) {\n        nodes.forEach(function (node) {\n            var offsetX = (node.offset ? node.offset.left : 0) || 0;\n            var offsetY = (node.offset ? node.offset.top : 0) || 0;\n            node.x0 += offsetX;\n            node.x1 += offsetX;\n            node.y0 += offsetY;\n            node.y1 += offsetY;\n        });\n    },\n\n    calculateLinkBreadths: function(nodes) {\n        nodes.forEach(function (node) {\n            var sourceLinks = node.sourceLinks;\n            var targetLinks = node.targetLinks;\n            var y = node.y0;\n            var y1 = y;\n            sourceLinks.forEach(function (link) {\n                link.x0 = link.source.x1;\n                link.y0 = y + link.width / 2;\n                y += link.width;\n            });\n            targetLinks.forEach(function (link) {\n                link.x1 = link.target.x0;\n                link.y1 = y1 + link.width / 2;\n                y1 += link.width;\n            });\n        });\n    },\n\n    uncurlLinksToRight: function(columns, targetColumnIndex) {\n        var this$1$1 = this;\n\n        var n = columns.length;\n        for (var i = targetColumnIndex; i < n; i++) {\n            var column = columns[i];\n            column.forEach(function (target) {\n                var y = 0;\n                var sum = 0;\n                target.targetLinks.forEach(function (link) {\n                    var kValue = link.value * (target.layer - link.source.layer);\n                    y += this$1$1.targetTopPos(link.source, target) * kValue;\n                    sum += kValue;\n                });\n\n                var dy = y === 0 ? 0 : (y / sum - target.y0);\n                target.y0 += dy;\n                target.y1 += dy;\n                sortLinks([target]);\n            });\n            column.sort(sortAsc);\n            this$1$1.arrangeNodesVertically(column);\n        }\n    },\n\n    uncurlLinksToLeft: function(columns, targetColumnIndex) {\n        var this$1$1 = this;\n\n        var l = columns.length;\n        var startIndex = l - 1 - targetColumnIndex;\n        for (var i = startIndex; i >= 0; i--) {\n            var column = columns[i];\n            var loop = function ( j ) {\n                var source = column[j];\n                var y = 0;\n                var sum = 0;\n                source.sourceLinks.forEach(function (link) {\n                    var kValue = link.value * (link.target.layer - source.layer);\n                    y += this$1$1.sourceTopPos(source, link.target) * kValue;\n                    sum += kValue;\n                });\n                var dy = y === 0 ? 0 : (y / sum - source.y0);\n                source.y0 += dy;\n                source.y1 += dy;\n                sortLinks([source]);\n            };\n\n            for (var j = 0; j < column.length; j++) loop( j );\n\n            column.sort(sortAsc);\n            this$1$1.arrangeNodesVertically(column);\n        }\n    },\n\n    arrangeNodesVertically: function(nodes) {\n        var startIndex = 0;\n        var endIndex = nodes.length - 1;\n\n        this.arrangeUp(nodes, this.height, endIndex);\n        this.arrangeDown(nodes, this.offsetY, startIndex);\n    },\n\n    arrangeDown: function(nodes, yPos, index) {\n        var this$1$1 = this;\n\n        var currentY = yPos;\n\n        for (var i = index; i < nodes.length; i++) {\n            var node = nodes[i];\n            var dy = Math.max(0, currentY - node.y0);\n            node.y0 += dy;\n            node.y1 += dy;\n            currentY = node.y1 + this$1$1.nodePadding;\n        }\n    },\n\n    arrangeUp: function(nodes, yPos, index) {\n        var this$1$1 = this;\n\n        var currentY = yPos;\n        for (var i = index; i >= 0; --i) {\n            var node = nodes[i];\n            var dy = Math.max(0, node.y1 - currentY);\n            node.y0 -= dy;\n            node.y1 -= dy;\n            currentY = node.y0 - this$1$1.nodePadding;\n        }\n    },\n\n    sourceTopPos: function(source, target) {\n        var this$1$1 = this;\n\n        var y = target.y0 - ((target.targetLinks.length - 1) * this.nodePadding) / 2;\n        for (var i = 0; i < target.targetLinks.length; i++) {\n            var link = target.targetLinks[i];\n            if (link.source === source) {\n                break;\n            }\n            y += link.width + this$1$1.nodePadding;\n        }\n        for (var i$1 = 0; i$1 < source.sourceLinks.length; i$1++) {\n            var link$1 = source.sourceLinks[i$1];\n            if (link$1.target === target) {\n                break;\n            }\n            y -= link$1.width;\n        }\n        return y;\n    },\n\n    targetTopPos: function(source, target) {\n        var this$1$1 = this;\n\n        var y = source.y0 - ((source.sourceLinks.length - 1) * this.nodePadding) / 2;\n        for (var i = 0; i < source.sourceLinks.length; i++) {\n            var link = source.sourceLinks[i];\n            if (link.target === target) {\n                break;\n            }\n            y += link.width + this$1$1.nodePadding;\n        }\n        for (var i$1 = 0; i$1 < target.targetLinks.length; i$1++) {\n            var link$1 = target.targetLinks[i$1];\n            if (link$1.source === source) {\n                break;\n            }\n            y -= link$1.width;\n        }\n        return y;\n    }\n});\n\nvar calculateSankey = function (options) { return new Sankey$1(options).calculate(); };\n\nvar crossesValue = function (links) {\n    var value = 0;\n    var linksLength = links.length;\n\n    for (var i = 0; i < linksLength; i++) {\n        var link = links[i];\n\n        for (var lNext = i + 1; lNext < linksLength; lNext++) {\n            var nextLink = links[lNext];\n\n            if (intersect(link, nextLink)) {\n                value += Math.min(link.value, nextLink.value);\n            }\n        }\n    }\n\n    return value;\n};\n\nfunction rotationDirection(p1x, p1y, p2x, p2y, p3x, p3y) {\n    var expression1 = (p3y - p1y) * (p2x - p1x);\n    var expression2 = (p2y - p1y) * (p3x - p1x);\n\n    if (expression1 > expression2) {\n        return 1;\n    } else if (expression1 === expression2) {\n        return 0;\n    }\n\n    return -1;\n}\n\nfunction intersect(link1, link2) {\n    var f1 = rotationDirection(link1.x0, link1.y0, link1.x1, link1.y1, link2.x1, link2.y1);\n    var f2 = rotationDirection(link1.x0, link1.y0, link1.x1, link1.y1, link2.x0, link2.y0);\n    var f3 = rotationDirection(link1.x0, link1.y0, link2.x0, link2.y0, link2.x1, link2.y1);\n    var f4 = rotationDirection(link1.x1, link1.y1, link2.x0, link2.y0, link2.x1, link2.y1);\n\n    return f1 !== f2 && f3 !== f4;\n}\n\nvar SankeyElement = (function (Class$$1) {\n    function SankeyElement(options) {\n        Class$$1.call(this);\n        this.options = deepExtend({}, this.options, options);\n        this.createVisual();\n    }\n\n    if ( Class$$1 ) SankeyElement.__proto__ = Class$$1;\n    SankeyElement.prototype = Object.create( Class$$1 && Class$$1.prototype );\n    SankeyElement.prototype.constructor = SankeyElement;\n\n    SankeyElement.prototype.createVisual = function createVisual () {\n        this.visual = this.createElement();\n    };\n\n    SankeyElement.prototype.exportVisual = function exportVisual () {\n        return this.visual;\n    };\n\n    SankeyElement.prototype.createElement = function createElement () {\n        var this$1$1 = this;\n\n        var customVisual = this.options.visual;\n        var visual;\n\n        if (customVisual) {\n            visual = customVisual({\n                sender: this.getSender(),\n                options: this.visualOptions(),\n                createVisual: function () { return this$1$1.getElement(); }\n            });\n        } else {\n            visual = this.getElement();\n        }\n\n        return visual;\n    };\n\n    SankeyElement.prototype.getSender = function getSender () {\n        return this;\n    };\n\n    return SankeyElement;\n}(dataviz.Class));\n\nvar Node = (function (SankeyElement$$1) {\n    function Node () {\n        SankeyElement$$1.apply(this, arguments);\n    }\n\n    if ( SankeyElement$$1 ) Node.__proto__ = SankeyElement$$1;\n    Node.prototype = Object.create( SankeyElement$$1 && SankeyElement$$1.prototype );\n    Node.prototype.constructor = Node;\n\n    Node.prototype.getElement = function getElement () {\n        var options = this.options;\n        var node = options.node;\n        var rect = new geometry.Rect([node.x0, node.y0], [node.x1 - node.x0, node.y1 - node.y0]);\n\n        return drawing.Path.fromRect(rect, this.visualOptions());\n    };\n\n    Node.prototype.visualOptions = function visualOptions () {\n        var options = deepExtend({}, this.options, this.options.node);\n\n        return {\n            fill: {\n                color: options.color,\n                opacity: options.opacity\n            },\n            stroke: { width: 0 },\n            className: 'k-sankey-node',\n            role: 'graphics-symbol',\n            ariaRoleDescription: 'Node',\n            ariaLabel: options.node.label.text\n        };\n    };\n\n    return Node;\n}(SankeyElement));\n\nvar nodeColor = function (node, nodeColors, index) { return node.color || nodeColors[index % nodeColors.length]; };\n\nvar resolveNodeOptions = function (node, options, nodeColors, index) {\n    var nodeOptions = deepExtend({}, options, options.node);\n    return deepExtend({},\n        { color: nodeColor(node, nodeColors, index) },\n        nodeOptions,\n        { node: node },\n        {\n            visual: node.visual,\n            opacity: node.opacity,\n            offset: node.offset,\n            color: node.color\n        }\n    );\n};\n\nvar ref = drawing.util;\nvar defined = ref.defined;\n\nvar Link = (function (SankeyElement$$1) {\n    function Link () {\n        SankeyElement$$1.apply(this, arguments);\n    }\n\n    if ( SankeyElement$$1 ) Link.__proto__ = SankeyElement$$1;\n    Link.prototype = Object.create( SankeyElement$$1 && SankeyElement$$1.prototype );\n    Link.prototype.constructor = Link;\n\n    Link.prototype.getElement = function getElement () {\n        var link = this.options.link;\n        var x0 = link.x0;\n        var x1 = link.x1;\n        var y0 = link.y0;\n        var y1 = link.y1;\n        var xC = (x0 + x1) / 2;\n\n        return new drawing.Path(this.visualOptions())\n            .moveTo(x0, y0).curveTo([xC, y0], [xC, y1], [x1, y1]);\n    };\n\n    Link.prototype.visualOptions = function visualOptions () {\n        var options = this.options;\n        var link = this.options.link;\n        return {\n            stroke: {\n                width: options.link.width,\n                color: link.color || options.color,\n                opacity: defined(link.opacity) ? link.opacity : options.opacity\n            }\n        };\n    };\n\n    return Link;\n}(SankeyElement));\n\nvar resolveLinkOptions = function (link, options, sourceNode, targetNode) {\n    var linkOptions = deepExtend({},\n        options,\n        {\n            link: link,\n            opacity: link.opacity,\n            color: link.color,\n            colorType: link.colorType,\n            visual: link.visual,\n            highlight: link.highlight\n        }\n    );\n\n    if (linkOptions.colorType === 'source') {\n        linkOptions.color = sourceNode.options.fill.color;\n    } else if (linkOptions.colorType === 'target') {\n        linkOptions.color = targetNode.options.fill.color;\n    }\n\n    return linkOptions;\n};\n\nvar INSIDE = 'inside';\nvar BEFORE = 'before';\nvar AFTER = 'after';\n\nvar Label = (function (SankeyElement$$1) {\n    function Label () {\n        SankeyElement$$1.apply(this, arguments);\n    }\n\n    if ( SankeyElement$$1 ) Label.__proto__ = SankeyElement$$1;\n    Label.prototype = Object.create( SankeyElement$$1 && SankeyElement$$1.prototype );\n    Label.prototype.constructor = Label;\n\n    Label.prototype.getElement = function getElement () {\n        var options = deepExtend({}, this.options, this.options.node.label);\n        var node = options.node;\n        var totalWidth = options.totalWidth;\n        var position = options.position;\n        var text = options.text;\n        var offset = options.offset;\n\n        if (!options.visible || !text) {\n            return null;\n        }\n\n        var nodeBox = new Box(node.x0, node.y0, node.x1, node.y1);\n        var visualOptions = this.visualOptions();\n        var textbox = new dataviz.TextBox(text, visualOptions);\n        textbox.reflow(new Box());\n        var textSizeBox = textbox.box;\n\n        var goesOutside = node.x1 + textSizeBox.width() > totalWidth;\n        var textY = nodeBox.center().y - (textSizeBox.height() / 2);\n        var side = position === BEFORE || (position === INSIDE && goesOutside) ? BEFORE : AFTER;\n        var textOrigin = [side === BEFORE ? node.x0 - textSizeBox.width() : node.x1, textY];\n\n        var textRect = new Box(textOrigin[0], textOrigin[1], textOrigin[0] + textSizeBox.width(), textOrigin[1] + textSizeBox.height());\n        textRect.translate(offset.left || 0, offset.top || 0);\n        textbox.reflow(textRect);\n\n        textbox.renderVisual();\n\n        return textbox.visual;\n    };\n\n    Label.prototype.visualOptions = function visualOptions () {\n        var options = deepExtend({}, this.options, this.options.node.label);\n        return {\n            color: options.color,\n            font: options.font,\n            border: options.border,\n            margin: options.margin,\n            padding: options.padding,\n            align: options.align,\n            paintOrder: options.paintOrder,\n            stroke: options.stroke,\n        };\n    };\n\n    return Label;\n}(SankeyElement));\n\nsetDefaultOptions(Label, {\n    position: INSIDE, // inside, before, after\n});\n\nvar resolveLabelOptions = function (node, options, totalWidth) { return deepExtend({},\n    options,\n    {\n        node: node,\n        totalWidth: totalWidth,\n        visual: node.label.visual,\n        visible: node.label.visible,\n        margin: node.label.margin,\n        padding: node.label.padding,\n        border: node.label.border,\n        align: node.label.align,\n        offset: node.label.offset\n    }\n); };\n\nvar Title$1 = (function (SankeyElement$$1) {\n    function Title$$1 () {\n        SankeyElement$$1.apply(this, arguments);\n    }\n\n    if ( SankeyElement$$1 ) Title$$1.__proto__ = SankeyElement$$1;\n    Title$$1.prototype = Object.create( SankeyElement$$1 && SankeyElement$$1.prototype );\n    Title$$1.prototype.constructor = Title$$1;\n\n    Title$$1.prototype.getElement = function getElement () {\n        var options = this.options;\n        var drawingRect = options.drawingRect;\n        var text = options.text;\n\n        if (options.visible === false || !text) {\n            return null;\n        }\n\n        var title = dataviz.Title.buildTitle(text, options);\n\n        title.reflow(drawingRect);\n\n        title.renderVisual();\n        return title.visual;\n    };\n\n    Title$$1.prototype.createElement = function createElement () {\n        return this.getElement();\n    };\n\n    return Title$$1;\n}(SankeyElement));\n\nsetDefaultOptions(Title$1, {\n    align: constants.CENTER, // 'left', 'right', 'center'\n    border: {\n        width: 0\n    },\n    margin: dataviz.getSpacing(5),\n    padding: dataviz.getSpacing(5)\n});\n\nvar AREA = \"area\";\n\nvar sortData = function (a, b) {\n    if (a.node.x0 - b.node.x0 !== 0) {\n        return a.node.x0 - b.node.x0;\n    }\n    return a.node.y0 - b.node.y0;\n};\n\nvar Legend = (function (SankeyElement$$1) {\n    function Legend () {\n        SankeyElement$$1.apply(this, arguments);\n    }\n\n    if ( SankeyElement$$1 ) Legend.__proto__ = SankeyElement$$1;\n    Legend.prototype = Object.create( SankeyElement$$1 && SankeyElement$$1.prototype );\n    Legend.prototype.constructor = Legend;\n\n    Legend.prototype.getElement = function getElement () {\n        var options = this.options;\n        var drawingRect = options.drawingRect;\n        var nodes = options.nodes; if (nodes === void 0) { nodes = []; }\n        var item = options.item;\n\n        if (options.visible === false || !nodes.length) {\n            return null;\n        }\n\n        var data = nodes.map(function (node) { return ({\n            text: (node.label && node.label.text) || '',\n            area: {\n                background: item.areaBackground !== undefined ? item.areaBackground : node.color,\n                opacity: item.areaOpacity !== undefined ? item.areaOpacity : node.opacity\n            },\n            node: node,\n        }); });\n\n        data.sort(sortData);\n\n        var legend = new ChartLegend($.extend({}, options, {data: data}));\n        legend.reflow(drawingRect);\n\n        legend.renderVisual();\n        return legend.visual;\n    };\n\n    Legend.prototype.createElement = function createElement () {\n        return this.getElement();\n    };\n\n    return Legend;\n}(SankeyElement));\n\nsetDefaultOptions(Legend, {\n    markers: { visible: false },\n    item: {\n        type: AREA,\n        cursor: constants.POINTER,\n        opacity: 1\n    },\n    position: constants.BOTTOM,\n    align: constants.CENTER,\n    border: {\n        width: 0\n    }\n});\n\nvar LINK = 'link';\nvar NODE = 'node';\n\nvar Sankey = (function (Observable$$1) {\n    function Sankey(element, options, theme) {\n        Observable$$1.call(this);\n\n        this._initTheme(theme);\n        this._setOptions(options);\n        this._initElement(element);\n        this._initSurface();\n\n        if (options && options.data) {\n            this._redraw();\n            this._initResizeObserver();\n        }\n    }\n\n    if ( Observable$$1 ) Sankey.__proto__ = Observable$$1;\n    Sankey.prototype = Object.create( Observable$$1 && Observable$$1.prototype );\n    Sankey.prototype.constructor = Sankey;\n\n    Sankey.prototype.destroy = function destroy () {\n        this.unbind();\n        this._destroySurface();\n        this._destroyResizeObserver();\n    };\n\n    Sankey.prototype._initElement = function _initElement (element) {\n        this.element = element;\n        dataviz.addClass(element, [ \"k-chart\", \"k-sankey\" ]);\n        element.setAttribute('role', 'graphics-document');\n        element.tabIndex = element.getAttribute(\"tabindex\") || 0;\n\n        var ref = this.options;\n        var title = ref.title;\n\n        if (title.text) {\n            element.setAttribute('aria-label', title.text);\n        }\n\n        if (title.description) {\n            element.setAttribute(\"aria-roledescription\", title.description);\n        }\n    };\n\n    Sankey.prototype._initSurface = function _initSurface () {\n        if (!this.surface) {\n            this._destroySurface();\n            this._initSurfaceElement();\n            this.surface = this._createSurface();\n        }\n    };\n\n    Sankey.prototype._initResizeObserver = function _initResizeObserver () {\n        var this$1$1 = this;\n\n        var observer = new ResizeObserver(function (entries) {\n            entries.forEach(function (entry) {\n                var ref = entry.contentRect;\n                var width = ref.width;\n                var height = ref.height;\n                if (entry.target !== this$1$1.element ||\n                    (this$1$1.size && this$1$1.size.width === width && this$1$1.size.height === height)) {\n                    return;\n                }\n                this$1$1.size = { width: width, height: height };\n                this$1$1.surface.setSize(this$1$1.size);\n                this$1$1.resize = true;\n                this$1$1._redraw();\n            });\n        });\n        this._resizeObserver = observer;\n        observer.observe(this.element);\n    };\n\n    Sankey.prototype._createSurface = function _createSurface () {\n        return drawing.Surface.create(this.surfaceElement, {\n            mouseenter: this._mouseenter.bind(this),\n            mouseleave: this._mouseleave.bind(this),\n            mousemove: this._mousemove.bind(this),\n            click: this._click.bind(this)\n        });\n    };\n\n    Sankey.prototype._initTheme = function _initTheme (theme) {\n        var currentTheme = theme || this.theme || {};\n        this.theme = currentTheme;\n        this.options = deepExtend({}, currentTheme, this.options);\n    };\n\n    Sankey.prototype.setLinksOpacity = function setLinksOpacity (opacity) {\n        var this$1$1 = this;\n\n        this.linksVisuals.forEach(function (link) {\n            this$1$1.setOpacity(link, opacity, link.linkOptions.opacity);\n        });\n    };\n\n    Sankey.prototype.setLinksInactivityOpacity = function setLinksInactivityOpacity (inactiveOpacity) {\n        var this$1$1 = this;\n\n        this.linksVisuals.forEach(function (link) {\n            this$1$1.setOpacity(link, inactiveOpacity, link.linkOptions.highlight.inactiveOpacity);\n        });\n    };\n\n    Sankey.prototype.setOpacity = function setOpacity (link, opacity, linkValue) {\n        link.options.set('stroke', $.extend({}, link.options.stroke,\n            {opacity: defined(linkValue) ? linkValue : opacity}));\n    };\n\n    Sankey.prototype.trigger = function trigger (name, ev) {\n        var event = $.extend({}, ev,\n            {type: name,\n            targetType: ev.element.type,\n            dataItem: ev.element.dataItem});\n\n        return Observable$$1.prototype.trigger.call(this, name, event);\n    };\n\n    Sankey.prototype._mouseenter = function _mouseenter (ev) {\n        var element = ev.element;\n        var isLink = element.type === LINK;\n        var isNode = element.type === NODE;\n        var isLegendItem = Boolean(element.chartElement && element.chartElement.options.node);\n\n        if ((isLink && this.trigger('linkEnter', ev)) ||\n            (isNode && this.trigger('nodeEnter', ev))) {\n            return;\n        }\n\n        var ref = this.options.links;\n        var highlight = ref.highlight;\n        if (isLink) {\n            this.setLinksInactivityOpacity(highlight.inactiveOpacity);\n            this.setOpacity(element, highlight.opacity, element.linkOptions.highlight.opacity);\n        } else if (isNode) {\n            this.highlightLinks(element, highlight);\n        } else if (isLegendItem) {\n            var nodeVisual = this.nodesVisuals.get(element.chartElement.options.node.id);\n            this.highlightLinks(nodeVisual, highlight);\n        }\n    };\n\n    Sankey.prototype._mouseleave = function _mouseleave (ev) {\n        var this$1$1 = this;\n\n        var element = ev.element;\n        var isLink = element.type === LINK;\n        var isNode = element.type === NODE;\n        var isLegendItem = Boolean(element.chartElement && element.chartElement.options.node);\n        var target = ev.originalEvent.relatedTarget;\n\n        if (isLink && target && target.nodeName === 'text') {\n            return;\n        }\n\n        if (isLink || isNode) {\n            if (this.tooltipTimeOut) {\n                clearTimeout(this.tooltipTimeOut);\n                this.tooltipTimeOut = null;\n            }\n            this.tooltipShown = false;\n            this.trigger('tooltipHide', ev);\n        }\n\n        if ((isLink && this.trigger('linkLeave', ev)) ||\n            (isNode && this.trigger('nodeLeave', ev))) {\n            return;\n        }\n\n        if (isLink || isNode || isLegendItem) {\n            this.linksVisuals.forEach(function (link) {\n                this$1$1.setOpacity(link, this$1$1.options.links.opacity, link.linkOptions.opacity);\n            });\n        }\n    };\n\n    Sankey.prototype._mousemove = function _mousemove (ev) {\n        var this$1$1 = this;\n\n        var ref = this.options.tooltip;\n        var followPointer = ref.followPointer;\n        var delay = ref.delay;\n        var element = ev.element;\n        var tooltipElType = element.type;\n\n        if ((tooltipElType !== LINK && tooltipElType !== NODE) || (this.tooltipShown && !followPointer)) {\n            return;\n        }\n\n        var mouseEvent = ev.originalEvent;\n        var rect = this.element.getBoundingClientRect();\n        var isLeft = mouseEvent.clientX - rect.left < rect.width / 2;\n        var isTop = mouseEvent.clientY - rect.top < rect.height / 2;\n\n        ev.tooltipData = {\n            popupOffset: {\n                left: mouseEvent.pageX,\n                top: mouseEvent.pageY\n            },\n            popupAlign: {\n                horizontal: isLeft ? 'left' : 'right',\n                vertical: isTop ? 'top' : 'bottom'\n            }\n        };\n\n        if (tooltipElType === NODE) {\n            var ref$1 = element.dataItem;\n            var sourceLinks = ref$1.sourceLinks;\n            var targetLinks = ref$1.targetLinks;\n            var links = targetLinks.length ? targetLinks : sourceLinks;\n            ev.nodeValue = links.reduce(function (acc, link) { return acc + link.value; }, 0);\n        }\n\n        if (this.tooltipTimeOut) {\n            clearTimeout(this.tooltipTimeOut);\n            this.tooltipTimeOut = null;\n        }\n\n        var nextDelay = followPointer && this.tooltipShown ? 0 : delay;\n\n        this.tooltipTimeOut = setTimeout(function () {\n            this$1$1.trigger('tooltipShow', ev);\n            this$1$1.tooltipShown = true;\n            this$1$1.tooltipTimeOut = null;\n        }, nextDelay);\n    };\n\n    Sankey.prototype._click = function _click (ev) {\n        var element = ev.element;\n        var isLink = element.type === LINK;\n        var isNode = element.type === NODE;\n\n        if (isNode) {\n            this.trigger('nodeClick', ev);\n        } else if (isLink) {\n            this.trigger('linkClick', ev);\n        }\n    };\n\n    Sankey.prototype.highlightLinks = function highlightLinks (node, highlight) {\n        var this$1$1 = this;\n\n        if (node) {\n            this.setLinksInactivityOpacity(highlight.inactiveOpacity);\n            node.links.forEach(function (link) {\n                this$1$1.setOpacity(link, highlight.opacity, link.linkOptions.highlight.opacity);\n            });\n        }\n    };\n\n    Sankey.prototype._destroySurface = function _destroySurface () {\n        if (this.surface) {\n            this.surface.destroy();\n            this.surface = null;\n            this._destroySurfaceElement();\n        }\n    };\n\n    Sankey.prototype._destroyResizeObserver = function _destroyResizeObserver () {\n        if (this._resizeObserver) {\n            this._resizeObserver.disconnect();\n            this._resizeObserver = null;\n        }\n    };\n\n    Sankey.prototype._initSurfaceElement = function _initSurfaceElement () {\n        if (!this.surfaceElement) {\n            this.surfaceElement = document.createElement('div');\n            this.element.appendChild(this.surfaceElement);\n        }\n    };\n\n    Sankey.prototype._destroySurfaceElement = function _destroySurfaceElement () {\n        if (this.surfaceElement && this.surfaceElement.parentNode) {\n            this.surfaceElement.parentNode.removeChild(this.surfaceElement);\n            this.surfaceElement = null;\n        }\n    };\n\n    Sankey.prototype.setOptions = function setOptions (options, theme) {\n        this._setOptions(options);\n        this._initTheme(theme);\n        this._initSurface();\n        this._redraw();\n    };\n\n    Sankey.prototype._redraw = function _redraw () {\n        this.surface.clear();\n\n        var ref = this._getSize();\n        var width = ref.width;\n        var height = ref.height;\n        this.size = { width: width, height: height };\n        this.surface.setSize(this.size);\n\n        this.createVisual();\n\n        this.surface.draw(this.visual);\n    };\n\n    Sankey.prototype._getSize = function _getSize () {\n        return this.element.getBoundingClientRect();\n    };\n\n    Sankey.prototype.createVisual = function createVisual () {\n        this.visual = this._render();\n    };\n\n    Sankey.prototype.titleBox = function titleBox (title, drawingRect) {\n        if (!title || title.visible === false || !title.text) {\n            return null;\n        }\n\n        var titleElement = new Title$1($.extend({}, {drawingRect: drawingRect}, title));\n        var titleVisual = titleElement.exportVisual();\n        return titleVisual.chartElement.box;\n    };\n\n    Sankey.prototype.legendBox = function legendBox (options, nodes, drawingRect) {\n        if (!options || options.visible === false) {\n            return null;\n        }\n\n        var legend = new Legend($.extend({}, {nodes: nodes}, options, {drawingRect: drawingRect}));\n        var legendVisual = legend.exportVisual();\n\n        return legendVisual.chartElement.box;\n    };\n\n    Sankey.prototype.calculateSankey = function calculateSankey$1 (calcOptions, sankeyOptions) {\n        var title = sankeyOptions.title;\n        var legend = sankeyOptions.legend;\n        var data = sankeyOptions.data;\n        var nodes = sankeyOptions.nodes;\n        var labels = sankeyOptions.labels;\n        var nodeColors = sankeyOptions.nodeColors;\n        var disableAutoLayout = sankeyOptions.disableAutoLayout;\n        var autoLayout = !disableAutoLayout;\n\n        var sankeyBox = new Box(0, 0, calcOptions.width, calcOptions.height);\n        var titleBox = this.titleBox(title, sankeyBox);\n\n        var legendArea = sankeyBox.clone();\n\n        if (titleBox) {\n            var titleHeight = titleBox.height();\n            if (title.position === constants.TOP) {\n                sankeyBox.unpad({ top: titleHeight });\n                legendArea = new Box(0, titleHeight, calcOptions.width, calcOptions.height);\n            } else {\n                sankeyBox.shrink(0, titleHeight);\n                legendArea = new Box(0, 0, calcOptions.width, calcOptions.height - titleHeight);\n            }\n        }\n\n        var legendBox = this.legendBox(legend, data.nodes, legendArea);\n        var legendPosition = (legend && legend.position) || Legend.prototype.options.position;\n\n        if (legendBox) {\n            if (legendPosition === constants.LEFT) {\n                sankeyBox.unpad({ left: legendBox.width() });\n            }\n\n            if (legendPosition === constants.RIGHT) {\n                sankeyBox.shrink(legendBox.width(), 0);\n            }\n\n            if (legendPosition === constants.TOP) {\n                sankeyBox.unpad({ top: legendBox.height() });\n            }\n\n            if (legendPosition === constants.BOTTOM) {\n                sankeyBox.shrink(0, legendBox.height());\n            }\n        }\n\n        var ref = calculateSankey($.extend({}, calcOptions, {offsetX: 0, offsetY: 0, width: sankeyBox.width(), height: sankeyBox.height()}));\n        var calculatedNodes = ref.nodes;\n        var circularLinks = ref.circularLinks;\n        if (circularLinks) {\n            console.warn('Circular links detected. Kendo Sankey diagram does not support circular links.');\n            return { sankey: { nodes: [], links: [], circularLinks: circularLinks }, legendBox: legendBox, titleBox: titleBox };\n        }\n\n        var box = new Box();\n\n        calculatedNodes.forEach(function (nodeEl, i) {\n            var nodeOps = resolveNodeOptions(nodeEl, nodes, nodeColors, i);\n            var nodeInstance = new Node(nodeOps);\n            box.wrap(dataviz.rectToBox(nodeInstance.exportVisual().rawBBox()));\n\n            var labelInstance = new Label(resolveLabelOptions(nodeEl, labels, sankeyBox.width()));\n            var labelVisual = labelInstance.exportVisual();\n            if (labelVisual) {\n                box.wrap(dataviz.rectToBox(labelVisual.rawBBox()));\n            }\n        });\n\n        var offsetX = sankeyBox.x1;\n        var offsetY = sankeyBox.y1;\n\n        var width = sankeyBox.width() + offsetX;\n        var height = sankeyBox.height() + offsetY;\n\n        width -= box.x2 > sankeyBox.width() ? box.x2 - sankeyBox.width() : 0;\n        height -= box.y2 > sankeyBox.height() ? box.y2 - sankeyBox.height() : 0;\n\n        offsetX += box.x1 < 0 ? -box.x1 : 0;\n        offsetY += box.y1 < 0 ? -box.y1 : 0;\n\n        if (autoLayout === false) {\n            return {\n                sankey: calculateSankey($.extend({}, calcOptions, {offsetX: offsetX, offsetY: offsetY, width: width, height: height, autoLayout: false})),\n                legendBox: legendBox,\n                titleBox: titleBox\n            };\n        }\n\n        if (this.resize && autoLayout && this.permutation) {\n            this.resize = false;\n            return {\n                sankey: calculateSankey($.extend({}, calcOptions, {offsetX: offsetX, offsetY: offsetY, width: width, height: height}, this.permutation)),\n                legendBox: legendBox,\n                titleBox: titleBox\n            };\n        }\n\n        var startColumn = 1;\n        var loops = 2;\n        var columnsLength = calculateSankey($.extend({}, calcOptions, {offsetX: offsetX, offsetY: offsetY, width: width, height: height, autoLayout: false})).columns.length;\n        var results = [];\n\n        var permutation = function (targetColumnIndex, reverse) {\n            var currPerm = calculateSankey($.extend({}, calcOptions, {offsetX: offsetX, offsetY: offsetY, width: width, height: height, loops: loops, targetColumnIndex: targetColumnIndex, reverse: reverse}));\n            var crosses = crossesValue(currPerm.links);\n            results.push({\n                crosses: crosses,\n                reverse: reverse,\n                targetColumnIndex: targetColumnIndex\n            });\n            return crosses === 0;\n        };\n\n        for (var index = startColumn; index <= columnsLength - 1; index++) {\n            if (permutation(index, false) || permutation(index, true)) {\n                break;\n            }\n        }\n\n        var minCrosses = Math.min.apply(null, results.map(function (r) { return r.crosses; }));\n        var bestResult = results.find(function (r) { return r.crosses === minCrosses; });\n        this.permutation = { targetColumnIndex: bestResult.targetColumnIndex, reverse: bestResult.reverse };\n        var result = calculateSankey($.extend({}, calcOptions, {offsetX: offsetX, offsetY: offsetY, width: width, height: height}, this.permutation));\n\n        return {\n            sankey: result,\n            legendBox: legendBox,\n            titleBox: titleBox\n        };\n    };\n\n    Sankey.prototype._render = function _render (options, context) {\n        var sankeyOptions = options || this.options;\n        var sankeyContext = context || this;\n\n        var data = sankeyOptions.data;\n        var labelOptions = sankeyOptions.labels;\n        var nodesOptions = sankeyOptions.nodes;\n        var linkOptions = sankeyOptions.links;\n        var nodeColors = sankeyOptions.nodeColors;\n        var title = sankeyOptions.title;\n        var legend = sankeyOptions.legend;\n        var ref = sankeyContext.size;\n        var width = ref.width;\n        var height = ref.height;\n\n        var calcOptions = $.extend({}, data, {width: width, height: height, nodesOptions: nodesOptions, title: title, legend: legend});\n        var ref$1 = this.calculateSankey(calcOptions, sankeyOptions);\n        var sankey = ref$1.sankey;\n        var titleBox = ref$1.titleBox;\n        var legendBox = ref$1.legendBox;\n        var nodes = sankey.nodes;\n        var links = sankey.links;\n\n        var visual = new drawing.Group({\n            clip: drawing.Path.fromRect(new geometry.Rect([0, 0], [width, height]))\n        });\n\n        if (titleBox) {\n            var titleElement = new Title$1($.extend({}, title, {drawingRect: titleBox}));\n            var titleVisual = titleElement.exportVisual();\n            visual.append(titleVisual);\n        }\n\n        if (sankey.circularLinks) {\n            return visual;\n        }\n\n        var visualNodes = new Map();\n        sankeyContext.nodesVisuals = visualNodes;\n\n        nodes.forEach(function (node, i) {\n            var nodeOps = resolveNodeOptions(node, nodesOptions, nodeColors, i);\n\n            var nodeInstance = new Node(nodeOps);\n            var nodeVisual = nodeInstance.exportVisual();\n            nodeVisual.links = [];\n            nodeVisual.type = NODE;\n\n            node.color = nodeOps.color;\n            node.opacity = nodeOps.opacity;\n\n            nodeVisual.dataItem = $.extend({}, data.nodes[i],\n                {color: nodeOps.color,\n                opacity: nodeOps.opacity,\n                sourceLinks: node.sourceLinks.map(function (link) { return ({ sourceId: link.sourceId, targetId: link.targetId, value: link.value }); }),\n                targetLinks: node.targetLinks.map(function (link) { return ({ sourceId: link.sourceId, targetId: link.targetId, value: link.value }); })});\n            visualNodes.set(node.id, nodeVisual);\n\n            visual.append(nodeVisual);\n        });\n\n        var sortedLinks = links.slice().sort(function (a, b) { return b.value - a.value; });\n\n        var linksVisuals = [];\n        sankeyContext.linksVisuals = linksVisuals;\n\n        sortedLinks.forEach(function (link) {\n            var source = link.source;\n            var target = link.target;\n            var sourceNode = visualNodes.get(source.id);\n            var targetNode = visualNodes.get(target.id);\n            var linkOps = resolveLinkOptions(link, linkOptions, sourceNode, targetNode);\n            var linkInstance = new Link(linkOps);\n            var linkVisual = linkInstance.exportVisual();\n\n            linkVisual.type = LINK;\n            linkVisual.dataItem = {\n                source: $.extend({}, sourceNode.dataItem),\n                target: $.extend({}, targetNode.dataItem),\n                value: link.value\n            };\n            linkVisual.linkOptions = linkOps;\n            linksVisuals.push(linkVisual);\n\n            sourceNode.links.push(linkVisual);\n            targetNode.links.push(linkVisual);\n\n            visual.append(linkVisual);\n        });\n\n        var diagramWidth = nodes.reduce(function (acc, node) { return Math.max(acc, node.x1); }, 0);\n        nodes.forEach(function (node) {\n            var textOps = resolveLabelOptions(node, labelOptions, diagramWidth);\n            var labelInstance = new Label(textOps);\n            var labelVisual = labelInstance.exportVisual();\n\n            if (labelVisual) {\n                visual.append(labelVisual);\n            }\n        });\n\n        if (legendBox) {\n            var legendElement = new Legend($.extend({}, legend, {drawingRect: legendBox, nodes: nodes}));\n            var legendVisual = legendElement.exportVisual();\n            visual.append(legendVisual);\n        }\n\n        return visual;\n    };\n\n    Sankey.prototype.exportVisual = function exportVisual (exportOptions) {\n        var options = (exportOptions && exportOptions.options) ?\n            deepExtend({}, this.options, exportOptions.options) : this.options;\n\n        var context = {\n            size: {\n                width: defined(exportOptions && exportOptions.width) ? exportOptions.width : this.size.width,\n                height: defined(exportOptions && exportOptions.height) ? exportOptions.height : this.size.height\n            }\n        };\n\n        return this._render(options, context);\n    };\n\n    Sankey.prototype._setOptions = function _setOptions (options) {\n        this.options = deepExtend({}, this.options, options);\n    };\n\n    return Sankey;\n}(dataviz.Observable));\n\nsetDefaultOptions(Sankey, {\n    title: {\n        position: constants.TOP, // 'top', 'bottom'\n    },\n    labels: {\n        visible: true,\n        margin: {\n            left: 8,\n            right: 8\n        },\n        padding: 0,\n        border: {\n            width: 0\n        },\n        paintOrder: 'stroke',\n        stroke: {\n            lineJoin: \"round\",\n            width: 1\n        },\n        align: constants.LEFT,\n        offset: { left: 0, top: 0 }\n    },\n    nodes: {\n        width: 24,\n        padding: 16,\n        opacity: 1,\n        align: 'stretch', // 'left', 'right', 'stretch'\n        offset: { left: 0, top: 0 }\n    },\n    links: {\n        colorType: 'static', // 'source', 'target', 'static'\n        opacity: 0.4,\n        highlight: {\n            opacity: 0.8,\n            inactiveOpacity: 0.2\n        }\n    },\n    tooltip: {\n        followPointer: false,\n        delay: 200\n    }\n});\n\nvar createSankeyData = function (data, dimensions, measure) {\n    var nodes = new Set();\n    var links = new Map();\n    var linksMap = new Map();\n\n    data.forEach(function (row) {\n        dimensions.forEach(function (dimension) {\n            nodes.add(dimension.value(row));\n        });\n\n        for (var i = 0; i < dimensions.length - 1; i++) {\n            var source = dimensions[i].value(row);\n            var target = dimensions[i + 1].value(row);\n            var key = source + \"_\" + target;\n            var value = measure.value(row);\n            var existingValue = links.get(key);\n\n            if (existingValue !== undefined) {\n                links.set(key, existingValue + value);\n            } else {\n                links.set(key, value);\n                linksMap.set(key, { source: source, target: target });\n            }\n        }\n    });\n\n    var nodesId = new Map();\n    var nodesArray = Array.from(nodes).map(function (node, index) {\n        nodesId.set(node, index);\n        return { id: index, label: { text: String(node) } };\n    });\n\n    var linksArray = Array.from(links).map(function (ref) {\n        var key = ref[0];\n        var value = ref[1];\n\n        var ref$1 = linksMap.get(key);\n        var source = ref$1.source;\n        var target = ref$1.target;\n        return {\n            sourceId: nodesId.get(source),\n            targetId: nodesId.get(target),\n            value: value\n        };\n    });\n\n    return { nodes: nodesArray, links: linksArray };\n};\n\nkendo.deepExtend(kendo.dataviz, {\n    Sankey: Sankey,\n    createSankeyData: createSankeyData\n});\n\n})(window.kendo.jQuery);\n\n(function($) {\n    var kendo = window.kendo;\n    var Widget = kendo.ui.Widget;\n\n    var encode = kendo.htmlEncode;\n    var styleAttr = '__style';\n    var tooltipContentWrapStyle = `${styleAttr}=\"display: flex; align-items: center;\"`;\n    var space = 3;\n    var TootipText = (text) => `<span ${styleAttr}=\"margin: 0 ${space}px\">${text}</span>`;\n    var Square = (color) => `<div ${styleAttr}=\"width: 15px; height: 15px; background-color: ${color}; display: inline-flex; margin-left: ${space}px\"></div>`;\n    var TooltipTemplates = {\n        node: function({ dataItem, value }) {\n            const { color, label } = dataItem;\n            return (\n                `<div ${tooltipContentWrapStyle}>\n                    ${Square(color)}\n                    ${TootipText(encode(label.text))}\n                    ${TootipText(value)}\n                </div>`\n            );\n        },\n        link: function({ dataItem, value }) {\n            const { source, target } = dataItem;\n            return (\n                `<div ${tooltipContentWrapStyle}>\n                    ${Square(source.color)}\n                    ${TootipText(encode(source.label.text))}\n                    ${TootipText(kendo.ui.icon({ icon: \"arrow-right\" }))}\n                    ${Square(target.color)}\n                    ${TootipText(encode(target.label.text))}\n                    ${TootipText(value)}\n                </div>`\n            );\n        }\n    };\n\n    var SankeyTooltip = Widget.extend({\n        init: function(element, options) {\n            this.options = options;\n\n            Widget.fn.init.call(this, element);\n\n            this.element.addClass('k-tooltip k-chart-tooltip k-chart-shared-tooltip')\n                .append('<div class=\"k-tooltip-content\"></div>');\n        },\n\n        size: function() {\n            return {\n                width: this.element.outerWidth(),\n                height: this.element.outerHeight()\n            };\n        },\n\n        setContent: function(content) {\n            this.element.find('.k-tooltip-content').html(content);\n            this.element.find(`[${styleAttr}]`).each((i, el) => {\n                el.getAttribute(styleAttr)\n                    .split(';')\n                    .filter(s => s !== '')\n                    .forEach(s => {\n                        const parts = s.split(':');\n                        el.style[parts[0].trim()] = parts[1].trim();\n                    });\n                el.removeAttribute(styleAttr);\n            });\n        },\n\n        setPosition: function(popupAlign, popupOffset, offsetOption) {\n            const size = this.size();\n            const offset = { ...popupOffset };\n\n            offset.left += (popupAlign.horizontal === 'left') ? offsetOption : (-1 * offsetOption);\n            if (popupAlign.horizontal === 'right') {\n                offset.left -= size.width;\n            }\n\n            if (popupAlign.vertical === 'bottom') {\n                offset.top -= size.height + offsetOption;\n            } else {\n                offset.top += offsetOption;\n            }\n\n            this.element.css(offset);\n        },\n\n        show: function() {\n            this.element.show();\n        },\n\n        hide: function() {\n            this.element.hide();\n        },\n\n        destroy: function() {\n            this.element.remove();\n        }\n    });\n\n    kendo.deepExtend(kendo.dataviz, {\n        SankeyTooltip: {\n            Tooltip: SankeyTooltip,\n            ContentTemplates: TooltipTemplates\n        }\n    });\n})(window.kendo.jQuery);\n\n(function($) {\n    var kendo = window.kendo;\n    var template = kendo.template;\n    var Widget = kendo.ui.Widget;\n    var dataviz = kendo.dataviz;\n    var defined = dataviz.defined;\n    var encode = kendo.htmlEncode;\n    var KendoSankey = dataviz.Sankey;\n    var NODE_CLICK = \"nodeClick\";\n    var LINK_CLICK = \"linkClick\";\n    var NODE_ENTER = \"nodeEnter\";\n    var NODE_LEAVE = \"nodeLeave\";\n    var LINK_ENTER = \"linkEnter\";\n    var LINK_LEAVE = \"linkLeave\";\n    var TOOLTIP_SHOW = \"tooltipShow\";\n    var TOOLTIP_HIDE = \"tooltipHide\";\n    var NODE = 'node';\n\n    const { Tooltip, ContentTemplates } = dataviz.SankeyTooltip;\n\n    var Sankey = Widget.extend({\n        init: function(element, userOptions) {\n            kendo.destroy(element);\n            $(element).empty();\n\n            this.options = kendo.deepExtend(this.options, userOptions);\n\n            Widget.fn.init.call(this, element);\n\n            this.wrapper = this.element;\n            this._initSankey();\n\n            this._attachEvents();\n\n            kendo.notify(this, dataviz.ui);\n\n            if (this._showWatermarkOverlay) {\n                this._showWatermarkOverlay(this.wrapper[0]);\n            }\n        },\n\n        setOptions: function(options) {\n            var currentOptions = this.options;\n\n            this.events.forEach(eventName => {\n                if (currentOptions[eventName]) {\n                    this.unbind(eventName, currentOptions[eventName]);\n                }\n            });\n\n            this._instance.setOptions(options);\n\n            this.bind(this.events, this._instance.options);\n        },\n\n        _initSankey: function() {\n            const themeOptions = this._getThemeOptions(this.options);\n            const { seriesColors: nodeColors, axisDefaults, seriesDefaults, legend, title } = themeOptions;\n            const { line: links, labels } = axisDefaults;\n            const strokeColor = seriesDefaults.labels.background;\n\n            this._createSankey(this.options, { nodeColors, links, labels: { ...labels, stroke: { color: strokeColor } }, legend, title });\n            this.options = this._instance.options;\n        },\n\n        _createSankey: function(options, themeOptions) {\n            this._instance = new KendoSankey(this.element[0], options, themeOptions);\n        },\n\n        _getThemeOptions: function(userOptions) {\n            var themeName = (userOptions || {}).theme;\n\n            if (themeName && dataviz.SASS_THEMES.indexOf(themeName.toLowerCase()) !== -1) {\n                return dataviz.autoTheme().chart;\n            }\n\n            if (defined(themeName)) {\n                var themes = dataviz.ui.themes || {};\n                var theme = themes[themeName] || themes[themeName.toLowerCase()] || {};\n                return theme.chart || {};\n            }\n        },\n\n        _attachEvents: function() {\n            this.events.forEach(eventName => {\n                this._instance.bind(eventName, event => {\n                    if (this._events[eventName]) {\n                        this._events[eventName].forEach(handler => handler.call(undefined, event));\n                    }\n                });\n            });\n\n            this._instance.bind(TOOLTIP_SHOW, this.tooltipShow.bind(this));\n            this._instance.bind(TOOLTIP_HIDE, this.tooltipHide.bind(this));\n        },\n\n        tooltipShow: function(e) {\n            if (!this._tooltip) {\n                const doc = this.element[0].ownerDocument;\n                this._tooltip = new Tooltip(doc.createElement('div'), {});\n                const { appendTo = doc.body } = this.options.tooltip;\n                this._tooltip.element.appendTo($(appendTo));\n            }\n\n            const { nodeTemplate, linkTemplate, offset } = this.options.tooltip;\n            const currentTemplate = template((e.targetType === NODE ? nodeTemplate : linkTemplate) || ContentTemplates[e.targetType]);\n            const value = encode(kendo.format(this.options.messages.tooltipUnits, defined(e.nodeValue) ? e.nodeValue : e.dataItem.value));\n\n            this._tooltip.setContent(currentTemplate({ dataItem: e.dataItem, value }));\n            this._tooltip.setPosition(e.tooltipData.popupAlign, e.tooltipData.popupOffset, offset);\n            this._tooltip.show();\n        },\n\n        tooltipHide: function() {\n            if (this._tooltip) {\n                this._tooltip.destroy();\n                this._tooltip = null;\n            }\n        },\n\n        exportVisual: function(exportOptions) {\n            return this._instance.exportVisual(exportOptions);\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n            this.tooltipHide();\n            this._instance.destroy();\n            this._instance = null;\n        },\n\n        events: [\n            NODE_CLICK,\n            LINK_CLICK,\n            NODE_ENTER,\n            NODE_LEAVE,\n            LINK_ENTER,\n            LINK_LEAVE\n        ],\n        options: {\n            name: \"Sankey\",\n            theme: \"default\",\n            tooltip: {\n                offset: 12\n            },\n            messages: {\n                tooltipUnits: \"({0} Units)\"\n            }\n        }\n    });\n\n    dataviz.ExportMixin.extend(Sankey.fn);\n\n    if (kendo.PDFMixin) {\n        kendo.PDFMixin.extend(Sankey.fn);\n    }\n\n    dataviz.ui.plugin(Sankey);\n\n    kendo.deepExtend(dataviz, {\n        Sankey\n    });\n\n})(window.kendo.jQuery);\n\nlet __meta__ = {\n    id: \"dataviz.sankey\",\n    name: \"Sankey\",\n    category: \"dataviz\",\n    description: \"The Sankey widget uses modern browser technologies to render high-quality data visualizations in the browser.\",\n    depends: [ \"data\", \"userevents\", \"drawing\", \"dataviz.core\", \"dataviz.themes\" ],\n    features: [{\n        id: \"dataviz.sankey-pdf-export\",\n        name: \"PDF export\",\n        description: \"Export Sankey as PDF\",\n        depends: [ \"pdf\" ]\n    }]\n};\n\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}