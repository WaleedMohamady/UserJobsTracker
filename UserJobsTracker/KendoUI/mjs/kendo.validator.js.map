{"version":3,"sources":["raw-mjs/kendo.validator.js"],"names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","Widget","ui","NS","INVALIDMSG","invalidMsgRegExp","RegExp","INVALIDINPUT","VALIDINPUT","VALIDATIONSUMMARY","INVALIDLABEL","MESSAGEBOX","ARIAINVALID","emailRegExp","ALLOWED_URL_PROTOCOLS","INPUTSELECTOR","CHECKBOXSELECTOR","NUMBERINPUTSELECTOR","BLUR","NAME","FORM","NOVALIDATE","VALIDATE","CHANGE","VALIDATE_INPUT","patternMatcher","value","pattern","test","hasAttribute","input","length","attributes","parseHtml","text","parseHTML","searchForMessageContainer","elements","fieldName","element","containers","idx","className","getAttribute","attr","add","isLabelFor","label","nodeName","validator","rules","messages","allowSubmit","noop","validateOnInit","SUMMARYTEMPLATE","errors","result","i","field","message","Validator","extend","init","options","that","this","resolved","resolvers","ruleResolvers","resolve","resolveRules","validateAttributeSelector","fn","call","_errorTemplate","template","errorTemplate","_summaryTemplate","validationSummary","is","_inputSelector","_checkboxSelector","_errors","_attachEvents","_isValidated","_validateOnInit","validate","events","required","min","max","step","email","url","date","dateCompare","captcha","noNameCheckbox","quote","indexOf","namedCheckbox","find","checkbox","filter","radio","val","parseFloat","raise","decimals","split","Math","pow","floor","selector","matcher","URL","includes","protocol","parseDate","widgetInstance","isValidated","isValid","data","getCaptchaId","_validating","done","_checkElement","fail","error","console","warn","removeData","validateOnBlur","_allowSubmit","destroy","off","_submit","e","stopPropagation","stopImmediatePropagation","preventDefault","state","validateInput","trigger","on","bind","inputs","invalid","eq","showValidationSummary","valid","_checkValidity","lbl","_findMessageContainer","next","addClass","messageText","_extractMessage","key","messageLabel","replace","wasValid","isInputInner","inputWrapper","parent","removeAttr","hasClass","closest","lblId","_decorateMessageContainer","replaceWith","parentElement","get","nextElement","prevElement","prev","wrapper","insertAfter","removeClass","_inputWrapper","toggleClass","inputWrap","inputLabel","_inputLabel","errorId","_associateMessageContainer","hideMessages","_disassociateMessageContainers","reset","labels","hideValidationSummary","locators","messageLocators","getElementsByTagName","locate","container","decorate","ruleKey","nonDefaultMessage","customMessage","prototype","isFunction","format","rule","results","push","setOptions","deepExtend","_setEvents","_getInputNames","sorted","nextFocusable","getWidgetFocusableElement","toggleAttribute","addBack","_errorsByName","inputNames","_renderSummary","insertBefore","join","_summaryClick","link","target","errorsList","summary","html","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.validator.js","sourcesContent":["import './kendo.core.js';\n\nlet __meta__ = {\n    id: \"validator\",\n    name: \"Validator\",\n    category: \"web\",\n    description: \"The Validator offers an easy way to do a client-side form validation.\",\n    depends: [ \"core\" ]\n};\n\n\n(function($, undefined$1) {\n    let kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n        NS = \".kendoValidator\",\n        INVALIDMSG = \"k-invalid-msg\",\n        invalidMsgRegExp = new RegExp(INVALIDMSG,'i'),\n        INVALIDINPUT = \"k-invalid\",\n        VALIDINPUT = \"k-valid\",\n        VALIDATIONSUMMARY = \"k-validation-summary\",\n        INVALIDLABEL = \"k-text-error\",\n        MESSAGEBOX = \"k-messagebox k-messagebox-error\",\n        INPUTINNER = \".k-input-inner\",\n        INPUTWRAPPER = \".k-input\",\n        ARIAINVALID = \"aria-invalid\",\n        ARIADESCRIBEDBY = \"aria-describedby\",\n        emailRegExp = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i,\n        ALLOWED_URL_PROTOCOLS = [\"http:\", \"https:\", \"ftp:\", \"ftps:\"],\n        INPUTSELECTOR = \":input:not(:button,[type=submit],[type=reset],[disabled],[readonly])\",\n        CHECKBOXSELECTOR = \":checkbox:not([disabled],[readonly])\",\n        NUMBERINPUTSELECTOR = \"[type=number],[type=range]\",\n        BLUR = \"blur\",\n        NAME = \"name\",\n        FORM = \"form\",\n        NOVALIDATE = \"novalidate\",\n        //events\n        VALIDATE = \"validate\",\n        CHANGE = \"change\",\n        VALIDATE_INPUT = \"validateInput\",\n\n        patternMatcher = function(value, pattern) {\n            if (typeof pattern === \"string\") {\n                pattern = new RegExp('^(?:' + pattern + ')$');\n            }\n            return pattern.test(value);\n        },\n        matcher = function(input, selector, pattern) {\n            var value = input.val();\n\n            if (input.filter(selector).length && value !== \"\") {\n                return patternMatcher(value, pattern);\n            }\n            return true;\n        },\n        hasAttribute = function(input, name) {\n            if (input.length) {\n                return input[0].attributes[name] != null;\n            }\n            return false;\n        };\n\n    if (!kendo.ui.validator) {\n        kendo.ui.validator = { rules: {}, messages: {}, allowSubmit: $.noop, validateOnInit: $.noop };\n    }\n\n    function resolveRules(element) {\n        var resolvers = kendo.ui.validator.ruleResolvers || {},\n            rules = {},\n            name;\n\n        for (name in resolvers) {\n            $.extend(true, rules, resolvers[name].resolve(element));\n        }\n        return rules;\n    }\n\n    function decode(value) {\n        return value.replace(/&amp/g, '&amp;')\n            .replace(/&quot;/g, '\"')\n            .replace(/&#39;/g, \"'\")\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>');\n    }\n\n    function numberOfDecimalDigits(value) {\n        value = (value + \"\").split('.');\n        if (value.length > 1) {\n            return value[1].length;\n        }\n        return 0;\n    }\n\n    function parseHtml(text) {\n        if ($.parseHTML) {\n            return $($.parseHTML(text));\n        }\n        return $(text);\n    }\n\n    function searchForMessageContainer(elements, fieldName) {\n        var containers = $(),\n            element,\n            attr;\n\n        for (var idx = 0, length = elements.length; idx < length; idx++) {\n            element = elements[idx];\n            if (invalidMsgRegExp.test(element.className)) {\n                attr = element.getAttribute(kendo.attr(\"for\"));\n                if (attr === fieldName) {\n                    containers = containers.add(element);\n                }\n            }\n        }\n        return containers;\n    }\n\n    function isLabelFor(label, element) {\n        if (!label) {\n            return false;\n        }\n        if (typeof label.nodeName !== 'string' || label.nodeName !== 'LABEL') {\n            return false;\n        }\n        if (typeof label.getAttribute('for') !== 'string' || typeof element.getAttribute('id') !== 'string') {\n            return false;\n        }\n        if (label.getAttribute('for') !== element.getAttribute('id')) {\n            return false;\n        }\n\n        return true;\n    }\n\n    var SUMMARYTEMPLATE = ({ errors }) => {\n        let result = '<ul>';\n        for (var i = 0; i < errors.length; i += 1) {\n            result += `<li><a data-field=\"${errors[i].field}\" href=\"#\">${errors[i].message}</a></li>`;\n        }\n\n        result += '</ul>';\n        return result;\n    };\n\n    var Validator = Widget.extend({\n        init: function(element, options) {\n            var that = this,\n                resolved = resolveRules(element),\n                validateAttributeSelector = \"[\" + kendo.attr(\"validate\") + \"!=false]\";\n\n            options = options || {};\n\n            options.rules = $.extend({}, kendo.ui.validator.rules, resolved.rules, options.rules);\n            options.messages = $.extend({}, kendo.ui.validator.messages, resolved.messages, options.messages);\n\n            Widget.fn.init.call(that, element, options);\n\n            that._errorTemplate = kendo.template(that.options.errorTemplate);\n            that._summaryTemplate = kendo.template(that.options.validationSummary.template || SUMMARYTEMPLATE);\n\n            if (that.element.is(FORM)) {\n                that.element.attr(NOVALIDATE, NOVALIDATE);\n            }\n\n            that._inputSelector = INPUTSELECTOR + validateAttributeSelector;\n            that._checkboxSelector = CHECKBOXSELECTOR + validateAttributeSelector;\n\n            that._errors = {};\n            that._attachEvents();\n            that._isValidated = false;\n\n            if (that._validateOnInit()) {\n                that.validate();\n            }\n        },\n\n        events: [ VALIDATE, CHANGE, VALIDATE_INPUT ],\n\n        options: {\n            name: \"Validator\",\n            errorTemplate: ({ message }) => `<span class=\"k-form-error\">${message}</span>`,\n            messages: {\n                required: \"{0} is required\",\n                pattern: \"{0} is not valid\",\n                min: \"{0} should be greater than or equal to {1}\",\n                max: \"{0} should be smaller than or equal to {1}\",\n                step: \"{0} is not valid\",\n                email: \"{0} is not valid email\",\n                url: \"{0} is not valid URL\",\n                date: \"{0} is not valid date\",\n                dateCompare: \"End date should be greater than or equal to the start date\",\n                captcha: \"The text you entered doesn't match the image.\"\n            },\n            rules: {\n                required: function(input) {\n                    var noNameCheckbox = !input.attr(\"name\") && !input.is(\":checked\"),\n                        name = input.attr(\"name\"),\n                        quote = !!name && name.indexOf(\"'\") > -1 ? '\\\"' : \"'\",\n                        namedCheckbox = input.attr(\"name\") && !this.element.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                        checkbox = input.filter(\"[type=checkbox]\").length && (noNameCheckbox || namedCheckbox),\n                        radio = input.filter(\"[type=radio]\").length && !this.element.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                        value = input.val();\n\n                    return !(hasAttribute(input, \"required\") && (!value || value === \"\" || value.length === 0 || checkbox || radio));\n                },\n                pattern: function(input) {\n                    if (input.filter(\"[type=text],[type=email],[type=url],[type=tel],[type=search],[type=password]\").filter(\"[pattern]\").length && input.val() !== \"\") {\n                        return patternMatcher(input.val(), input.attr(\"pattern\"));\n                    }\n                    return true;\n                },\n                min: function(input) {\n                    if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[min]\").length && input.val() !== \"\") {\n                        var min = parseFloat(input.attr(\"min\")) || 0,\n                            val = kendo.parseFloat(input.val());\n\n                        return min <= val;\n                    }\n                    return true;\n                },\n                max: function(input) {\n                    if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[max]\").length && input.val() !== \"\") {\n                        var max = parseFloat(input.attr(\"max\")) || 0,\n                            val = kendo.parseFloat(input.val());\n\n                        return max >= val;\n                    }\n                    return true;\n                },\n                step: function(input) {\n                    if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[step]\").length && input.val() !== \"\") {\n                        var min = parseFloat(input.attr(\"min\")) || 0,\n                            step = kendo.parseFloat(input.attr(\"step\")) || 1,\n                            val = parseFloat(input.val()),\n                            decimals = numberOfDecimalDigits(step),\n                            raise;\n\n                        if (decimals) {\n                            raise = Math.pow(10, decimals);\n                            return ((Math.floor((val - min) * raise)) % (step * raise)) / Math.pow(100, decimals) === 0;\n                        }\n                        return ((val - min) % step) === 0;\n                    }\n                    return true;\n                },\n                email: function(input) {\n                    return matcher(input, \"[type=email],[\" + kendo.attr(\"type\") + \"=email]\", emailRegExp);\n                },\n                url: function(input) {\n                    if (input.filter(\"[type=url],[\" + kendo.attr(\"type\") + \"=url]\").length && input.val() !== \"\") {\n                        try {\n                            const url = new URL(input.val());\n                            return ALLOWED_URL_PROTOCOLS.includes(url.protocol);\n                        } catch {\n                            return false;\n                        }\n                    }\n                    return true;\n                },\n                date: function(input) {\n                    if (input.filter(\"[type^=date],[\" + kendo.attr(\"type\") + \"=date]\").length && input.val() !== \"\") {\n                        return kendo.parseDate(input.val(), input.attr(kendo.attr(\"format\"))) !== null;\n                    }\n                    return true;\n                },\n                captcha: function(input) {\n                    if (input.filter(\"[\" + kendo.attr(\"role\") + \"=captcha]\").length) {\n                        var that = this,\n                            captcha = kendo.widgetInstance(input),\n                            isValidated = function(isValid) {\n                                return typeof(isValid) !== 'undefined' && isValid !== null;\n                            };\n\n                        if (!input.data(\"captcha_validating\") && !isValidated(captcha.isValid()) && !!captcha.getCaptchaId()) {\n                            input.data(\"captcha_validating\", true);\n                            that._validating = true;\n                            captcha.validate().done(function() {\n                                that._validating = false;\n                                that._checkElement(input);\n                            }).fail(function(data) {\n                                that._validating = false;\n                                if (data.error && data.error === \"handler_not_defined\") {\n                                    window.console.warn(\"Captcha's validationHandler is not defined! You should either define a proper validation endpoint or declare a callback function to ensure the required behavior.\");\n                                }\n                            });\n                        }\n\n                        if (isValidated(captcha.isValid())) {\n                            input.removeData(\"captcha_validating\");\n                            return captcha.isValid();\n                        }\n                    }\n                    return true;\n                }\n            },\n            validateOnBlur: true,\n            validationSummary: false\n        },\n\n        _allowSubmit: function() {\n            return kendo.ui.validator.allowSubmit(this.element, this.errors());\n        },\n\n        _validateOnInit: function() {\n            return kendo.ui.validator.validateOnInit(this.element);\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            this.element.off(NS);\n\n            if (this.validationSummary) {\n                this.validationSummary.off(NS);\n                this.validationSummary = null;\n            }\n        },\n\n        value: function() {\n            if (!this._isValidated) {\n                return false;\n            }\n\n            return this.errors().length === 0;\n        },\n\n        _submit: function(e) {\n            if ((!this.validate() && !this._allowSubmit()) || this._validating) {\n                e.stopPropagation();\n                e.stopImmediatePropagation();\n                e.preventDefault();\n                return false;\n            }\n            return true;\n        },\n\n        _checkElement: function(element) {\n            var state = this.value();\n\n            this.validateInput(element);\n\n            if (this.value() !== state) {\n                this.trigger(CHANGE);\n            }\n        },\n\n        _attachEvents: function() {\n            var that = this;\n\n            if (that.element.is(FORM)) {\n                that.element.on(\"submit\" + NS, that._submit.bind(that));\n            }\n\n            if (that.options.validateOnBlur) {\n                if (!that.element.is(INPUTSELECTOR)) {\n                    that.element.on(BLUR + NS, that._inputSelector, function() {\n                        that._checkElement($(this));\n                    });\n\n                    that.element.on(\"click\" + NS, that._checkboxSelector, function() {\n                        that._checkElement($(this));\n                    });\n                } else {\n                    that.element.on(BLUR + NS, function() {\n                        that._checkElement(that.element);\n                    });\n\n                    if (that.element.is(CHECKBOXSELECTOR)) {\n                        that.element.on(\"click\" + NS, function() {\n                            that._checkElement(that.element);\n                        });\n                    }\n                }\n            }\n        },\n\n        validate: function() {\n            var inputs;\n            var idx;\n            var result = false;\n            var length;\n\n            var isValid = this.value();\n\n            this._errors = {};\n\n            if (!this.element.is(INPUTSELECTOR)) {\n                var invalid = false;\n\n                inputs = this.element.find(this._inputSelector);\n\n                for (idx = 0, length = inputs.length; idx < length; idx++) {\n                    if (!this.validateInput(inputs.eq(idx))) {\n                        invalid = true;\n                    }\n                }\n\n                result = !invalid;\n            } else {\n                result = this.validateInput(this.element);\n            }\n\n            if (this.options.validationSummary && !isValid) {\n                this.showValidationSummary();\n            }\n\n            this.trigger(VALIDATE, { valid: result, errors: this.errors() });\n\n            if (isValid !== result) {\n                this.trigger(CHANGE);\n            }\n\n            return result;\n        },\n\n        validateInput: function(input) {\n            input = $(input);\n\n\n            this._isValidated = true;\n\n            var that = this,\n                template = that._errorTemplate,\n                result = that._checkValidity(input),\n                valid = result.valid,\n                widgetInstance,\n                className = \".\" + INVALIDMSG,\n                fieldName = (input.attr(NAME) || \"\"),\n                lbl = that._findMessageContainer(fieldName).add(input.next(className).filter(function() {\n                    var element = $(this);\n                    if (element.filter(\"[\" + kendo.attr(\"for\") + \"]\").length) {\n                        return element.attr(kendo.attr(\"for\")) === fieldName;\n                    }\n\n                    return true;\n\n                })).addClass(\"k-hidden\"),\n                messageText = !valid ? that._extractMessage(input, result.key) : \"\",\n                messageLabel = !valid ? parseHtml(template({ message: decode(messageText), field: fieldName })) : \"\",\n                wasValid = !input.attr(ARIAINVALID),\n                isInputInner = input.is(INPUTINNER),\n                inputWrapper = input.parent(INPUTWRAPPER);\n\n            input.removeAttr(ARIAINVALID);\n\n            if (input.hasClass(\"k-hidden\")) {\n                widgetInstance = kendo.widgetInstance(input.closest(\".k-signature\"));\n            }\n\n            if (input.is(\"[type=radio]\")) {\n                widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n            }\n\n            if (input.is(\"[type=checkbox]\")) {\n                widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n            }\n\n            if (!valid && !input.data(\"captcha_validating\")) {\n                that._errors[fieldName] = messageText;\n                var lblId = lbl.attr('id');\n\n                that._decorateMessageContainer(messageLabel, fieldName);\n\n\n                if (lblId) {\n                    messageLabel.attr('id', lblId);\n                }\n\n                if (lbl.length !== 0) {\n                    lbl.replaceWith(messageLabel);\n                } else {\n                    widgetInstance = widgetInstance || kendo.widgetInstance(input);\n                    var parentElement = input.parent().get(0);\n                    var nextElement = input.next().get(0);\n                    var prevElement = input.prev().get(0);\n\n                    // Get the instance of the RadioGroup which is not initialized on the input element\n                    if (!widgetInstance && input.is(\"[type=radio]\")) {\n                        widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n                    }\n\n                    // Get the instance of the CheckBoxGroup which is not initialized on the input element\n                    if (!widgetInstance && input.is(\"[type=checkbox]\")) {\n                        widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n                    }\n\n                    if (widgetInstance && widgetInstance.wrapper && (widgetInstance.element !== widgetInstance.wrapper || [\"Signature\", \"RadioGroup\", \"CheckBoxGroup\"].indexOf(widgetInstance.options.name) > -1)) {\n                        messageLabel.insertAfter(widgetInstance.wrapper);\n                    } else if (parentElement && parentElement.nodeName === \"LABEL\") {\n                        // Input inside label\n                        messageLabel.insertAfter(parentElement);\n                    } else if (nextElement && isLabelFor(nextElement, input[0])) {\n                        // Input before label\n                        messageLabel.insertAfter(nextElement);\n                    } else if (prevElement && isLabelFor(prevElement, input[0])) {\n                        // Input after label\n                        messageLabel.insertAfter(input);\n                    } else if (isInputInner && inputWrapper.length) {\n                        // Input after input wrapper\n                        messageLabel.insertAfter(inputWrapper);\n                    } else {\n                        messageLabel.insertAfter(input);\n                    }\n                }\n\n                messageLabel.removeClass(\"k-hidden\");\n\n                input.attr(ARIAINVALID, true);\n            } else {\n                delete that._errors[fieldName];\n            }\n\n            if (wasValid !== valid) {\n                this.trigger(VALIDATE_INPUT, { valid: valid, input: input, error: messageText, field: fieldName });\n            }\n\n            widgetInstance = (widgetInstance && widgetInstance.options.name == \"Signature\") ? widgetInstance : kendo.widgetInstance(input);\n            if (!widgetInstance || !(widgetInstance._inputWrapper || widgetInstance.wrapper) || (input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                input.toggleClass(INVALIDINPUT, !valid);\n                input.toggleClass(VALIDINPUT, valid);\n            }\n\n            if (widgetInstance) {\n                var inputWrap = widgetInstance._inputWrapper || widgetInstance.wrapper;\n                var inputLabel = widgetInstance._inputLabel;\n\n                if (inputWrap && !(input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                    inputWrap.toggleClass(INVALIDINPUT, !valid);\n                    inputWrap.toggleClass(VALIDINPUT, valid);\n                }\n                if (inputLabel) {\n                    inputLabel.toggleClass(INVALIDLABEL, !valid);\n                }\n            }\n\n            if (wasValid !== valid) {\n                var errorId = messageLabel ? messageLabel.attr(\"id\") : lbl.attr(\"id\");\n\n                that._associateMessageContainer(input, errorId);\n\n                if (this.options.validationSummary && this.options.validateOnBlur) {\n                    this.showValidationSummary();\n                }\n            }\n\n            return valid;\n        },\n\n        hideMessages: function() {\n            var that = this,\n                className = \".\" + INVALIDMSG,\n                element = that.element;\n\n            that._disassociateMessageContainers();\n\n            if (!element.is(INPUTSELECTOR)) {\n                element.find(className).addClass(\"k-hidden\");\n            } else {\n                element.next(className).addClass(\"k-hidden\");\n            }\n        },\n\n        reset: function() {\n            var that = this,\n                inputs = that.element.find(\".\" + INVALIDINPUT),\n                labels = that.element.find(\".\" + INVALIDLABEL);\n\n            that._errors = [];\n\n            that.hideMessages();\n\n            that.hideValidationSummary();\n\n            inputs.removeAttr(ARIAINVALID);\n            inputs.removeClass(INVALIDINPUT);\n            labels.removeClass(INVALIDLABEL);\n        },\n\n        _findMessageContainer: function(fieldName) {\n            var locators = kendo.ui.validator.messageLocators,\n                name,\n                containers = $();\n\n            for (var idx = 0, length = this.element.length; idx < length; idx++) {\n                containers = containers.add(searchForMessageContainer(this.element[idx].getElementsByTagName(\"*\"), fieldName));\n            }\n\n            for (name in locators) {\n                containers = containers.add(locators[name].locate(this.element, fieldName));\n            }\n\n            return containers;\n        },\n\n        _decorateMessageContainer: function(container, fieldName) {\n            var locators = kendo.ui.validator.messageLocators,\n                name;\n\n            container.addClass(INVALIDMSG)\n                .attr(kendo.attr(\"for\"), fieldName || \"\");\n\n            if (!container.attr(\"id\")) {\n                container.attr(\"id\", fieldName + \"-error\");\n            }\n\n            for (name in locators) {\n                locators[name].decorate(container, fieldName);\n            }\n        },\n\n        _extractMessage: function(input, ruleKey) {\n            var that = this,\n                customMessage = that.options.messages[ruleKey],\n                fieldName = input.attr(NAME),\n                nonDefaultMessage;\n\n            if (!kendo.ui.Validator.prototype.options.messages[ruleKey]) {\n                 nonDefaultMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n            }\n\n            customMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n\n            return kendo.format(input.attr(kendo.attr(ruleKey + \"-msg\")) || input.attr(\"validationMessage\") || nonDefaultMessage || customMessage || input.attr(\"title\") || \"\",\n                fieldName,\n                input.attr(ruleKey) || input.attr(kendo.attr(ruleKey)));\n        },\n\n        _checkValidity: function(input) {\n            var rules = this.options.rules,\n                rule;\n\n            for (rule in rules) {\n                if (!rules[rule].call(this, input)) {\n                    return { valid: false, key: rule };\n                }\n            }\n\n            return { valid: true };\n        },\n\n        errors: function() {\n            var results = [],\n                errors = this._errors,\n                error;\n\n            for (error in errors) {\n                results.push(errors[error]);\n            }\n            return results;\n        },\n\n        setOptions: function(options) {\n            if (options.validationSummary) {\n                this.hideValidationSummary();\n            }\n\n            kendo.deepExtend(this.options, options);\n\n            this.destroy();\n\n            this.init(this.element, this.options);\n\n            this._setEvents(this.options);\n        },\n\n        _getInputNames: function() {\n            var that = this,\n                inputs = that.element.find(that._inputSelector),\n                sorted = [];\n\n            for (var idx = 0, length = inputs.length; idx < length; idx++) {\n                var input = $(inputs[idx]);\n\n                if (hasAttribute(input, NAME)) {\n                    // Add current name if:\n                    // - not present so far;\n                    // - present but not part of CheckBoxGroup or RadioGroup.\n                    if (sorted.indexOf(input.attr(NAME)) === -1 ||\n                        (input.closest(\".k-checkbox-list\").length === 0 &&\n                        input.closest(\".k-radio-list\").length === 0)) {\n                            sorted.push(input.attr(NAME));\n                    }\n                }\n            }\n\n            return sorted;\n        },\n\n        _associateMessageContainer: function(input, errorId) {\n            var nextFocusable = kendo.getWidgetFocusableElement(input);\n\n            if (!nextFocusable || !errorId) {\n                return;\n            }\n\n            kendo.toggleAttribute(nextFocusable, ARIADESCRIBEDBY, errorId);\n        },\n\n        _disassociateMessageContainers: function() {\n            var that = this,\n                inputs = that.element.find(\".\" + INVALIDINPUT).addBack(),\n                input, errorId;\n\n            for (var i = 0; i < inputs.length; i += 1) {\n                input = $(inputs[i]);\n\n                if (input.is(\"input\")) {\n                    errorId = that._findMessageContainer(input.attr(NAME))\n                        .add(input.next(\".\" + INVALIDMSG))\n                        .attr(\"id\");\n\n                    that._associateMessageContainer(input, errorId);\n                }\n            }\n        },\n\n        _errorsByName: function() {\n            var that = this,\n                inputNames = that._getInputNames(),\n                sorted = [];\n\n            for (var i = 0; i < inputNames.length; i += 1) {\n                var name = inputNames[i];\n\n                if (that._errors[name]) {\n                    sorted.push({\n                        field: name,\n                        message: that._errors[name]\n                    });\n                }\n            }\n\n            return sorted;\n        },\n\n        _renderSummary: function() {\n            var that = this,\n                options = this.options.validationSummary,\n                element = this.element,\n                prevElement = element.prev(),\n                container;\n\n            if (options.container) {\n                container = $(options.container);\n            } else if (prevElement && prevElement.hasClass(VALIDATIONSUMMARY)) {\n                container = prevElement;\n            } else {\n                container = $(\"<div />\").insertBefore(that.element);\n            }\n\n            container.addClass([VALIDATIONSUMMARY, MESSAGEBOX].join(\" \"));\n            container.attr(\"role\", \"alert\");\n\n            container.on(\"click\" + NS, that._summaryClick.bind(that));\n\n            return container;\n        },\n\n        _summaryClick: function(e) {\n            e.preventDefault();\n\n            var that = this,\n                link = $(e.target),\n                target = that.element.find(\"[name='\" + link.data(\"field\") + \"']\"),\n                nextFocusable;\n\n            if (!target.length) {\n                return;\n            }\n\n            nextFocusable = kendo.getWidgetFocusableElement(target);\n\n            if (nextFocusable) {\n                nextFocusable.trigger(\"focus\");\n            }\n        },\n\n        showValidationSummary: function() {\n            var that = this,\n                summary = that.validationSummary,\n                errors = that._errorsByName(),\n                errorsList;\n\n            if (!summary) {\n                summary = that.validationSummary = that._renderSummary();\n            }\n\n            errorsList = parseHtml(that._summaryTemplate({\n                errors: errors\n            }));\n\n            summary.html(errorsList);\n\n            summary.toggleClass(\"k-hidden\", !errors.length);\n        },\n\n        hideValidationSummary: function() {\n            var that = this,\n                summary = that.validationSummary;\n\n            if (!summary) {\n                return;\n            }\n\n            summary.addClass(\"k-hidden\");\n        }\n    });\n\n    kendo.ui.plugin(Validator);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}