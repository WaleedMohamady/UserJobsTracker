{"version":3,"sources":["raw-mjs/kendo.avatar.js"],"names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","Widget","ui","ICON_SELECTOR","AVATAR_STYLES","AVATAR_TYPE","Avatar","extend","init","element","options","fn","call","this","_fromMarkup","_wrapper","_markupContent","length","_contentFromMarkup","_content","alt","border","className","fillMode","icon","image","rounded","size","style","text","themeColor","type","events","setOptions","currentOptions","wrapper","updatedOptions","_optionsFromWrapper","removeClass","empty","content","span","find","html","renderIcon","attr","append","first","children","slice","remove","trim","split","forEach","indexOf","substring","replace","addClass","_applyCssClasses","css","prepend","cssProperties","registerPrefix","registerValues","prop","values","roundedValues","concat","plugin","jQuery","kendo$1"],"mappings":";;;;;;;;MAAA,wBACA,mBAEA,IAAAA,SAAA,CACAC,GAAA,SACAC,KAAA,SACAC,SAAA,MACAC,YAAA,0FACAC,QAAA,CAAA,UAGA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,OAAAD,MACAE,EAAAF,EAAAG,GAAAD,OAEAE,EAAA,sBAEAC,EAEA,WAFAA,EAGA,oBAGAC,EACA,OADAA,EAEA,QAFAA,EAGA,OAGAC,EAAAL,EAAAM,OAAA,CACAC,KAAA,SAAAC,EAAAC,GAGAA,EAAAA,GAAA,CAAA,EAEAT,EAAAU,GAAAH,KAAAI,KAJAC,KAIAJ,EAAAC,GAEAG,KAAAC,cACAD,KAAAE,WAEAF,KAAAG,gBAAAH,KAAAG,eAAAC,OAAA,EACAJ,KAAAK,qBAEAL,KAAAM,UAEA,EAEAT,QAAA,CACAjB,KAAA,SACA2B,IAAA,KACAC,QAAA,EACAC,UAAA,KACAC,SAAA,QACAC,KAAA,KACAC,MAAA,KACAC,QAAA,OACAC,KAAA,SACAC,MAAA,KACAC,KAAA,KACAC,WAAA,UACAC,KAAA1B,GAGA2B,OAAA,GAEAC,WAAA,SAAAvB,GACA,IAAAwB,EAAArB,KAAAH,QACAyB,EAAAtB,KAAAsB,QACAC,EAAAvC,EAAAU,OAAA,CAAA,EAAA2B,EAAAxB,GAEAT,EAAAU,GAAAsB,WAAArB,KAAAC,KAAAH,GAEA0B,EAAAA,EAAAL,QACAG,EAAArB,KAAAwB,oBAAAH,KAEA,IAAAE,EAAAf,QACAc,EAAAG,YAAAlC,GAGA+B,EAAAI,QAEA1B,KAAAH,QAAAwB,EACArB,KAAAE,WACAF,KAAAM,UACA,EAEAA,SAAA,WACA,IAGAqB,EAHAC,EAAA5B,KAAAsB,QAAAO,KAAA,UACAhC,EAAAG,KAAAH,QACAqB,EAAArB,EAAAqB,KAGAA,IAAA1B,EACAmC,EAAA3C,EAAAE,EAAA4C,KAAAC,WAAA,CAAApB,KAAAd,EAAAc,QACAO,IAAA1B,GACAmC,EAAA3C,EAAA,aAAAa,EAAAe,MAAA,MAEAf,EAAAU,KACAoB,EAAAK,KAAA,MAAAnC,EAAAU,MAEAW,IAAA1B,IACAmC,EAAA3C,EAAA,SAAAa,EAAAmB,KAAA,YAGAY,EAAAK,OAAAN,EACA,EAEAtB,mBAAA,WACAL,KAAAsB,QAAAO,KAAA,UAAAK,QAEAD,OAAAjC,KAAAG,eACA,EAEAF,YAAA,WACA,IAEAW,EAAAD,EAFAf,EAAAI,KAAAJ,QACAC,EAAAG,KAAAH,QAGAD,EAAAuC,WAAAC,MAAA,GAAAC,SAEAzB,EAAAhB,EAAAuC,SAAA,OACAxB,EAAAf,EAAAuC,SAAA7C,GAEAsB,EAAAR,OAAA,GACAP,EAAAqB,KAAA1B,EACAQ,KAAAG,eAAAS,EAAAsB,SACAvB,EAAAP,OAAA,GACAP,EAAAqB,KAAA1B,EACAQ,KAAAG,eAAAQ,EAAAuB,SACAtC,EAAAuC,WAAA/B,OAAA,IACAP,EAAAqB,KAAA1B,EACAQ,KAAAG,eAAAP,EAAAuC,WAEA,EAEAX,oBAAA,SAAAD,GACA,IACAX,EADAU,EAAAtB,KAAAsB,QAwBA,OArBAC,EAAAL,OAAA1B,EACA+B,EAAAP,KAAAM,EAAAN,OAAAsB,OACAf,EAAAL,OAAA1B,EACA8B,EAAAO,KAAAvC,GAAA0C,KAAA,SAAAO,MAAA,OAEAC,SAAA,SAAA5D,GACA,IAAAA,EAAA6D,QAAA,QACAlB,EAAAZ,KAAA/B,EAAA8D,UAAA,GACA,IAAA9D,EAAA6D,QAAA,cACAlB,EAAAZ,KAAA/B,EAAA+D,QAAA,YAAA,IAEA,IACApB,EAAAL,OAAA1B,IACAoB,EAAAU,EAAAO,KAAA,OACAN,EAAAX,MAAAA,EAAAoB,KAAA,OAEApB,EAAAoB,KAAA,SACAT,EAAAhB,IAAAK,EAAAoB,KAAA,SAIAT,CACA,EAEArB,SAAA,WACA,IAAAoB,EAAAtB,KAAAJ,QACAC,EAAAG,KAAAH,QACA+B,EAAA5C,EAAA,UAEAgB,KAAAsB,QAAAA,EACAA,EAAAsB,SAAArD,GAEAS,KAAA6C,mBAEAhD,EAAAW,QACAc,EAAAsB,SAAArD,GAEAM,EAAAkB,OACAO,EAAAwB,IAAAjD,EAAAkB,OAEAlB,EAAAY,WACAa,EAAAsB,SAAA/C,EAAAY,WAGAmB,EAAAgB,SAAArD,EAzKA,IAyKAM,EAAAqB,MACAI,EAAAyB,QAAAnB,EACA,IAGA1C,EAAA8D,cAAAC,eAAA,SAAA,aAEA/D,EAAA8D,cAAAE,eAAA,SAAA,CAAA,CACAC,KAAA,UACAC,OAAAlE,EAAA8D,cAAAK,cAAAC,OAAA,CAAA,CAAA,OAAA,aAGApE,EAAAG,GAAAkE,OAAA9D,EAEA,CA1LA,CA0LAN,OAAAD,MAAAsE,QACA,IAAAC,QAAAvE,aAEAuE","file":"kendo.avatar.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.icons.js';\n\nvar __meta__ = {\n    id: \"avatar\",\n    name: \"Avatar\",\n    category: \"web\",\n    description: \"The Avatar component represents an icon, text, or image rendered in a styled container.\",\n    depends: [ \"core\" ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n        DASH = \"-\",\n        ICON_SELECTOR = \".k-icon,.k-svg-icon\";\n\n    var AVATAR_STYLES = {\n        widget: \"k-widget\",\n        avatar: \"k-avatar\",\n        bordered: \"k-avatar-bordered\"\n    };\n\n    var AVATAR_TYPE = {\n        icon: \"icon\",\n        image: \"image\",\n        text: \"text\"\n    };\n\n    var Avatar = Widget.extend({\n        init: function(element, options) {\n            var that = this;\n\n            options = options || {};\n\n            Widget.fn.init.call(that, element, options);\n\n            this._fromMarkup();\n            this._wrapper();\n\n            if (this._markupContent && this._markupContent.length > 0) {\n                this._contentFromMarkup();\n            } else {\n                this._content();\n            }\n        },\n\n        options: {\n            name: \"Avatar\",\n            alt: null,\n            border: false,\n            className: null,\n            fillMode: \"solid\",\n            icon: null,\n            image: null,\n            rounded: \"full\",\n            size: \"medium\",\n            style: null,\n            text: null,\n            themeColor: \"primary\",\n            type: AVATAR_TYPE.text\n        },\n\n        events: [ ],\n\n        setOptions: function(options) {\n            var currentOptions = this.options,\n                wrapper = this.wrapper,\n                updatedOptions = $.extend({}, currentOptions, options);\n\n            Widget.fn.setOptions.call(this, options);\n\n            if (!updatedOptions[updatedOptions.type]) {\n                currentOptions = this._optionsFromWrapper(currentOptions);\n            }\n            if (updatedOptions.border === false) {\n                wrapper.removeClass(AVATAR_STYLES.bordered);\n            }\n\n            wrapper.empty();\n\n            this.options = currentOptions;\n            this._wrapper();\n            this._content();\n        },\n\n        _content: function() {\n            var span = this.wrapper.find(\"> span\"),\n                options = this.options,\n                type = options.type,\n                content;\n\n            if (type === AVATAR_TYPE.icon) {\n                content = $(kendo.html.renderIcon({ icon: options.icon }));\n            } else if (type === AVATAR_TYPE.image) {\n                content = $(\"<img src='\" + options.image + \"'>\");\n\n                if (options.alt) {\n                    content.attr(\"alt\", options.alt);\n                }\n            } else if (type === AVATAR_TYPE.text) {\n                content = $(\"<span>\" + options.text + \"</span>\");\n            }\n\n            span.append(content);\n        },\n\n        _contentFromMarkup: function() {\n            var span = this.wrapper.find(\"> span\").first();\n\n            span.append(this._markupContent);\n        },\n\n        _fromMarkup: function() {\n            var element = this.element,\n                options = this.options,\n                image, icon;\n\n            element.children().slice(1).remove();\n\n            image = element.children(\"img\");\n            icon = element.children(ICON_SELECTOR);\n\n            if (image.length > 0 ) {\n                options.type = AVATAR_TYPE.image;\n                this._markupContent = image.first();\n            } else if (icon.length > 0) {\n                options.type = AVATAR_TYPE.icon;\n                this._markupContent = icon.first();\n            } else if (element.children().length > 0) {\n                options.type = AVATAR_TYPE.text;\n                this._markupContent = element.children();\n            }\n        },\n\n        _optionsFromWrapper: function(updatedOptions) {\n            var wrapper = this.wrapper,\n                classes, image;\n\n            if (updatedOptions.type === AVATAR_TYPE.text) {\n                updatedOptions.text = wrapper.text().trim();\n            } else if (updatedOptions.type === AVATAR_TYPE.icon) {\n                classes = wrapper.find(ICON_SELECTOR).attr(\"class\").split(/\\s+/);\n\n                classes.forEach(function(name) {\n                    if (name.indexOf(\"k-i-\") === 0) {\n                        updatedOptions.icon = name.substring(4);\n                    } else if (name.indexOf(\"k-svg-i-\") === 0) {\n                        updatedOptions.icon = name.replace(/^k-svg-i-/,\"\");\n                    }\n                });\n            } else if (updatedOptions.type === AVATAR_TYPE.image) {\n                image = wrapper.find(\"img\");\n                updatedOptions.image = image.attr(\"src\");\n\n                if (image.attr(\"alt\")) {\n                    updatedOptions.alt = image.attr(\"alt\");\n                }\n            }\n\n            return updatedOptions;\n        },\n\n        _wrapper: function() {\n            var wrapper = this.element,\n                options = this.options,\n                span = $(\"<span>\");\n\n            this.wrapper = wrapper;\n            wrapper.addClass(AVATAR_STYLES.avatar);\n\n            this._applyCssClasses();\n\n            if (options.border) {\n                wrapper.addClass(AVATAR_STYLES.bordered);\n            }\n            if (options.style) {\n                wrapper.css(options.style);\n            }\n            if (options.className) {\n                wrapper.addClass(options.className);\n            }\n\n            span.addClass(AVATAR_STYLES.avatar + DASH + options.type);\n            wrapper.prepend(span);\n        }\n    });\n\n    kendo.cssProperties.registerPrefix(\"Avatar\", \"k-avatar-\");\n\n    kendo.cssProperties.registerValues(\"Avatar\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n\n    kendo.ui.plugin(Avatar);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}