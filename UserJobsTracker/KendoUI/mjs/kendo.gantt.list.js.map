{"version":3,"sources":["raw-mjs/kendo.gantt.list.js"],"names":["__meta__","id","name","category","description","depends","hidden","$","extend","map","isFunction","kendo","ui","TreeList","outerHeight","_outerHeight","activeElement","_activeElement","mobileOS","support","DATATYPE","attr","BINDING","FORMAT","STRING","defaultDateFormat","getCulture","calendar","patterns","d","titleFromField","title","start","end","percentComplete","parentId","orderId","SIZE_CALCULATION_TEMPLATE","listStyles","gridHeader","gridContentWrap","editCell","iconCollapse","iconExpand","GanttList","init","element","options","this","columns","length","push","fn","call","_unbindDataSource","_setWidth","autoBind","sortable","selectable","_editCellEvent","_tabCycleStop","navigatable","editable","move","mode","resizable","renderAllRows","destroy","closeCell","isCancel","tr","model","that","cell","editor","_isIncellEditable","dataItem","_cancelEditor","removeClass","parent","editRow","lockedContent","_relatedRow","_render","trigger","item","data","ns","_adjustRowHeight","css","insertAfter","nodeData","referenceNode","taskInfo","task","updateInfo","insertBefore","_adjustHeight","height","contentWrap","find","header","scrollbar","_isHeightSet","_hasLockedColumns","table","offsetWidth","clientWidth","row1","row2","offsetHeight1","offsetHeight","offsetHeight2","style","el","initialHeight","newHeight","_attachCellEditingEventHandlers","update","touch","content","kendoTouch","filter","touchstart","e","_mouseDownHandler","doubletap","event","target","classList","contains","_openEditorHandler","_blurActiveElement","nodeName","toLowerCase","_columns","_hasExpandable","forEach","expandable","_eachColumn","bind","_columnEditor","column","field","required","_extractFormat","format","container","validation","fields","dateCompare","message","hide","appendTo","prependTo","kendoDateTimePicker","_columnFromElement","td","closest","idx","children","index","resourcesField","isSortable","hasNestedColumns","indexOf","template","value","get","formatedValue","i","join","_editCell","editedCell","modelCopy","dataSource","_createNewModel","toJSON","clearTimeout","_closeCellTimeout","_restorePageSizeAfterAddChild","_edit","editedColumn","editedColumnIndex","add","lockedTable","first","_createIncellEditor","change","values","preventDefault","_current","_modelFromElement","row","getByUid","currentTarget","hasClass","isLockedCell","multiple","has","tbody","is","_renderTree","taskTree","addClass","rowHeight","_rowHeight","tasks","applyStylesFromKendoAttributes","append","remove","_setData","listWidth","plugin","window","jQuery","kendo$1"],"mappings":"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","file":"kendo.gantt.list.js","sourcesContent":["import './kendo.treelist.js';\nimport './kendo.treeview.draganddrop.js';\n\nvar __meta__ = {\n    id: \"gantt.list\",\n    name: \"Gantt List\",\n    category: \"web\",\n    description: \"The Gantt List\",\n    depends: [ \"treelist\", \"treeview.draganddrop\" ],\n    hidden: true\n};\n\n(function($) {\n    var extend = $.extend,\n        map = $.map,\n        isFunction = kendo.isFunction,\n\n        ui = kendo.ui,\n        TreeList = ui.TreeList,\n        outerHeight = kendo._outerHeight,\n        activeElement = kendo._activeElement,\n        mobileOS = kendo.support.mobileOS,\n\n        DATATYPE = kendo.attr(\"type\"),\n        BINDING = kendo.attr(\"bind\"),\n        FORMAT = kendo.attr(\"format\"),\n\n        STRING = \"string\",\n        BEFORE_EDIT = \"beforeEdit\",\n        EDIT = \"edit\",\n        SAVE = \"save\",\n        RENDER = \"render\",\n        DOT = \".\",\n\n        defaultDateFormat = \"{0:\" + kendo.getCulture().calendar.patterns.d + \"}\",\n\n        titleFromField = {\n            \"title\": \"Title\",\n            \"start\": \"Start Time\",\n            \"end\": \"End Time\",\n            \"percentComplete\": \"% Done\",\n            \"parentId\": \"Predecessor ID\",\n            \"id\": \"ID\",\n            \"orderId\": \"Order ID\"\n        },\n\n        SIZE_CALCULATION_TEMPLATE = `<table ${kendo.attr(\"style-visibility\")}=\"hidden\">` +\n            \"<tbody>\" +\n                `<tr ${kendo.attr(\"style-height\")}=\"{0}\">` +\n                    \"<td>&nbsp;</td>\" +\n                \"</tr>\" +\n            \"</tbody>\" +\n        \"</table>\",\n\n        listStyles = {\n            gridHeader: \"k-grid-header\",\n            gridContentWrap: \"k-grid-content\",\n            editCell: \"k-edit-cell\",\n            iconCollapse: \"caret-alt-down\",\n            iconExpand: \"caret-alt-right\"\n        };\n\n    var GanttList = ui.GanttList = TreeList.extend({\n        init: function(element, options) {\n            if (this.options.columns.length === 0) {\n                this.options.columns.push(\"title\");\n            }\n\n            TreeList.fn.init.call(this, element, options);\n\n            this._unbindDataSource();\n            this._setWidth();\n        },\n\n        options: {\n            name: \"GanttList\",\n            autoBind: false,\n            sortable: true,\n            selectable: true,\n            _editCellEvent: \"dblclick\",\n            _tabCycleStop: true,\n            navigatable: false,\n            editable: {\n                move: true,\n                mode: \"incell\"\n            },\n            resizable: false,\n            renderAllRows: false\n        },\n\n        destroy: function() {\n            TreeList.fn.destroy.call(this);\n            kendo.destroy(this.element);\n        },\n\n        closeCell: function(isCancel) {\n            var that = this;\n            var cell = (that.editor || {}).element;\n            var tr;\n            var model;\n\n            if (!cell || !cell[0] || !that._isIncellEditable()) {\n                return;\n            }\n\n            model = that.dataItem(cell);\n            that._cancelEditor();\n            cell.removeClass(listStyles.editCell);\n            tr = cell.parent().removeClass(listStyles.editRow);\n\n            if (that.lockedContent) {\n                that._relatedRow(tr).removeClass(listStyles.editRow);\n            }\n\n            if (isCancel) {\n                that._render();\n            }\n\n            that.trigger(\"itemChange\", { item: tr, data: model, ns: ui });\n\n            if (that.lockedContent) {\n                that._adjustRowHeight(tr.css(\"height\", \"\")[0], that._relatedRow(tr).css(\"height\", \"\")[0]);\n            }\n        },\n\n        insertAfter: function(nodeData, referenceNode) {\n            if (!nodeData || !referenceNode) {\n                return;\n            }\n\n            var orderId = referenceNode.orderId;\n            var taskInfo = {\n                parentId: referenceNode.parentId\n            };\n\n            if (referenceNode.parentId === nodeData.parentId && referenceNode.orderId > nodeData.orderId) {\n                taskInfo.orderId = orderId;\n            } else {\n                taskInfo.orderId = orderId + 1;\n            }\n\n            this.trigger(\"reorder\", {\n                task: nodeData,\n                updateInfo: taskInfo\n            });\n        },\n\n        insertBefore: function(nodeData, referenceNode) {\n            if (!nodeData || !referenceNode) {\n                return;\n            }\n\n            var orderId = referenceNode.orderId;\n            var taskInfo = {\n                parentId: referenceNode.parentId\n            };\n\n            if (referenceNode.parentId === nodeData.parentId &&\n                referenceNode.orderId > nodeData.orderId) {\n                    taskInfo.orderId = orderId - 1;\n            } else {\n                taskInfo.orderId = orderId;\n            }\n\n            this.trigger(\"reorder\", {\n                task: nodeData,\n                updateInfo: taskInfo\n            });\n        },\n\n        _adjustHeight: function() {\n            var element = this.element;\n            var contentWrap = element.find(DOT + listStyles.gridContentWrap);\n            var header = element.find(DOT + listStyles.gridHeader);\n            var height;\n            var scrollbar = kendo.support.scrollbar();\n\n            if (this._isHeightSet(element)) {\n                height = element.height() - outerHeight(header);\n\n                contentWrap.height(height);\n\n                if (this._hasLockedColumns) {\n                    scrollbar = this.table[0].offsetWidth > this.table.parent()[0].clientWidth ? scrollbar : 0;\n                    this.lockedContent.height(height - scrollbar);\n                }\n            }\n        },\n\n        _adjustRowHeight: function(row1, row2) {\n            var height;\n            var offsetHeight1 = row1.offsetHeight;\n            var offsetHeight2 = row2.offsetHeight;\n\n            if (offsetHeight1 > offsetHeight2) {\n                height = offsetHeight1 + \"px\";\n            } else if (offsetHeight1 < offsetHeight2) {\n                height = offsetHeight2 + \"px\";\n            }\n\n            if (height) {\n                row1.style.height = row2.style.height = height;\n            }\n         },\n\n        // identical code found in treelist, grid & scheduler :(\n        _isHeightSet: function(el) {\n            var initialHeight, newHeight;\n            if (el[0].style.height) {\n                return true;\n            } else {\n                initialHeight = el.height();\n            }\n\n            el.height(\"auto\");\n            newHeight = el.height();\n            el.height(\"\");\n\n            return (initialHeight != newHeight);\n        },\n\n        _attachCellEditingEventHandlers: function() {\n            var that = this,\n                editable = that.options.editable;\n\n            TreeList.fn._attachCellEditingEventHandlers.call(that);\n\n            if (that._isIncellEditable() && editable.update !== false) {\n\n                if (mobileOS) {\n                    that.touch = that.content\n                        .kendoTouch({\n                            filter: \"td\",\n                            touchstart: function(e) {\n                                that._mouseDownHandler(e.touch);\n                            },\n                            doubletap: function(e) {\n                                if (e.event.target.classList.contains(\"k-icon\") || e.event.target.classList.contains(\"k-svg-icon\")) {\n                                    return;\n                                }\n                                that._openEditorHandler(e.touch);\n                            }\n                        }).data(\"kendoTouch\");\n                }\n            }\n        },\n\n        _blurActiveElement: function() {\n            var activeElement = kendo._activeElement();\n\n            if (activeElement && activeElement.nodeName.toLowerCase() !== \"body\") {\n                $(activeElement).trigger(\"blur\");\n            }\n        },\n\n        _columns: function() {\n            var that = this,\n                columns = this.options.columns;\n\n            that._hasExpandable = false;\n\n            columns.forEach(function(item) {\n                if (item.expandable) {\n                    that._hasExpandable = true;\n                }\n            });\n\n            that.columns = that.options.columns = map(columns, that._eachColumn.bind(that));\n\n            TreeList.fn._columns.call(that);\n        },\n\n        _columnEditor: function(column) {\n            var attr = {\n                \"name\": column.field,\n                \"required\": true\n            };\n\n            attr[BINDING] = \"value:\" + column.field;\n            attr[DATATYPE] = \"date\";\n            attr[FORMAT] = kendo._extractFormat(column.format);\n\n            return function(container, options) {\n                var model = options.model,\n                    field = model.fields[column.field] || model[column.field],\n                    validation = field.validation;\n\n                if (validation && validation.dateCompare && isFunction(validation.dateCompare) && validation.message) {\n                    $('<span ' + kendo.attr(\"for\") + '=\"' + column.field + '\" class=\"k-invalid-msg\"/>')\n                        .hide()\n                        .appendTo(container);\n\n                    attr[kendo.attr(\"dateCompare-msg\")] = validation.message;\n                }\n\n                $('<input type=\"text\"/>')\n                    .attr(attr)\n                    .prependTo(container)\n                    .kendoDateTimePicker({ format: options.format });\n            };\n        },\n\n        _columnFromElement: function(element) {\n            var td = element.closest(\"td\"),\n                tr = td.parent(),\n                idx = tr.children().index(td);\n\n            return this.columns[idx];\n        },\n\n        _eachColumn: function(column) {\n            var that = this,\n                resourcesField = that.options.resourcesField,\n                isSortable = this.options.sortable;\n\n            var model = function() {\n                this.field = \"\";\n                this.title = \"\";\n                this.editable = function() { return false; };\n                this.sortable = false;\n            };\n\n            var formatResources = function(task) {\n                var value = task.get(resourcesField) || [],\n                    formatedValue = [];\n\n                for (var i = 0; i < value.length; i++) {\n                    formatedValue.push(kendo.format(\"{0} [{1}]\", value[i].get(\"name\"), value[i].get(\"formatedValue\")));\n                }\n\n                return formatedValue.join(\", \");\n            };\n\n            if (column.columns) {\n                that.hasNestedColumns = true;\n                column.columns = map(column.columns, this._eachColumn.bind(this));\n            }\n\n            if (typeof column === STRING) {\n                column = {\n                    field: column,\n                    title: titleFromField[column]\n                };\n            }\n\n            if (column.editable === true) {\n                column.editable = function() {\n                    return true;\n                };\n            } else {\n                column.editable = function() {\n                    return false;\n                };\n            }\n\n            if (column.field === \"start\" || column.field === \"end\") {\n                column.format = kendo.getCulture().calendar.patterns[column.format] || column.format || defaultDateFormat;\n\n                if (!column.editor) {\n                    if (column.format === defaultDateFormat || column.format.toLowerCase().indexOf(\"h\") > -1) {\n                        column.editor = that._columnEditor(column);\n                    }\n                }\n            }\n            if (column.field === resourcesField) {\n                column.sortable = false;\n                column.template = column.template || formatResources;\n            }\n            if (!that._hasExpandable && column.field === \"title\") {\n                column.expandable = true;\n            }\n\n            if (isSortable && !column.sortable) {\n                column.sortable = false;\n            }\n\n            return extend(new model(), column);\n        },\n\n        _editCell: function(cell, column, model) {\n            var that = this,\n                resourcesField = that.options.resourcesField,\n                modelCopy = that.dataSource._createNewModel(model.toJSON()),\n                editedCell;\n\n            clearTimeout(that._closeCellTimeout);\n            if (column.field === resourcesField) {\n                column.editor(cell, modelCopy);\n                return;\n            } else {\n                if (that.trigger(BEFORE_EDIT, { model: model, container: cell })) {\n                    that.dataSource._restorePageSizeAfterAddChild();\n                    return;\n                }\n\n                that.closeCell();\n\n                model._edit = true;\n\n                that._cancelEditor();\n\n                that._render({\n                    editedColumn: column,\n                    editedColumnIndex: cell.index()\n                });\n\n                editedCell = that.table.add(that.lockedTable).find(DOT + listStyles.editCell).first();\n\n                that.editor = that._createIncellEditor(editedCell, {\n                    columns: [column],\n                    model: model,\n                    change: function(e) {\n                        if (that.trigger(SAVE, { values: e.values, container: cell, model: model } )) {\n                            e.preventDefault();\n                        }\n                    }\n                });\n\n                // refresh the current element as the DOM element reference can be changed after render()\n                that._current = editedCell;\n\n                that.trigger(EDIT, { container: cell, model: model });\n            }\n        },\n\n        _modelFromElement: function(element) {\n            var row = element.closest(\"tr\"),\n                model = this.dataSource.getByUid(row.attr(kendo.attr(\"uid\")));\n\n            return model;\n        },\n\n        _mouseDownHandler: function(e) {\n            var currentTarget = $(e.currentTarget);\n\n            if (!currentTarget.hasClass(listStyles.editCell)) {\n                this._blurActiveElement();\n            }\n        },\n\n        _openEditorHandler: function(e) {\n            var that = this,\n                td = $(e.currentTarget),\n                isLockedCell = that.lockedTable && td.closest(\"table\")[0] === that.lockedTable[0],\n                selectable = that.selectable && that.selectable.options.multiple;\n\n            if (td.hasClass(listStyles.editCell) ||\n                td.has(\"a.k-grid-delete\").length ||\n                td.has(\"button.k-grid-delete\").length ||\n                (td.closest(\"tbody\")[0] !== that.tbody[0] && !isLockedCell) ||\n                $(e.target).is(\":input\") ||\n                $(e.target).is(`[class*=${listStyles.iconExpand}]`) ||\n                $(e.target).is(`[class*=${listStyles.iconCollapse}]`)) {\n\n                return;\n            }\n\n            if (that.editor) {\n                if (that.editor.end()) {\n                    if (selectable) {\n                        $(activeElement()).trigger(\"blur\");\n                    }\n                    that.closeCell();\n                    that.editCell(td);\n                }\n            } else {\n                that.editCell(td);\n            }\n        },\n\n        _renderTree: function(taskTree) {\n            TreeList.fn._render.call(this);\n\n            if (this.hasNestedColumns) {\n                this.element.addClass(\"k-gantt-treelist-nested-columns\");\n            }\n\n            if (taskTree && taskTree.length && !taskTree.editedColumn) {\n                if (this.options.rowHeight) {\n                    this._rowHeight(taskTree);\n                }\n\n                this.trigger(RENDER);\n            }\n\n            this._adjustHeight();\n        },\n\n        _rowHeight: function(tasks) {\n            var content = this.content,\n                options = this.options,\n                rowHeight = typeof options.rowHeight === STRING ? options.rowHeight : options.rowHeight + \"px\",\n                table = $(kendo.format(SIZE_CALCULATION_TEMPLATE, rowHeight)),\n                height;\n\n            kendo.applyStylesFromKendoAttributes(table, [\"height\", \"visibility\"]);\n            content.append(table);\n            height = outerHeight(table.find(\"tr\"));\n            table.remove();\n\n            this.element.find('[role=\"treegrid\"]').css(\"height\", (tasks.length * height) + \"px\");\n        },\n\n        _setData: function(tasks) {\n            this.dataSource.data(tasks);\n        },\n\n        _setWidth: function() {\n            this.element.find(\".k-grid-header table\").css(\"minWidth\", this.options.listWidth);\n            this.content.find(\"table\").css(\"minWidth\", this.options.listWidth);\n        }\n    });\n\n    ui.plugin(GanttList);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}