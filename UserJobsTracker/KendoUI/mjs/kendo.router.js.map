{"version":3,"sources":["raw-mjs/kendo.router.js"],"names":["__meta__","id","name","category","description","depends","hidden","$","undefined$1","kendo","window","CHANGE","SAME","support","location","history","BROKEN_BACK_NAV","browser","msie","hashStrip","document","absoluteURL","path","pathPrefix","RegExp","test","protocol","host","replace","hashDelimiter","bang","locationHash","href","indexOf","split","stripRoot","root","url","substr","length","HistoryAdapter","Class","extend","back","setTimeout","forward","replaceLocation","PushStateAdapter","init","this","navigate","to","pushState","title","replaceState","normalize","current","pathname","search","change","callback","bind","stop","unbind","normalizeCurrent","options","fixedUrl","hash","hashBang","fixHash","fixBang","HashAdapter","_id","guid","prefix","fix","hashChange","on","_interval","setInterval","off","clearInterval","History","Observable","start","_started","adapter","createAdapter","historyLength","locations","_checkUrl","silent","_navigate","backCalled","push","decodeURIComponent","trigger","decode","call","newLength","navigatingInExisting","prev","backButtonPressed","pop","jQuery","kendo$1","INIT","ROUTE_MISSING","BACK","optionalParam","namedParam","splatParam","escapeRegExp","namedParamReplace","match","optional","stripUrl","Route","route","ignoreCase","routeToRegExp","_callback","params","idx","queryStringParams","parseQueryStringParams","_back","exec","slice","apply","worksWith","Router","fn","routes","destroy","_urlChangedProxy","_sameProxy","_backProxy","that","backProxy","e","urlChangedProxy","_urlChanged","same","_same","initEventObject","preventDefault","noop"],"mappings":"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","file":"kendo.router.js","sourcesContent":["import './kendo.core.js';\n\nvar __meta__ = {\n    id: \"router\",\n    name: \"Router\",\n    category: \"framework\",\n    description: \"The Router class is responsible for tracking the application state and navigating between the application states.\",\n    depends: [ \"core\" ],\n    hidden: false\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        CHANGE = \"change\",\n        BACK = \"back\",\n        SAME = \"same\",\n        support = kendo.support,\n        location = window.location,\n        history = window.history,\n        CHECK_URL_INTERVAL = 50,\n        BROKEN_BACK_NAV = kendo.support.browser.msie,\n        hashStrip = /^#*/,\n        document = window.document;\n\n    function absoluteURL(path, pathPrefix) {\n        if (!pathPrefix) {\n            return path;\n        }\n\n        if (path + \"/\" === pathPrefix) {\n            path = pathPrefix;\n        }\n\n        var regEx = new RegExp(\"^\" + pathPrefix, \"i\");\n\n        if (!regEx.test(path)) {\n            path = pathPrefix + \"/\" + path;\n        }\n\n        return location.protocol + '//' + (location.host + \"/\" + path).replace(/\\/\\/+/g, '/');\n    }\n\n    function hashDelimiter(bang) {\n        return bang ? \"#!\" : \"#\";\n    }\n\n    function locationHash(hashDelimiter) {\n        var href = location.href;\n\n        // ignore normal anchors if in hashbang mode - however, still return \"\" if no hash present\n        if (hashDelimiter === \"#!\" && href.indexOf(\"#\") > -1 && href.indexOf(\"#!\") < 0) {\n            return null;\n        }\n\n        return href.split(hashDelimiter)[1] || \"\";\n    }\n\n    function stripRoot(root, url) {\n        if (url.indexOf(root) === 0) {\n            return (url.substr(root.length)).replace(/\\/\\//g, '/');\n        } else {\n            return url;\n        }\n    }\n\n    var HistoryAdapter = kendo.Class.extend({\n        back: function() {\n            if (BROKEN_BACK_NAV) {\n                setTimeout(function() { history.back(); });\n            } else {\n                history.back();\n            }\n        },\n\n        forward: function() {\n            if (BROKEN_BACK_NAV) {\n                setTimeout(function() { history.forward(); });\n            } else {\n                history.forward();\n            }\n        },\n\n        length: function() {\n            return history.length;\n        },\n\n        replaceLocation: function(url) {\n            location.replace(url);\n        }\n    });\n\n    var PushStateAdapter = HistoryAdapter.extend({\n        init: function(root) {\n            this.root = root;\n        },\n\n        navigate: function(to) {\n            history.pushState({}, document.title, absoluteURL(to, this.root));\n        },\n\n        replace: function(to) {\n            history.replaceState({}, document.title, absoluteURL(to, this.root));\n        },\n\n        normalize: function(url) {\n            return stripRoot(this.root, url);\n        },\n\n        current: function() {\n            var current = location.pathname;\n\n            if (location.search) {\n                current += location.search;\n            }\n\n            return stripRoot(this.root, current);\n        },\n\n        change: function(callback) {\n            $(window).bind(\"popstate.kendo\", callback);\n        },\n\n        stop: function() {\n            $(window).unbind(\"popstate.kendo\");\n        },\n\n        normalizeCurrent: function(options) {\n            var fixedUrl,\n                root = options.root,\n                pathname = location.pathname,\n                hash = locationHash(hashDelimiter(options.hashBang));\n\n            if (root === pathname + \"/\") {\n                fixedUrl = root;\n            }\n\n            if (root === pathname && hash) {\n                fixedUrl = absoluteURL(hash.replace(hashStrip, ''), root);\n            }\n\n            if (fixedUrl) {\n                history.pushState({}, document.title, fixedUrl);\n            }\n        }\n    });\n\n    function fixHash(url) {\n        return url.replace(/^(#)?/, \"#\");\n    }\n\n    function fixBang(url) {\n        return url.replace(/^(#(!)?)?/, \"#!\");\n    }\n\n    var HashAdapter = HistoryAdapter.extend({\n        init: function(bang) {\n            this._id = kendo.guid();\n            this.prefix = hashDelimiter(bang);\n            this.fix = bang ? fixBang : fixHash;\n        },\n\n        navigate: function(to) {\n            location.hash = this.fix(to);\n        },\n\n        replace: function(to) {\n            this.replaceLocation(this.fix(to));\n        },\n\n        normalize: function(url) {\n            if (url.indexOf(this.prefix) < 0) {\n               return url;\n            } else {\n                return url.split(this.prefix)[1];\n            }\n        },\n\n        change: function(callback) {\n            if (support.hashChange) {\n                $(window).on(\"hashchange.\" + this._id, callback);\n            } else {\n                this._interval = setInterval(callback, CHECK_URL_INTERVAL);\n            }\n        },\n\n        stop: function() {\n            $(window).off(\"hashchange.\" + this._id);\n            clearInterval(this._interval);\n        },\n\n        current: function() {\n            return locationHash(this.prefix);\n        },\n\n        normalizeCurrent: function(options) {\n            var pathname = location.pathname,\n                root = options.root;\n\n            if (options.pushState && root !== pathname) {\n                this.replaceLocation(root + this.prefix + stripRoot(root, pathname));\n                return true; // browser will reload at this point.\n            }\n\n            return false;\n        }\n    });\n\n    var History = kendo.Observable.extend({\n        start: function(options) {\n            options = options || {};\n\n            this.bind([CHANGE, BACK, SAME], options);\n\n            if (this._started) {\n                return;\n            }\n\n            this._started = true;\n\n            options.root = options.root || \"/\";\n\n            var adapter = this.createAdapter(options),\n                current;\n\n            // adapter may reload the document\n            if (adapter.normalizeCurrent(options)) {\n                return;\n            }\n\n            current = adapter.current();\n\n            $.extend(this, {\n                adapter: adapter,\n                root: options.root,\n                historyLength: adapter.length(),\n                current: current,\n                locations: [current]\n            });\n\n            adapter.change(this._checkUrl.bind(this));\n        },\n\n        createAdapter: function(options) {\n           return support.pushState && options.pushState ? new PushStateAdapter(options.root) : new HashAdapter(options.hashBang);\n        },\n\n        stop: function() {\n            if (!this._started) {\n                return;\n            }\n            this.adapter.stop();\n            this.unbind(CHANGE);\n            this._started = false;\n        },\n\n        change: function(callback) {\n            this.bind(CHANGE, callback);\n        },\n\n        replace: function(to, silent) {\n\n            this._navigate(to, silent, function(adapter) {\n                adapter.replace(to);\n                this.locations[this.locations.length - 1] = this.current;\n            });\n        },\n\n        navigate: function(to, silent) {\n            if (to === \"#:back\") {\n                this.backCalled = true;\n                this.adapter.back();\n                return;\n            }\n\n            this._navigate(to, silent, function(adapter) {\n                adapter.navigate(to);\n                this.locations.push(this.current);\n            });\n        },\n\n        _navigate: function(to, silent, callback) {\n            var adapter = this.adapter;\n\n            to = adapter.normalize(to);\n\n            if (this.current === to || this.current === decodeURIComponent(to)) {\n                this.trigger(SAME);\n                return;\n            }\n\n            if (!silent) {\n                if (this.trigger(CHANGE, { url: to, decode: false })) {\n                    return;\n                }\n            }\n\n            this.current = to;\n\n            callback.call(this, adapter);\n\n            this.historyLength = adapter.length();\n        },\n\n        _checkUrl: function() {\n            var adapter = this.adapter,\n                current = adapter.current(),\n                newLength = adapter.length(),\n                navigatingInExisting = this.historyLength === newLength,\n                back = current === this.locations[this.locations.length - 2] && navigatingInExisting,\n                backCalled = this.backCalled,\n                prev = this.current;\n\n            if (current === null || this.current === current || this.current === decodeURIComponent(current)) {\n                return true;\n            }\n\n            this.historyLength = newLength;\n            this.backCalled = false;\n\n            this.current = current;\n\n            if (back && this.trigger(\"back\", { url: prev, to: current })) {\n                adapter.forward();\n                this.current = prev;\n                return;\n            }\n\n            if (this.trigger(CHANGE, { url: current, backButtonPressed: !backCalled })) {\n                if (back) {\n                    adapter.forward();\n                } else {\n                    adapter.back();\n                    this.historyLength --;\n                }\n                this.current = prev;\n                return;\n            }\n\n            if (back) {\n                this.locations.pop();\n            } else {\n                this.locations.push(current);\n            }\n        }\n    });\n\n    kendo.History = History;\n    kendo.History.HistoryAdapter = HistoryAdapter;\n    kendo.History.HashAdapter = HashAdapter;\n    kendo.History.PushStateAdapter = PushStateAdapter;\n    kendo.absoluteURL = absoluteURL;\n    kendo.history = new History();\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\n(function() {\n    var kendo = window.kendo,\n        history = kendo.history,\n        Observable = kendo.Observable,\n        INIT = \"init\",\n        ROUTE_MISSING = \"routeMissing\",\n        CHANGE = \"change\",\n        BACK = \"back\",\n        SAME = \"same\",\n        optionalParam = /\\((.*?)\\)/g,\n        namedParam = /(\\(\\?)?:\\w+/g,\n        splatParam = /\\*\\w+/g,\n        escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n    function namedParamReplace(match, optional) {\n        return optional ? match : '([^\\/]+)';\n    }\n\n    function routeToRegExp(route, ignoreCase) {\n        return new RegExp('^' + route\n            .replace(escapeRegExp, '\\\\$&')\n            .replace(optionalParam, '(?:$1)?')\n            .replace(namedParam, namedParamReplace)\n            .replace(splatParam, '(.*?)') + '$', ignoreCase ? \"i\" : \"\");\n    }\n\n    function stripUrl(url) {\n        return url.replace(/(\\?.*)|(#.*)/g, \"\");\n    }\n\n    var Route = kendo.Class.extend({\n        init: function(route, callback, ignoreCase) {\n            if (!(route instanceof RegExp)) {\n                route = routeToRegExp(route, ignoreCase);\n            }\n\n            this.route = route;\n            this._callback = callback;\n        },\n\n        callback: function(url, back, decode) {\n            var params,\n                idx = 0,\n                length,\n                queryStringParams = kendo.parseQueryStringParams(url);\n                queryStringParams._back = back;\n\n            url = stripUrl(url);\n            params = this.route.exec(url).slice(1);\n            length = params.length;\n\n            if (decode) {\n                for (; idx < length; idx ++) {\n                    if (typeof params[idx] !== 'undefined') {\n                        params[idx] = decodeURIComponent(params[idx]);\n                    }\n                }\n            }\n\n            params.push(queryStringParams);\n\n            this._callback.apply(null, params);\n        },\n\n        worksWith: function(url, back, decode) {\n            if (this.route.test(stripUrl(url))) {\n                this.callback(url, back, decode);\n                return true;\n            } else {\n                return false;\n            }\n        }\n    });\n\n    var Router = Observable.extend({\n        init: function(options) {\n            if (!options) {\n                options = {};\n            }\n\n            Observable.fn.init.call(this);\n\n            this.routes = [];\n            this.pushState = options.pushState;\n            this.hashBang = options.hashBang;\n            this.root = options.root;\n            this.ignoreCase = options.ignoreCase !== false;\n\n            this.bind([INIT, ROUTE_MISSING, CHANGE, SAME, BACK], options);\n        },\n\n        destroy: function() {\n            history.unbind(CHANGE, this._urlChangedProxy);\n            history.unbind(SAME, this._sameProxy);\n            history.unbind(BACK, this._backProxy);\n            this.unbind();\n        },\n\n        start: function() {\n            var that = this,\n                sameProxy = function() { that._same(); },\n                backProxy = function(e) { that._back(e); },\n                urlChangedProxy = function(e) { that._urlChanged(e); };\n\n            history.start({\n                same: sameProxy,\n                change: urlChangedProxy,\n                back: backProxy,\n                pushState: that.pushState,\n                hashBang: that.hashBang,\n                root: that.root\n            });\n\n            // eslint-disable-next-line no-undef\n            var initEventObject = { url: history.current || \"/\", preventDefault: $.noop };\n\n            if (!that.trigger(INIT, initEventObject)) {\n                that._urlChanged(initEventObject);\n            }\n\n            this._urlChangedProxy = urlChangedProxy;\n            this._backProxy = backProxy;\n        },\n\n        route: function(route, callback) {\n            this.routes.push(new Route(route, callback, this.ignoreCase));\n        },\n\n        navigate: function(url, silent) {\n            kendo.history.navigate(url, silent);\n        },\n\n        replace: function(url, silent) {\n            kendo.history.replace(url, silent);\n        },\n\n        _back: function(e) {\n            if (this.trigger(BACK, { url: e.url, to: e.to })) {\n                e.preventDefault();\n            }\n        },\n\n        _same: function() {\n            this.trigger(SAME);\n        },\n\n        _urlChanged: function(e) {\n            var url = e.url;\n            var decode = !!e.decode;\n            var back = e.backButtonPressed;\n\n            if (!url) {\n                url = \"/\";\n            }\n\n            if (this.trigger(CHANGE, { url: e.url, params: kendo.parseQueryStringParams(e.url), backButtonPressed: back })) {\n                e.preventDefault();\n                return;\n            }\n\n            var idx = 0,\n                routes = this.routes,\n                route,\n                length = routes.length;\n\n            for (; idx < length; idx ++) {\n                 route = routes[idx];\n\n                 if (route.worksWith(url, back, decode)) {\n                    return;\n                 }\n            }\n\n            if (this.trigger(ROUTE_MISSING, { url: url, params: kendo.parseQueryStringParams(url), backButtonPressed: back })) {\n                e.preventDefault();\n            }\n        }\n    });\n\n    kendo.Router = Router;\n})();\n\nexport { kendo$1 as default };\n"]}