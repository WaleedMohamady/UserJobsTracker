{"version":3,"sources":["raw-mjs/kendo.gantt.js"],"names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","keys","supportsMedia","mobileOS","support","Widget","ui","encode","htmlEncode","ObservableObject","data","ObservableArray","Query","isArray","Array","isFunction","extend","isPlainObject","outerWidth","_outerWidth","outerHeight","_outerHeight","NS","TABINDEX","STRING","DOT","VIEWS_DROPDOWN_TEMPLATE","label","styles","views","viewsDropdown","Object","map","view","title","join","ADD_ACTIONS","text","ganttStyles","wrapper","plannedTasks","rowHeight","content","listWrapper","list","timelineWrapper","timeline","splitBar","splitter","popupWrapper","popupList","resizeHandle","icon","item","line","buttonDelete","buttonCancel","buttonSave","buttonToggle","buttonDefaults","primary","hovered","selected","focused","focusedCell","gridHeader","gridHeaderWrap","gridContent","tasks","popup","form","editForm","formContainer","resourcesFormContainer","message","buttonsContainer","button","editField","editLabel","resourcesField","toolbar","headerWrapper","footerWrapper","viewsWrapper","iconPlus","iconPdf","iconToggle","viewButton","link","pdfButton","appendButton","selector","uid","attr","focusTable","table","direct","parents","scrollPositions","parentsUntil","filter","index","element","getComputedStyles","overflow","add","each","parent","scrollTop","setActive","e","focus","Gantt","init","options","events","dataSource","fn","call","this","_events","_wrapper","_resources","length","_timeline","_processDefaults","_toolbar","_footer","_splitter","_adjustDimensions","_preventRefresh","_selectedViewName","_dataSource","_assignments","_list","_dependencies","_scrollable","_dataBind","_attachEvents","_createEditor","notify","_showWatermarkOverlay","autoBind","navigatable","selectable","editable","resizable","columnResizeHandleWidth","columns","dependencies","resources","assignments","taskTemplate","messages","save","cancel","destroy","deleteTaskConfirmation","deleteDependencyConfirmation","deleteTaskWindowTitle","deleteDependencyWindowTitle","selectView","day","week","month","year","start","end","actions","append","addChild","insertBefore","insertAfter","pdf","toggle","editor","editorTitle","resourcesEditorTitle","plannedStart","plannedEnd","percentComplete","assignButton","resourcesHeader","unitsHeader","addNew","percentCompleteHint","remove","actualStart","actualEnd","parentOptionLabel","general","predecessors","successors","other","dependencyType","switchText","offsetTooltipAdvanced","offsetTooltipDelay","seconds","minutes","hours","days","showWorkHours","showWorkDays","workDayStart","Date","workDayEnd","workWeekStart","workWeekEnd","hourSpan","snap","height","listWidth","showPlannedTasks","select","value","find","_selectionUpdate","clearSelection","unbind","_refreshHandler","_progressHandler","_errorHandler","_dependencyRefreshHandler","_dependencyErrorHandler","getKendoToolBar","footer","_editor","_resourceEditorWindow","_resizeDraggable","layout","getKendoSplitter","off","_mediaQuery","removeListener","_mediaQueryHandler","_resizeHandler","setOptions","newOptions","deepExtend","selectedView","isSettings","type","empty","_setEvents","resize","bind","on","matches","kendoSplitter","orientation","panes","collapsible","scrollable","size","width","addClass","appendTo","css","treelistWrapper","_viewClickHandler","target","trigger","preventDefault","_togglePane","that","treelist","contentSelector","is","removeClass","refresh","_resize","ns","viewsButtons","toolbarStyles","actionsMessages","defaults","menuButtons","m","attributes","class","click","_addClickHandler","open","_openAddClickHandler","saveAsPDF","showText","switchLabel","template","component","componentOptions","checked","change","_togglePlannedTasks","unchecked","viewsDdl","togglable","group","viewsGroup","current","toLowerCase","push","values","t","buttons","_viewsButtons","defaultCommands","_processTools","items","commands","tools","spacerPresent","create","c","splitbar","toolbarEl","_suppressResize","hide","show","viewsDropdownSelector","toolsOptions","prepend","kendoToolBar","defaultTools","parentMessages","matchMedia","addListener","val","toggleSwitch","direction","animation","effects","toolbarHeight","footerHeight","totalHeight","totalWidth","treeListVisible","splitBarWidth","treeListWidth","timelineWidth","children","_scrollTo","action","scrollTarget","closest","get","scrollIntoView","_addTask","orderId","task","_createNewModel","firstSlot","_timeSlots","set","_createTask","dataItem","taskParent","_getListEditable","update","reorder","mode","move","reorderable","clickMoveClick","_getListOptions","filterable","columnMenu","field","_attachResourceEditor","column","i","_resourcePopupEditor","_attachListEvents","oldIndex","newIndex","oldWidth","newWidth","_navigatable","model","container","cell","_preventItemChange","closeCell","key","updatedValues","previousTask","updateDuration","duration","updatePlannedDuration","plannedDuration","hasOwnProperty","getTime","isCurrentInHeader","currentIndex","rowIndex","updateInfo","hasChanges","cancelChanges","_updateAssignments","Math","max","cellIndex","_requestStart","sync","then","_tabPressed","td","tbody","eq","_setCurrent","sender","position","parentId","source","sort","dir","_updateTask","selection","listElement","listOptions","GanttList","prefix","edit","navigate","trimOptions","GanttTimeline","viewName","replace","viewsEl","getKendoButtonGroup","getByUid","resizeStart","dependency","predecessorId","predecessor","successorId","successor","_createDependency","currentUid","editTask","removeTask","summary","removeDependency","_error","GanttDataSource","refreshDependencies","GanttDependencyDataSource","dataTextField","dataColorField","dataFormatField","DataSource","_assignmentsRefreshHandler","dataTaskIdField","dataResourceIdField","dataValueField","gantt","PopupEditor","_createResourceEditor","cancelTask","saveTask","updateDependencies","buttonsEl","dialog","popupStyles","dialogEl","format","kendoButton","themeColor","updateModel","close","kendoWindow","modal","draggable","visible","deactivate","center","unitsValidation","step","min","assignmentsModel","schema","resourceTextField","fields","Units","validation","_resourceEditor","ResourceEditor","r","range","_render","taskTree","_renderDependencies","date","_scrollToDate","_modelFromElement","setDataSource","fetch","setDependenciesDataSource","assignment","resource","taskId","resourceId","hasMatch","operator","toArray","_updateAssignment","splice","_removeAssignment","shift","j","newLength","_createAssignment","taskCopy","toJSON","_editTask","difference","hasResourceChanges","k","updated","u","some","concat","dirty","_syncDataSource","_updateDependency","created","d","_preventDependencyRefresh","destroyed","resourceValueField","_taskConfirm","_removeTask","insert","_scrollToUid","resourceValue","_dependencyConfirm","_removeDependency","_removeTaskDependencies","_removeTaskAssignments","callback","_confirm","confirmation","showDialog","_progress","cachedUid","scrollToUid","cachedIndex","_selected","_assignResources","_renderTree","_current","assigments","applyTaskResource","setter","wrapTask","resourcedId","valueFormat","formatedValue","toString","color","_wrapResourceData","result","taskAssignments","valuePerResource","progress","headerSelector","timelineHeader","timelineContent","treeListHeader","treeListContent","scrollLeft","delta","wheelDeltaY","currentTarget","one","headerTable","contentTable","tables","isInput","ctrlKey","_focusTimeout","setTimeout","focusedIndex","keyCode","focusSequence","contains","F10","first","TAB","shiftKey","hasClass","last","DELETE","selectedTask","deleteAction","tagName","_viewByIndex","promises","when","apply","done","_adjustHeight","_renderCurrentTime","toggleClass","_setPlanned","PDFMixin","_drawPDF","listTableWidth","listTableHeight","toolbarsHeight","timelineTableWidth","clone","_drawPDFShadow","avoidLinks","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.gantt.js","sourcesContent":["import './kendo.data.js';\nimport './kendo.resizable.js';\nimport './kendo.switch.js';\nimport './kendo.gantt.data.js';\nimport './kendo.gantt.editors.js';\nimport './kendo.gantt.list.js';\nimport './kendo.gantt.timeline.js';\nimport './kendo.splitter.js';\nimport './kendo.pdf.js';\nimport './kendo.toolbar.js';\nimport './kendo.html.button.js';\n\nvar __meta__ = {\n    id: \"gantt\",\n    name: \"Gantt\",\n    category: \"web\",\n    description: \"The Gantt component.\",\n    depends: [ \"data\", \"resizable\", \"switch\", \"gantt.data\", \"gantt.editors\", \"gantt.list\", \"gantt.timeline\", \"pdf\", \"toolbar\", \"html.button\" ]\n};\n(function($, undefined$1) {\n\n    var kendo = window.kendo,\n        keys = kendo.keys,\n        supportsMedia = \"matchMedia\" in window,\n        mobileOS = kendo.support.mobileOS,\n        Widget = kendo.ui.Widget,\n        encode = kendo.htmlEncode,\n        ObservableObject = kendo.data.ObservableObject,\n        ObservableArray = kendo.data.ObservableArray,\n        Query = kendo.data.Query,\n        isArray = Array.isArray,\n        isFunction = kendo.isFunction,\n        extend = $.extend,\n        isPlainObject = $.isPlainObject,\n        outerWidth = kendo._outerWidth,\n        outerHeight = kendo._outerHeight,\n        defaultIndicatorWidth = 3,\n\n        NS = \".kendoGantt\",\n        PERCENTAGE_FORMAT = \"p0\",\n        TABINDEX = \"tabIndex\",\n        STRING = \"string\",\n        DOT = \".\",\n        TASK_DELETE_CONFIRM = \"Are you sure you want to delete this task?\",\n        DEPENDENCY_DELETE_CONFIRM = \"Are you sure you want to delete this dependency?\",\n        VIEWS_DROPDOWN_TEMPLATE = ({ label, styles, views }) => `<select aria-label=\"${label}\" class=\"k-dropdown k-picker k-dropdown-list ${styles.viewsDropdown}\">` +\n            `${Object.keys(views).map(view => '<option value=\"' + view + '\">' + views[view].title + '</option>').join(\"\")}` +\n        '</select>',\n        MIN_SCREEN = \"(max-width: 480px)\",\n        ADD_ACTIONS = [{\n            data: \"add\",\n            text: \"addChild\"\n        },\n        {\n            data: \"insert-before\",\n            text: \"insertBefore\"\n        },\n        {\n            data: \"insert-after\",\n            text: \"insertAfter\"\n        }];\n\n    var ganttStyles = {\n        wrapper: \"k-gantt\",\n        plannedTasks: \"k-gantt-planned\",\n        rowHeight: \"k-gantt-rowheight\",\n        content: \"k-gantt-content\",\n        listWrapper: \"k-gantt-treelist\",\n        list: \"k-gantt-treelist\",\n        timelineWrapper: \"k-gantt-timeline-pane\",\n        timeline: \"k-gantt-timeline-pane\",\n        splitBar: \"k-splitbar\",\n        splitter: \"k-splitter\",\n        popupWrapper: \"k-list-container\",\n        popupList: \"k-list k-reset\",\n        resizeHandle: \"k-resize-handle\",\n        icon: \"k-icon\",\n        item: \"k-item\",\n        line: \"k-gantt-line\",\n        buttonDelete: \"k-gantt-delete\",\n        buttonCancel: \"k-gantt-cancel\",\n        buttonSave: \"k-gantt-update\",\n        buttonToggle: \"k-gantt-toggle\",\n        buttonDefaults: \"k-button-md k-rounded-md k-button-solid\",\n        primary: \"k-button-solid-primary\",\n        hovered: \"k-hover\",\n        selected: \"k-selected\",\n        focused: \"k-focus\",\n        focusedCell: \"k-focus\",\n        gridHeader: \"k-grid-header\",\n        gridHeaderWrap: \"k-grid-header-wrap\",\n        gridContent: \"k-grid-content\",\n        tasks: \"k-gantt-tasks\",\n        popup: {\n            form: \"k-popup-edit-form\",\n            editForm: \"k-gantt-edit-form\",\n            formContainer: \"k-edit-form-container\",\n            resourcesFormContainer: \"k-resources-form-container\",\n            message: \"k-popup-message\",\n            buttonsContainer: \"k-edit-buttons\",\n            button: \"k-button\",\n            editField: \"k-edit-field\",\n            editLabel: \"k-edit-label\",\n            resourcesField: \"k-gantt-resources\"\n        },\n        toolbar: {\n            headerWrapper: \"k-gantt-header k-gantt-toolbar\",\n            footerWrapper: \"k-gantt-footer k-gantt-toolbar\",\n            toolbar: \"k-gantt-toolbar\",\n            views: \"k-gantt-views\",\n            viewsWrapper: \"k-gantt-views-wrapper\",\n            viewsDropdown: \"k-views-dropdown\",\n            button: \"k-button\",\n            buttonToggle: \"k-gantt-toggle\",\n            buttonDefaults: \"k-button-md k-rounded-md k-button-solid\",\n            iconPlus: \"plus\",\n            iconPdf: \"file-pdf\",\n            iconToggle: \"layout-1-by-4\",\n            viewButton: \"k-view\",\n            link: \"k-link\",\n            pdfButton: \"k-gantt-pdf\",\n            appendButton: \"k-gantt-create\"\n        }\n    };\n\n    function selector(uid) {\n        return \"[\" + kendo.attr(\"uid\") + (uid ? \"='\" + uid + \"']\" : \"]\");\n    }\n\n    function trimOptions(options) {\n        delete options.name;\n        delete options.prefix;\n\n        delete options.remove;\n        delete options.edit;\n        delete options.add;\n        delete options.navigate;\n\n        return options;\n    }\n\n    function focusTable(table, direct) {\n        var wrapper = table.parents('[' + kendo.attr(\"role\") + '=\"gantt\"]');\n        var scrollPositions = [];\n        var parents = scrollableParents(wrapper);\n\n        table.attr(TABINDEX, 0);\n\n        if (direct) {\n            parents.each(function(index, parent) {\n                scrollPositions[index] = $(parent).scrollTop();\n            });\n        }\n\n        try {\n            //The setActive method does not cause the document to scroll to the active object in the current page\n            table[0].setActive();\n        } catch (e) {\n            table[0].focus();\n        }\n\n        if (direct) {\n            parents.each(function(index, parent) {\n                $(parent).scrollTop(scrollPositions[index]);\n            });\n        }\n    }\n\n    function scrollableParents(element) {\n        return $(element).parentsUntil(\"body\")\n                .filter(function(index, element) {\n                    var computedStyle = kendo.getComputedStyles(element, [\"overflow\"]);\n                    return computedStyle.overflow != \"visible\";\n                })\n                .add(window);\n    }\n\n    var Gantt = Widget.extend({\n        init: function(element, options, events) {\n            if (isArray(options)) {\n                options = { dataSource: options };\n            }\n\n            Widget.fn.init.call(this, element, options);\n\n            if (events) {\n                this._events = events;\n            }\n\n            this._wrapper();\n\n            this._resources();\n\n            if (!this.options.views || !this.options.views.length) {\n                this.options.views = [\"day\", \"week\", \"month\"];\n            }\n\n            this._timeline();\n\n            this._processDefaults();\n            this._toolbar();\n            this._footer();\n            this._splitter();\n\n            this._adjustDimensions();\n\n            // Prevent extra refresh from setting the view\n            this._preventRefresh = true;\n\n            this.view(this.timeline._selectedViewName);\n\n            this._preventRefresh = false;\n\n            this._dataSource();\n\n            this._assignments();\n\n            this._list();\n\n            this._dependencies();\n\n            this._scrollable();\n\n            this._dataBind();\n\n            this._attachEvents();\n\n            this._createEditor();\n\n            kendo.notify(this);\n\n            if (this._showWatermarkOverlay) {\n                this._showWatermarkOverlay(this.wrapper[0]);\n            }\n        },\n\n        events: [\n            \"dataBinding\",\n            \"dataBound\",\n            \"add\",\n            \"edit\",\n            \"remove\",\n            \"cancel\",\n            \"save\",\n            \"change\",\n            \"navigate\",\n            \"moveStart\",\n            \"move\",\n            \"moveEnd\",\n            \"resizeStart\",\n            \"resize\",\n            \"resizeEnd\",\n            \"columnHide\",\n            \"columnReorder\",\n            \"columnResize\",\n            \"columnShow\",\n            \"togglePlannedTasks\"\n        ],\n\n        options: {\n            name: \"Gantt\",\n            autoBind: true,\n            navigatable: true,\n            selectable: true,\n            editable: true,\n            resizable: false,\n            columnResizeHandleWidth: defaultIndicatorWidth,\n            columns: [],\n            views: [],\n            dataSource: {},\n            dependencies: {},\n            resources: {},\n            assignments: {},\n            taskTemplate: null,\n            messages: {\n                save: \"Save\",\n                cancel: \"Cancel\",\n                destroy: \"Delete\",\n                deleteTaskConfirmation: TASK_DELETE_CONFIRM,\n                deleteDependencyConfirmation: DEPENDENCY_DELETE_CONFIRM,\n                deleteTaskWindowTitle: \"Delete task\",\n                deleteDependencyWindowTitle: \"Delete dependency\",\n                selectView: \"Select view\",\n                views: {\n                    day: \"Day\",\n                    week: \"Week\",\n                    month: \"Month\",\n                    year: \"Year\",\n                    start: \"Start\",\n                    end: \"End\"\n                },\n                actions: {\n                    append: \"Add Task\",\n                    addChild: \"Add Child\",\n                    insertBefore: \"Add Above\",\n                    insertAfter: \"Add Below\",\n                    pdf: \"Export to PDF\",\n                    toggle: \"Toggle pane\"\n                },\n                editor: {\n                    editorTitle: \"Task\",\n                    resourcesEditorTitle: \"Resources\",\n                    title: \"Title\",\n                    start: \"Start\",\n                    end: \"End\",\n                    plannedStart: \"Planned Start\",\n                    plannedEnd: \"Planned End\",\n                    percentComplete: \"Complete\",\n                    resources: \"Resources\",\n                    assignButton: \"Assign\",\n                    resourcesHeader: \"Resources\",\n                    unitsHeader: \"Units\",\n                    parent: \"Parent\",\n                    addNew: \"Add\",\n                    name: \"Name\",\n                    percentCompleteHint: \"value from 0 to 1\",\n                    remove: \"Remove\",\n                    actualStart: \"Actual Start\",\n                    actualEnd: \"Actual End\",\n                    parentOptionLabel: \"-None-\",\n                    general: \"General\",\n                    predecessors: \"Predecessors\",\n                    successors: \"Successors\",\n                    other: \"Other\",\n                    dependencyType: \"Type\"\n                },\n                plannedTasks: {\n                    switchText: \"Planned Tasks\",\n                    offsetTooltipAdvanced: \"Met deadline earlier\",\n                    offsetTooltipDelay: \"Delay\",\n                    seconds: \"seconds\",\n                    minutes: \"minutes\",\n                    hours: \"hours\",\n                    days: \"days\"\n                }\n            },\n            showWorkHours: true,\n            showWorkDays: true,\n            toolbar: null,\n            workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n            workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n            workWeekStart: 1,\n            workWeekEnd: 5,\n            hourSpan: 1,\n            snap: true,\n            height: 600,\n            listWidth: \"30%\",\n            rowHeight: null,\n            showPlannedTasks: false\n        },\n\n        select: function(value) {\n            var list = this.list;\n\n            if (!value) {\n                return list.select();\n            }\n\n            if (typeof value === STRING) {\n                value = list.content.find(value);\n            }\n\n            list.select(value);\n            this._selectionUpdate();\n\n            return;\n        },\n\n        clearSelection: function() {\n            this.list.clearSelection();\n            this._selectionUpdate();\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            if (this.dataSource) {\n                this.dataSource.unbind(\"change\", this._refreshHandler);\n                this.dataSource.unbind(\"progress\", this._progressHandler);\n                this.dataSource.unbind(\"error\", this._errorHandler);\n            }\n\n            if (this.dependencies) {\n                this.dependencies.unbind(\"change\", this._dependencyRefreshHandler);\n                this.dependencies.unbind(\"error\", this._dependencyErrorHandler);\n            }\n\n            if (this.timeline) {\n                this.timeline.unbind();\n                this.timeline.destroy();\n            }\n\n            if (this.list) {\n                this.list.unbind();\n                this.list.destroy();\n            }\n\n            if (this.toolbar && this.toolbar.getKendoToolBar()) {\n                this.toolbar.getKendoToolBar().destroy();\n            }\n\n            if (this.footer && this.footer.getKendoToolBar()) {\n                this.footer.getKendoToolBar().destroy();\n            }\n\n            if (this._editor) {\n                this._editor.destroy();\n            }\n\n            if (this._resourceEditorWindow) {\n                this._resourceEditorWindow.destroy();\n            }\n\n            if (this._resizeDraggable) {\n                this._resizeDraggable.destroy();\n            }\n\n            if (this.layout && this.layout.getKendoSplitter()) {\n                this.layout.getKendoSplitter().destroy();\n            }\n\n            this.toolbar.off(NS);\n\n            if (supportsMedia) {\n                this._mediaQuery.removeListener(this._mediaQueryHandler);\n                this._mediaQuery = null;\n            }\n\n            $(window).off(\"resize\" + NS, this._resizeHandler);\n            $(this.wrapper).off(NS);\n\n            this.toolbar = null;\n            this.footer = null;\n\n            kendo.destroy(this.element);\n        },\n\n        setOptions: function(options) {\n            var newOptions = kendo.deepExtend({}, this.options, options);\n\n            var events = this._events;\n\n            if (!options.views) {\n                var selectedView = this.view().name;\n\n                newOptions.views = $.map(this.options.views, function(view) {\n                    var isSettings = isPlainObject(view);\n                    var name = isSettings ? ((typeof view.type !== \"string\") ? view.title : view.type) : view;\n\n                    if (selectedView === name) {\n                        if (isSettings) {\n                            view.selected = true;\n                        } else {\n                            view = { type: name, selected: true };\n                        }\n                    } else if (isSettings) {\n                        view.selected = false;\n                    }\n\n                    return view;\n                });\n            }\n\n            if (!options.dataSource) { newOptions.dataSource = this.dataSource; }\n            if (!options.dependencies) { newOptions.dependencies = this.dependencies; }\n            if (!options.resources) { newOptions.resources = this.resources; }\n            if (!options.assignments) { newOptions.assignments = this.assignments; }\n\n            this.destroy();\n            this.element.empty();\n            this.options = null;\n\n            this.init(this.element, newOptions, events);\n\n            Widget.fn._setEvents.call(this, newOptions);\n        },\n\n        _attachEvents: function() {\n            this._resizeHandler = this.resize.bind(this, false);\n            $(window).on(\"resize\" + NS, this._resizeHandler);\n\n            if (supportsMedia) {\n                this._mediaQueryHandler({ matches: this._mediaQuery.matches });\n            }\n        },\n\n        _splitter: function() {\n            this.splitter = this.layout.kendoSplitter({\n                navigatable: this.options.navigatable,\n                orientation: \"horizontal\",\n                panes: [\n                    { collapsible: false, scrollable: false, label: \"Gantt List\" },\n                    { collapsible: false, scrollable: false, label: \"Gantt Timeline\" }\n                ]\n            }).getKendoSplitter();\n\n            if (this.options.listWidth) {\n                this.splitter.size(\".k-pane:first\", this.options.listWidth);\n            }\n        },\n\n        _wrapper: function() {\n            var ganttStyles = Gantt.styles;\n            var options = this.options;\n            var height = options.height;\n            var width = options.width;\n\n            this.wrapper = this.element.addClass(ganttStyles.wrapper).attr(\"role\", \"application\");\n            this.layout = $(\"<div class='\" + ganttStyles.content + \"' />\").appendTo(this.wrapper)\n                .append(\"<div class='\" + ganttStyles.listWrapper + \"'><div></div></div>\")\n                .append(\"<div class='\" + ganttStyles.timelineWrapper + \"'><div></div></div>\");\n\n            if (options.showPlannedTasks) {\n                this.wrapper.addClass(ganttStyles.plannedTasks);\n            }\n\n            if (height) {\n                this.wrapper.css(\"height\", height);\n            }\n\n            if (width) {\n                this.wrapper.css(\"width\", width);\n            }\n\n            if (options.rowHeight) {\n                this.wrapper.addClass(ganttStyles.rowHeight);\n            }\n\n            this.treelistWrapper = this.wrapper.find(DOT + ganttStyles.list);\n            this.timelineWrapper = this.wrapper.find(DOT + ganttStyles.timeline);\n\n            this.treelistWrapper.css(\"width\", options.listWidth);\n            this.timelineWrapper.css(\"width\", this.wrapper.width() - this.treelistWrapper.outerWidth());\n        },\n\n        _viewClickHandler: function(e) {\n            var list = this.list;\n            var name = e.target.attr(kendo.attr(\"name\"));\n\n            if (list.editor && !list.editor.end()) {\n                return;\n            }\n\n            if (!this.trigger(\"navigate\", { view: name })) {\n                this.view(name);\n            } else {\n                e.preventDefault();\n            }\n        },\n\n        _togglePane: function(e) {\n            var that = this,\n                treelist = that.treelistWrapper,\n                timeline = that.timelineWrapper,\n                contentSelector = DOT + ganttStyles.gridContent;\n\n            e.preventDefault();\n\n            if (treelist.is(\":visible\")) {\n                treelist.addClass(\"k-hidden\");\n                timeline.removeClass(\"k-hidden\");\n\n                that.refresh();\n\n                timeline\n                    .find(contentSelector)\n                    .scrollTop(that.scrollTop);\n            } else {\n                treelist.removeClass(\"k-hidden\");\n                timeline.addClass(\"k-hidden\");\n\n                treelist\n                    .find(contentSelector)\n                    .scrollTop(that.scrollTop);\n            }\n\n            that._resize();\n        },\n\n        _processDefaults: function() {\n            var that = this,\n                views = that.timeline.views,\n                ns = kendo.ns,\n                viewsButtons = [],\n                toolbarStyles = Gantt.styles.toolbar,\n                actionsMessages = this.options.messages.actions,\n                items = ADD_ACTIONS.map((m) => ({\n                    text: actionsMessages[m.text],\n                    attributes: { \"data-type\": m.data }\n                })),\n                defaults = {\n                    append: {\n                        name: \"append\",\n                        type: \"dropDownButton\",\n                        menuButtons: items,\n                        icon: toolbarStyles.iconPlus,\n                        attributes: {\n                            class: toolbarStyles.appendButton\n                        },\n                        click: that._addClickHandler.bind(that),\n                        open: that._openAddClickHandler.bind(that)\n                    },\n                    pdf: {\n                        name: \"pdf\",\n                        type: \"button\",\n                        attributes: {\n                            class: toolbarStyles.pdfButton\n                        },\n                        icon: toolbarStyles.iconPdf,\n                        click: that.saveAsPDF.bind(that)\n                    },\n                    toggle: {\n                        name: \"toggle\",\n                        type: \"button\",\n                        showText: \"overflow\",\n                        attributes: {\n                            class: \"k-gantt-toggle\"\n                        },\n                        icon: toolbarStyles.iconToggle,\n                        click: that._togglePane.bind(that)\n                    },\n                    switchLabel: {\n                        template: \"<label for=planned-switch>\" + that.options.messages.plannedTasks.switchText + \"</label>\"\n                    },\n                    plannedTasks: {\n                        type: \"component\",\n                        component: \"Switch\",\n                        element: \"<input id='planned-switch' class='k-gantt-planned-switch'>\",\n                        componentOptions: {\n                            checked: that.options.showPlannedTasks,\n                            change: that._togglePlannedTasks.bind(that),\n                            messages: {\n                                checked: \"\",\n                                unchecked: \"\"\n                            }\n                        }\n                    },\n                    viewsDdl: {\n                        template: VIEWS_DROPDOWN_TEMPLATE({\n                            views: that.timeline.views,\n                            styles: toolbarStyles,\n                            label: that.options.messages.selectView\n                        })\n                    },\n                    view: {\n                        name: \"view\",\n                        type: \"button\",\n                        togglable: true,\n                        group: \"views\"\n                    },\n                    viewsGroup: {\n                        type: \"buttonGroup\",\n                        attributes: {\n                            class: toolbarStyles.views\n                        }\n                    }\n                };\n\n            Object.keys(views).map(name => {\n                var current = $.extend(true, {}, defaults.view);\n\n                current.text = views[name].title;\n                current.attributes = {\n                    class: \"k-view-\" + name.toLowerCase()\n                };\n                current.attributes[\"data\" + ns + \"-name\"] = name;\n\n                defaults[name] = current;\n\n                viewsButtons.push(name);\n            });\n\n            Object.values(defaults).map(t => {\n                if (t.name === \"view\") {\n                    t.click = that._viewClickHandler.bind(that);\n                }\n            });\n\n            defaults.viewsGroup.buttons = viewsButtons;\n\n            that._viewsButtons = viewsButtons;\n            that.defaultCommands = defaults;\n        },\n\n        _processTools: function(items) {\n            var editable = this.options.editable,\n                commands = [],\n                tools = [\"toggle\"],\n                spacerPresent = false,\n                defaults = this.defaultCommands;\n\n            if (!Array.isArray(items)) {\n                if (editable && editable.create !== false) {\n                    tools.push(\"append\");\n                }\n            } else {\n                commands = items;\n            }\n\n            commands.map(c => {\n                if (c === \"plannedTasks\" || c.name === \"plannedTasks\") {\n                    spacerPresent = true;\n\n                    tools.push({\n                        type: \"spacer\"\n                    });\n\n                    tools.push(\"switchLabel\");\n                }\n\n                if (!defaults[c] && !defaults[c.name] && !c.template) {\n                    if (typeof c === STRING) {\n                        c = {\n                            name: c,\n                            type: \"button\",\n                            text: c,\n                            attributes: {\n                                class: \"k-gantt-\" + c\n                            }\n                        };\n                    } else {\n                        c = $.extend({}, {\n                            type: \"button\",\n                            text: c.name,\n                            attributes: {\n                                class: \"k-gantt-\" + c.name\n                            }\n                        }, c);\n                    }\n                }\n\n                tools.push(c);\n            });\n\n            if (!spacerPresent) {\n                tools.push({\n                    type: \"spacer\"\n                });\n            }\n\n            if (this._viewsButtons && this._viewsButtons.length > 0) {\n                if (this._viewsButtons.length > 1) {\n                    tools.push(\"viewsDdl\");\n                }\n\n                tools.push(\"viewsGroup\");\n            }\n\n            return tools;\n        },\n\n        _mediaQueryHandler: function(e) {\n            var that = this;\n            var splitbar = that.layout.find(\".k-splitbar\");\n            var splitter = that.layout.getKendoSplitter();\n            var treelist = that.treelistWrapper;\n            var timeline = that.timelineWrapper;\n            var contentSelector = DOT + ganttStyles.gridContent;\n\n            var toolbarEl = that.toolbar;\n            var toolbar = toolbarEl.getKendoToolBar();\n\n            if (e.matches) {\n                treelist.addClass(\"k-hidden\");\n                splitbar.addClass(\"k-hidden\");\n                splitter._suppressResize = true;\n                toolbar.hide(toolbarEl.find(\".k-gantt-views\"));\n                toolbar.show(toolbarEl.find(\".k-views-dropdown\"));\n\n                treelist.width(\"100%\");\n            } else {\n                splitter._suppressResize = false;\n                treelist.removeClass(\"k-hidden\");\n                splitbar.removeClass(\"k-hidden\");\n                timeline.removeClass(\"k-hidden\");\n\n                toolbar.show(toolbarEl.find(\".k-gantt-views\"));\n                toolbar.hide(toolbarEl.find(\".k-views-dropdown\"));\n\n                treelist.width(treelist.outerWidth());\n\n                timeline\n                    .find(contentSelector)\n                    .scrollTop(that.scrollTop);\n            }\n\n            that._resize();\n        },\n\n        _toolbar: function() {\n            var that = this;\n            var ganttStyles = Gantt.styles;\n            var viewsDropdownSelector = DOT + ganttStyles.toolbar.viewsDropdown;\n            var toolsOptions = this.options.toolbar;\n            var tools;\n            var toolbar;\n\n            if (typeof toolsOptions === STRING) {\n                toolsOptions = kendo.template(toolsOptions).bind(this);\n            }\n\n            if (isFunction(toolsOptions)) {\n                tools = this._processTools([{\n                    template: toolsOptions({})\n                }]);\n            } else {\n                tools = this._processTools(toolsOptions);\n            }\n\n            toolbar = $(\"<div class='\" + ganttStyles.toolbar.headerWrapper + \"'>\");\n\n            this.wrapper.prepend(toolbar);\n            this.toolbar = toolbar;\n\n            toolbar.kendoToolBar({\n                resizable: false,\n                tools: tools,\n                size: \"medium\",\n                defaultTools: this.defaultCommands,\n                parentMessages: this.options.messages.actions\n            });\n\n            if (supportsMedia) {\n                this._mediaQuery = window.matchMedia(MIN_SCREEN);\n                this._mediaQuery.addListener(this._mediaQueryHandler.bind(this));\n            }\n\n            toolbar.on(\"change\" + NS, viewsDropdownSelector, function() {\n                var list = that.list;\n                var name = $(this).val();\n\n                if (list.editable && list.editable.trigger(\"validate\")) {\n                    return;\n                }\n\n                if (!that.trigger(\"navigate\", { view: name })) {\n                    that.view(name);\n                }\n            });\n\n            this.toggleSwitch = toolbar.find('input.k-gantt-planned-switch').data(\"kendoSwitch\");\n        },\n\n        _footer: function() {\n            var editable = this.options.editable;\n\n            if (!editable || editable.create === false) {\n                return;\n            }\n\n            var ganttStyles = Gantt.styles.toolbar;\n            var messages = this.options.messages.actions;\n            var footer = $(\"<div class='\" + ganttStyles.footerWrapper + \"'>\");\n\n            this.wrapper.append(footer);\n            this.footer = footer;\n\n            footer.kendoToolBar({\n                resizable: false,\n                size: \"medium\",\n                tools: [\"append\"],\n                defaultTools: {\n                    append: extend(true, {}, this.defaultCommands.append, {\n                        direction: \"up\",\n                        animation: {\n                            open: {\n                                effects: \"slideIn:up\"\n                            }\n                        }\n                    })\n                },\n                parentMessages: messages\n            });\n        },\n\n        _adjustDimensions: function() {\n            var element = this.element;\n            var toolbarHeight = outerHeight(this.toolbar);\n            var footerHeight = this.footer ? outerHeight(this.footer) : 0;\n            var totalHeight = element.height();\n            var totalWidth = element.width();\n            var treeListVisible = this.treelistWrapper.is(\":visible\");\n            var splitBar = this.layout.find(\".k-splitbar\");\n            var splitBarWidth = splitBar.is(\":visible\") ? outerWidth(splitBar) : 0;\n            var treeListWidth = treeListVisible ? outerWidth(this.treelistWrapper) : 0;\n            var timelineWidth = totalWidth - ( treeListWidth + splitBarWidth );\n\n            this.layout.children().height(totalHeight - (toolbarHeight + footerHeight));\n            this.timelineWrapper.width(timelineWidth);\n            if (!treeListVisible) {\n                this.timelineWrapper.css(\"left\", 0);\n            }\n\n            if (totalWidth < (treeListWidth + splitBarWidth)) {\n                this.treelistWrapper.width(totalWidth - splitBarWidth);\n            }\n        },\n\n        _scrollTo: function(value) {\n            var view = this.timeline.view();\n            var list = this.list;\n            var attr = kendo.attr(\"uid\");\n            var id = typeof value === \"string\" ? value :\n                value.closest(\"tr\" + selector()).attr(attr);\n            var action;\n            var scrollTarget;\n            var scrollIntoView = function() {\n                if (scrollTarget.length !== 0) {\n                    action();\n                }\n            };\n\n            if (view.content.is(\":visible\")) {\n                scrollTarget = view.content.find(selector(id));\n                action = function() {\n                    view._scrollTo(scrollTarget);\n                };\n            } else {\n                scrollTarget = list.element.find(selector(id));\n                action = function() {\n                    scrollTarget.get(0).scrollIntoView();\n                };\n            }\n\n            scrollIntoView();\n        },\n\n        _addTask: function(selected, parent, type) {\n            var dataSource = this.dataSource,\n                task = dataSource._createNewModel({}),\n                timeline = this.timeline,\n                firstSlot = timeline.view()._timeSlots()[0],\n                editable = this.list.editor,\n                orderId;\n\n            if (editable && editable.trigger(\"validate\")) {\n                return;\n            }\n\n            task.set(\"title\", \"New task\");\n\n            if (parent) {\n                task.set(\"parentId\", parent.get(\"id\"));\n                task.set(\"start\", parent.get(\"start\"));\n                task.set(\"end\", parent.get(\"end\"));\n                task.set(\"plannedStart\", parent.get(\"plannedStart\"));\n                task.set(\"plannedEnd\", parent.get(\"plannedEnd\"));\n            } else {\n                task.set(\"start\", firstSlot.start);\n                task.set(\"end\", firstSlot.end);\n            }\n\n            if (type && type !== \"add\") {\n                orderId = selected.get(\"orderId\");\n                orderId = type === \"insert-before\" ? orderId : orderId + 1;\n            }\n\n            this._createTask(task, orderId);\n        },\n\n        _addClickHandler: function(e) {\n            var type = e.target.data(\"type\");\n            var dataSource = this.dataSource;\n            var selected = this.dataItem(this.select());\n            var parent = dataSource.taskParent(selected);\n            var target = type === \"add\" ? selected : parent;\n\n            this._addTask(selected, target, type);\n        },\n\n        _openAddClickHandler: function(e) {\n            var selected = this.select();\n\n            if (!selected || selected.length === 0) {\n                e.preventDefault();\n\n                this._addTask();\n            }\n        },\n\n        _getListEditable: function() {\n            var editable = false,\n                options = this.options;\n\n            if (options.editable !== false) {\n                editable = \"incell\";\n\n                if (options.editable && options.editable.update === false) {\n                    editable = false;\n                } else {\n                    if (!options.editable || options.editable.reorder !== false) {\n                        editable = {\n                            mode: \"incell\",\n                            move: {\n                                reorderable: true,\n                                clickMoveClick: options.editable.clickMoveClick === false ? false : true\n                            }\n                        };\n                    }\n                }\n            }\n\n            return editable;\n        },\n\n        _getListOptions: function() {\n            var options = this.options,\n                editable = this._getListEditable(),\n                listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n                ganttListOptions = {\n                    columns: options.columns || [],\n                    dataSource: this.dataSource,\n                    navigatable: options.navigatable,\n                    selectable: options.selectable,\n                    reorderable: options.reorderable,\n                    editable: editable,\n                    resizable: options.resizable,\n                    filterable: options.filterable,\n                    columnMenu: options.columnMenu,\n                    columnResizeHandleWidth: this.options.columnResizeHandleWidth,\n                    listWidth: outerWidth(listWrapper),\n                    resourcesField: this.resources.field,\n                    rowHeight: this.options.rowHeight\n                };\n\n            return ganttListOptions;\n        },\n\n        _attachResourceEditor: function(columns) {\n            var column;\n\n            for (var i = 0; i < columns.length; i++) {\n                column = columns[i];\n\n                if (column.field === this.resources.field && typeof column.editor !== \"function\") {\n                    column.editor = this._resourcePopupEditor.bind(this);\n                }\n            }\n        },\n\n        _attachListEvents: function() {\n            var that = this;\n\n            that.list\n                .bind(\"columnShow\", function(e) {\n                    that.trigger(\"columnShow\", { column: e.column });\n                })\n                .bind(\"columnHide\", function(e) {\n                    that.trigger(\"columnHide\", { column: e.column });\n                })\n                .bind(\"columnReorder\", function(e) {\n                    that.trigger(\"columnReorder\", { column: e.column, oldIndex: e.oldIndex, newIndex: e.newIndex });\n                })\n                .bind(\"columnResize\", function(e) {\n                    that.trigger(\"columnResize\", { column: e.column, oldWidth: e.oldWidth, newWidth: e.newWidth });\n                })\n                .bind(\"render\", function() {\n                    that._navigatable();\n                 }, true)\n                .bind(\"beforeEdit\", function(e) {\n\n                    if (that.trigger(\"edit\", { task: e.model, container: e.container })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"cancel\", function(e) {\n                    if (that.trigger(\"cancel\", { task: e.model, container: e.cell })) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    that._preventItemChange = true;\n                    that.list.closeCell(true);\n                })\n                .bind(\"save\", function(e) {\n                    var updatedValues = e.values,\n                        key;\n\n                    that.previousTask = {};\n                    that._preventRefresh = true;\n\n                    if (that.updateDuration === null || that.updateDuration === undefined$1) {\n                        that.updateDuration = e.model.duration();\n                    }\n\n                    if (that.updatePlannedDuration === null || that.updatePlannedDuration === undefined$1) {\n                        that.updatePlannedDuration = e.model.plannedDuration();\n                    }\n\n                    if (updatedValues.hasOwnProperty(\"start\")) {\n                        updatedValues.end = new Date(updatedValues.start.getTime() + that.updateDuration);\n                    }\n\n                    if (updatedValues.hasOwnProperty(\"plannedStart\") && updatedValues.plannedStart) {\n                        updatedValues.plannedEnd = new Date(updatedValues.plannedStart.getTime() + that.updatePlannedDuration);\n                    }\n\n                    for (key in updatedValues) {\n                        if (updatedValues.hasOwnProperty(key)) {\n                            that.previousTask[key] = e.model.get(key);\n                        }\n                    }\n\n                    that.updatedValues = updatedValues;\n                })\n                .bind(\"itemChange\", function(e) {\n                    var updateInfo = that.updatedValues,\n                        task = e.data,\n                        resourcesField = that.resources.field,\n                        previousTask = that.previousTask,\n                        current,\n                        isCurrentInHeader,\n                        currentIndex,\n                        rowIndex,\n                        navigatable = that.options.navigatable,\n                        key;\n\n                    if (that._preventItemChange) {\n                        that._preventItemChange = false;\n                        return;\n                    }\n\n                    for (key in previousTask) {\n                        if (previousTask.hasOwnProperty(key)) {\n                            task.set(key, previousTask[key]);\n                        }\n                    }\n\n                    that.previousTask = {};\n\n                    if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                        if (updateInfo) {\n                            that._preventRefresh = true;\n                            that.dataSource.update(task, updateInfo);\n\n                            if (updateInfo[resourcesField]) {\n                                that._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                            }\n                        }\n\n                        if (navigatable) {\n                            current = $(that.list.current());\n                            isCurrentInHeader = current.is(\"th\");\n                            rowIndex = current.closest(\"tr\").index();\n                            currentIndex = isCurrentInHeader ? current.parent().children(\":not(.k-group-cell)\").index(current[0]) : Math.max(that.list.cellIndex(current), 0);\n                        }\n\n                        that._preventRefresh = false;\n                        that._requestStart();\n                        that.dataSource.sync().then(function() {\n                            if (that.options.navigatable && !that._tabPressed) {\n                                if (!isCurrentInHeader) {\n                                    var row = that.list.tbody.children().eq(rowIndex);\n\n                                    var td = row.find(\">td:visible\")\n                                        .eq(currentIndex);\n\n                                    that.list._setCurrent(td, false, true);\n                                }\n                            }\n                            that._tabPressed = false;\n                        });\n                    } else if (that.dataSource.hasChanges()) {\n                        that.dataSource.cancelChanges(task);\n                        that._preventRefresh = false;\n                        that.refresh();\n                    }\n\n                    that.updatedValues = null;\n                    that.updateDuration = null;\n                })\n                .bind(\"change\", function() {\n                    that.trigger(\"change\");\n\n                    that._selectionUpdate();\n\n                })\n                .bind(\"navigate\", function(e) {\n                    var treeList = e.sender;\n                    var current = treeList.current();\n                    var uid;\n\n                    that._scrollTo(current);\n                    that.timeline.element.find(\"div.k-task\").attr(\"tabindex\", \"-1\");\n                    uid = current.closest(\"tr\").attr(\"data-uid\");\n                    that.timeline.element.find(\"div.k-task[data-uid='\" + uid + \"']\").attr(\"tabindex\", \"0\");\n                })\n                .bind(\"expand\", function(e) {\n                    e.preventDefault();\n                    e.model.set(\"expanded\", true);\n                })\n                .bind(\"collapse\", function(e) {\n                    e.preventDefault();\n                    e.model.set(\"expanded\", false);\n                })\n                .bind(\"dragend\", function(e) {\n                    var dataSource = that.dataSource,\n                        task, updateInfo;\n\n                    if (e.position === \"over\") {\n                        dataSource.cancelChanges();\n\n                        updateInfo = {\n                            parentId: e.source.parentId\n                        };\n\n                        task = dataSource.get(e.source.id);\n\n                        if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                            dataSource.update(task, updateInfo);\n                        }\n\n                        dataSource.sync();\n                    }\n                })\n                .bind(\"dataBound\", function() {\n                    if (that.dataSource.sort().length === 0) {\n                        that.dataSource.sort([{ field: \"orderId\", dir: \"asc\" }]);\n                    }\n                })\n                .bind(\"reorder\", function(e) {\n                    that._updateTask(e.task, e.updateInfo);\n                });\n        },\n\n        _selectionUpdate: function() {\n            var that = this,\n                selection = that.list.select();\n\n            if (selection.length) {\n                that.timeline.select(\"[data-uid='\" + selection.attr(\"data-uid\") + \"']\");\n            } else {\n                that.timeline.clearSelection();\n            }\n        },\n\n        _list: function() {\n            var ganttStyles = Gantt.styles,\n                listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n                listElement = listWrapper.find(\"> div\"),\n                listOptions = this._getListOptions();\n\n            this._attachResourceEditor(listOptions.columns);\n\n            this.list = new kendo.ui.GanttList(listElement, listOptions);\n\n            this._attachListEvents();\n        },\n\n        _timeline: function() {\n            var that = this;\n            var ganttStyles = Gantt.styles;\n            var options = trimOptions(extend(true, { resourcesField: this.resources.field }, this.options));\n            var element = this.wrapper.find(DOT + ganttStyles.timeline + \" > div\");\n\n            this.timeline = new kendo.ui.GanttTimeline(element, options);\n\n            this.timeline\n                .bind(\"navigate\", function(e) {\n                    var viewName = e.view.replace(/\\./g, \"\\\\.\").toLowerCase();\n                    var viewsEl = that.toolbar.find(DOT + ganttStyles.toolbar.views);\n                    var viewsGroup = viewsEl.getKendoButtonGroup();\n\n                    if (viewsGroup) {\n                        viewsGroup.select(viewsEl.find(DOT + ganttStyles.toolbar.viewButton + \"-\" + viewName));\n                    }\n\n                    that.toolbar\n                        .find(DOT + ganttStyles.toolbar.viewsDropdown)\n                        .val(e.view);\n\n                    that.refresh();\n                })\n                .bind(\"moveStart\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    if (that.trigger(\"moveStart\", { task: e.task })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"move\", function(e) {\n                    var task = e.task;\n                    var start = e.start;\n                    var end = new Date(start.getTime() + task.duration());\n\n                    if (that.trigger(\"move\", { task: task, start: start, end: end })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"moveEnd\", function(e) {\n                    var task = e.task;\n                    var start = e.start;\n                    var end = new Date(start.getTime() + task.duration());\n\n                    if (!that.trigger(\"moveEnd\", { task: task, start: start, end: end })) {\n                        that._updateTask(that.dataSource.getByUid(task.uid), {\n                            start: start,\n                            end: end\n                        });\n                    }\n                })\n                .bind(\"resizeStart\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    if (that.trigger(\"resizeStart\", { task: e.task })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"resize\", function(e) {\n                    if (that.trigger(\"resize\", { task: e.task, start: e.start, end: e.end })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"resizeEnd\", function(e) {\n                    var task = e.task;\n                    var updateInfo = {};\n\n                    if (e.resizeStart) {\n                        updateInfo.start = e.start;\n                    } else {\n                        updateInfo.end = e.end;\n                    }\n\n                    if (!that.trigger(\"resizeEnd\", { task: task, start: e.start, end: e.end })) {\n                        that._updateTask(that.dataSource.getByUid(task.uid), updateInfo);\n                    }\n                })\n                .bind(\"percentResizeStart\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"percentResizeEnd\", function(e) {\n                    that._updateTask(that.dataSource.getByUid(e.task.uid), { percentComplete: e.percentComplete });\n                })\n                .bind(\"dependencyDragStart\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"dependencyDragEnd\", function(e) {\n                    var dependency = that.dependencies._createNewModel({\n                        type: e.type,\n                        predecessorId: e.predecessor.id,\n                        successorId: e.successor.id\n                    });\n\n                    that._createDependency(dependency);\n                })\n                .bind(\"select\", function(e) {\n                    var editable = that.list.editor,\n                        current = that.select(),\n                        currentUid;\n\n                    if (editable) {\n                        editable.end();\n                    }\n\n                    if (current && current.length) {\n                        currentUid = current.data(\"uid\");\n                    }\n\n                    if (currentUid !== e.uid) {\n                        that.select(\"[data-uid='\" + e.uid + \"']\");\n                        that.trigger(\"change\");\n                    }\n                })\n                .bind(\"editTask\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        return;\n                    }\n\n                    that.editTask(e.uid);\n                })\n                .bind(\"clear\", function() {\n                    that.clearSelection();\n                    that.trigger(\"change\");\n                })\n                .bind(\"removeTask\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        return;\n                    }\n\n                    that.removeTask(that.dataSource.getByUid(e.uid));\n                })\n                .bind(\"expand\", function(e) {\n                    var model = that.dataSource.getByUid(e.uid);\n                    if (model.summary && !model.get(\"expanded\")) {\n                        model.set(\"expanded\", true);\n                    } else {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"collapse\", function(e) {\n                    var model = that.dataSource.getByUid(e.uid);\n\n                    if (model.summary && model.get(\"expanded\")) {\n                        model.set(\"expanded\", false);\n                    } else {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"removeDependency\", function(e) {\n                    var editable = that.list.editor;\n\n                    if (editable && !editable.end()) {\n                        return;\n                    }\n\n                    that.removeDependency(that.dependencies.getByUid(e.uid));\n                });\n        },\n\n        _dataSource: function() {\n            var options = this.options;\n            var dataSource = options.dataSource;\n\n            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n            if (this.dataSource && this._refreshHandler) {\n                this.dataSource\n                    .unbind(\"change\", this._refreshHandler)\n                    .unbind(\"progress\", this._progressHandler)\n                    .unbind(\"error\", this._errorHandler);\n            } else {\n                this._refreshHandler = this.refresh.bind(this);\n                this._progressHandler = this._requestStart.bind(this);\n                this._errorHandler = this._error.bind(this);\n            }\n\n            this.dataSource = kendo.data.GanttDataSource.create(dataSource)\n                .bind(\"change\", this._refreshHandler)\n                .bind(\"progress\", this._progressHandler)\n                .bind(\"error\", this._errorHandler);\n        },\n\n        _dependencies: function() {\n            var dependencies = this.options.dependencies || {};\n            var dataSource = isArray(dependencies) ? { data: dependencies } : dependencies;\n\n            if (this.dependencies && this._dependencyRefreshHandler) {\n                this.dependencies\n                    .unbind(\"change\", this._dependencyRefreshHandler)\n                    .unbind(\"error\", this._dependencyErrorHandler);\n            } else {\n                this._dependencyRefreshHandler = this.refreshDependencies.bind(this);\n                this._dependencyErrorHandler = this._error.bind(this);\n            }\n\n            this.dependencies = kendo.data.GanttDependencyDataSource.create(dataSource)\n                .bind(\"change\", this._dependencyRefreshHandler)\n                .bind(\"error\", this._dependencyErrorHandler);\n        },\n\n        _resources: function() {\n            var resources = this.options.resources;\n            var dataSource = resources.dataSource || {};\n\n            this.resources = {\n                field: \"resources\",\n                dataTextField: \"name\",\n                dataColorField: \"color\",\n                dataFormatField: \"format\"\n            };\n\n            extend(this.resources, resources);\n\n            this.resources.dataSource = kendo.data.DataSource.create(dataSource);\n        },\n\n        _assignments: function() {\n            var assignments = this.options.assignments;\n            var dataSource = assignments.dataSource || { };\n\n            if (this.assignments) {\n                this.assignments.dataSource\n                    .unbind(\"change\", this._assignmentsRefreshHandler);\n            } else {\n                this._assignmentsRefreshHandler = this.refresh.bind(this);\n            }\n\n            this.assignments = {\n                dataTaskIdField: \"taskId\",\n                dataResourceIdField: \"resourceId\",\n                dataValueField: \"value\"\n            };\n\n            extend(this.assignments, assignments);\n\n            this.assignments.dataSource = kendo.data.DataSource.create(dataSource);\n\n            this.assignments.dataSource\n                .bind(\"change\", this._assignmentsRefreshHandler);\n        },\n\n        _createEditor: function() {\n            var that = this;\n\n            var editor = this._editor = new kendo.gantt.PopupEditor(this.wrapper, extend({}, this.options, {\n                target: this,\n                resources: {\n                    field: this.resources.field,\n                    editor: this._createResourceEditor.bind(this)\n                }\n            }));\n\n            editor\n                .bind(\"cancel\", function(e) {\n                    var task = that.dataSource.getByUid(e.model.uid);\n\n                    if (that.trigger(\"cancel\", { container: e.container, task: task })) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    if (that.dependencies) {\n                        that.dependencies.filter({});\n                    }\n\n                    that.cancelTask();\n                    if (that.options.navigatable) {\n                        that.timeline.element.find('div[data-uid=\"' + e.model.uid + '\"]').focus();\n                    }\n                })\n                .bind(\"edit\", function(e) {\n                    var task = that.dataSource.getByUid(e.model.uid);\n\n                    if (that.trigger(\"edit\", { container: e.container, task: task })) {\n                        e.preventDefault();\n                    }\n                })\n                .bind(\"save\", function(e) {\n                    var task = that.dataSource.getByUid(e.model.uid);\n\n                    that.saveTask(task, e.updateInfo, e.updateDependencies);\n                })\n                .bind(\"remove\", function(e) {\n                    that.removeTask(e.model.uid);\n                })\n                .bind(\"close\", function(options) {\n                    if (that.options.navigatable) {\n                        that.element.find('div[data-uid=\"' + options.window.attr(\"data-uid\") + '\"]').focus();\n                    }\n                });\n        },\n\n        _resourcePopupEditor: function(container, options) {\n            var that = this,\n                editor = that._createResourceEditor($(\"<div>\"), options),\n                popupStyles = ganttStyles.popup,\n                wrapper = that.element,\n                dialogEl = $(kendo.format('<div class=\"' + popupStyles.formContainer + '\">')).appendTo(wrapper),\n                messages = that.options.messages,\n                buttonsEl, dialog;\n\n            dialogEl.append(editor.wrapper);\n            buttonsEl = $('<div class=\"' + popupStyles.buttonsContainer + '\">');\n            dialogEl.append(buttonsEl);\n\n            buttonsEl.append($(\"<button class='\" + ganttStyles.buttonSave + \"'>\" + encode(messages.save) + \"</button>\").kendoButton({\n                name: \"save\",\n                themeColor: \"primary\",\n                icon: \"save\",\n                click: () => {\n                    if (!editor.updateModel()) {\n                        return;\n                    }\n                    editor.trigger(\"save\", { model: editor.model });\n                    that._updateAssignments(editor.model.get(\"id\"), editor.model.get(that.resources.field));\n\n                    dialog.trigger(\"close\");\n                    dialog.close();\n                }\n            }));\n\n            buttonsEl.append($(\"<button class='\" + ganttStyles.buttonCancel + \"'>\" + encode(messages.cancel) + \"</button>\").kendoButton({\n                name: \"cancel\",\n                icon: \"cancel\",\n                click: () => {\n                    dialog.trigger(\"close\");\n                    dialog.close();\n                }\n            }));\n\n            this._resourceEditorWindow = dialog = dialogEl.kendoWindow({\n                modal: true,\n                resizable: false,\n                draggable: true,\n                visible: false,\n                title: messages.editor.resourcesEditorTitle,\n                deactivate: () => {\n                    editor.destroy();\n                    dialog.destroy();\n                    dialog.element.closest(\".k-window\").remove();\n                }\n            }).data(\"kendoWindow\");\n\n            dialog.center().open();\n\n            return editor;\n        },\n\n        _createResourceEditor: function(container, options) {\n            var that = this;\n            var model = options instanceof ObservableObject ? options : options.model;\n            var messages = this.options.messages;\n            var resourcesField = this.resources.field;\n            var unitsValidation = { step: 0.01, min: 0.01, max: 1 };\n            var assignmentsModel = this.assignments.dataSource.options.schema.model;\n            var resourceTextField = that.resources.dataTextField;\n            var resources = this.resources.dataSource.view();\n\n\n            if (assignmentsModel && assignmentsModel.fields.Units && assignmentsModel.fields.Units.validation) {\n                extend(true, unitsValidation, assignmentsModel.fields.Units.validation);\n            }\n\n            var editor = this._resourceEditor = new kendo.gantt.ResourceEditor(container, {\n                resourcesField: resourcesField,\n                unitsValidation: unitsValidation,\n                resources: resources.map(r => ({ value: r.id, text: r[resourceTextField] })),\n                model: model,\n                messages: extend({}, messages.editor)\n            });\n\n            return editor;\n        },\n\n        view: function(type) {\n            return this.timeline.view(type);\n        },\n\n        range: function(range) {\n            var dataSource = this.dataSource;\n            var view = this.view();\n            var timeline = this.timeline;\n\n            if (range) {\n                view.options.range = {\n                    start: range.start,\n                    end: range.end\n                };\n\n                timeline._render(dataSource.taskTree());\n                timeline._renderDependencies(this.dependencies.view());\n            }\n\n            return {\n                start: view.start,\n                end: view.end\n            };\n        },\n\n        date: function(date) {\n            var view = this.view();\n\n            if (date) {\n                view.options.date = date;\n                view._scrollToDate(date);\n            }\n\n            return view.options.date;\n        },\n\n        dataItem: function(value) {\n            if (!value) {\n                return null;\n            }\n\n            var list = this.list;\n            var element = list.element.find(value);\n\n            return list._modelFromElement(element);\n        },\n\n        setDataSource: function(dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._dataSource();\n\n            this.list.setDataSource(this.dataSource);\n\n            if (this.options.autoBind) {\n                dataSource.fetch();\n            }\n        },\n\n        setDependenciesDataSource: function(dependencies) {\n            this.options.dependencies = dependencies;\n\n            this._dependencies();\n\n            if (this.options.autoBind) {\n                dependencies.fetch();\n            }\n        },\n\n        items: function() {\n            return this.wrapper.children(\".k-task\");\n        },\n\n        _updateAssignments: function(id, resources) {\n            var dataSource = this.assignments.dataSource;\n            var taskId = this.assignments.dataTaskIdField;\n            var resourceId = this.assignments.dataResourceIdField;\n            var hasMatch = false;\n            var assignments = new Query(dataSource.view())\n                .filter({\n                    field: taskId,\n                    operator: \"eq\",\n                    value: id\n                }).toArray();\n            var assignment;\n            var resource;\n            var value;\n\n            while (assignments.length) {\n                assignment = assignments[0];\n\n                for (var i = 0, length = resources.length; i < length; i++) {\n                    resource = resources[i];\n\n                    if (assignment.get(resourceId) === resource.get(\"id\")) {\n                        value = resources[i].get(\"value\");\n                        this._updateAssignment(assignment, value);\n                        resources.splice(i, 1);\n                        hasMatch = true;\n                        break;\n                    }\n                }\n\n                if (!hasMatch) {\n                    this._removeAssignment(assignment);\n                }\n\n                hasMatch = false;\n\n                assignments.shift();\n            }\n\n            for (var j = 0, newLength = resources.length; j < newLength; j++) {\n                resource = resources[j];\n\n                if (resource.id !== undefined$1 && resource.value) {\n                    this._createAssignment(resource, id);\n                }\n            }\n\n            dataSource.sync();\n        },\n\n        cancelTask: function() {\n            var editor = this._editor;\n            var container = editor.container;\n\n            if (container) {\n                editor.close();\n            }\n\n            if (this.dependencies) {\n                this.dependencies.cancelChanges();\n            }\n        },\n\n        editTask: function(uid) {\n            var task = typeof uid === \"string\" ? this.dataSource.getByUid(uid) : uid;\n\n            if (!task) {\n                return;\n            }\n\n            var taskCopy = this.dataSource._createNewModel(task.toJSON());\n            taskCopy.uid = task.uid;\n\n            this.cancelTask();\n\n            this._editTask(taskCopy);\n        },\n\n        _editTask: function(task) {\n            this._editor.editTask(task, this.options.editable.plannedTasks);\n        },\n\n        saveTask: function(task, updateInfo, updateDependencies) {\n            var that = this,\n                editor = this._editor,\n                container = editor.container,\n                editable = editor.editable,\n                hasChanges = false,\n                hasResourceChanges = false,\n                updateInfo = updateInfo || {},\n                resourcesField = that.options.resources.field,\n                difference;\n\n            Object.keys(updateInfo).map(k => {\n                var updated = updateInfo[k],\n                    current = task.get(k);\n\n                if (updated instanceof Date) {\n                    updated = updated.getTime();\n                    current = current ? current.getTime() : undefined$1;\n                }\n\n                if (updated !== current) {\n                    if (k === resourcesField) {\n                        difference = updated\n                            .filter(u => !current.some(c => c.id === u.id && c.value === u.value))\n                            .concat(current.filter(c => !updated.some(u => u.id === c.id && c.value === u.value)));\n\n                        if (difference && difference.length > 0) {\n                            hasResourceChanges = true;\n                        }\n                    } else {\n                        hasChanges = true;\n                    }\n                }\n            });\n\n            if (container &&\n                editable &&\n                editable.end() &&\n                (hasChanges || hasResourceChanges || updateDependencies)) {\n                    if (!that.trigger(\"save\", { task: task, values: updateInfo, updateDependencies: updateDependencies })) {\n                        if (hasChanges) {\n                            that._preventRefresh = true;\n\n                            that.dataSource.update(task, updateInfo);\n                        }\n\n                        if (hasResourceChanges) {\n                            this._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                        }\n\n                        that._syncDataSource();\n\n                        if (this.dependencies) {\n                            this._updateDependency(updateDependencies);\n                        }\n\n                        this._editor.close();\n                    } else {\n                        if (task && task.dirty) {\n                            that.dataSource.cancelChanges(task);\n                            that._preventRefresh = false;\n                            that.refresh();\n                        }\n\n                        if (that.dependencies) {\n                            that.dependencies.cancelChanges();\n                        }\n                    }\n            } else if (editable && editable.end()) {\n                this._editor.close();\n            }\n        },\n\n        _updateDependency: function(updateDependencies) {\n            this.dependencies.filter({});\n\n            if (updateDependencies) {\n                updateDependencies.created.map(d => {\n                    this._preventDependencyRefresh = true;\n                    this.dependencies.add(d);\n                    this._preventDependencyRefresh = false;\n                });\n\n                updateDependencies.destroyed.map(d => {\n                    this.dependencies.remove(d);\n                });\n            }\n\n            this.dependencies.sync();\n        },\n\n        _updateTask: function(task, updateInfo) {\n            var that = this;\n            var resourcesField = that.resources.field;\n\n            if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                if (updateInfo) {\n                    that._preventRefresh = true;\n\n                    that.dataSource.update(task, updateInfo);\n\n                    if (updateInfo[resourcesField]) {\n                        that._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                    }\n                }\n\n                that._syncDataSource();\n            } else {\n                if (task && task.dirty) {\n                    that.dataSource.cancelChanges(task);\n                    that._preventRefresh = false;\n                    that.refresh();\n                }\n\n                if (that.dependencies) {\n                    that.dependencies.cancelChanges();\n                }\n            }\n        },\n\n        _updateAssignment: function(assignment, value) {\n            var resourceValueField = this.assignments.dataValueField;\n\n            assignment.set(resourceValueField, value);\n        },\n\n        removeTask: function(uid) {\n            var that = this;\n            var task = typeof uid === \"string\" ? this.dataSource.getByUid(uid) : uid;\n\n            if (!task) {\n                return;\n            }\n\n            this._taskConfirm(function(cancel) {\n                if (!cancel) {\n                    that._removeTask(task);\n                }\n            }, task);\n        },\n\n        _createTask: function(task, index) {\n            if (!this.trigger(\"add\", {\n                task: task,\n                dependency: null\n            })) {\n                var dataSource = this.dataSource;\n\n                this._preventRefresh = true;\n\n                if (index === undefined$1) {\n                    dataSource.add(task);\n                } else {\n                    dataSource.insert(index, task);\n                }\n\n                this._scrollToUid = task.uid;\n                this._syncDataSource();\n            }\n        },\n\n        _createDependency: function(dependency) {\n            if (!this.trigger(\"add\", {\n                task: null,\n                dependency: dependency\n            })) {\n                this._preventDependencyRefresh = true;\n\n                this.dependencies.add(dependency);\n\n                this._preventDependencyRefresh = false;\n\n                this.dependencies.sync();\n            }\n        },\n\n        _createAssignment: function(resource, id) {\n            var assignments = this.assignments;\n            var dataSource = assignments.dataSource;\n            var taskId = assignments.dataTaskIdField;\n            var resourceId = assignments.dataResourceIdField;\n            var resourceValue = assignments.dataValueField;\n            var assignment = dataSource._createNewModel();\n\n            assignment[taskId] = id;\n            assignment[resourceId] = resource.get(\"id\");\n            assignment[resourceValue] = resource.get(\"value\");\n\n            dataSource.add(assignment);\n        },\n\n        removeDependency: function(uid) {\n            var that = this;\n            var dependency = typeof uid === \"string\" ? this.dependencies.getByUid(uid) : uid;\n\n            if (!dependency) {\n                return;\n            }\n\n            this._dependencyConfirm(function(cancel) {\n                if (!cancel) {\n                    that._removeDependency(dependency);\n                }\n            }, dependency);\n        },\n\n        _removeTaskDependencies: function(task, dependencies) {\n            this._preventDependencyRefresh = true;\n\n            for (var i = 0, length = dependencies.length; i < length; i++) {\n                this.dependencies.remove(dependencies[i]);\n            }\n\n            this._preventDependencyRefresh = false;\n\n            this.dependencies.sync();\n        },\n\n        _removeTaskAssignments: function(task) {\n            var dataSource = this.assignments.dataSource;\n            var assignments = dataSource.view();\n            var filter = {\n                field: this.assignments.dataTaskIdField,\n                operator: \"eq\",\n                value: task.get(\"id\")\n            };\n\n            assignments = new Query(assignments).filter(filter).toArray();\n\n            this._preventRefresh = true;\n\n            for (var i = 0, length = assignments.length; i < length; i++) {\n                dataSource.remove(assignments[i]);\n            }\n\n            this._preventRefresh = false;\n\n            dataSource.sync();\n        },\n\n        _removeTask: function(task) {\n            var dependencies = this.dependencies.dependencies(task.id);\n\n            if (!this.trigger(\"remove\", {\n                task: task,\n                dependencies: dependencies\n            })) {\n                this._removeTaskDependencies(task, dependencies);\n                this._removeTaskAssignments(task);\n\n                this._preventRefresh = true;\n\n                if (this.dataSource.remove(task)) {\n                    this._syncDataSource();\n                }\n\n                if (this.dependencies) {\n                    this.dependencies.filter({});\n                }\n\n                this._preventRefresh = false;\n            }\n        },\n\n        _removeDependency: function(dependency) {\n            if (!this.trigger(\"remove\", {\n                task: null,\n                dependencies: [dependency]\n            })) {\n                if (this.dependencies.remove(dependency)) {\n                    this.dependencies.sync();\n                }\n            }\n        },\n\n        _removeAssignment: function(assignment) {\n            this.assignments.dataSource.remove(assignment);\n        },\n\n        _taskConfirm: function(callback, task) {\n            var messages = this.options.messages;\n\n            this._confirm(callback, {\n                model: task,\n                text: messages.deleteTaskConfirmation,\n                title: messages.deleteTaskWindowTitle\n            });\n        },\n\n        _dependencyConfirm: function(callback, dependency) {\n            var messages = this.options.messages;\n\n            this._confirm(callback, {\n                model: dependency,\n                text: messages.deleteDependencyConfirmation,\n                title: messages.deleteDependencyWindowTitle\n            });\n        },\n\n        _confirm: function(callback, options) {\n            var editable = this.options.editable;\n\n            if (editable === true || editable.confirmation !== false) {\n                this.showDialog(extend(true, {}, options, { callback: callback }));\n            } else {\n                callback();\n            }\n        },\n\n        showDialog: function(options) {\n            this._editor.showDialog(options);\n        },\n\n        refresh: function() {\n            if (this._preventRefresh || !this.list || this.list.editor) {\n                return;\n            }\n\n            this._progress(false);\n\n            var dataSource = this.dataSource;\n            var taskTree = dataSource.taskTree();\n            var scrollToUid = this._scrollToUid;\n            var current;\n            var cachedUid;\n            var cachedIndex = -1;\n            var selected = this.select()[0] ? this.select().data(\"uid\") : this._selected;\n\n            if (this.current) {\n                cachedUid = this.current.closest(\"tr\").attr(kendo.attr(\"uid\"));\n                cachedIndex = this.current.index();\n            }\n\n            if (this.trigger(\"dataBinding\")) {\n                return;\n            }\n\n            if (this.resources.dataSource.data().length !== 0) {\n                this._assignResources(taskTree);\n            }\n\n            if (this._editor) {\n                this._editor.close();\n            }\n\n            this.clearSelection();\n            this.list._renderTree(taskTree);\n            this.timeline._render(taskTree);\n            this.timeline._renderDependencies(this.dependencies.view());\n\n            if (scrollToUid) {\n                this._scrollTo(scrollToUid);\n                this.select(selector(scrollToUid));\n            }\n\n            if ((scrollToUid || cachedUid) && cachedIndex >= 0) {\n                current = this.list.element\n                    .find(\"tr\" + selector((scrollToUid || cachedUid)) + \" > td\").eq(cachedIndex);\n\n                this._current(current);\n            }\n\n            this._scrollToUid = null;\n\n            if (selected) {\n                this._selected = selected;\n                this.select(\"[data-uid=\" + selected + \"]\");\n            }\n\n            this.trigger(\"dataBound\");\n        },\n\n        refreshDependencies: function() {\n            if (this._preventDependencyRefresh) {\n                return;\n            }\n\n            if (this.trigger(\"dataBinding\")) {\n                return;\n            }\n\n            this.timeline._renderDependencies(this.dependencies.view());\n\n            this.trigger(\"dataBound\");\n        },\n\n        _assignResources: function(taskTree) {\n            var resources = this.resources;\n            var assignments = this.assignments;\n            var groupAssigments = function() {\n                var data = assignments.dataSource.view();\n                var group = {\n                    field: assignments.dataTaskIdField\n                };\n\n                data = new Query(data).group(group).toArray();\n\n                return data;\n            };\n            var assigments = groupAssigments();\n            var applyTaskResource = function(task, action) {\n                var taskId = task.get(\"id\");\n\n                kendo.setter(resources.field)(task, new ObservableArray([]));\n\n                for (var i = 0, length = assigments.length; i < length; i++) {\n                    if (assigments[i].value === taskId) {\n                        action(task, assigments[i].items);\n                    }\n                }\n            };\n            var wrapTask = function(task, items) {\n                for (var j = 0, length = items.length; j < length; j++) {\n                    var item = items[j];\n                    var resource = resources.dataSource.get(item.get(assignments.dataResourceIdField));\n                    var resourceValue = item.get(assignments.dataValueField);\n                    var resourcedId = item.get(assignments.dataResourceIdField);\n                    var valueFormat = resource.get(resources.dataFormatField) || PERCENTAGE_FORMAT;\n                    var formatedValue = kendo.toString(resourceValue, valueFormat);\n\n                    task[resources.field].push(new ObservableObject({\n                        id: resourcedId,\n                        name: resource.get(resources.dataTextField),\n                        color: resource.get(resources.dataColorField),\n                        value: resourceValue,\n                        formatedValue: formatedValue,\n                        format: valueFormat\n                    }));\n                }\n            };\n\n            for (var i = 0, length = taskTree.length; i < length; i++) {\n                applyTaskResource(taskTree[i], wrapTask);\n            }\n        },\n\n        _wrapResourceData: function(id) {\n            var that = this;\n            var result = [];\n            var resource;\n            var resources = this.resources.dataSource.view();\n            var assignments = this.assignments.dataSource.view();\n            var taskAssignments = new Query(assignments).filter({\n                field: that.assignments.dataTaskIdField,\n                operator: \"eq\",\n                value: id\n            }).toArray();\n            var valuePerResource = function(id) {\n                var resourceValue = null;\n\n                new Query(taskAssignments).filter({\n                    field: that.assignments.dataResourceIdField,\n                    operator: \"eq\",\n                    value: id\n                }).select(function(assignment) {\n                    resourceValue += assignment.get(that.assignments.dataValueField);\n                });\n\n                return resourceValue;\n            };\n\n            for (var i = 0, length = resources.length; i < length; i++) {\n                resource = resources[i];\n                result.push({\n                    id: resource.get(\"id\"),\n                    name: resource.get(that.resources.dataTextField),\n                    format: resource.get(that.resources.dataFormatField) || PERCENTAGE_FORMAT,\n                    value: valuePerResource(resource.id)\n                });\n            }\n\n            return result;\n        },\n\n        _syncDataSource: function() {\n            this._preventRefresh = false;\n            this._requestStart();\n            this.dataSource.sync();\n        },\n\n        _requestStart: function() {\n            this._progress(true);\n        },\n\n        _error: function() {\n            this._progress(false);\n        },\n\n        _progress: function(toggle) {\n            kendo.ui.progress(this.element, toggle);\n        },\n\n        _scrollable: function() {\n            var that = this;\n            var ganttStyles = Gantt.styles;\n            var contentSelector = DOT + ganttStyles.gridContent;\n            var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n            var timelineHeader = this.timeline.element.find(headerSelector);\n            var timelineContent = this.timeline.element.find(contentSelector);\n            var treeListHeader = this.list.element.find(headerSelector);\n            var treeListContent = this.list.element.find(contentSelector);\n\n            if (mobileOS) {\n                treeListContent.css(\"overflow-y\", \"auto\");\n            }\n\n            timelineContent.on(\"scroll\", function() {\n                that.scrollTop = this.scrollTop;\n                kendo.scrollLeft(timelineHeader, this.scrollLeft);\n                treeListContent.scrollTop(this.scrollTop);\n            });\n\n            treeListContent\n                .on(\"scroll\", function() {\n                    kendo.scrollLeft(treeListHeader, this.scrollLeft);\n                })\n                .on(\"DOMMouseScroll\" + NS + \" mousewheel\" + NS, function(e) {\n                    var scrollTop = timelineContent.scrollTop();\n                    var delta = kendo.wheelDeltaY(e);\n\n                    if (delta) {\n                        e.preventDefault();\n                        //In Firefox DOMMouseScroll event cannot be canceled\n                        $(e.currentTarget).one(\"wheel\" + NS, false);\n\n                        timelineContent.scrollTop(scrollTop + (-delta));\n                    }\n                });\n        },\n\n        _navigatable: function() {\n            var that = this;\n            var navigatable = this.options.navigatable;\n            var editable = this.options.editable;\n            var ganttStyles = Gantt.styles;\n            var contentSelector = DOT + ganttStyles.gridContent;\n            var listWrapper = DOT + ganttStyles.listWrapper;\n            var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n            var headerTable = this.list.element.find(headerSelector).find(\"table\");\n            var contentTable = this.list.element.find(contentSelector).find(\"table\");\n            var tables = headerTable.add(contentTable);\n            var attr = selector();\n            var deleteAction = function() {\n                var editable = that.options.editable;\n\n                if (!editable || editable.destroy === false || that.list.editor) {\n                    return;\n                }\n\n                var selectedTask = that.select();\n                var uid = kendo.attr(\"uid\");\n\n                if (selectedTask.length) {\n                    that.removeTask(selectedTask.attr(uid));\n                }\n            };\n\n            $(this.wrapper)\n                .on(\"mousedown\" + NS, listWrapper + \" tr\" + attr, function(e) {\n                    var isInput = $(e.target).is(\":button,a,:input,a>.k-icon,.k-svg-icon,k-svg-icon,svg,path,textarea,span.k-icon:not(.k-i-none),span.k-svg-icon:not(.k-svg-i-none),span.k-link,.k-input,.k-multiselect-wrap,.k-input-value-text,.k-input-inner\");\n\n                    if (e.ctrlKey) {\n                        return;\n                    }\n\n\n                    if ((navigatable || editable) && !isInput) {\n                        that._focusTimeout = setTimeout(function() {\n                            focusTable(that.list.content.find(\"table\"), true);\n                        }, 2);\n                    }\n                })\n                .on(\"keydown\" + NS, function(e) {\n                    var key = e.keyCode;\n                    var that = this;\n                    var uid;\n                    var cell;\n                    var target = $(e.target);\n                    var focusedIndex;\n                    var focusSequence = [\n                        that.toolbar,\n                        that.layout.find(\".k-splitbar\"),\n                        that.layout.find(\".k-gantt-treelist\"),\n                        that.layout.find(\".k-gantt-timeline-pane\")\n                    ];\n\n                    that._tabPressed = false;\n\n                    if (that.footer) {\n                        focusSequence.push(that.footer);\n                    }\n\n                    for (var i = 0; i < focusSequence.length; i++) {\n                        if ($.contains(focusSequence[i][0], e.target) || focusSequence[i][0] === e.target) {\n                            focusedIndex = i;\n                            break;\n                        }\n                    }\n\n                    if (key === keys.F10) {\n                        that.toolbar.find(\"[tabindex=0]:visible\").first().addClass(ganttStyles.focused).trigger(\"focus\");\n                        e.preventDefault();\n                    } else if (key == keys.TAB) {\n                        if (focusedIndex == 2) {\n                            that._tabPressed = true;\n                        }\n                        if (e.shiftKey) {\n                            for (i = focusedIndex - 1; i >= 0; i--) {\n                                if (!focusSequence[i].hasClass(\"k-hidden\")) {\n                                    uid = target.attr(\"data-uid\");\n                                    if (i === 2 && uid) {\n                                        cell = that.list.content.find(\"tr[data-uid='\" + uid + \"']\").find(\"td\").last();\n                                        that.list.current(cell);\n                                        focusTable(that.list.content.find(\"table\"), true);\n                                    } else {\n                                        if (focusSequence[i].is(\":kendoFocusable\")) {\n                                            focusSequence[i].focus();\n                                        } else {\n                                            focusSequence[i].find(\"[tabindex=0]:visible\").focus();\n                                        }\n                                    }\n                                    e.preventDefault();\n                                    break;\n                                }\n                            }\n                        } else {\n                            for (i = focusedIndex + 1; i < focusSequence.length; i++) {\n                                if (!focusSequence[i].hasClass(\"k-hidden\")) {\n                                    if (focusSequence[i].is(\":kendoFocusable\")) {\n                                        focusSequence[i].focus();\n                                    } else {\n                                        focusSequence[i].find(\"[tabindex=0]:visible\").focus();\n                                    }\n                                    e.preventDefault();\n                                  break;\n                                }\n                            }\n                        }\n                    }\n\n                }.bind(this));\n\n            if (navigatable) {\n                contentTable\n                    .on(\"keydown\" + NS, function(e) {\n                        var key = e.keyCode;\n                        if (e.keyCode == keys.DELETE) {\n                            deleteAction();\n                        } else if (key >= 49 && key <= 57 && e.target.tagName.toLowerCase() !== \"input\") {\n                           that.view(that.timeline._viewByIndex(key - 49));\n                        }\n                    });\n\n                return;\n            }\n\n            tables\n                .on(\"focus\" + NS, function() {\n                    $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n                })\n                .on(\"blur\" + NS, function() {\n\n                    if (this == headerTable) {\n                        $(this).attr(TABINDEX, -1);\n                    }\n                });\n        },\n\n\n        _dataBind: function() {\n            var that = this;\n\n            if (that.options.autoBind) {\n                this._preventRefresh = true;\n                this._preventDependencyRefresh = true;\n\n                var promises = $.map([\n                    this.dataSource,\n                    this.dependencies,\n                    this.resources.dataSource,\n                    this.assignments.dataSource\n                ],\n                function(dataSource) {\n                    return dataSource.fetch();\n                });\n\n                $.when.apply(null, promises)\n                    .done(function() {\n                        that._preventRefresh = false;\n                        that._preventDependencyRefresh = false;\n                        that.refresh();\n                    });\n            }\n        },\n\n        _resize: function() {\n            this._adjustDimensions();\n            this.timeline.view()._adjustHeight();\n            this.timeline.view()._renderCurrentTime();\n            this.list._adjustHeight();\n        },\n\n        _togglePlannedTasks: function(e) {\n            var timeline = this.timeline;\n\n            if (!this.trigger(\"togglePlannedTasks\", { showPlannedTasks: !timeline.options.showPlannedTasks })) {\n                this.wrapper.toggleClass(ganttStyles.plannedTasks);\n                timeline._setPlanned(!timeline.options.showPlannedTasks);\n                timeline._render(this.dataSource.taskTree());\n                timeline._renderDependencies(this.dependencies.view());\n            } else {\n                e.preventDefault();\n            }\n        }\n    });\n\n    if (kendo.PDFMixin) {\n        kendo.PDFMixin.extend(Gantt.fn);\n\n        Gantt.fn._drawPDF = function() {\n            var ganttStyles = Gantt.styles;\n            // Get the width of the treelist portion.\n            var listTableWidth = this.wrapper.find(DOT + ganttStyles.list + \" \" + DOT + ganttStyles.gridContent + \">table\").width();\n            // Get the height of the treelist portion.\n            var listTableHeight = this.wrapper.find(DOT + ganttStyles.list + \" \" + DOT + ganttStyles.gridContent + \">table\").height();\n            // Get the combined height of all toolbars.\n            var toolbarsHeight = this.wrapper.find(DOT + ganttStyles.toolbar.toolbar).outerHeight() * this.wrapper.find(DOT + ganttStyles.toolbar.toolbar).length;\n            // Get the width of the timeline portion.\n            var timelineTableWidth = this.wrapper.find(DOT + ganttStyles.timeline + \" \" + DOT + ganttStyles.gridContent + \" table\").width();\n            var content = this.wrapper.clone();\n\n            content.find(DOT + ganttStyles.list).css(\"height\", listTableHeight + toolbarsHeight);\n            content.find(DOT + ganttStyles.splitter).css(\"width\", timelineTableWidth + listTableWidth);\n            content.find(DOT + ganttStyles.splitter).css(\"height\", listTableHeight + toolbarsHeight);\n\n            return this._drawPDFShadow({\n                content: content\n            }, {\n                avoidLinks: this.options.pdf.avoidLinks\n            });\n        };\n    }\n\n    kendo.ui.plugin(Gantt);\n\n    extend(true, Gantt, { styles: ganttStyles });\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}