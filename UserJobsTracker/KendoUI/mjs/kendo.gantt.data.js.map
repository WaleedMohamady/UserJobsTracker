{"version":3,"sources":["raw-mjs/kendo.gantt.data.js"],"names":["__meta__","id","name","category","description","depends","hidden","$","undefined$1","isArray","Array","extend","map","kendoData","kendo","data","Query","DataSource","TreeListDataSource","TreeListModel","createDataSource","type","options","dataSource","Error","dateCompareValidator","input","filter","length","editable","model","field","attr","picker","widgetInstance","ui","dates","container","window","parent","indexOf","plannedStart","plannedEnd","start","end","value","parseDate","val","GanttDependency","Model","define","fields","predecessorId","validation","required","successorId","GanttDependencyDataSource","init","fn","call","this","schema","modelBase","dependencies","predecessors","successors","push","apply","_dependencies","view","operator","toArray","create","GanttTask","parentId","defaultValue","nullable","orderId","title","dateCompare","message","percentComplete","min","max","step","summary","expanded","duration","plannedDuration","isMilestone","_offset","newValue","i","Date","get","getTime","set","_offsetPlanned","base","parentIdField","GanttDataSource","sort","dir","add","task","_toGanttTask","insert","taskSiblings","index","_reorderSiblings","_resolveSummaryFields","taskParent","remove","children","taskAllChildren","_removeItems","_childRemoved","that","callback","tasks","taskChildren","fromView","taskId","order","_sort","taskLevel","level","taskTree","current","l","update","taskInfo","oldValue","modelChangeHandler","e","sender","_resolveSummaryStart","parentTask","offset","offsetChildren","_resolveSummaryEnd","_resolveSummaryPlannedStart","offsetChildrenPlanned","_resolveSummaryPlannedEnd","_resolveSummaryPercentComplete","bind","unbind","_updateSummary","_updateSummaryRecursive","currentMin","currentMax","aggregate","average","oldOrderId","direction","startIndex","endIndex","newIndex","siblings","Math","_createNewModel","accept","childCount","jQuery","kendo$1"],"mappings":"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","file":"kendo.gantt.data.js","sourcesContent":["import './kendo.data.js';\nimport './kendo.treelist.js';\n\nvar __meta__ = {\n    id: \"gantt.data\",\n    name: \"GanttData\",\n    category: \"web\",\n    description: \"The Gantt Data.\",\n    depends: [ \"data\", \"treelist\" ],\n    hidden: true\n};\n\n(function($, undefined$1) {\n    var isArray = Array.isArray,\n        extend = $.extend,\n        map = $.map,\n\n        kendoData = kendo.data,\n        Query = kendoData.Query,\n        DataSource = kendoData.DataSource,\n        TreeListDataSource = kendoData.TreeListDataSource,\n        TreeListModel = kendoData.TreeListModel,\n\n        PARENTIDFIELD = \"parentId\";\n\n    var createDataSource = function(type, name) {\n        return function(options) {\n            options = isArray(options) ? { data: options } : options;\n\n            var dataSource = options || {};\n            var data = dataSource.data;\n\n            dataSource.data = data;\n\n            if (!(dataSource instanceof type) && dataSource instanceof DataSource) {\n                throw new Error(\"Incorrect DataSource type. Only \" + name + \" instances are supported\");\n            }\n\n            return dataSource instanceof type ? dataSource : new type(dataSource);\n        };\n    };\n\n    var dateCompareValidator = function(input) {\n        if (input.filter(\"[name=end], [name=start], [name=plannedEnd], [name=plannedStart]\").length) {\n            var field = input.attr(\"name\"),\n                picker = kendo.widgetInstance(input, kendo.ui),\n                dates = {},\n                container = input,\n                editable,\n                model;\n\n            while (container !== window && !editable) {\n                container = container.parent();\n\n                editable = container.data(\"kendoEditable\");\n            }\n\n            model = editable ? editable.options.model : null;\n\n            if (!model) {\n                return true;\n            }\n\n            if (field.indexOf(\"planned\") >= 0) {\n                dates.plannedStart = model.plannedStart;\n                dates.plannedEnd = model.plannedEnd;\n            } else {\n                dates.start = model.start;\n                dates.end = model.end;\n            }\n\n            dates[field] = picker ? picker.value() : kendo.parseDate(input.val());\n\n            if (field.indexOf(\"planned\") >= 0) {\n                return dates.plannedStart <= dates.plannedEnd;\n            } else {\n                return dates.start <= dates.end;\n            }\n        }\n\n        return true;\n    };\n\n    var GanttDependency = kendo.data.Model.define({\n        id: \"id\",\n        fields: {\n            id: { type: \"number\", editable: false },\n            predecessorId: { type: \"number\", validation: { required: true } },\n            successorId: { type: \"number\", validation: { required: true } },\n            type: { type: \"number\", validation: { required: true } }\n        }\n    });\n\n    var GanttDependencyDataSource = DataSource.extend({\n        init: function(options) {\n            DataSource.fn.init.call(this, extend(true, {}, {\n                schema: {\n                    modelBase: GanttDependency,\n                    model: GanttDependency\n                }\n            }, options));\n        },\n\n        dependencies: function(id) {\n            var predecessors = this.predecessors(id),\n                successors = this.successors(id);\n\n            predecessors.push.apply(predecessors, successors);\n\n            return predecessors;\n        },\n\n        predecessors: function(id) {\n            return this._dependencies(\"successorId\", id);\n        },\n\n        successors: function(id) {\n            return this._dependencies(\"predecessorId\", id);\n        },\n\n        _dependencies: function(field, id) {\n            var data = this.view();\n            var filter = {\n                field: field,\n                operator: \"eq\",\n                value: id\n            };\n\n            data = new Query(data).filter(filter).toArray();\n\n            return data;\n        }\n    });\n\n    GanttDependencyDataSource.create = createDataSource(GanttDependencyDataSource, \"GanttDependencyDataSource\");\n\n    var GanttTask = TreeListModel.define({\n        fields: {\n            id: { type: \"number\", editable: false },\n            parentId: { type: \"number\", defaultValue: null, nullable: true },\n            orderId: { type: \"number\", validation: { required: true } },\n            title: { type: \"string\", defaultValue: \"New task\" },\n            start: { type: \"date\", validation: { required: true } },\n            end: {\n                type: \"date\",\n                validation: {\n                    required: true,\n                    dateCompare: dateCompareValidator,\n                    message: \"End date should be after or equal to the start date\"\n                }\n            },\n            percentComplete: { type: \"number\", validation: { required: true, min: 0, max: 1, step: 0.01 } },\n            summary: { type: \"boolean\" },\n            expanded: { type: \"boolean\", defaultValue: true },\n            plannedStart: { type: \"date\", defaultValue: null, nullable: true },\n            plannedEnd: {\n                type: \"date\",\n                defaultValue: null,\n                nullable: true,\n                validation: {\n                    dateCompare: dateCompareValidator,\n                    message: \"Planned end date should be after or equal to the planned start date\"\n                }\n            }\n        },\n\n        duration: function() {\n            var end = this.end,\n                start = this.start;\n\n            return end - start;\n        },\n\n        plannedDuration: function() {\n            var end = this.plannedEnd,\n                start = this.plannedStart;\n\n            if (end && start) {\n                return end - start;\n            }\n\n            return 0;\n        },\n\n        isMilestone: function() {\n            return this.duration() === 0;\n        },\n\n        _offset: function(value) {\n            var field = [\"start\", \"end\"],\n                newValue;\n\n            for (var i = 0; i < field.length; i++) {\n                newValue = new Date(this.get(field[i]).getTime() + value);\n                this.set(field[i], newValue);\n            }\n        },\n\n        _offsetPlanned: function(value) {\n            var field = [\"plannedStart\", \"plannedEnd\"],\n                newValue;\n\n            for (var i = 0; i < field.length; i++) {\n                newValue = new Date(this.get(field[i]).getTime() + value);\n                this.set(field[i], newValue);\n            }\n        }\n    });\n\n    GanttTask.define = function(base, options) {\n        if (options === undefined$1) {\n            options = base;\n            base = GanttTask;\n        }\n\n        var parentId = options.parentId || PARENTIDFIELD;\n\n        options.parentIdField = parentId;\n\n        var model = TreeListModel.define(base, options);\n\n        if (parentId) {\n            model.parentIdField = parentId;\n        }\n\n        return model;\n    };\n\n    var GanttDataSource = TreeListDataSource.extend({\n        init: function(options) {\n            TreeListDataSource.fn.init.call(this, extend(true, {}, {\n                schema: {\n                    modelBase: GanttTask,\n                    model: GanttTask\n                },\n                sort: { field: \"orderId\", dir: \"asc\" }\n            }, options));\n        },\n\n        add: function(task) {\n            if (!task) {\n                return;\n            }\n\n            task = this._toGanttTask(task);\n\n            return this.insert(this.taskSiblings(task).length, task);\n        },\n\n        insert: function(index, task) {\n            if (!task) {\n                return;\n            }\n\n            task = this._toGanttTask(task);\n\n            task.set(\"orderId\", index);\n\n            task = DataSource.fn.insert.call(this, index, task);\n\n            this._reorderSiblings(task, this.taskSiblings(task).length - 1);\n            this._resolveSummaryFields(this.taskParent(task));\n\n            return task;\n        },\n\n        remove: function(task) {\n            var parentId = task.get(\"parentId\"),\n                children = this.taskAllChildren(task);\n\n            this._removeItems(children);\n\n            task = TreeListDataSource.fn.remove.call(this, task);\n\n            this._childRemoved(parentId, task.get(\"orderId\"));\n\n            return task;\n        },\n\n        taskAllChildren: function(task) {\n            var data = [],\n                that = this;\n            var callback = function(task) {\n                var tasks = that.taskChildren(task);\n\n                data.push.apply(data, tasks);\n                map(tasks, callback);\n            };\n\n            if (!!task) {\n                callback(task);\n            } else {\n                data = this.view();\n            }\n\n            return data;\n        },\n\n        taskChildren: function(task, fromView) {\n            var filter = {\n                field: \"parentId\",\n                operator: \"eq\",\n                value: null\n            };\n\n            var order = (this._sort && this._sort.length) ? this._sort : {\n                field: \"orderId\",\n                dir: \"asc\"\n            };\n            var taskId, data;\n\n            if (fromView) {\n                data = this.view();\n            } else {\n                data = this.data();\n            }\n\n            if (!!task) {\n                taskId = task.get(\"id\");\n\n                if (taskId === undefined$1 || taskId === null || taskId === \"\") {\n                    return [];\n                }\n\n                filter.value = taskId;\n            }\n\n            data = new Query(data).filter(filter).sort(order).toArray();\n\n            return data;\n        },\n\n        taskLevel: function(task) {\n            var level = 0,\n                parent = this.taskParent(task);\n\n            while (parent !== null) {\n                level += 1;\n                parent = this.taskParent(parent);\n            }\n\n            return level;\n        },\n\n        taskParent: function(task) {\n            if (!task || task.get(\"parentId\") === null) {\n                return null;\n            }\n            return this.get(task.parentId);\n        },\n\n        taskSiblings: function(task) {\n            if (!task) {\n                return null;\n            }\n\n            var parent = this.taskParent(task);\n\n            return this.taskChildren(parent);\n        },\n\n        taskTree: function(task) {\n            var data = [],\n                current,\n                tasks = this.taskChildren(task, true);\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                current = tasks[i];\n                data.push(current);\n\n                if (current.get(\"expanded\")) {\n                    var children = this.taskTree(current);\n\n                    data.push.apply(data, children);\n                }\n            }\n\n            return data;\n        },\n\n        update: function(task, taskInfo) {\n            var that = this,\n                oldValue;\n\n            var offsetChildren = function(parentTask, offset) {\n                var children = that.taskAllChildren(parentTask);\n\n                for (var i = 0, l = children.length; i < l; i++) {\n                    children[i]._offset(offset);\n                }\n            };\n\n            var offsetChildrenPlanned = function(parentTask, offset) {\n                var children = that.taskAllChildren(parentTask);\n\n                for (var i = 0, l = children.length; i < l; i++) {\n                    children[i]._offsetPlanned(offset);\n                }\n            };\n\n            var modelChangeHandler = function(e) {\n                var field = e.field,\n                    model = e.sender;\n\n                switch (field) {\n                    case \"start\":\n                        that._resolveSummaryStart(that.taskParent(model));\n\n                        offsetChildren(model, model.get(field).getTime() - oldValue.getTime());\n                        break;\n                    case \"end\":\n                        that._resolveSummaryEnd(that.taskParent(model));\n                        break;\n                    case \"plannedStart\":\n                        that._resolveSummaryPlannedStart(that.taskParent(model));\n\n                        if (model.get(field) && oldValue) {\n                            offsetChildrenPlanned(model, model.get(field).getTime() - oldValue.getTime());\n                        }\n                        break;\n                    case \"plannedEnd\":\n                        that._resolveSummaryPlannedEnd(that.taskParent(model));\n                        break;\n                    case \"percentComplete\":\n                        that._resolveSummaryPercentComplete(that.taskParent(model));\n                        break;\n                    case \"orderId\":\n                        that._reorderSiblings(model, oldValue);\n                        break;\n                }\n            };\n\n            if (taskInfo.parentId !== undefined$1) {\n                oldValue = task.get(\"parentId\");\n\n                if (oldValue !== taskInfo.parentId) {\n                    task.set(\"parentId\", taskInfo.parentId);\n\n                    that._childRemoved(oldValue, task.get(\"orderId\"));\n\n                    task.set(\"orderId\", that.taskSiblings(task).length - 1);\n                    that._resolveSummaryFields(that.taskParent(task));\n                }\n\n                delete taskInfo.parentId;\n            }\n\n            task.bind(\"change\", modelChangeHandler);\n            task.bind(\"equalSet\", modelChangeHandler);\n\n            for (var field in taskInfo) {\n                oldValue = task.get(field);\n\n                if (field === \"plannedStart\" || field === \"plannedEnd\") {\n                    // Update plannedStart and plannedEnd only when oldValue is not undefined or new value is not null\n                    // That limitation is needed to avoid redundant update requests when custom edit template is used\n                    // and the plannedStart and plannedEnd fields are not updated upon edit\n                    if (oldValue !== undefined$1 || taskInfo[field] !== null) {\n                        task.set(field, taskInfo[field]);\n                    }\n                } else if (field === \"start\" || field === \"end\") {\n                    task.set(field, taskInfo[field]);\n                } else if (task.get(field) !== taskInfo[field]) {\n                    task.set(field, taskInfo[field]);\n                }\n            }\n\n            task.unbind(\"change\", modelChangeHandler);\n            task.unbind(\"equalSet\", modelChangeHandler);\n        },\n\n        _childRemoved: function(parentId, index) {\n            var parent = parentId === null ? null : this.get(parentId),\n                children = this.taskChildren(parent);\n\n            for (var i = index, l = children.length; i < l; i++) {\n                children[i].set(\"orderId\", i);\n            }\n\n            this._resolveSummaryFields(parent);\n        },\n\n        _resolveSummaryFields: function(summary) {\n            if (!summary) {\n                return;\n            }\n\n            this._updateSummary(summary);\n\n            if (!this.taskChildren(summary).length) {\n                return;\n            }\n\n            this._resolveSummaryStart(summary);\n            this._resolveSummaryEnd(summary);\n            this._resolveSummaryPlannedStart(summary);\n            this._resolveSummaryPlannedEnd(summary);\n            this._resolveSummaryPercentComplete(summary);\n        },\n\n        _resolveSummaryStart: function(summary) {\n            var that = this;\n            var getSummaryStart = function(parentTask) {\n                var children = that.taskChildren(parentTask);\n                var min = children[0].start.getTime();\n                var currentMin;\n\n                for (var i = 1, l = children.length; i < l; i++) {\n                    currentMin = children[i].start.getTime();\n                    if (currentMin < min) {\n                        min = currentMin;\n                    }\n                }\n\n                return new Date(min);\n            };\n\n            this._updateSummaryRecursive(summary, \"start\", getSummaryStart);\n        },\n\n        _resolveSummaryEnd: function(summary) {\n            var that = this;\n            var getSummaryEnd = function(parentTask) {\n                var children = that.taskChildren(parentTask);\n                var max = children[0].end.getTime();\n                var currentMax;\n\n                for (var i = 1, l = children.length; i < l; i++) {\n                    currentMax = children[i].end.getTime();\n                    if (currentMax > max) {\n                        max = currentMax;\n                    }\n                }\n\n                return new Date(max);\n            };\n\n            this._updateSummaryRecursive(summary, \"end\", getSummaryEnd);\n        },\n\n        _resolveSummaryPlannedStart: function(summary) {\n            var that = this;\n            var getSummaryPlannedStart = function(parentTask) {\n                var children = that.taskChildren(parentTask),\n                    min = null,\n                    currentMin;\n\n                for (var i = 0, l = children.length; i < l; i++) {\n                    if (children[i].plannedStart) {\n                        currentMin = children[i].plannedStart.getTime();\n                        if (!min || currentMin < min) {\n                            min = currentMin;\n                        }\n                    }\n                }\n\n                if (!min) {\n                    return null;\n                }\n\n                return new Date(min);\n            };\n\n            this._updateSummaryRecursive(summary, \"plannedStart\", getSummaryPlannedStart);\n        },\n\n        _resolveSummaryPlannedEnd: function(summary) {\n            var that = this;\n            var getSummaryPlannedEnd = function(parentTask) {\n                var children = that.taskChildren(parentTask),\n                    max = null,\n                    currentMax;\n\n                for (var i = 0, l = children.length; i < l; i++) {\n                    if (children[i].plannedEnd) {\n                        currentMax = children[i].plannedEnd.getTime();\n                        if (!max || currentMax > max) {\n                            max = currentMax;\n                        }\n                    }\n                }\n\n                if (!max) {\n                    return null;\n                }\n\n                return new Date(max);\n            };\n\n            this._updateSummaryRecursive(summary, \"plannedEnd\", getSummaryPlannedEnd);\n        },\n\n        _resolveSummaryPercentComplete: function(summary) {\n            var that = this;\n            var getSummaryPercentComplete = function(parentTask) {\n                var children = that.taskChildren(parentTask);\n                var percentComplete = new Query(children).aggregate([{\n                    field: \"percentComplete\",\n                    aggregate: \"average\"\n                }]);\n\n                return percentComplete.percentComplete.average;\n            };\n\n            this._updateSummaryRecursive(summary, \"percentComplete\", getSummaryPercentComplete);\n        },\n\n        _reorderSiblings: function(task, oldOrderId) {\n            var orderId = task.get(\"orderId\"),\n                direction = orderId > oldOrderId,\n                startIndex = direction ? oldOrderId : orderId,\n                endIndex = direction ? orderId : oldOrderId,\n                newIndex = direction ? startIndex : startIndex + 1,\n                siblings = this.taskSiblings(task);\n\n            if (!siblings.length) {\n                return;\n            }\n\n            endIndex = Math.min(endIndex, siblings.length - 1);\n\n            for (var i = startIndex; i <= endIndex; i++) {\n                if (siblings[i] === task) {\n                    continue;\n                }\n\n                siblings[i].set(\"orderId\", newIndex);\n\n                newIndex += 1;\n            }\n        },\n\n        _toGanttTask: function(task) {\n            if (!(task instanceof GanttTask)) {\n                var taskInfo = task;\n\n                task = DataSource.fn._createNewModel.call(this);\n                task.accept(taskInfo);\n            }\n\n            return task;\n        },\n\n        _updateSummary: function(task) {\n            if (task !== null) {\n                var childCount = this.taskChildren(task).length;\n\n                task.set(\"summary\", childCount > 0);\n            }\n        },\n\n        _updateSummaryRecursive: function(summary, field, callback) {\n            if (!summary) {\n                return;\n            }\n\n            var value = callback(summary);\n\n            summary.set(field, value);\n\n            var parent = this.taskParent(summary);\n\n            if (parent) {\n                this._updateSummaryRecursive(parent, field, callback);\n            }\n        }\n    });\n\n    GanttDataSource.create = createDataSource(GanttDataSource, \"GanttDataSource\");\n\n    extend(true, kendo.data, {\n        GanttDataSource: GanttDataSource,\n        GanttTask: GanttTask,\n        GanttDependencyDataSource: GanttDependencyDataSource,\n        GanttDependency: GanttDependency\n    });\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}