{"version":3,"sources":["raw-mjs/kendo.taskboard.js"],"names":["$","undefined$1","kendo","window","ui","Observable","encode","htmlEncode","extend","DOT","NS","CLICK","ACTION","preventDefault","ev","TaskBoardColumn","init","options","dataItem","that","this","_dataItem","sortableUniqueClass","sortableIdentifier","styles","sortableSuffix","_render","_attachEvents","states","isReorderable","_initSortable","fn","call","empty","container","addCard","cardHtml","append","edit","element","addClass","editColumn","_renderEditHeader","getDataItem","cards","children","template","data","headerText","ellipsis","getter","dataTextField","spacer","buttons","editTemplate","textbox","input","messages","newColumn","attr","actionButton","icon","spriteCssClass","text","command","html","renderButton","iconClass","fillMode","builtinButtons","name","rules","deleteColumn","defaultButtons","headerLabelId","guid","uid","css","width","header","cardsContainer","columnCards","appendTo","_renderHeader","_buildActionsHtml","setTimeout","find","trigger","actions","disabled","i","length","button","isPlainObject","Object","keys","_validateRules","tool","split","_actionClick","target","closest","value","_textboxBlur","on","bind","keyCode","ENTER","card","cardTitle","dirClass","isRtl","sortable","Sortable","ignore","ignoreDrag","connectWith","filter","hint","clone","dragHint","grabbingCursor","offsetWidth","height","offsetHeight","placeholder","dragPlaceholder","move","_move","start","_start","end","_end","change","_change","draggable","userEvents","unbind","_select","ignoreDragSelectors","event","is","columnElement","sender","parents","action","newIndex","oldIndex","destroy","off","TaskBoardNewColumn","taskboard","Column","NewColumn","jQuery","TaskBoardCard","resources","contentTemplate","hbox","title","link","selectable","dataTitleField","cardMenuButton","body","dataDescriptionField","cardMenuButtonTemplate","headerActions","flatButton","actionsIcon","categoryColor","moveCursor","cardMenu","_resources","borderDir","isDisabled","toggleClass","dataCategoryField","color","get","categoryBorder","isSelectable","key","resource","field","cardResources","multiple","dataSource","view","resourceIndex","cardResource","valuePrimitive","dataValueField","dataIndex","resourceColor","dataColorField","result","push","_buildTemplate","format","headerTemplate","bodyTemplate","Card","ContextMenu","TaskBoardCardMenu","_overrideTemplates","_extendItems","_onSelect","_onOpen","_focus","templates","sprite","defaultItems","editCard","deleteCard","events","concat","item","items","_append","_extendItem","isEmptyObject","args","CardMenu","TaskBoardCommand","Class","_confirm","content","okText","cancel","confirm","taskboardOptions","editable","confirmation","fakePromise","Deferred","resolve","kendoConfirm","buttonLayout","open","AddColumnCommand","exec","column","columns","each","index","enableByColumn","addColumn","EditColumnCommand","DeleteColumnCommand","columnDS","columnsDataSource","deleteColumnConfirm","done","cancelChanges","remove","sync","SaveColumnCommand","columnSettings","val","set","CancelEditColumnCommand","MoveFocusCommand","columnIndex","cardElement","currentColumnIndex","direction","Math","max","min","_getColumnByElement","eq","_moveFromCardFocus","focusCard","currentIndex","seekFocusableCard","_getFocusableCard","focus","lastIndex","focusable","TaskBoardBaseCardCommand","_updateOrder","nextCard","dataOrderField","currentCard","cardIndex","map","idx","prevCard","SelectCardCommand","SaveChangesCommand","taskBoardOptions","receivedStatus","dataStatusField","targetColumn","_getColumn","activeElm","document","activeElement","pane","form","validate","then","DeleteCardCommand","deleteCardConfirm","fail","MoveCardCommand","EditCardCommand","_openPane","AddCardCommand","OpenPaneCommand","ClosePaneCommand","_closePane","SearchCommand","filters","searchOptions","search","operator","fields","_buildFilters","logic","Command","commands","Form","TaskBoardPane","_commandClick","fieldFormat","close","buttonTemplate","themeColor","delete","saveChanges","create","buttonsContainer","footerActions","footerActionButtons","_renderContent","_buildButtonsHtml","_buildHeaderTemplate","primary","TaskBoardPreviewPane","previewPane","preview","TaskBoardEditPane","formSettings","label","buttonsTemplate","formLabelId","focusFirst","formData","TaskBoardCreatePane","columnStatusField","firstColumn","at","status","add","createNewCard","Pane","panes","Preview","Edit","Create","baseButton","primaryButton","Keyboard","register","registerShortcut","selector","shortcut","isNaN","toUpperCase","charCodeAt","ctrlKey","shiftKey","altKey","handler","_handler","shortcuts","_getAction","_trigger","_compareShortcut","_getShortcutModifier","navigator","platform","indexOf","metaKey","KeyboardManager","__meta__","id","category","description","depends","TaskBoardStyles","wrapper","toolbar","columnsContainer","selected","Widget","DataSource","isArray","Array","GENERIC","MOVE","MOVE_START","MOVE_END","SELECT","EXECUTE","CHANGE","ERROR","DATABINDING","DATABOUND","COLUMNSDATABINDING","COLUMNSDATABOUND","TaskBoard","_sortableIdentifier","_wrapper","_columnsDataSource","_initResources","_dataSource","_initToolbar","_initCardMenu","_initKeyboard","autoBind","load","notify","reorderable","previewCard","defaultTools","type","overflow","component","componentOptions","commandOn","_columns","merge","itemsByStatus","itemsByColumn","columnElm","fetchPromises","_progress","fetch","when","apply","read","cardElm","getByUid","columnDataItem","columnByStatus","select","toggle","removeClass","_extendExecArgs","saveCard","model","_buildStates","_createNewModel","insert","before","executeCommand","saveColumn","keyboardManager","enable","readOnly","readOnlyByColumn","setDataSource","setColumnsDataSource","_renderCards","after","outerWidth","parseInt","ESC","headerElm","contentElm","colsContainer","tools","toolbarElm","toolbarOptions","_processTools","parentMessages","ToolBar","_toolbarClick","isDefaultTool","forEach","t","temp","hidden","_isToolEnabled","toolName","found","isEditable","_isEditable","_isReorderable","_isSelectable","isReadOnly","isSearchable","_isSearchable","notLocalColumns","transport","LocalTransport","support","commandName","commandOptions","console","warn","cardDataItem","draggableEvent","elm","ns","sort","dir","schema","defaultValue","_columnsChangeHandler","_columnsErrorHandler","_columnsDataSourceChange","_error","statusField","_moveEnd","_moveStart","_changeOrder","_tabindex","_changeHandler","_errorHandler","_clearColumns","_renderCard","cardMenuOptions","showOn","alignToAnchor","_addResource","_resourceDataSource","resourceDS","progress","_registerShortcuts","DELETE","UP","DOWN","LEFT","RIGHT","plugin","kendo$1"],"mappings":"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","file":"kendo.taskboard.js","sourcesContent":["import './kendo.sortable.js';\nimport './kendo.html.button.js';\nimport './kendo.core.js';\nimport './kendo.icons.js';\nimport './kendo.menu.js';\nimport './kendo.dialog.js';\nimport './kendo.form.js';\nimport './kendo.data.js';\nimport './kendo.toolbar.js';\nimport './kendo.textbox.js';\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        Observable = kendo.Observable,\n        encode = kendo.htmlEncode,\n        extend = $.extend,\n\n        DOT = \".\",\n        NS = DOT + \"kendoTaskBoardColumn\",\n\n        CLICK = \"click\",\n        BLUR = \"blur\",\n\n        MOVE = \"move\",\n        MOVE_START = \"moveStart\",\n        MOVE_END = \"moveEnd\",\n        CHANGE = \"change\",\n        ACTION = \"action\";\n\n    var TaskBoardColumnStyles = {\n        element: \"k-taskboard-column\",\n        header: \"k-taskboard-column-header\",\n        headerText: \"k-taskboard-column-header-text\",\n        ellipsis: \"k-text-ellipsis\",\n        spacer: \"k-spacer\",\n        actions: \"k-taskboard-column-header-actions\",\n        cardsContainer: \"k-taskboard-column-cards-container\",\n        columnCards: \"k-taskboard-column-cards\",\n        actionButton: \"k-taskboard-column-action-button\",\n        card: \"k-taskboard-card\",\n        cardTitle: \"k-card-title\",\n        sortableSuffix: \"-kendosortable\",\n        textbox: \"k-textbox k-input k-input-md k-rounded-md k-input-solid\",\n        input: \"k-input-inner\",\n        newColumn: \"k-taskboard-column-new\",\n        editColumn: \"k-taskboard-column-edit\",\n        disabled: \"k-disabled\",\n        dragPlaceholder: \"k-taskboard-drag-placeholder\",\n        dragHint: \"k-taskboard-drag-hint\",\n        ignoreDrag: \"k-taskboard-drag-ignore\",\n        grabbingCursor: \"k-cursor-grabbing\"\n    };\n\n    function preventDefault(ev) { ev.preventDefault(); }\n\n    var TaskBoardColumn = Observable.extend({\n        init: function(options, dataItem) {\n            var that = this;\n\n            that._dataItem = dataItem;\n            that.options = extend(true, {}, options);\n\n            that.sortableUniqueClass = that.options.sortableIdentifier + TaskBoardColumn.styles.sortableSuffix;\n            that._render();\n            that._attachEvents();\n\n            if (options.states.isReorderable) {\n                that._initSortable();\n            }\n\n            Observable.fn.init.call(that);\n        },\n\n        empty: function() {\n            var that = this;\n            that.container.empty();\n        },\n\n        addCard: function(cardHtml) {\n            var that = this;\n            that.container.append(cardHtml);\n        },\n\n        edit: function() {\n            var that = this,\n                styles = TaskBoardColumn.styles;\n\n            that.element.addClass(styles.editColumn);\n            that._renderEditHeader();\n        },\n\n        getDataItem: function() {\n            return this._dataItem;\n        },\n\n        cards: function() {\n            var that = this;\n\n            return that.container.children();\n        },\n\n        template: (data) => `<div class=\"${encode(data.styles.headerText)} ${encode(data.styles.ellipsis)}\">${kendo.getter(data.dataTextField)(data)}</div>` +\n                  `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n                  `${data.buttons}`,\n\n        editTemplate: (data) => `<div class=\"${encode(data.styles.headerText)} ${encode(data.styles.ellipsis)}\">` +\n                        `<span class=\"${encode(data.styles.textbox)}\">` +\n                            `<input class=\"${encode(data.styles.input)}\" placeholder=\"${encode(kendo.getter(data.dataTextField)(data) ? data.messages.editColumn : data.messages.newColumn)}\" ${encode(kendo.attr(\"command\"))}=\"SaveColumnCommand\" value=\"${encode(kendo.getter(data.dataTextField)(data))}\" />` +\n                        '</span>' +\n                        '</div>' +\n                        `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n                        `${data.buttons}`,\n\n        actionButton: ({ styles, icon, spriteCssClass, text, command, options }) =>\n                    kendo.html.renderButton(`<button class=\"${encode(styles.actionButton)}\" title=\"${encode(text)}\" ${encode(kendo.attr(\"command\"))}=\"${encode(command)}\" ${options ? encode(kendo.attr('options')) + \"=\" + encode(options) : \"\"}></button>`, {\n                        icon: encode(icon),\n                        iconClass: `k-button-icon ${encode(spriteCssClass)}`,\n                        fillMode: \"flat\"\n                    }),\n\n        builtinButtons: {\n            \"editColumn\": { name: \"editColumn\", icon: \"pencil\", text: \"Edit Column\", command: \"EditColumnCommand\", rules: \"isEditable\" },\n            \"addCard\": { name: \"addCard\", icon: \"plus\", text: \"Add Card\", command: \"AddCardCommand\", rules: \"isEditable\" },\n            \"deleteColumn\": { name: \"deleteColumn\", icon: \"x\", text: \"Delete Column\", command: \"DeleteColumnCommand\", rules: \"isEditable\" }\n        },\n\n        defaultButtons: [ \"editColumn\", \"addCard\", \"deleteColumn\" ],\n\n        _render: function() {\n            var that = this,\n                styles = TaskBoardColumn.styles,\n                headerLabelId = kendo.guid(),\n                element = $(\"<div class='\" + styles.element + \"'></div>\")\n                    .attr(kendo.attr(\"uid\"), that._dataItem.uid)\n                    .css({\n                        width: that.options.width\n                    })\n                    .attr(\"role\", \"list\").attr(\"aria-labelledby\", headerLabelId),\n                header = $(\"<div class='\" + styles.header + \"'></div>\"),\n                cardsContainer = $(\"<div class='\" + styles.cardsContainer + \"'></div>\"),\n                columnCards = $(\"<div class='\" + styles.columnCards + \"'></div>\");\n\n            that.header = header.appendTo(element).attr(\"id\", headerLabelId);\n\n            that._renderHeader();\n\n            cardsContainer.appendTo(element);\n            that.container = columnCards\n                                .appendTo(cardsContainer)\n                                .addClass(that.sortableUniqueClass);\n\n            that.element = element;\n        },\n\n        _renderHeader: function() {\n            var that = this,\n                styles = TaskBoardColumn.styles,\n                options = that.options,\n                template = options.template ? options.template : that.template;\n\n            that.header.append(kendo.template(template)(extend(true, {}, {\n                styles: styles,\n                buttons: that._buildActionsHtml(),\n                dataTextField: options.dataTextField\n            }, that._dataItem)));\n        },\n\n        _renderEditHeader: function() {\n            var that = this,\n                styles = TaskBoardColumn.styles,\n                options = that.options,\n                template = options.editTemplate ? options.editTemplate : that.editTemplate;\n\n            that.header.html(\"\");\n\n            that.header.append(kendo.template(template)(extend(true, {}, {\n                styles: styles,\n                messages: options.messages,\n                buttons: that._buildActionsHtml(),\n                dataTextField: options.dataTextField\n            }, that._dataItem)));\n\n            setTimeout(function() {\n                that.header.find(\"input\").trigger(\"focus\");\n            }, 0);\n\n            that.header.find(DOT + styles.actions).addClass(styles.disabled);\n        },\n\n        _buildActionsHtml: function() {\n            var that = this,\n                options = that.options,\n                messages = options.messages,\n                buttons = options.buttons || that.defaultButtons,\n                styles = TaskBoardColumn.styles,\n                html = \"<div class='\" + styles.actions + \"'>\";\n\n            for (var i = 0; i < buttons.length; i++) {\n                var button = buttons[i];\n                button = ($.isPlainObject(button) && Object.keys(button).length === 1 && button.name) ? button.name : button;\n\n                if (typeof button === \"string\") {\n                    button = extend(true, {},\n                        that.builtinButtons[button] || { spriteCssClass: button, command: button + \"Command\" },\n                        { text: messages[button] || button }\n                    );\n                } else if ($.isPlainObject(button) && button.name) {\n                    button = extend(true, button,\n                        { text: messages[button.name] }\n                    );\n                }\n\n                if (!that._validateRules(button)) {\n                    continue;\n                }\n\n                button.spriteCssClass = button.spriteCssClass || \"\";\n\n                html += kendo.template(that.actionButton)(extend(true, {}, {\n                    styles: styles,\n                    options: false\n                }, button));\n            }\n\n            html += \"</div>\";\n\n            return html;\n        },\n\n        _validateRules: function(tool) {\n            var that = this,\n                states = that.options.states,\n                rules = tool.rules ? tool.rules.split(\";\") : [];\n\n            if (!rules.length) {\n                return true;\n            }\n\n            for (var i = 0; i < rules.length; i++) {\n                if (!states[rules[i]]) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        _actionClick: function(ev) {\n            var that = this,\n                target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                command = target.attr(kendo.attr(\"command\")),\n                options = target.attr(kendo.attr(\"options\"));\n\n            options = typeof(options) === \"string\" ? { value: options } : options;\n\n            if (!command) {\n                return;\n            }\n\n            that.trigger(ACTION, {\n                command: command,\n                options: extend({ target: target }, options)\n            });\n        },\n\n        _textboxBlur: function(ev) {\n            var that = this,\n                target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                command = target.attr(kendo.attr(\"command\")),\n                options = target.attr(kendo.attr(\"options\"));\n\n            options = typeof(options) === \"string\" ? { value: options } : options;\n\n            if (!command) {\n                return;\n            }\n\n            that.trigger(ACTION, {\n                command: command,\n                options: extend({ target: target }, options)\n            });\n        },\n\n        _attachEvents: function() {\n            var that = this;\n\n            that.header.on(CLICK + NS,\n                DOT + TaskBoardColumn.styles.actionButton,\n                that._actionClick.bind(that));\n\n            that.header.on(BLUR + NS,\n                DOT + TaskBoardColumn.styles.input,\n                that._textboxBlur.bind(that));\n\n            that.header.on(\"keyup\" + NS,\n                DOT + TaskBoardColumn.styles.input,\n                function(ev) {\n                    if (ev.keyCode === kendo.keys.ENTER) {\n                        that._textboxBlur(ev);\n                    }\n                }\n            );\n\n            if (that.container) {\n                that.container.on(CLICK + NS,\n                    DOT + TaskBoardColumn.styles.card + \" [\" + kendo.attr(\"command\") + \"]\",\n                    that._actionClick.bind(that));\n\n                that.container.on(CLICK + NS,\n                    DOT + TaskBoardColumn.styles.card + \" a.\" + TaskBoardColumn.styles.cardTitle,\n                    preventDefault);\n\n            }\n        },\n\n        _initSortable: function() {\n            var that = this,\n                isRtl = that.options.states.isRtl,\n                dirClass = isRtl ? \" k-rtl\" : \"\",\n                container = that.container;\n\n            if (!that.container) {\n                return;\n            }\n\n            that.sortable = new ui.Sortable(container, {\n                ignore: DOT + TaskBoardColumn.styles.ignoreDrag + \" *\",\n                connectWith: DOT + that.sortableUniqueClass,\n                filter: DOT + TaskBoardColumn.styles.card,\n                hint: function(element) {\n                    return element.clone()\n                        .addClass(TaskBoardColumn.styles.dragHint + \" \" + TaskBoardColumn.styles.grabbingCursor + dirClass)\n                        .css({\n                        width: element[0].offsetWidth,\n                        height: element[0].offsetHeight\n                    });\n                },\n                placeholder: function(element) {\n                    return $(\"<div></div>\")\n                        .addClass(TaskBoardColumn.styles.dragPlaceholder)\n                        .css({\n                            height: element[0].offsetHeight\n                        });\n                },\n                move: that._move.bind(that),\n                start: that._start.bind(that),\n                end: that._end.bind(that),\n                change: that._change.bind(that)\n            });\n\n            that.sortable.draggable.userEvents.unbind(\"select\");\n            that.sortable.draggable.userEvents.bind(\"select\", that._select.bind(that));\n        },\n\n        _select: function(ev) {\n            var ignoreDragSelectors = TaskBoardColumn.ignoreDragSelectors;\n            var target = $(ev.event.target);\n\n            for (var i = 0; i < ignoreDragSelectors.length; i++) {\n                if (target.is(ignoreDragSelectors[i])) {\n                    ev.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        _move: function(ev) {\n            extend(ev, {\n                columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n            });\n            this.trigger(MOVE, ev);\n        },\n\n        _start: function(ev) {\n            extend(ev, {\n                columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n            });\n            this.trigger(MOVE_START, ev);\n        },\n\n        _end: function(ev) {\n            extend(ev, {\n                columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n            });\n            this.trigger(MOVE_END, ev);\n        },\n\n        _change: function(ev) {\n            var that = this;\n\n            extend(ev, {\n                columnElement: ev.sender.element.parents(DOT + TaskBoardColumn.styles.element)\n            });\n\n            that.trigger(CHANGE, ev);\n\n            if ((ev.action === \"receive\" && ev.newIndex >= 0) || (ev.action === \"sort\" && ev.newIndex !== ev.oldIndex)) {\n                that.trigger(ACTION, {\n                    command: \"MoveCardCommand\",\n                    options: ev\n                });\n            }\n        },\n\n        destroy: function() {\n            var that = this;\n\n            that.header.off(NS);\n            that.container.off(NS);\n\n            if (that.sortable) {\n                that.sortable.destroy();\n            }\n        }\n    });\n\n    var TaskBoardNewColumn = TaskBoardColumn.extend({\n        _render: function() {\n            var that = this,\n                styles = TaskBoardColumn.styles,\n                element = $(\"<div class='\" + styles.element + \"'></div>\").addClass(styles.newColumn).attr(kendo.attr(\"uid\"), that._dataItem.uid),\n                header = $(\"<div class='\" + styles.header + \"'></div>\");\n\n            that.header = header.appendTo(element);\n\n            that._renderEditHeader();\n\n            that.element = element;\n        }\n    });\n\n    extend(kendo.ui, {\n        taskboard: {\n            Column: TaskBoardColumn,\n            NewColumn: TaskBoardNewColumn\n        }\n    });\n\n    extend(true, kendo.ui.taskboard.Column, {\n        styles: TaskBoardColumnStyles,\n        ignoreDragSelectors: [\"img\"]\n    });\n\n})(window.kendo.jQuery);\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        Observable = kendo.Observable,\n        encode = kendo.htmlEncode,\n        extend = $.extend;\n\n    var TaskBoardCardStyles = {\n        element: \"k-taskboard-card\",\n        card: \"k-card\",\n        header: \"k-card-header\",\n        hbox: \"k-hbox\",\n        title: \"k-card-title\",\n        link: \"k-link\",\n        spacer: \"k-spacer\",\n        button: \"k-button\",\n        cardMenuButton: \"k-taskboard-card-menu-button k-icon-button\",\n        flatButton: \"k-button-md k-rounded-md k-button-flat k-button-flat-base\",\n        body: \"k-card-body\",\n        actionsIcon: \"more-vertical\",\n        moveCursor: \"k-cursor-move\",\n        categoryBorder: \"k-taskboard-card-category\",\n        headerActions: \"k-card-header-actions\",\n        disabled: \"k-disabled\"\n    };\n\n    var TaskBoardCard = Observable.extend({\n        init: function(options, dataItem, resources) {\n            var that = this;\n\n            that._dataItem = dataItem;\n            that.resources = resources;\n\n            that.options = extend(true, {}, options);\n\n            that._render();\n\n            Observable.fn.init.call(that);\n        },\n\n        contentTemplate: (data) => `<div class=\"${encode(data.styles.header)} ${encode(data.styles.hbox)}\">` +\n            `<a class=\"${encode(data.styles.title)} ${encode(data.styles.link)}\" href=\"#\" ${data.selectable ? kendo.attr(\"command\") + '=SelectCardCommand' : ''}>${encode(kendo.getter(data.dataTitleField)(data))}</a>` +\n            `<span class=\"${encode(data.styles.spacer)}\"></span>` +\n            `${data.cardMenuButton}` +\n        '</div>' +\n        `<div class=\"${encode(data.styles.body)}\"><p>${encode(kendo.getter(data.dataDescriptionField)(data))}</p></div>`,\n\n        cardMenuButtonTemplate: ({ styles }) => `<div class=\"${encode(styles.headerActions)}\"><button aria-label=\"menu\" class=\"${encode(styles.button)} ${encode(styles.flatButton)} ${encode(styles.cardMenuButton)}\">` +\n                                    kendo.ui.icon({ icon: encode(styles.actionsIcon), iconClass: \"k-button-icon\" }) +\n                                '</button></div>',\n\n        _render: function() {\n            var that = this,\n                options = that.options,\n                styles = TaskBoardCard.styles,\n                template = options.template || that.contentTemplate,\n                element = $(\"<div class='\" + styles.element + \" \" + styles.card + \" \" + styles.moveCursor + \"'></div>\"),\n                cardMenuButtonTemplate = options.cardMenu ? that.cardMenuButtonTemplate : \"\",\n                resources = that._resources(that._dataItem),\n                borderDir = options.states.isRtl ? \"borderRightColor\" : \"borderLeftColor\",\n                categoryColor;\n\n            element\n                .attr(kendo.attr(\"uid\"), that._dataItem.uid)\n                .attr(\"aria-disabled\", !options.states.isDisabled)\n                .attr(\"role\", \"listitem\")\n                .toggleClass(styles.disabled, options.states.isDisabled);\n\n            categoryColor = (resources[options.dataCategoryField] && resources[options.dataCategoryField].color) ||\n                                that._dataItem.get(options.dataCategoryField);\n\n            if (categoryColor) {\n                element.addClass(styles.categoryBorder).css(borderDir, categoryColor);\n            }\n\n            element.append(kendo.template(template)(extend(true, {}, {\n                styles: styles,\n                cardMenuButton: kendo.template(cardMenuButtonTemplate)({ styles: styles }),\n                selectable: options.states.isSelectable,\n                resources: resources,\n                dataTitleField: options.dataTitleField,\n                dataDescriptionField: options.dataDescriptionField\n            }, that._dataItem)));\n\n            that.element = element;\n        },\n\n        _resources: function(card) {\n            var that = this,\n                resources = {};\n\n            if (!that.resources) {\n                return resources;\n            }\n\n            for (var key in that.resources) {\n                var resource = that.resources[key];\n                var field = resource.field;\n                var cardResources = kendo.getter(field)(card);\n\n                if (!cardResources) {\n                    continue;\n                }\n\n                if (!resource.multiple) {\n                    cardResources = [cardResources];\n                }\n\n                var data = resource.dataSource.view();\n\n                for (var resourceIndex = 0; resourceIndex < cardResources.length; resourceIndex++) {\n                    var cardResource = null;\n\n                    var value = cardResources[resourceIndex];\n\n                    if (!resource.valuePrimitive) {\n                        value = kendo.getter(resource.dataValueField)(value);\n                    }\n\n                    for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                        if (data[dataIndex].get(resource.dataValueField) == value) {\n                            cardResource = data[dataIndex];\n                            break;\n                        }\n                    }\n\n                    if (cardResource !== null) {\n                        var resourceColor = kendo.getter(resource.dataColorField)(cardResource);\n                        var result = {\n                            field: resource.field,\n                            title: resource.title,\n                            name: resource.name,\n                            text: kendo.getter(resource.dataTextField)(cardResource),\n                            value: value,\n                            color: resourceColor\n                        };\n\n                        if (resource.multiple) {\n                            if (resources[resource.field]) {\n                                resources[resource.field].push(result);\n                            } else {\n                                resources[resource.field] = [result];\n                            }\n                        } else {\n                            resources[resource.field] = result;\n                        }\n                    }\n                }\n            }\n            return resources;\n        },\n\n        _buildTemplate: function() {\n            var that = this,\n                options = that.options,\n                headerTemplate = kendo.format(that.headerTemplate, options.dataTitleField),\n                bodyTemplate = kendo.format(that.bodyTemplate, options.dataDescriptionField);\n\n            return headerTemplate + bodyTemplate;\n        }\n    });\n\n    extend(kendo.ui.taskboard, {\n        Card: TaskBoardCard\n    });\n\n    extend(true, kendo.ui.taskboard.Card, { styles: TaskBoardCardStyles });\n\n})(window.kendo.jQuery);\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        extend = $.extend,\n        template = kendo.template,\n        ContextMenu = kendo.ui.ContextMenu,\n        encode = kendo.htmlEncode,\n\n        ACTION = \"action\";\n\n    var TaskBoardCardMenu = ContextMenu.extend({\n        init: function(element, options) {\n            var that = this;\n\n            ContextMenu.fn.init.call(that, element, options);\n\n            that._overrideTemplates();\n            that._extendItems();\n\n            that.bind(\"select\", that._onSelect.bind(that));\n            that.bind(\"open\", that._onOpen.bind(that));\n            that.bind(\"activate\", that._focus.bind(that));\n        },\n\n        _overrideTemplates: function() {\n            this.templates.sprite = ({ icon, spriteCssClass }) => `${(icon || spriteCssClass) ? kendo.ui.icon({ icon: encode(icon || \"\"), iconClass: encode(spriteCssClass || \"\") }) : ''}`;\n        },\n\n        defaultItems: {\n            \"editCard\": { name: \"editCard\", text: \"Edit card\", icon: \"pencil\", command: \"EditCardCommand\", rules: \"isEditable\" },\n            \"deleteCard\": { name: \"deleteCard\", text: \"Delete card\", icon: \"trash\", command: \"DeleteCardCommand\", rules: \"isEditable\" }\n        },\n\n        events: ContextMenu.fn.events.concat([\n            ACTION\n        ]),\n\n        _extendItems: function() {\n            var that = this,\n                items = that.options.items,\n                item, isBuiltInTool;\n\n            if (items && items.length) {\n                for (var i = 0; i < items.length; i++) {\n                    item = items[i];\n                    isBuiltInTool = $.isPlainObject(item) && Object.keys(item).length === 1 && item.name;\n\n                    if (isBuiltInTool) {\n                        item = item.name;\n                    }\n\n                    if ($.isPlainObject(item)) {\n                        that._append(item);\n                    } else if (that.defaultItems[item]) {\n                        item = that.defaultItems[item];\n                        that._append(item);\n                    } else if (typeof(item) === \"string\") {\n                        item = { name: item, text: item, spriteCssClass: item, command: item + \"Command\" };\n                        that._append(item);\n                    }\n                }\n            } else {\n                for (var key in that.defaultItems) {\n                    item = that.defaultItems[key];\n                    that._append(item);\n                }\n            }\n        },\n\n        _append: function(item) {\n            var that = this;\n\n            that._extendItem(item);\n\n            if (that._validateRules(item)) {\n                that.append(item);\n            }\n        },\n\n        _extendItem: function(item) {\n            var that = this,\n                messages = that.options.messages,\n                attr = {};\n\n            attr[kendo.attr(\"command\")] = item.command;\n\n            if (item.options) {\n                attr[kendo.attr(\"options\")] = item.options;\n            }\n\n            extend(item, {\n                text: messages[item.name],\n                icon: item.icon || \"\",\n                spriteCssClass: item.spriteCssClass || \"\",\n                attr: attr,\n                uid: kendo.guid()\n            });\n        },\n\n        _validateRules: function(tool) {\n            var that = this,\n                states = that.options.states,\n                rules = tool.rules ? tool.rules.split(\";\") : [];\n\n            if (!rules.length) {\n                return true;\n            }\n\n            for (var i = 0; i < rules.length; i++) {\n                if (!states[rules[i]]) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        _onSelect: function(ev) {\n            var command = $(ev.item).attr(kendo.attr(\"command\")),\n                options = $(ev.item).attr(kendo.attr(\"options\")),\n                target = $(ev.target);\n\n            options = typeof(options) === \"string\" ? { value: options } : options;\n\n            if (!command) {\n                return;\n            }\n\n            this.action({\n                command: command,\n                options: extend({ target: target }, options)\n            });\n        },\n\n        _onOpen: function(ev) {\n            var menu = ev.sender,\n                items = menu.options.items;\n\n            if (!items && $.isEmptyObject(this.defaultItems)) {\n                ev.preventDefault();\n            }\n        },\n\n        _focus: function(ev) {\n            if (ev.sender) {\n                ev.sender.element.trigger(\"focus\");\n            }\n        },\n\n        action: function(args) {\n            this.trigger(ACTION, args);\n        }\n    });\n\n    extend(kendo.ui.taskboard, {\n        CardMenu: TaskBoardCardMenu\n    });\n\n    })(window.kendo.jQuery);\n\n(function($, undefined$1) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            isPlainObject = $.isPlainObject,\n            Class = kendo.Class;\n\n        var TaskBoardCommand = Class.extend({\n            init: function(options) {\n                this.options = options;\n                this.taskboard = options.taskboard;\n            },\n            _confirm: function(title, content, okText, cancel) {\n                var that = this,\n                    taskboard = that.taskboard,\n                    taskboardOptions = taskboard.options,\n                    confirm;\n\n                if (isPlainObject(taskboardOptions.editable) && taskboardOptions.editable.confirmation === false ) {\n                    var fakePromise = $.Deferred();\n                    fakePromise.resolve();\n                    return fakePromise;\n                }\n\n                confirm = $(\"<div></div>\").kendoConfirm(extend({}, {\n                    title: title,\n                    content: content,\n                    messages: {\n                        okText: okText,\n                        cancel: cancel\n                    },\n                    buttonLayout: \"normal\"\n                })).data(\"kendoConfirm\");\n\n                confirm.open();\n\n                setTimeout(function() {\n                    confirm.element.trigger(\"focus\");\n                });\n\n                return confirm.result;\n            }\n        });\n\n        // Column commands\n        var AddColumnCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard;\n\n                if (taskboard.trigger(\"editColumn\", { column: null })) {\n                    return;\n                }\n\n                taskboard.columns().each(function(index, column) {\n                    taskboard.enableByColumn(column, false);\n                });\n                taskboard.addColumn();\n            }\n        });\n\n        var EditColumnCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    options = that.options,\n                    taskboard = that.taskboard;\n\n                if (taskboard.trigger(\"editColumn\", { column: options.column })) {\n                    return;\n                }\n\n                taskboard.columns().each(function(index, column) {\n                    taskboard.enableByColumn(column, false);\n                });\n                taskboard.editColumn(options.columnElement);\n            }\n        });\n\n        var DeleteColumnCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    options = that.options,\n                    taskboard = that.taskboard,\n                    taskboardOptions = taskboard.options,\n                    messages = taskboardOptions.messages,\n                    columnDS = taskboard.columnsDataSource;\n\n                var result = that._confirm(messages.deleteColumn, messages.deleteColumnConfirm, messages[\"delete\"], messages.cancel);\n\n                result.done(function() {\n                    if (taskboard.trigger(\"deleteColumn\", { column: options.column })) {\n                        taskboard.dataSource.cancelChanges();\n                        return;\n                    }\n\n                    columnDS.remove(options.column);\n                    columnDS.sync();\n                });\n            }\n        });\n\n        var SaveColumnCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    options = that.options,\n                    taskboard = that.taskboard,\n                    columnSettings = taskboard.options.columnSettings,\n                    columnDS = taskboard.columnsDataSource,\n                    column = options.column,\n                    text = options.target.val();\n\n                if (taskboard.trigger(\"saveColumn\", { column: options.column })) {\n                    taskboard.dataSource.cancelChanges();\n                    return;\n                }\n\n                column.set(columnSettings.dataTextField, text);\n                columnDS.sync();\n            }\n        });\n\n        var CancelEditColumnCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    columnDS = taskboard.columnsDataSource;\n\n                columnDS.cancelChanges();\n            }\n        });\n\n        //Move focus command\n        var MoveFocusCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    options = that.options,\n                    cardElement = options.cardElement,\n                    columnElement = options.columnElement,\n                    columns = taskboard.columns(),\n                    currentColumnIndex = columnElement.index(),\n                    direction = options.value,\n                    columnIndex, column;\n\n                switch (direction) {\n                    case \"left\":\n                        columnIndex = Math.max(0, currentColumnIndex - 1);\n                        break;\n                    case \"right\":\n                        columnIndex = Math.min(columns.length - 1, currentColumnIndex + 1);\n                        break;\n                    default:\n                        columnIndex = currentColumnIndex;\n                        break;\n                }\n\n                that.columns = columns;\n                that.columnIndex = columnIndex;\n                that.column = column = taskboard._getColumnByElement(columns.eq(columnIndex));\n                that.cards = column.cards();\n\n                if (cardElement) {\n                    that._moveFromCardFocus(direction, cardElement);\n                } else if (columnElement && direction === \"down\") {\n                    that.cards.eq(0).trigger(\"focus\");\n                } else {\n                    columns.eq(columnIndex).trigger(\"focus\");\n                }\n            },\n            _moveFromCardFocus: function(direction, cardElement) {\n                var that = this,\n                    currentIndex = cardElement.index(),\n                    focusCard, index, seekFocusableCard = false;\n\n                switch (direction) {\n                    case \"up\":\n                        index = currentIndex - 1;\n                        break;\n                    case \"down\":\n                        index = currentIndex + 1;\n                        break;\n                    default:\n                        seekFocusableCard = true;\n                        index = currentIndex;\n                        break;\n                }\n\n                focusCard = that.cards.eq(index);\n\n                if (!focusCard.length && seekFocusableCard) {\n                    focusCard = that._getFocusableCard(index, direction);\n                }\n\n                if (index >= 0) {\n                    focusCard.trigger(\"focus\");\n                } else {\n                    that.options.columnElement.focus();\n                }\n            },\n            _getFocusableCard: function(index, direction) {\n                var that = this,\n                    lastIndex = that.cards.length - 1,\n                    focusable = that.cards.eq(Math.min(index, lastIndex));\n\n                if (focusable.length) {\n                    return focusable;\n                }\n\n                if (that.columnIndex <= 0 || that.columnIndex >= that.columns.length - 1) {\n                    return;\n                }\n\n                switch (direction) {\n                    case \"left\":\n                        that.columnIndex = Math.max(0, that.columnIndex - 1);\n                        break;\n                    case \"right\":\n                        that.columnIndex = Math.min(that.columns.length - 1, that.columnIndex + 1);\n                        break;\n                }\n\n                that.column = that.taskboard._getColumnByElement(that.columns.eq(that.columnIndex));\n                that.cards = that.column.cards();\n\n                return that._getFocusableCard(index, direction);\n\n            }\n        });\n\n        // Card commands\n        var TaskBoardBaseCardCommand = TaskBoardCommand.extend({\n            _updateOrder: function(column, currentIndex) {\n                var that = this,\n                    taskboard = that.taskboard,\n                    taskBoardOptions = taskboard.options,\n                    dataOrderField = taskBoardOptions.dataOrderField,\n                    options = that.options,\n                    currentCard = options.card,\n                    cardIndex = options.cardElement ? options.cardElement.index() : column.cards().length,\n                    newIndex = currentIndex,\n                    cards = column.cards().map(function(idx, card) {\n                        return taskboard.dataItem(card);\n                    }),\n                    prevCard = cards[cardIndex - 1],\n                    nextCard;\n\n                    currentCard.set(dataOrderField, newIndex);\n\n                    if (prevCard && prevCard.get(dataOrderField) >= currentCard.get(dataOrderField)) {\n                        currentCard.set(dataOrderField, prevCard.get(dataOrderField) + 1);\n                    }\n\n                    for (var i = newIndex + 1; i < cards.length; i++) {\n                        nextCard = cards[i];\n\n                        if (nextCard.get(dataOrderField) <= currentCard.get(dataOrderField)) {\n                            nextCard.set(dataOrderField, currentCard.get(dataOrderField) + 1);\n                            currentCard = nextCard;\n                        } else {\n                            break;\n                        }\n                    }\n            }\n        });\n\n        var SelectCardCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    options = that.options,\n                    cardElement = options.cardElement;\n\n                taskboard._select(cardElement, true);\n                cardElement.focus();\n            }\n        });\n\n        var SaveChangesCommand = TaskBoardBaseCardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    taskBoardOptions = taskboard.options,\n                    options = that.options,\n                    receivedStatus = options.card.get(taskBoardOptions.dataStatusField),\n                    targetColumn = taskboard._getColumn(receivedStatus),\n                    activeElm = $(document.activeElement);\n\n                if (activeElm.length) {\n                    activeElm.trigger(\"change\");\n                }\n\n                if (taskboard.pane && taskboard.pane.form && !taskboard.pane.form.validate()) {\n                    return;\n                }\n\n                if (taskboard.trigger(\"saveCard\", { card: options.card })) {\n                    taskboard.dataSource.cancelChanges();\n                    return;\n                }\n\n                if (targetColumn && taskBoardOptions.dataOrderField) {\n                    that._updateOrder(targetColumn, options.card.get(taskBoardOptions.dataOrderField));\n                }\n\n                taskboard.dataSource.sync().then(function() {\n                    taskboard.columns().eq(0).trigger(\"focus\");\n                });\n            }\n        });\n\n        var DeleteCardCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    messages = taskboard.options.messages,\n                    options = that.options;\n\n                var result = that._confirm(messages.deleteCard, messages.deleteCardConfirm, messages[\"delete\"], messages.cancel);\n\n                result\n                    .done(function() {\n                        if (taskboard.trigger(\"deleteCard\", { card: options.card })) {\n                            taskboard.dataSource.cancelChanges();\n                            return;\n                        }\n\n                        taskboard.dataSource.remove(options.card);\n                        taskboard.dataSource.sync().then(function() {\n                            taskboard.columns().eq(0).trigger(\"focus\");\n                        });\n                    })\n                    .fail(function() {\n                        options.cardElement.trigger(\"focus\");\n                    });\n            }\n        });\n\n        var MoveCardCommand = TaskBoardBaseCardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    taskBoardOptions = taskboard.options,\n                    columnSettings = taskBoardOptions.columnSettings,\n                    options = that.options,\n                    receivedStatus = options.column.get(columnSettings.dataStatusField);\n\n                options.card.set(taskBoardOptions.dataStatusField, receivedStatus);\n\n                if (taskBoardOptions.dataOrderField) {\n                    that._updateOrder(taskboard._getColumn(receivedStatus), options.newIndex);\n                }\n\n                taskboard.dataSource.sync();\n            }\n        });\n\n        var EditCardCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    options = that.options;\n\n                if (taskboard.trigger(\"editCard\", { card: options.card })) {\n                    return;\n                }\n\n                taskboard._openPane(extend({\n                    pane: \"Edit\"\n                }, options));\n            }\n        });\n\n        var AddCardCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard,\n                    options = that.options;\n\n                if (taskboard.trigger(\"editCard\", { card: null })) {\n                    return;\n                }\n                taskboard.dataSource.cancelChanges();\n                taskboard._openPane(extend({\n                    pane: \"Create\"\n                }, options));\n            }\n        });\n\n        // Pane commands\n        var OpenPaneCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    options = that.options,\n                    taskboard = that.taskboard;\n\n                taskboard._openPane({\n                    pane: options.value,\n                    card: options.card,\n                    cardElement: options.cardElement,\n                    column: options.column,\n                    columnElement: options.columnElement\n                });\n            }\n        });\n\n        var ClosePaneCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    taskboard = that.taskboard;\n\n                taskboard._closePane();\n                taskboard.dataSource.cancelChanges();\n            }\n        });\n\n        // Search command\n\n        var SearchCommand = TaskBoardCommand.extend({\n            exec: function() {\n                var that = this,\n                    value = that.options.value,\n                    taskboard = that.taskboard,\n                    taskboardOptions = taskboard.options,\n                    searchOptions = taskboardOptions.search,\n                    operator = searchOptions.operator,\n                    fields = (searchOptions && searchOptions.fields) || [ taskboardOptions.dataTitleField, taskboardOptions.dataDescriptionField ],\n                    filters;\n\n                filters = that._buildFilters(fields, operator, value);\n\n                taskboard.dataSource.filter(filters);\n            },\n            _buildFilters: function(fields, operator, value) {\n                var filters = fields.map(function(field) {\n                    return { field: field, operator: operator, value: value };\n                });\n\n                return { logic: \"or\", filters: filters };\n            }\n        });\n\n        extend(kendo.ui.taskboard, {\n            Command: TaskBoardCommand,\n            commands: {\n                AddColumnCommand: AddColumnCommand,\n                EditColumnCommand: EditColumnCommand,\n                DeleteColumnCommand: DeleteColumnCommand,\n                SaveColumnCommand: SaveColumnCommand,\n                CancelEditColumnCommand: CancelEditColumnCommand,\n                OpenPaneCommand: OpenPaneCommand,\n                ClosePaneCommand: ClosePaneCommand,\n                SelectCardCommand: SelectCardCommand,\n                MoveFocusCommand: MoveFocusCommand,\n                SaveChangesCommand: SaveChangesCommand,\n                DeleteCardCommand: DeleteCardCommand,\n                MoveCardCommand: MoveCardCommand,\n                EditCardCommand: EditCardCommand,\n                AddCardCommand: AddCardCommand,\n                SearchCommand: SearchCommand\n            }\n        });\n\n    })(window.kendo.jQuery);\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        extend = $.extend,\n        Observable = kendo.Observable,\n        encode = kendo.htmlEncode,\n\n        Form = kendo.ui.Form,\n\n        DOT = \".\",\n        NS = DOT + \"kendoTaskBoardPane\",\n\n        ACTION = \"action\",\n        CLICK = \"click\";\n\n    var TaskBoardPaneStyles = {\n        element: \"k-taskboard-pane\",\n        edit: \"k-taskboard-edit-pane\",\n        preview: \"k-taskboard-preview-pane\",\n        header: \"k-taskboard-pane-header\",\n        headerText: \"k-taskboard-pane-header-text\",\n        spacer: \"k-spacer\",\n        headerActions: \"k-taskboard-pane-header-actions\",\n        content: \"k-taskboard-pane-content\",\n        footerActions: \"k-taskboard-pane-actions\",\n        footerActionButtons: \"k-actions k-hstack k-justify-content-start\",\n        baseButton: \"k-button-solid-base\",\n        primaryButton: \"k-button-solid-primary\"\n    };\n\n    var TaskBoardPane = Observable.extend({\n        init: function(taskboard, options, dataItem, resources) {\n            var that = this;\n\n            that.taskboard = taskboard;\n            that._dataItem = dataItem;\n            that.resources = resources;\n            that.options = extend(true, {}, options);\n\n            that._render();\n\n            that.element.on(CLICK + NS,\n                \"[\" + kendo.attr(\"command\") + \"]\",\n                that._commandClick.bind(that));\n\n            Observable.fn.init.call(that);\n        },\n        headerTemplate: ({ styles, messages, fieldFormat }) => `<div class=\"${encode(styles.headerText)}\">${fieldFormat}</div>` +\n                        `<span class=\"${encode(styles.spacer)}\"></span>` +\n                        `<div class=\"${encode(styles.headerActions)}\">` +\n                            kendo.html.renderButton(`<button title=\"${encode(messages.close)}\" ${encode(kendo.attr(\"command\"))}=\"ClosePaneCommand\"></button>`, {\n                                icon: \"x\",\n                                iconClass: 'k-button-icon',\n                                fillMode: \"flat\",\n                            }) +\n                        '</div>',\n        buttonTemplate: ({ styles, icon, spriteCssClass, text, fillMode, themeColor, command, options }) =>\n            kendo.html.renderButton(`<button title=\"${encode(text)}\" ${encode(kendo.attr(\"command\"))}=\"${encode(command)}\" ${encode(kendo.attr(\"options\"))}=\"${encode(options)}\">` +\n                `${encode(text)}` +\n            '</button>', {\n                icon: encode(icon),\n                iconClass: `k-button-icon ${encode(spriteCssClass)}`,\n                fillMode: fillMode,\n                themeColor: themeColor\n            }),\n        contentTemplate: () => ``,\n        builtinButtons: {\n            \"edit\": { name: \"edit\", icon: \"pencil\", text: \"Edit\", themeColor: \"primary\", command: \"EditCardCommand\", rules: \"isEditable\" },\n            \"delete\": { name: \"delete\", icon: \"trash\", text: \"Delete\", command: \"DeleteCardCommand\", rules: \"isEditable\", fillMode: \"flat\", themeColor: \"primary\" },\n            \"cancel\": { name: \"cancel\", icon: \"cancel-outline\", text: \"Cancel\", command: \"ClosePaneCommand\" },\n            \"saveChanges\": { name: \"saveChanges\", icon: \"save\", text: \"Save\", command: \"SaveChangesCommand\", themeColor: \"primary\", rules: \"isEditable\" },\n            \"create\": { name: \"create\", icon: \"save\", text: \"Create\", command: \"SaveChangesCommand\", themeColor: \"primary\", rules: \"isEditable\" }\n        },\n        defaultButtons: [],\n        _render: function() {\n            var that = this,\n                styles = TaskBoardPane.styles,\n                element = $(\"<div class='\" + styles.element + \"'></div>\"),\n                header = $(\"<div class='\" + styles.header + \"'></div>\"),\n                content = $(\"<div class='\" + styles.content + \"'></div>\"),\n                buttonsContainer = $(\"<div class='\" + styles.footerActions + \" \" + styles.footerActionButtons + \"'></div>\");\n\n            that.header = header.appendTo(element);\n            that._renderHeader();\n            that.content = content.appendTo(element);\n            that._renderContent();\n            that.buttonsContainer = buttonsContainer.appendTo(element);\n            that.buttonsContainer.append(that._buildButtonsHtml());\n            that.element = element;\n        },\n        _renderHeader: function() {\n            var that = this,\n                styles = TaskBoardPane.styles,\n                options = that.options,\n                messages = options.messages,\n                headerTemplate = options.headerTemplate ? options.headerTemplate : that.headerTemplate,\n                resources = that._resources(that._dataItem);\n\n            that.header.append(kendo.template(headerTemplate)(extend(true, {}, {\n                styles: styles,\n                messages: messages,\n                resources: resources,\n                fieldFormat: that._buildHeaderTemplate(that._dataItem)\n            }, that._dataItem)));\n        },\n        _buildHeaderTemplate: function(dataItem) {\n            var that = this;\n            return encode(kendo.getter(that.options.dataTitleField)(dataItem));\n        },\n        _renderContent: function() {\n            var that = this,\n                styles = TaskBoardPane.styles,\n                options = that.options,\n                messages = options.messages,\n                contentTemplate = options.template || that.contentTemplate,\n                resources = that._resources(that._dataItem);\n\n            that.content.append(kendo.template(contentTemplate)(extend(true, {}, {\n                styles: styles,\n                messages: messages,\n                resources: resources\n            }, that._dataItem)));\n        },\n        _resources: function(card) {\n            var that = this,\n                resources = {};\n\n            if (!that.resources) {\n                return resources;\n            }\n\n            for (var key in that.resources) {\n                var resource = that.resources[key];\n                var field = resource.field;\n                var cardResources = kendo.getter(field)(card);\n\n                if (!cardResources) {\n                    continue;\n                }\n\n                if (!resource.multiple) {\n                    cardResources = [cardResources];\n                }\n\n                var data = resource.dataSource.view();\n\n                for (var resourceIndex = 0; resourceIndex < cardResources.length; resourceIndex++) {\n                    var cardResource = null;\n\n                    var value = cardResources[resourceIndex];\n\n                    if (!resource.valuePrimitive) {\n                        value = kendo.getter(resource.dataValueField)(value);\n                    }\n\n                    for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                        if (data[dataIndex].get(resource.dataValueField) == value) {\n                            cardResource = data[dataIndex];\n                            break;\n                        }\n                    }\n\n                    if (cardResource !== null) {\n                        var resourceColor = kendo.getter(resource.dataColorField)(cardResource);\n                        var result = {\n                            field: resource.field,\n                            title: resource.title,\n                            name: resource.name,\n                            text: kendo.getter(resource.dataTextField)(cardResource),\n                            value: value,\n                            color: resourceColor\n                        };\n\n                        if (resource.multiple) {\n                            if (resources[resource.field]) {\n                                resources[resource.field].push(result);\n                            } else {\n                                resources[resource.field] = [result];\n                            }\n                        } else {\n                            resources[resource.field] = result;\n                        }\n                    }\n                }\n            }\n            return resources;\n        },\n        _buildButtonsHtml: function() {\n            var that = this,\n                options = that.options,\n                messages = options.messages,\n                buttons = options.buttons || that.defaultButtons,\n                styles = TaskBoardPane.styles,\n                html = \"\";\n\n            for (var i = 0; i < buttons.length; i++) {\n                var button = buttons[i];\n                button = ($.isPlainObject(button) && Object.keys(button).length === 1 && button.name) ? button.name : button;\n\n                if (typeof button === \"string\") {\n                    if (button === \"spacer\") {\n                        html += '<span class=\"k-spacer\"></span>';\n                        continue;\n                    }\n\n                    button = extend(true, {},\n                        that.builtinButtons[button] || { spriteCssClass: button, command: button + \"Command\" },\n                        { text: messages[button] || button }\n                    );\n                } else if ($.isPlainObject(button) && button.name) {\n                    button = extend(true, button,\n                        { text: messages[button.name] }\n                    );\n                }\n\n                if (!that._validateRules(button)) {\n                    continue;\n                }\n\n                button.spriteCssClass = button.spriteCssClass || \"\";\n\n                html += kendo.template(that.buttonTemplate)(extend(true, {}, {\n                    styles: styles,\n                    messages: messages,\n                    primary: false,\n                    options: null\n                }, button));\n            }\n\n            return html;\n        },\n        _commandClick: function(ev) {\n            var that = this,\n                target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                command = target.attr(kendo.attr(\"command\")),\n                options = target.attr(kendo.attr(\"options\")),\n                card = that._dataItem;\n\n            options = typeof(options) === \"string\" ? { value: options } : options;\n\n            if (!command) {\n                return;\n            }\n\n            that.trigger(ACTION, {\n                command: command,\n                options: extend({ card: card }, options)\n            });\n        },\n        _validateRules: function(tool) {\n            var that = this,\n                states = that.options.states,\n                rules = tool.rules ? tool.rules.split(\";\") : [];\n\n            if (!rules.length) {\n                return true;\n            }\n\n            for (var i = 0; i < rules.length; i++) {\n                if (!states[rules[i]]) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n        destroy: function() {\n            var that = this;\n\n            that.element.off(NS);\n            that.element.remove();\n        }\n    });\n\n    var TaskBoardPreviewPane = TaskBoardPane.extend({\n        init: function(taskboard, options, dataItem, resources) {\n            var that = this;\n\n            options = extend({}, options.previewPane, {\n                dataTitleField: options.dataTitleField,\n                dataDescriptionField: options.dataDescriptionField,\n                messages: options.messages,\n                states: options.states\n            });\n\n            that.contentTemplate = (data) => encode(kendo.getter(options.dataDescriptionField)(data));\n\n            TaskBoardPane.fn.init.call(that, taskboard, options, dataItem, resources);\n\n            that.element.addClass(TaskBoardPane.styles.preview);\n        },\n        defaultButtons: [ \"edit\", \"spacer\", \"delete\" ]\n    });\n\n    var TaskBoardEditPane = TaskBoardPane.extend({\n        init: function(taskboard, options, dataItem) {\n            var that = this;\n\n            options = extend({}, options.editable, {\n                dataTitleField: options.dataTitleField,\n                dataDescriptionField: options.dataDescriptionField,\n                messages: options.messages,\n                states: options.states\n            });\n\n            that.formSettings = extend(that.formSettings, {\n                items: [\n                    { field: options.dataTitleField, label: options.messages[options.dataTitleField] },\n                    { field: options.dataDescriptionField, label: options.messages[options.dataDescriptionField] }\n                ]\n            }, options.form);\n\n            TaskBoardPane.fn.init.call(that, taskboard, options, dataItem);\n\n            that.element.addClass(TaskBoardPane.styles.edit);\n        },\n        defaultButtons: [ \"saveChanges\", \"cancel\" ],\n        formSettings: {\n            buttonsTemplate: () => \"\"\n        },\n        _buildHeaderTemplate: function(dataItem) {\n            var that = this;\n            return `${that.options.messages.edit} ${encode(kendo.getter(that.options.dataTitleField)(dataItem))}`;\n        },\n        _renderContent: function() {\n            var that = this,\n                options = that.options,\n                styles = TaskBoardPane.styles,\n                formSettings = options.form || that.formSettings,\n                formLabelId = kendo.guid(),\n                element = $(\"<div></div>\")\n                    .attr(\"role\", \"form\")\n                    .attr(\"aria-labelledby\", formLabelId),\n                focusFirst = (options.form && options.form.focusFirst !== undefined$1) ? options.form.focusFirst : true;\n\n            that.header.find(DOT + styles.headerText).attr(\"id\", formLabelId);\n\n            that.content.append(element);\n\n            that.form = new Form(element, extend({}, formSettings, {\n                formData: that._dataItem,\n                focusFirst: focusFirst\n            }));\n        }\n    });\n\n    var TaskBoardCreatePane = TaskBoardEditPane.extend({\n        init: function(taskboard, options, dataItem, resources, column) {\n            var that = this,\n                columnStatusField = options.columnSettings.dataStatusField,\n                firstColumn = taskboard.columnsDataSource.view().at(0),\n                status = column ? column[columnStatusField] : firstColumn[columnStatusField],\n                clone = extend({}, dataItem);\n\n            dataItem = taskboard.dataSource.add();\n            dataItem.set(options.dataStatusField, status);\n\n            for (var key in clone) {\n                dataItem.set(key, clone[key]);\n            }\n\n            TaskBoardEditPane.fn.init.call(that, taskboard, options, dataItem, resources);\n        },\n        _buildHeaderTemplate: function(dataItem) {\n            var that = this;\n            return that.options.messages.createNewCard;\n        },\n        defaultButtons: [ \"create\", \"cancel\"]\n    });\n\n    extend(kendo.ui.taskboard, {\n        Pane: TaskBoardPane,\n        panes: {\n            Preview: TaskBoardPreviewPane,\n            Edit: TaskBoardEditPane,\n            Create: TaskBoardCreatePane\n        }\n    });\n\n    extend(true, kendo.ui.taskboard.Pane, { styles: TaskBoardPaneStyles });\n\n})(window.kendo.jQuery);\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        Observable = kendo.Observable,\n\n        extend = $.extend,\n\n        DOT = \".\",\n        NS = DOT + \"kendoKeyboardManager\",\n        KEYDOWN = \"keydown\",\n        ACTION = \"action\";\n\n\n    var Keyboard = Observable.extend({\n        init: function(element) {\n            var that = this;\n\n            that.register = {};\n            that.element = element;\n\n            that._attachEvents();\n\n            Observable.fn.init.call(that);\n        },\n\n        registerShortcut: function(selector, shortcut, options) {\n            var that = this;\n\n            if (!that.register[selector]) {\n                that.register[selector] = [];\n            }\n\n            if (shortcut.keyCode && isNaN(shortcut.keyCode) && shortcut.keyCode.toUpperCase) {\n                shortcut.keyCode = shortcut.keyCode.toUpperCase().charCodeAt(0);\n            }\n\n            that.register[selector].push({\n                shortcut: extend({\n                    keyCode: null,\n                    ctrlKey: false,\n                    shiftKey: false,\n                    altKey: false\n                }, shortcut),\n                options: options\n            });\n\n        },\n\n        _attachEvents: function() {\n            var that = this,\n                handler = that._handler.bind(that);\n\n            that.element.on(KEYDOWN + NS, handler);\n        },\n\n        _handler: function(ev) {\n            var that = this,\n                target = $(ev.target),\n                shortcuts, action;\n\n            for (var selector in that.register) {\n                if (target.is(selector)) {\n                    shortcuts = that.register[selector];\n                    action = that._getAction(shortcuts, ev);\n\n                    if (action) {\n                        that._trigger(action, ev);\n                        break;\n                    }\n                }\n            }\n        },\n\n        _trigger: function(action, ev) {\n            var that = this,\n                target = $(ev.target);\n\n            if (action.command) {\n                that.trigger(ACTION, extend({}, ev, {\n                    command: action.command,\n                    options: extend({}, {\n                        target: target\n                    }, action.options)\n                }));\n            }\n\n            if (action.handler) {\n                action.handler(ev);\n            }\n        },\n\n        _getAction: function(shortcuts, ev) {\n            var that = this;\n\n            for (var i = 0; i < shortcuts.length; i++) {\n                if (that._compareShortcut(shortcuts[i].shortcut, ev)) {\n                    return shortcuts[i].options;\n                }\n            }\n        },\n\n        _compareShortcut: function(shortcut, ev) {\n            var that = this;\n\n            for (var key in shortcut) {\n                var result = false;\n\n                switch (key) {\n                    case \"ctrlKey\":\n                        result = shortcut[key] !== that._getShortcutModifier(ev);\n                        break;\n                    default:\n                        result = shortcut[key] !== ev[key];\n                        break;\n                }\n\n                if (result) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        _getShortcutModifier: function(ev) {\n            var mac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n            return mac ? ev.metaKey : ev.ctrlKey;\n        },\n\n        destroy: function() {\n            var that = this;\n\n            that.element.off(NS);\n        }\n    });\n\n    extend(kendo.ui.taskboard, {\n        KeyboardManager: Keyboard\n    });\n\n})(window.kendo.jQuery);\n\nvar __meta__ = {\n        id: \"taskboard\",\n        name: \"TaskBoard\",\n        category: \"web\",\n        description: \"The TaskBoard widget displays cards.\",\n        depends: [\"data\", \"sortable\", \"dialog\", \"form\", \"menu\", \"toolbar\", \"textbox\"]\n    };\n\n    var TaskBoardStyles = {\n        wrapper: \"k-taskboard\",\n        header: \"k-taskboard-header\",\n        content: \"k-taskboard-content\",\n        toolbar: \"k-taskboard-toolbar k-toolbar-flat\",\n        columnsContainer: \"k-taskboard-columns-container\",\n        card: \"k-taskboard-card\",\n        column: \"k-taskboard-column\",\n        selected: \"k-selected\",\n        disabled: \"k-disabled\",\n        ignoreDrag: \"k-taskboard-drag-ignore\"\n    };\n\n    var preventDefault = function(ev) { ev.preventDefault(); };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            DataSource = kendo.data.DataSource,\n            extend = $.extend,\n            ui = kendo.ui,\n            isArray = Array.isArray,\n            isPlainObject = $.isPlainObject,\n\n            GENERIC = \"_generic\",\n\n            DOT = \".\",\n\n            MOVE = \"move\",\n            MOVE_START = \"moveStart\",\n            MOVE_END = \"moveEnd\",\n            SELECT = \"select\",\n            EXECUTE = \"execute\",\n            ACTION = \"action\",\n            CHANGE = \"change\",\n            CLICK = \"click\",\n            TOGGLE = \"toggle\",\n            ERROR = \"change\",\n            DATABINDING = \"dataBinding\",\n            DATABOUND = \"dataBound\",\n            EDIT_CARD = \"editCard\",\n            SAVE_CARD = \"saveCard\",\n            DELETE_CARD = \"deleteCard\",\n            EDIT_COLUMN = \"editColumn\",\n            SAVE_COLUMN = \"saveColumn\",\n            DELETE_COLUMN = \"deleteColumn\",\n\n            COLUMNSDATABINDING = \"columnsDataBinding\",\n            COLUMNSDATABOUND = \"columnsDataBound\";\n\n        var TaskBoard = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                Widget.fn.init.call(that, element, options);\n\n                element = that.wrapper = that.element;\n\n                that._sortableIdentifier = that.element.attr(\"id\") || kendo.guid();\n\n                that._wrapper();\n                that._columnsDataSource();\n                that._initResources();\n                that._dataSource();\n                that._initToolbar();\n                that._initCardMenu();\n                that._initKeyboard();\n\n                if (that.options.autoBind) {\n                    that.load();\n                }\n\n                kendo.notify(that);\n            },\n\n            events: [\n                MOVE,\n                MOVE_START,\n                MOVE_END,\n                CHANGE,\n                EXECUTE,\n                SELECT,\n                DATABINDING,\n                DATABOUND,\n                COLUMNSDATABINDING,\n                COLUMNSDATABOUND,\n                EDIT_CARD,\n                SAVE_CARD,\n                DELETE_CARD,\n                EDIT_COLUMN,\n                SAVE_COLUMN,\n                DELETE_COLUMN\n            ],\n\n            options: {\n                name: \"TaskBoard\",\n                autoBind: true,\n                height: 600,\n                width: \"100%\",\n                toolbar: true,\n                dataStatusField: \"status\",\n                dataTitleField: \"title\",\n                dataDescriptionField: \"description\",\n                dataCategoryField: \"category\",\n                dataOrderField: null,\n                cardMenu: true,\n                editable: true,\n                selectable: true,\n                reorderable: true,\n                previewPane: true,\n                search: {\n                    operator: \"contains\"\n                },\n                dataSource: [],\n                columns: [],\n                columnSettings: {\n                    dataStatusField: \"status\",\n                    dataTextField: \"text\",\n                    dataOrderField: null\n                },\n                resources: [],\n                messages: {\n                    edit: \"Edit\",\n                    createNewCard: \"Create new card\",\n                    create: \"Create\",\n                    search: \"Search\",\n                    previewCard: \"Preview card\",\n                    addCard: \"Add card\",\n                    editCard: \"Edit card\",\n                    deleteCard: \"Delete Card\",\n                    addColumn: \"Add column\",\n                    editColumn: \"Edit column\",\n                    deleteColumn: \"Delete column\",\n                    close: \"Close\",\n                    cancel: \"Cancel\",\n                    \"delete\": \"Delete\",\n                    saveChanges: \"Save changes\",\n                    title: \"Title:\",\n                    description: \"Description:\",\n                    newColumn: \"New column\",\n                    deleteColumnConfirm: \"Are you sure you want to delete this column?\",\n                    deleteCardConfirm: \"Are you sure you want to delete this card?\"\n                }\n            },\n\n            defaultTools: {\n                addColumn: { type: \"button\", name: \"addColumn\", command: \"AddColumnCommand\", icon: \"plus\", rules: \"isEditable\" },\n                spacer: { type: \"spacer\" },\n                search: {\n                    type: \"component\",\n                    name: \"search\",\n                    command: \"SearchCommand\",\n                    options: \"{ \\\"field\\\": \\\"name\\\", \\\"operator\\\": \\\"startswith\\\" }\",\n                    rules: \"isSearchable\",\n                    overflow: \"never\",\n                    component: \"TextBox\",\n                    componentOptions: {\n                        placeholder: \"search\",\n                        icon: \"search\",\n                        commandOn: \"input\"\n                    }\n                }\n            },\n\n            items: function() {\n                var that = this,\n                    result = $([]);\n\n                for (var key in that._columns) {\n                    $.merge(result, that._columns[key].cards());\n                }\n\n                return result;\n            },\n\n            itemsByStatus: function(status) {\n                var that = this,\n                    result = that._getColumn(status).cards();\n\n                return result;\n            },\n\n            itemsByColumn: function(columnElm) {\n                var that = this,\n                    column = that._getColumnByElement(columnElm);\n\n                if (column) {\n                    return column.cards();\n                }\n            },\n\n            load: function() {\n                var that = this,\n                    fetchPromises = [];\n\n                that._progress(true);\n\n                fetchPromises.push(that.columnsDataSource.fetch());\n\n                for (var key in that.resources) {\n                    fetchPromises.push(that.resources[key].dataSource.fetch());\n                }\n\n                $.when.apply(null, fetchPromises)\n                    .then(that.dataSource.read.bind(that.dataSource));\n            },\n\n            dataItem: function(cardElm) {\n                var that = this,\n                    dataSource = that.dataSource,\n                    uid;\n\n                cardElm = $(cardElm);\n                uid = cardElm.attr(kendo.attr(\"uid\"));\n\n                return dataSource.getByUid(uid);\n            },\n\n            columnDataItem: function(columnElm) {\n                var that = this,\n                    columnsDataSource = that.columnsDataSource,\n                    uid;\n\n                columnElm = $(columnElm);\n                uid = columnElm.attr(kendo.attr(\"uid\"));\n\n                return columnsDataSource.getByUid(uid);\n            },\n\n            columns: function() {\n                var that = this,\n                    result = $([]);\n\n                for (var key in that._columns) {\n                    $.merge(result, that._columns[key].element);\n                }\n\n                return result;\n            },\n\n            columnByStatus: function(status) {\n                return this._getColumn(status).element;\n            },\n\n            select: function(card, toggle) {\n                var that = this;\n\n                if (!card) {\n                    return that.element\n                        .find(DOT + TaskBoard.styles.card + DOT + TaskBoard.styles.selected).eq(0);\n                }\n\n                card = $(card);\n                toggle = toggle !== false;\n\n                if (toggle) {\n                    that.element\n                        .find(DOT + TaskBoard.styles.card + DOT + TaskBoard.styles.selected)\n                        .removeClass(TaskBoard.styles.selected);\n                }\n\n                card.toggleClass(TaskBoard.styles.selected, toggle);\n            },\n\n            previewCard: function(cardElement) {\n                var that = this,\n                    options = that.options,\n                    args = that._extendExecArgs({ target: cardElement });\n\n                if (options.previewPane) {\n                    that._openPane(extend({\n                        pane: \"Preview\"\n                    }, args));\n                }\n            },\n\n            editCard: function(cardElement) {\n                var that = this,\n                    options = that.options,\n                    args;\n\n                cardElement = $(cardElement);\n                args = that._extendExecArgs({ target: cardElement });\n\n                if (options.editable) {\n                    that._openPane(extend({\n                        pane: \"Edit\"\n                    }, args));\n                }\n            },\n\n            saveCard: function() {\n                var that = this;\n\n                that.dataSource.sync();\n            },\n\n            deleteCard: function(cardElement) {\n                var that = this,\n                    card = that.dataItem(cardElement);\n\n                that.dataSource.remove(card);\n                that.dataSource.sync();\n            },\n\n            addCard: function(dataItem) {\n                var that = this,\n                    options = that.options,\n                    args = { card: dataItem };\n\n                if (options.editable) {\n                    that._openPane(extend({\n                        pane: \"Create\"\n                    }, args));\n                }\n            },\n\n            addColumn: function(index, data) {\n                var that = this,\n                    columnSettings = extend(true, {}, that.options.columnSettings, {\n                        messages: that.options.messages,\n                        states: that._buildStates(),\n                        sortableIdentifier: that._sortableIdentifier\n                    }),\n                    newColumn, model, column;\n\n                if (isNaN(index) && !data) {\n                    data = index;\n                    index = null;\n                }\n\n                model = that.columnsDataSource._createNewModel(data);\n                index = isNaN(index) || index === null ? that.columnsDataSource.data().length : index;\n                column = that.columns().eq(index);\n                that.columnsDataSource.insert(index, model);\n\n                newColumn = new ui.taskboard.NewColumn(columnSettings, model);\n\n                if (isNaN(index) || !column.length) {\n                    that.columnsContainer.append(newColumn.element);\n                } else {\n                    column.before(newColumn.element);\n                }\n\n                newColumn.bind(ACTION, that.executeCommand.bind(that));\n            },\n\n            editColumn: function(columnElement) {\n                var that = this;\n\n                columnElement = $(columnElement);\n\n                that._getColumnByElement(columnElement).edit();\n            },\n\n            saveColumn: function() {\n                var that = this;\n\n                that.columnsDataSource.sync();\n            },\n\n            deleteColumn: function(columnElement) {\n                var that = this,\n                    column = that.columnDataItem(columnElement);\n\n                that.columnsDataSource.remove(column);\n                that.columnsDataSource.sync();\n            },\n\n            registerShortcut: function(selector, shortcut, options) {\n                var that = this;\n\n                that.keyboardManager.registerShortcut(selector, shortcut, options);\n            },\n\n            enable: function(cardElement, toggle) {\n                cardElement = $(cardElement);\n\n                cardElement.toggleClass(TaskBoard.styles.disabled, toggle === false);\n                cardElement.attr(\"aria-disabled\", toggle === false);\n            },\n\n            enableByColumn: function(columnElement, toggle) {\n                var that = this;\n\n                columnElement = $(columnElement);\n\n                that.itemsByColumn(columnElement).each(function(index, card) {\n                    that.enable(card, toggle);\n                });\n            },\n\n            readOnly: function(cardElement, toggle) {\n                cardElement = $(cardElement);\n\n                toggle = toggle !== false;\n\n                cardElement.find(\"[\" + kendo.attr(\"command\") + \"]\").toggleClass(TaskBoard.styles.disabled, toggle);\n                cardElement.find(\"a,button\").toggleClass(TaskBoard.styles.disabled, toggle);\n\n                cardElement.toggleClass(TaskBoard.styles.ignoreDrag, toggle);\n                cardElement.attr(\"aria-readonly\", toggle);\n            },\n\n            readOnlyByColumn: function(columnElement, toggle) {\n                var that = this;\n\n                columnElement = $(columnElement);\n\n                that.itemsByColumn(columnElement).each(function(index, card) {\n                    that.readOnly(card, toggle);\n                });\n            },\n\n            setDataSource: function(dataSource) {\n                var that = this;\n\n                that.options.dataSource = dataSource;\n                that._dataSource();\n\n                if (that.options.autoBind) {\n                    that.dataSource.read();\n                }\n            },\n\n            setColumnsDataSource: function(dataSource) {\n                var that = this;\n\n                that.options.columns = dataSource;\n                that._columnsDataSource();\n\n                if (that.options.autoBind) {\n                    that.columnsDataSource.fetch(function() {\n                        that._renderCards(that.dataSource.view());\n                    });\n                }\n            },\n\n            _getColumn: function(status) {\n                return this._columns[status];\n            },\n\n            _getColumnByElement: function(columnElement) {\n                var that = this;\n\n                columnElement = $(columnElement);\n\n                for (var key in that._columns) {\n                    if (that._columns[key].element[0] === columnElement[0]) {\n                        return that._columns[key];\n                    }\n                }\n            },\n\n            _openPane: function(options) {\n                var that = this,\n                    pane = new ui.taskboard.panes[options.pane](that, extend({}, that.options, {\n                        states: that._buildStates()\n                    }), options.card, that.resources, options.column),\n                    keyboardManager;\n\n                if (that.pane) {\n                    that._closePane();\n                }\n\n                that.pane = pane;\n                that.content.after(that.pane.element);\n                that.content.css(\"margin-right\",\n                    that.pane.element.outerWidth() -\n                    parseInt(that.content.css(\"paddingRight\"), 10));\n\n                that.pane.bind(ACTION, that.executeCommand.bind(that));\n\n                that.pane.keyboardManager = keyboardManager = new ui.taskboard.KeyboardManager(that.pane.element);\n\n                keyboardManager.bind(ACTION, that.executeCommand.bind(that));\n\n                keyboardManager.registerShortcut(\"*\", {\n                    keyCode: kendo.keys.ESC\n                }, { command: \"ClosePaneCommand\" });\n\n                keyboardManager.registerShortcut(\"*\", {\n                    keyCode: kendo.keys.ENTER\n                }, { command: \"SaveChangesCommand\", options: {\n                    card: that.pane._dataItem\n                } });\n\n                if (this.options.editable && this.options.editable.form && this.options.editable.form.focusFirst === false) {\n                    setTimeout(function() {\n                        that.pane.element.find(\"button\").eq(0).trigger(\"focus\");\n                    }, 0);\n                }\n            },\n\n            _closePane: function() {\n                var that = this;\n\n                if (that.pane) {\n                    that.pane.keyboardManager.destroy();\n                    that.pane.unbind(ACTION);\n                    that.pane.destroy();\n                    delete that.pane;\n\n                    that.content.css(\"margin-right\", \"\");\n                }\n            },\n\n            _wrapper: function() {\n                var that = this,\n                    options = that.options,\n                    styles = TaskBoard.styles,\n                    headerElm = \"<div class='\" + styles.header + \"'></div>\",\n                    contentElm = \"<div class='\" + styles.content + \"'></div>\",\n                    colsContainer = \"<div class='\" + styles.columnsContainer + \"'></div>\";\n\n                that.element.addClass(styles.wrapper)\n                    .width(options.width)\n                    .height(options.height)\n                    .attr(\"role\", \"application\");\n                that.header = $(headerElm).appendTo(that.element);\n                that.content = $(contentElm).appendTo(that.element);\n                that.columnsContainer = $(colsContainer).appendTo(that.content);\n            },\n\n            _initToolbar: function() {\n                var that = this,\n                    styles = TaskBoard.styles,\n                    options = that.options,\n                    toolbarElm = $(\"<div class='\" + styles.toolbar + \"'></div>\"),\n                    toolbarOptions = isArray(options.toolbar) ? { items: options.toolbar } : options.toolbar,\n                    tools;\n\n                if (options.toolbar === false) {\n                    return;\n                } else if (toolbarOptions === true) {\n                    toolbarOptions = {};\n                }\n\n                tools = toolbarOptions.items ? toolbarOptions.items : Object.keys(that.defaultTools);\n                tools = that._processTools(tools);\n                toolbarOptions.tools = tools;\n                toolbarOptions.defaultTools = that.defaultTools;\n                toolbarOptions.parentMessages = that.options.messages;\n\n                that.header.append(toolbarElm);\n                that.toolbar = new kendo.ui.ToolBar(toolbarElm, toolbarOptions);\n                that.options.toolbar = that.toolbar.options;\n\n                that.toolbar.bind(CLICK, that._toolbarClick.bind(that));\n                that.toolbar.bind(TOGGLE, that._toolbarClick.bind(that));\n                that.toolbar.bind(CHANGE, that._toolbarClick.bind(that));\n            },\n\n            _processTools: function(tools) {\n                var that = this,\n                    states = that._buildStates(),\n                    isDefaultTool;\n\n                tools.forEach(t => {\n                    var rules = t.rules || that.defaultTools[t] ? that.defaultTools[t].rules : null;\n                    isDefaultTool = isPlainObject(t) && Object.keys(t).length >= 1 && t.name && that.defaultTools[t.name];\n\n                    if (isDefaultTool) {\n                        var temp = extend({}, t);\n                        extend(t, that.defaultTools[t.name], temp);\n                    }\n\n                    if (isDefaultTool && t.name == \"search\") {\n                        extend(t.componentOptions, {\n                            icon: t.icon || that.defaultTools[t.name].componentOptions.icon,\n                            placeholder: t.text || that.options.messages.search\n                        });\n                    }\n\n                    if (!rules) {\n                        return;\n                    }\n\n                    rules = rules.split(\";\");\n\n                    if (!rules.length) {\n                        return;\n                    }\n\n                    for (var i = 0; i < rules.length; i++) {\n                        if (!states[rules[i]]) {\n                            if (t.rules) {\n                                t.hidden = true;\n                            } else {\n                                that.defaultTools[t].hidden = true;\n                            }\n                        }\n                    }\n                });\n\n                return tools;\n            },\n\n            _toolbarClick: function(ev) {\n                var command = $(ev.target).data(\"command\"),\n                    options = $(ev.target).data(\"options\");\n\n                options = extend({}, options, { value: $(ev.target).val() });\n\n                if (!command) {\n                    return;\n                }\n\n                this.executeCommand({\n                    command: command,\n                    options: options\n                });\n            },\n\n            _isToolEnabled: function(toolName) {\n                var that = this,\n                    options = that.options.toolbar,\n                    items = options.items || that.defaultTools,\n                    found = false;\n\n                for (var i = 0; i < items.length; i++) {\n                    if (items[i].name == toolName) {\n                        found = true;\n                        break;\n                    }\n                }\n\n                return items[toolName] || found;\n            },\n\n            _buildStates: function() {\n                var that = this;\n\n                return {\n                    isEditable: that._isEditable(),\n                    isReorderable: that._isReorderable(),\n                    isSelectable: that._isSelectable(),\n                    isReadOnly: !that._isReorderable() && !that._isEditable(),\n                    isDisabled: !that._isReorderable() && !that._isEditable() && !that._isSelectable(),\n                    isSearchable: that._isSearchable(),\n                    notLocalColumns: !(that.columnsDataSource.transport instanceof kendo.data.LocalTransport),\n                    isRtl: kendo.support.isRtl(that.wrapper)\n                };\n            },\n\n            _isSearchable: function() {\n                return !!this.options.search;\n            },\n\n            _isEditable: function() {\n                return !!this.options.editable;\n            },\n\n            _isReorderable: function() {\n                return !!this.options.reorderable;\n            },\n\n            _isSelectable: function() {\n                return !!this.options.selectable;\n            },\n\n            executeCommand: function(args) {\n                var that = this,\n                    commandName = args.command,\n                    commandOptions = extend({ taskboard: this }, isPlainObject(args.options) ? that._extendExecArgs(args.options) : { value: args.options }),\n                    command = ui.taskboard.commands[commandName] && new ui.taskboard.commands[commandName](commandOptions);\n\n\n                if (!that.trigger(EXECUTE, args)) {\n                    if (command) {\n                        command.exec();\n                    } else {\n                        window.console.warn(kendo.format(\"Trying to use {0} command, but such is not available in the kendo.ui.taskboard.commands namespace!\", commandName));\n                    }\n                }\n            },\n\n            _extendExecArgs: function(args) {\n                var that = this,\n                    target = args.draggableEvent ? args.item : args.target,\n                    columnElm, cardElm, columnDataItem, cardDataItem;\n\n                if (args.card) {\n                    target = that.items().filter(function(idx, elm) {\n                        return $(elm).attr(kendo.attr(\"uid\")) === args.card.get(\"uid\");\n                    });\n                }\n\n                if (!target || !(target && target.length)) {\n                    return args;\n                }\n\n                columnElm = args.columnElement || (target.is(DOT + TaskBoard.styles.column) ? target : target.parents(DOT + TaskBoard.styles.column));\n                columnDataItem = that.columnsDataSource.getByUid(columnElm.data(kendo.ns + \"uid\"));\n                cardElm = target.is(DOT + TaskBoard.styles.card) ? target : target.closest(DOT + TaskBoard.styles.card);\n                cardDataItem = that.dataSource.getByUid(cardElm.data(kendo.ns + \"uid\"));\n\n                return extend(args, {\n                    card: cardDataItem,\n                    cardElement: cardElm.length ? cardElm : undefined$1,\n                    column: columnDataItem,\n                    columnElement: columnElm.length ? columnElm : undefined$1\n                });\n            },\n\n\n            _select: function(card, toggle) {\n                var that = this;\n\n                if (toggle === null) {\n                    toggle = true;\n                }\n\n                if (!that.trigger(SELECT, { card: card })) {\n                    that.select(card, toggle);\n                    that.previewCard(card);\n                }\n            },\n\n            _columnsDataSource: function() {\n                var that = this,\n                    options = that.options,\n                    columnSettings = options.columnSettings,\n                    columnsDataSource = options.columns;\n\n                columnsDataSource = isArray(columnsDataSource) ? { data: columnsDataSource } : columnsDataSource;\n\n                if (columnSettings.dataOrderField && !columnsDataSource.sort) {\n                    columnsDataSource.sort = { field: columnSettings.dataOrderField, dir: \"asc\" };\n                }\n\n                if (!columnsDataSource.schema) {\n                    var fields = {};\n\n                    fields[columnSettings.dataStatusField] = { type: \"string\", defaultValue: function() { return kendo.guid().split(\"-\")[0]; } };\n                    fields[columnSettings.dataTextField] = { type: \"string\" };\n\n                    if (columnSettings.dataOrderField) {\n                        fields[columnSettings.dataOrderField] = { type: \"number\" };\n                    }\n\n                    columnsDataSource.schema = {\n                        model: {\n                            fields: fields\n                        }\n                    };\n                }\n\n                if (that.columnsDataSource && that._columnsChangeHandler) {\n                    that.columnsDataSource.unbind(CHANGE, that._columnsChangeHandler);\n                    that.columnsDataSource.unbind(CHANGE, that._columnsErrorHandler);\n                } else {\n                    that._columnsChangeHandler = that._columnsDataSourceChange.bind(that);\n                    that._columnsErrorHandler = that._error.bind(that);\n                }\n\n                that.columnsDataSource = DataSource.create(columnsDataSource)\n                                .bind(CHANGE, that._columnsChangeHandler)\n                                .bind(ERROR, that._columnsErrorHandler);\n            },\n\n            _columnsDataSourceChange: function(ev) {\n                var that = this,\n                    view = that.columnsDataSource.view(),\n                    columnSettings = extend(true, {}, that.options.columnSettings, {\n                        messages: that.options.messages,\n                        states: that._buildStates(),\n                        sortableIdentifier: that._sortableIdentifier\n                     }),\n                    statusField = columnSettings.dataStatusField;\n\n                if (ev.action && ev.action !== \"sync\") {\n                    return;\n                }\n\n                if (that.trigger(COLUMNSDATABINDING, ev)) {\n                    return;\n                }\n\n                that._progress(true);\n\n                that._columns = {};\n                that.columnsContainer.html(\"\");\n\n                for (var i = 0; i < view.length; i++) {\n                    var data = view[i];\n                    var status = data[statusField] || GENERIC;\n                    var column;\n\n                    column = that._columns[status] = new ui.taskboard.Column(columnSettings, data);\n                    that.columnsContainer.append(column.element);\n                    column.bind(ACTION, that.executeCommand.bind(that));\n                    column.bind(MOVE, that._move.bind(that));\n                    column.bind(MOVE_END, that._moveEnd.bind(that));\n                    column.bind(MOVE_START, that._moveStart.bind(that));\n                    column.bind(CHANGE, that._changeOrder.bind(that));\n                    that._tabindex(column.element);\n                }\n\n                if (ev.action === \"sync\" || ev.action === undefined$1) {\n                    that._renderCards(that.dataSource.view());\n                }\n\n                that._progress(false);\n                that.trigger(COLUMNSDATABOUND, ev);\n            },\n\n            _move: function(ev) {\n                this.trigger(MOVE, this._extendExecArgs(ev));\n            },\n\n            _moveEnd: function(ev) {\n                this.trigger(MOVE_END, this._extendExecArgs(ev));\n            },\n\n            _moveStart: function(ev) {\n                this.trigger(MOVE_START, this._extendExecArgs(ev));\n            },\n\n            _changeOrder: function(ev) {\n                this.trigger(CHANGE, this._extendExecArgs(ev));\n            },\n\n            _dataSource: function() {\n                var that = this,\n                    options = that.options,\n                    dataSource = options.dataSource;\n\n                    dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                if (options.dataOrderField && !dataSource.sort) {\n                    dataSource.sort = { field: options.dataOrderField, dir: \"asc\" };\n                }\n\n                if (!dataSource.schema) {\n                    var fields = {};\n\n                    fields[options.dataStatusField] = { type: \"string\" };\n                    fields[options.dataTitleField] = { type: \"string\" };\n                    fields[options.dataDescriptionField] = { type: \"string\" };\n                    fields[options.dataCategoryField] = { type: \"string\" };\n\n                    if (options.dataOrderField) {\n                        fields[options.dataOrderField] = { type: \"number\" };\n                    }\n\n                    dataSource.schema = {\n                        model: {\n                            fields: fields\n                        }\n                    };\n                }\n\n                if (that.dataSource && that._changeHandler) {\n                    that.dataSource.unbind(CHANGE, that._changeHandler);\n                    that.dataSource.unbind(ERROR, that._errorHandler);\n                } else {\n                    that._changeHandler = that._change.bind(that);\n                    that._errorHandler = that._error.bind(that);\n                }\n\n                that.dataSource = DataSource.create(dataSource)\n                                .bind(CHANGE, that._changeHandler);\n            },\n\n            _change: function(ev) {\n                var that = this;\n\n                if (ev.action && ev.action !== \"sync\") {\n                    return;\n                }\n\n                if (that.trigger(DATABINDING, ev)) {\n                    return;\n                }\n\n                that._progress(true);\n\n                that._clearColumns();\n                that._renderCards(that.dataSource.view());\n                that._closePane();\n\n                that.trigger(DATABOUND, ev);\n                that._progress(false);\n            },\n\n            _error: function() {\n                this._progress(false);\n            },\n\n            _renderCards: function(data) {\n                var that = this;\n\n                for (var i = 0; i < data.length; i++) {\n                    that._renderCard(data[i]);\n                }\n            },\n\n            _renderCard: function(card) {\n                var that = this,\n                    options = extend({}, that.options, { states: that._buildStates() }),\n                    statusField = options.dataStatusField,\n                    status = card[statusField] || GENERIC;\n\n                if (status && that._columns[status]) {\n                    card = new ui.taskboard.Card(options, card, that.resources);\n                    that._columns[status].addCard(card.element);\n                    that._tabindex(card.element);\n                }\n            },\n\n            _clearColumns: function() {\n                var that = this;\n\n                for (var key in that._columns) {\n                    that._columns[key].empty();\n                }\n            },\n\n            _initCardMenu: function() {\n                var that = this,\n                    options = that.options,\n                    cardMenuOptions = isArray(options.cardMenu) ? { items: options.cardMenu } : options.cardMenu;\n\n                cardMenuOptions = extend({}, {\n                    messages: options.messages,\n                    target: that.columnsContainer,\n                    filter: \".k-taskboard-card-menu-button\",\n                    action: that.executeCommand.bind(that),\n                    showOn: \"click\",\n                    alignToAnchor: true,\n                    states: that._buildStates()\n                }, cardMenuOptions);\n\n                if (options.cardMenu === false) {\n                    return;\n                }\n\n                that.cardMenu = new ui.taskboard.CardMenu(\"<ul></ul>\", cardMenuOptions);\n            },\n\n            _initResources: function() {\n                var that = this,\n                    resources = that.options.resources;\n\n                for (var i = 0; i < resources.length; i++) {\n                    that._addResource(resources[i]);\n                }\n            },\n\n            _addResource: function(resource) {\n                var that = this;\n\n                if (!that.resources) {\n                    that.resources = {};\n                }\n\n                that.resources[resource.field] = {\n                    field: resource.field,\n                    name: resource.name,\n                    title: resource.title || resource.field,\n                    dataTextField: resource.dataTextField || \"text\",\n                    dataValueField: resource.dataValueField || \"value\",\n                    dataColorField: resource.dataColorField || \"color\",\n                    valuePrimitive: resource.valuePrimitive === false ? false : true,\n                    multiple: resource.multiple || false,\n                    dataSource: that._resourceDataSource(resource.dataSource)\n                };\n            },\n\n            _resourceDataSource: function(resourceDS) {\n                var dataSource = isArray(resourceDS) ? { data: resourceDS } : resourceDS,\n                    dataSourceInstance = kendo.data.DataSource.create(dataSource);\n\n                return dataSourceInstance;\n            },\n\n            _progress: function(toggle) {\n                var that = this;\n\n                kendo.ui.progress(that.element, toggle);\n            },\n\n            _initKeyboard: function() {\n                var that = this;\n\n                that.keyboardManager = new ui.taskboard.KeyboardManager(that.element);\n\n                that.keyboardManager.bind(ACTION, that.executeCommand.bind(that));\n                that._registerShortcuts();\n            },\n\n            _registerShortcuts: function() {\n                var that = this,\n                    states = that._buildStates();\n\n                if (states.isEditable) {\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: kendo.keys.DELETE\n                    }, { command: \"DeleteColumnCommand\" });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: \"e\",\n                        ctrlKey: true\n                    }, { command: \"EditColumnCommand\", handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                        keyCode: \"a\",\n                        ctrlKey: true\n                    }, { command: \"AddCardCommand\", handler: preventDefault });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column + \" *\", {\n                        keyCode: kendo.keys.ESC\n                    }, { command: \"CancelEditColumnCommand\" });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.DELETE\n                    }, { command: \"DeleteCardCommand\" });\n\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: \"e\",\n                        ctrlKey: true\n                    }, { command: \"EditCardCommand\", handler: preventDefault });\n                }\n\n                if (states.isSelectable) {\n                    that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                        keyCode: kendo.keys.ENTER\n                    }, { command: \"SelectCardCommand\", handler: preventDefault });\n                }\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                    keyCode: kendo.keys.UP\n                }, { command: \"MoveFocusCommand\", options: { value: \"up\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                    keyCode: kendo.keys.DOWN\n                }, { command: \"MoveFocusCommand\", options: { value: \"down\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                    keyCode: kendo.keys.LEFT\n                }, { command: \"MoveFocusCommand\", options: { value: \"left\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                    keyCode: kendo.keys.RIGHT\n                }, { command: \"MoveFocusCommand\", options: { value: \"right\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                    keyCode: kendo.keys.LEFT\n                }, { command: \"MoveFocusCommand\", options: { value: \"left\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                    keyCode: kendo.keys.RIGHT\n                }, { command: \"MoveFocusCommand\", options: { value: \"right\" }, handler: preventDefault });\n\n                that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                    keyCode: kendo.keys.DOWN\n                }, { command: \"MoveFocusCommand\", options: { value: \"down\" }, handler: preventDefault });\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that._columnsChangeHandler) {\n                    that.columnsDataSource.unbind(CHANGE, that._columnsChangeHandler);\n                    that.columnsDataSource.unbind(CHANGE, that._columnsErrorHandler);\n                }\n\n                if (that._changeHandler) {\n                    that.dataSource.unbind(CHANGE, that._changeHandler);\n                    that.dataSource.unbind(ERROR, that._errorHandler);\n                }\n\n                for (var key in that._columns) {\n                    that._columns[key].destroy();\n                }\n\n                if (that.toolbar) {\n                    that.toolbar.destroy();\n                }\n\n                if (that.cardMenu) {\n                    that.cardMenu.destroy();\n                }\n\n                if (that.keyboardManager) {\n                    that.keyboardManager.destroy();\n                }\n\n                if (that.pane) {\n                    that._closePane();\n                }\n\n                Widget.fn.destroy.call(that);\n            }\n        });\n\n        kendo.ui.plugin(TaskBoard);\n\n        extend(true, TaskBoard, { styles: TaskBoardStyles });\n\n    })(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}