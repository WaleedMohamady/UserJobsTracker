{"version":3,"sources":["raw-mjs/kendo.imagebrowser.js"],"names":["__meta__","id","name","category","description","hidden","depends","$","undefined$1","kendo","window","FileBrowser","ui","isPlainObject","extend","isFunction","trimSlashesRegExp","ERROR","NS","NAMEFIELD","SIZEFIELD","TYPEFIELD","DEFAULTSORTORDER","field","dir","EMPTYTILE","template","text","icon","iconClass","htmlEncode","data","schemas","imagebrowser","items","model","fields","size","type","transports","RemoteTransport","init","options","fn","call","this","_call","path","read","create","destroy","update","ImageBrowser","element","addClass","fileTypes","value","that","selected","_selectedItem","imageUrl","transport","get","match","concatPaths","replace","format","encodeURIComponent","_fileUpload","e","file","filterRegExp","RegExp","split","join","fileName","files","fileSize","fileNameField","sizeField","test","_createFile","_uploading","upload","one","_insertFileToList","set","response","_getFieldName","_tiles","listView","filter","attr","_scroll","preventDefault","_showMessage","messages","invalidFileType","_content","list","appendTo","on","_dblClick","bind","ListView","layout","flex","direction","wrap","dataSource","_itemTmpl","editTemplate","_editTmpl","selectable","autoBind","dataBinding","toolbar","find","parent","action","progress","content","wrapper","dataBound","view","length","append","emptyFolder","change","_listViewChange","_dataSource","typeSortOrder","nameSortOrder","sort","schema","_errorHandler","unbind","_error","DataSource","_loadImage","li","dataItem","getByUid","thumbnailUrl","img","alt","urlJoin","hide","prev","remove","end","fadeIn","after","indexOf","_override","Date","getTime","loaded","clearTimeout","_timeout","setTimeout","height","_outerHeight","viewTop","scrollTop","viewBottom","each","top","offsetTop","bottom","offsetHeight","showLoading","uid","suffix","Math","round","sizeFormatter","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.imagebrowser.js","sourcesContent":["import './kendo.filebrowser.js';\nimport './kendo.icons.js';\n\nvar __meta__ = {\n    id: \"imagebrowser\",\n    name: \"ImageBrowser\",\n    category: \"web\",\n    description: \"\",\n    hidden: true,\n    depends: [ \"filebrowser\", \"icons\" ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        FileBrowser = kendo.ui.FileBrowser,\n        isPlainObject = $.isPlainObject,\n        extend = $.extend,\n        isFunction = kendo.isFunction,\n        trimSlashesRegExp = /(^\\/|\\/$)/g,\n        ERROR = \"error\",\n        NS = \".kendoImageBrowser\",\n        NAMEFIELD = \"name\",\n        SIZEFIELD = \"size\",\n        TYPEFIELD = \"type\",\n        DEFAULTSORTORDER = { field: TYPEFIELD, dir: \"asc\" },\n        EMPTYTILE = kendo.template(({ text }) => `<div class=\"k-listview-item k-listview-item-empty\"><span class=\"k-file-preview\">${kendo.ui.icon({ icon: \"none\", iconClass: \"k-file-icon\" })}</span><span class=\"k-file-name\">${kendo.htmlEncode(text)}</span></div>`);\n\n    extend(true, kendo.data, {\n        schemas: {\n            \"imagebrowser\": {\n                data: function(data) {\n                    return data.items || data || [];\n                },\n                model: {\n                    id: \"name\",\n                    fields: {\n                        name: \"name\",\n                        size: \"size\",\n                        type: \"type\"\n                    }\n                }\n            }\n        }\n    });\n\n    extend(true, kendo.data, {\n        transports: {\n            \"imagebrowser\": kendo.data.RemoteTransport.extend({\n                init: function(options) {\n                    kendo.data.RemoteTransport.fn.init.call(this, $.extend(true, {}, this.options, options));\n                },\n                _call: function(type, options) {\n                    options.data = $.extend({}, options.data, { path: this.options.path() });\n\n                    if (isFunction(this.options[type])) {\n                        this.options[type].call(this, options);\n                    } else {\n                        kendo.data.RemoteTransport.fn[type].call(this, options);\n                    }\n                },\n                read: function(options) {\n                    this._call(\"read\", options);\n                },\n                create: function(options) {\n                    this._call(\"create\", options);\n                },\n                destroy: function(options) {\n                    this._call(\"destroy\", options);\n                },\n                update: function() {\n                    //updates are handled by the upload\n                },\n                options: {\n                    read: {\n                        type: \"POST\"\n                    },\n                    update: {\n                        type: \"POST\"\n                    },\n                    create: {\n                        type: \"POST\"\n                    },\n                    destroy: {\n                        type: \"POST\"\n                    }\n                }\n            })\n        }\n    });\n\n    function offsetTop(element) {\n        return element.offsetTop - $(element).height();\n    }\n\n    function concatPaths(path, name) {\n        if (path === undefined$1 || !path.match(/\\/$/)) {\n            path = (path || \"\") + \"/\";\n        }\n        return path + name;\n    }\n\n    function sizeFormatter(value) {\n        if (!value) {\n            return \"\";\n        }\n\n        var suffix = \" bytes\";\n\n        if (value >= 1073741824) {\n            suffix = \" GB\";\n            value /= 1073741824;\n        } else if (value >= 1048576) {\n            suffix = \" MB\";\n            value /= 1048576;\n        } else if (value >= 1024) {\n            suffix = \" KB\";\n            value /= 1024;\n        }\n\n        return Math.round(value * 100) / 100 + suffix;\n    }\n\n    var ImageBrowser = FileBrowser.extend({\n        init: function(element, options) {\n            var that = this;\n\n            options = options || {};\n\n            FileBrowser.fn.init.call(that, element, options);\n\n            that.element.addClass(\"k-imagebrowser\");\n        },\n\n        options: {\n            name: \"ImageBrowser\",\n            fileTypes: \"*.png,*.gif,*.jpg,*.jpeg\"\n        },\n\n        value: function() {\n            var that = this,\n                selected = that._selectedItem(),\n                path,\n                imageUrl = that.options.transport.imageUrl;\n\n            if (selected && selected.get(TYPEFIELD) === \"f\") {\n                path = concatPaths(that.path(), selected.get(NAMEFIELD)).replace(trimSlashesRegExp, \"\");\n                if (imageUrl) {\n                    path = isFunction(imageUrl) ? imageUrl(path) : kendo.format(imageUrl, encodeURIComponent(path));\n                }\n                return path;\n            }\n        },\n\n        _fileUpload: function(e) {\n            var that = this,\n                options = that.options,\n                fileTypes = options.fileTypes,\n                filterRegExp = new RegExp((\"(\" + fileTypes.split(\",\").join(\")|(\") + \")\").replace(/\\*\\./g , \".*.\"), \"i\"),\n                fileName = e.files[0].name,\n                fileSize = e.files[0].size,\n                fileNameField = NAMEFIELD,\n                sizeField = SIZEFIELD,\n                file;\n\n            if (filterRegExp.test(fileName)) {\n                e.data = { path: that.path() };\n\n                file = that._createFile(fileName, fileSize);\n\n                if (!file) {\n                    e.preventDefault();\n                } else {\n                    file._uploading = true;\n\n                    that.upload.one(\"error\", function() {\n                        file = undefined$1;\n                    });\n\n                    that.upload.one(\"success\", function(e) {\n                        if (file) {\n                            delete file._uploading;\n\n                            var model = that._insertFileToList(file);\n\n                            model.set(fileNameField, e.response[that._getFieldName(fileNameField)]);\n                            model.set(sizeField, e.response[that._getFieldName(sizeField)]);\n\n                            that._tiles = that.listView.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n                            that._scroll();\n                        }\n                    });\n                }\n            } else {\n                e.preventDefault();\n                that._showMessage(kendo.htmlEncode(kendo.format(options.messages.invalidFileType, fileName, fileTypes)));\n            }\n        },\n\n        _content: function() {\n            var that = this;\n\n            that.list = $('<div class=\"k-filemanager-listview\" />')\n                .appendTo(that.element)\n                .on(\"dblclick\" + NS, \".k-listview-item\", that._dblClick.bind(that));\n\n            that.listView = new kendo.ui.ListView(that.list, {\n                layout: \"flex\",\n                flex: {\n                    direction: \"row\",\n                    wrap: \"wrap\"\n                },\n                dataSource: that.dataSource,\n                template: that._itemTmpl(),\n                editTemplate: that._editTmpl(),\n                selectable: true,\n                autoBind: false,\n                dataBinding: function(e) {\n\n                    that.toolbar.find(\".k-i-x,.k-svg-i-x\").parent().addClass(\"k-disabled\");\n\n                    if (e.action === \"remove\" || e.action === \"sync\") {\n                        e.preventDefault();\n                        kendo.ui.progress(that.listView.content, false);\n                        /* If there are no files left the loader is displayed over the wrapper instead of the content. */\n                        kendo.ui.progress(that.listView.wrapper, false);\n                    }\n                },\n                dataBound: function() {\n                    if (that.dataSource.view().length) {\n                        that._tiles = this.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n                        that._scroll();\n                    } else {\n                        this.content.append(EMPTYTILE({ text: that.options.messages.emptyFolder }));\n                    }\n                },\n                change: that._listViewChange.bind(that)\n            });\n\n            that.listView.content.on(\"scroll\" + NS, that._scroll.bind(that));\n        },\n\n        _dataSource: function() {\n            var that = this,\n                options = that.options,\n                transport = options.transport,\n                typeSortOrder = extend({}, DEFAULTSORTORDER),\n                nameSortOrder = { field: NAMEFIELD, dir: \"asc\" },\n                schema,\n                dataSource = {\n                    type: transport.type || \"imagebrowser\",\n                    sort: [typeSortOrder, nameSortOrder]\n                };\n\n            if (isPlainObject(transport)) {\n                transport.path = that.path.bind(that);\n                dataSource.transport = transport;\n            }\n\n            if (isPlainObject(options.schema)) {\n                dataSource.schema = options.schema;\n            } else if (transport.type && isPlainObject(kendo.data.schemas[transport.type])) {\n                schema = kendo.data.schemas[transport.type];\n            }\n\n            if (that.dataSource && that._errorHandler) {\n                that.dataSource.unbind(ERROR, that._errorHandler);\n            } else {\n                that._errorHandler = that._error.bind(that);\n            }\n\n            that.dataSource = kendo.data.DataSource.create(dataSource)\n                .bind(ERROR, that._errorHandler);\n        },\n\n        _loadImage: function(li) {\n            var that = this,\n                element = $(li),\n                dataItem = that.dataSource.getByUid(element.attr(kendo.attr(\"uid\"))),\n                name = dataItem.get(NAMEFIELD),\n                thumbnailUrl = that.options.transport.thumbnailUrl,\n                img = $(\"<img />\", { alt: name }),\n                urlJoin = \"?\";\n\n            if (dataItem._uploading) {\n                return;\n            }\n\n            img.hide()\n               .on(\"load\" + NS, function() {\n                   $(this).prev().remove().end().addClass(\"k-image k-file-image\").fadeIn();\n               });\n\n            element.find(\".k-i-loading\").after(img);\n\n            if (isFunction(thumbnailUrl)) {\n                thumbnailUrl = thumbnailUrl(that.path(), encodeURIComponent(name));\n            } else {\n                if (thumbnailUrl.indexOf(\"?\") >= 0) {\n                    urlJoin = \"&\";\n                }\n\n                thumbnailUrl = thumbnailUrl + urlJoin + \"path=\" + encodeURIComponent(that.path() + name);\n                if (dataItem._override) {\n                    thumbnailUrl += \"&_=\" + new Date().getTime();\n                    delete dataItem._override;\n                }\n            }\n\n            // IE8 will trigger the load event immediately when the src is assigned\n            // if the image is loaded from the cache\n            img.attr(\"src\", thumbnailUrl);\n\n            li.loaded = true;\n        },\n\n        _scroll: function() {\n            var that = this;\n            if (that.options.transport && that.options.transport.thumbnailUrl) {\n                clearTimeout(that._timeout);\n\n                that._timeout = setTimeout(function() {\n\n                    var height = kendo._outerHeight(that.listView.content),\n                        viewTop = that.listView.content.scrollTop(),\n                        viewBottom = viewTop + height;\n\n                    that._tiles.each(function() {\n                        var top = offsetTop(this),\n                            bottom = top + this.offsetHeight;\n\n                        if ((top >= viewTop && top < viewBottom) || (bottom >= viewTop && bottom < viewBottom)) {\n                            that._loadImage(this);\n                        }\n\n                        if (top > viewBottom) {\n                            return false;\n                        }\n                    });\n\n                    that._tiles = that._tiles.filter(function() {\n                        return !this.loaded;\n                    });\n\n                }, 250);\n            }\n        },\n\n        _itemTmpl: function() {\n            var that = this;\n\n            const result = (data) => {\n                const showLoading = that.options.transport && that.options.transport.thumbnailUrl;\n\n                return `<div class=\"k-listview-item\" ${kendo.attr(\"uid\")}=\"${data.uid}\" ${kendo.attr(\"type\")}=\"${data[TYPEFIELD]}\">` +\n                    `${data[TYPEFIELD] === 'd' ?\n                        `<div class=\"k-file-preview\">${kendo.ui.icon({ icon: \"folder\", iconClass: \"k-file-icon\" })}</div>` :\n                        `<div class=\"k-file-preview\">${showLoading ? '<span class=\"k-file-icon k-icon k-i-loading\"></span>' : kendo.ui.icon({ icon: \"file\", iconClass: \"k-file-icon\" }) }</div>`}` +\n                    `<span class=\"k-file-name\">${data[NAMEFIELD]}</span>` +\n                    `${data[TYPEFIELD] === 'f' ? `<span class=\"k-file-size\">${sizeFormatter(data[SIZEFIELD])}</span>` : '' }` +\n                `</div>`;\n            };\n\n            return kendo.template(result);\n        }\n    });\n\n    kendo.ui.plugin(ImageBrowser);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}