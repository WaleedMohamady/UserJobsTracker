{"version":3,"sources":["raw-mjs/kendo.scheduler.agendaview.js"],"names":["__meta__","id","name","category","description","depends","hidden","$","kendo","window","ui","encode","htmlEncode","NS","ROLE","EVENT_WRAPPER_TEMPLATE","task","title","replace","attr","uid","resources","color","isException","icon","isRecurring","template","showDelete","messages","destroy","AgendaGroupedView","Class","extend","init","view","this","_view","_getColumns","groupHeaders","columns","concat","_getGroupsInDay","_getSumOfItemsForDate","_renderTaskGroupsCells","headerCells","groups","taskGroupIndex","taskIndex","length","_renderDateCell","tableRow","tasks","date","tasksGroups","isMobile","_isMobile","push","format","_dateTemplate","_renderDates","_getParents","parentGroups","splice","_getGroupsByDate","_renderTaskGroups","table","items","parents","append","AgendaGroupedByDateView","slice","columnsWithoutDate","_compareDateGroups","currentGroup","prevGroup","index","text","groupsInDay","tasksGroupIdx","itemsIdx","idx","lastItemValue","i","sumOfItemsForDate","groupsRowSpanIndex","_groupTemplate","value","className","sortedArray","_groupsByDate","sort","a","b","array","getTime","dateExists","rowSpan","result","resourceValue","resource","item","valuePrimitive","getter","dataValueField","flattenGroup","shift","apply","call","scheduler","AgendaView","SchedulerView","element","options","fn","_groupedView","_getGroupedView","editable","delete","create","update","_eventTemplate","eventDateTemplate","eventGroupTemplate","_timeTemplate","eventTimeTemplate","on","_renderLayout","refreshLayout","_aria","children","find","clearSelection","_isVirtualized","_isGroupedByDate","_mouseenter","e","currentTarget","addClass","_mouseleave","removeClass","_remove","preventDefault","trigger","closest","nextDate","nextDay","startDate","_startDate","endDate","_endDate","previousDate","previousDay","addDays","createLayout","_layout","_footer","time","event","groupedResources","_tasks","events","start","end","isAllDay","getDate","eventStartDate","offsetCompensation","getTimezoneOffset","eventDurationInDays","Math","ceil","MS_PER_DAY","clone","head","day","Date","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","tail","middle","data","Query","field","dir","groupBy","toArray","tableRows","today","isToday","join","eventResources","_startTime","endTime","eventTemplate","render","content","empty","_createGroupConfiguration","_renderGroups","taskGroups","applyStylesFromKendoAttributes","_eventsList","flattenTaskGroups","parent","configuration","dataSource","filter","itemParentValue","dataParentValueField","dataIndex","tmp","operator","groupEqFilter","indexOf","obj","dataTextField","span","_resourceBySlot","selectionByElement","cell","hasClass","is","select","selection","row","eq","current","move","key","handled","keys","UP","DOWN","moveToEvent","constrainSelection","isInRange","off","selectedDateFormat","selectedShortDateFormat","selectedMobileDateFormat","allDay","toString","MOBILE_EVENT_DATE_TEMPLATE","DESKTOP_EVENT_DATE_TEMPLATE","jQuery","kendo$1"],"mappings":"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","file":"kendo.scheduler.agendaview.js","sourcesContent":["import './kendo.scheduler.view.js';\nimport './kendo.icons.js';\n\nvar __meta__ = {\n        id: \"scheduler.agendaview\",\n        name: \"Scheduler Agenda View\",\n        category: \"web\",\n        description: \"The Scheduler Agenda View\",\n        depends: [\"scheduler.view\", \"icons\"],\n        hidden: true\n    };\n\n    (function($) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            encode = kendo.htmlEncode,\n            NS = \".kendoAgendaView\",\n            ROLE = \"role\";\n\n        var EVENT_WRAPPER_TEMPLATE = (task) => `<div class=\"k-task\" title=\"${encode((task.title || \"\").replace(/\"/g,\"\\'\"))}\" ${kendo.attr('uid')}=\"${task.uid}\">` +\n            `${task.resources[0] ? `<span class=\"k-scheduler-mark\" ${kendo.attr(\"style-background-color\")}=\"${task.resources[0].color}\"></span>` : ''}` +\n            `${task.isException() ? kendo.ui.icon(\"arrows-no-repeat\") :\n                (task.isRecurring() ? kendo.ui.icon(\"arrow-rotate-cw\") : '')}` +\n            `<span class=\"k-scheduler-task-text\">${kendo.template(task.template)(task)}</span>` +\n            `${task.showDelete ? `<a href=\"#\" class=\"k-link k-event-delete\" title=\"${task.messages.destroy}\" aria-label=\"${task.messages.destroy}\">${kendo.ui.icon(\"x\")}</a>` : ''}` +\n            '</div>';\n\n        var DESKTOP_EVENT_DATE_TEMPLATE = ({ date }) => '<strong class=\"k-scheduler-agendaday\">' +\n                kendo.toString(date, \"dd\") +\n            '</strong>' +\n            '<em class=\"k-scheduler-agendaweek\">' +\n                kendo.toString(date,\"dddd\") +\n            '</em>' +\n            '<span class=\"k-scheduler-agendadate\">' +\n                kendo.toString(date, \"y\") +\n            '</span>';\n\n        var MOBILE_EVENT_DATE_TEMPLATE = ({ date }) => '<div class=\"k-scheduler-datecolumn-wrap\">' +\n                '<span class=\"k-mobile-scheduler-agendadate\">' +\n                    `<span class=\"k-mobile-scheduler-agendaday\">${kendo.toString(date, \"dd\")}</span>` +\n                    '&nbsp' +\n                    `<span class=\"k-mobile-scheduler-agendamonth\">${kendo.toString(date, \"MMMM\")}</span>` +\n                '</span>' +\n                '<span class=\"k-mobile-scheduler-agendaweekday\">' +\n                    kendo.toString(date, \"dddd\") +\n                '</span>' +\n            '</div>';\n\n        var EVENT_DATE_TEMPLATE = (data) => (data.isMobile ? MOBILE_EVENT_DATE_TEMPLATE(data) : DESKTOP_EVENT_DATE_TEMPLATE(data));\n\n        var EVENT_GROUP_TEMPLATE = ({ isMobile, value }) => (!isMobile ?\n                                        '<strong class=\"k-scheduler-adgendagroup\">' +\n                                            value +\n                                        '</strong>' :\n                                        '<span class=\"k-scheduler-group-text\">' +\n                                            value +\n                                        '</span>');\n\n        var AgendaGroupedView = kendo.Class.extend({\n            init: function(view) {\n                this._view = view;\n            },\n\n            _getColumns: function(groupHeaders, columns) {\n                return groupHeaders.concat(columns);\n            },\n            _getGroupsInDay: function() {\n                return [];\n            },\n\n            _getSumOfItemsForDate: function() {\n                return 0;\n            },\n\n            _renderTaskGroupsCells: function(headerCells, groups, taskGroupIndex, taskIndex) {\n                var view = this._view;\n\n                if (taskGroupIndex === 0 && taskIndex === 0 && groups.length) {\n                    view._renderTaskGroupsCells(headerCells, groups);\n                }\n            },\n\n            _renderDateCell: function(tableRow, groups, tasks, date, taskGroupIndex, tasksGroups) {\n                var view = this._view;\n                var isMobile = view._isMobile();\n\n                tableRow.push(kendo.format(\n                    '<td class=\"k-scheduler-datecolumn{3}{2}\" rowspan=\"{0}\">{1}</td>',\n                    tasks.length,\n                    view._dateTemplate({ date: date, isMobile: isMobile }),\n                    taskGroupIndex == tasksGroups.length - 1 && !groups.length ? \" k-last\" : \"\",\n                    !groups.length ? \" k-first\" : \"\"\n                ));\n            },\n\n            _renderDates: function() {\n                return undefined;\n            },\n\n            _getParents: function(parentGroups) {\n                return parentGroups.splice(0);\n            },\n\n            _getGroupsByDate: function() {\n                return undefined;\n            },\n\n            _renderTaskGroups: function(table, items, parents) {\n                var view = this._view;\n\n                table.append(view._renderTaskGroups(items, parents));\n            }\n\n        });\n\n        var AgendaGroupedByDateView = kendo.Class.extend({\n            init: function(view) {\n                this._view = view;\n            },\n\n            _getColumns: function(groupHeaders, columns) {\n                var view = this._view;\n\n                if (view._isMobile()) {\n                    return groupHeaders.concat(columns);\n                } else {\n                    var date = columns.slice(0, 1);\n                    var columnsWithoutDate = columns.slice(1);\n\n                    return date.concat(groupHeaders).concat(columnsWithoutDate);\n                }\n            },\n\n            _compareDateGroups: function(currentGroup, prevGroup, index) {\n                if (currentGroup[index].text == prevGroup[index].text) {\n                    if (index === 0) {\n                        return true;\n                    } else {\n                        return this._compareDateGroups(currentGroup, prevGroup, index - 1);\n                    }\n                }\n\n                return false;\n            },\n\n            _getGroupsInDay: function(tasksGroups, groups) {\n                var groupsInDay = [];\n                var prevGroup = null;\n\n                for (var tasksGroupIdx = 0; tasksGroupIdx < tasksGroups.length; tasksGroupIdx++) {\n                    for (var itemsIdx = 0; itemsIdx < tasksGroups[tasksGroupIdx].items.length; itemsIdx++) {\n                        var idx = 0;\n\n                        if (groupsInDay.length === 0) {\n                            for (idx; idx < groups[tasksGroupIdx].length; idx++) {\n                                groupsInDay.push([1]);\n                            }\n                        } else {\n                            for (idx; idx < groups[tasksGroupIdx].length; idx++) {\n\n                                if (this._compareDateGroups(groups[tasksGroupIdx], prevGroup, idx)) {\n                                    groupsInDay[idx][groupsInDay[idx].length - 1]++;\n                                } else {\n                                    var lastItemValue = groupsInDay[idx][groupsInDay[idx].length - 1] - 1;\n                                    for (var i = 0; i < lastItemValue; i++) {\n                                        groupsInDay[idx].push(0);\n                                    }\n                                    groupsInDay[idx].push(1);\n                                }\n                            }\n                        }\n                        prevGroup = groups[tasksGroupIdx];\n                    }\n                }\n\n                return groupsInDay;\n            },\n\n            _getSumOfItemsForDate: function(tasksGroups) {\n                var sumOfItemsForDate = 0;\n\n                for (var i = 0; i < tasksGroups.length; i++) {\n\n                    sumOfItemsForDate += tasksGroups[i].items.length;\n                }\n                return sumOfItemsForDate;\n            },\n\n            _renderTaskGroupsCells: function(headerCells, groups, taskGroupIndex, taskIndex, groupsInDay, sumOfItemsForDate, date, groupsRowSpanIndex) {\n                var view = this._view;\n                var isMobile = view._isMobile();\n\n                if (!isMobile) {\n                    if (taskGroupIndex === 0 && taskIndex === 0) {\n                        headerCells.push(kendo.format(\n                            '<td class=\"k-scheduler-datecolumn k-first\" rowspan=\"{0}\">{1}</td>',\n                            sumOfItemsForDate,\n                            view._dateTemplate({ date: date, isMobile: isMobile })\n                        ));\n                    }\n\n                    for (var idx = 0; idx < groups[taskGroupIndex].length; idx++) {\n                        if (groupsInDay[idx][groupsRowSpanIndex]) {\n                            headerCells.push(kendo.format(\n                                '<td class=\"k-scheduler-groupcolumn\" rowspan=\"{0}\">{1}</td>',\n                                groupsInDay[idx][groupsRowSpanIndex],\n                                view._groupTemplate({ value: groups[taskGroupIndex][idx].text, isMobile: isMobile }),\n                                groups[taskGroupIndex][idx].className\n                            ));\n                        }\n                    }\n                } else {\n                    if (taskGroupIndex === 0 && taskIndex === 0 && groups.length) {\n                        view._renderTaskGroupsCells(headerCells, groups);\n                    }\n                }\n            },\n\n            _renderDateCell: function() {\n                return undefined;\n            },\n\n            _renderDates: function(table) {\n                var view = this._view;\n                var sortedArray = view._groupsByDate.sort(function(a, b) {\n                    return a.array[0].value.getTime() - b.array[0].value.getTime();\n                });\n\n                for (var i = 0; i < sortedArray.length; i++) {\n                    table.append(view._renderTaskGroups(sortedArray[i].array, sortedArray[i].groups));\n                }\n            },\n\n            _getParents: function(parentGroups) {\n                return parentGroups.slice(0);\n            },\n\n            _getGroupsByDate: function(groups, idx, parents) {\n                var view = this._view;\n\n                if (groups[idx].items) {\n                    for (var taskGroupIndex = 0; taskGroupIndex < groups[idx].items.length; taskGroupIndex++) {\n                        var date = groups[idx].items[taskGroupIndex].value;\n                        var dateExists = false;\n\n                        for (var i = 0; i < view._groupsByDate.length; i++) {\n                            if (view._groupsByDate[i].array[0].value.getTime() === date.getTime()) {\n                                dateExists = true;\n                                view._groupsByDate[i].array.push(groups[idx].items[taskGroupIndex]);\n                                view._groupsByDate[i].groups.push(parents);\n                            }\n                        }\n\n                        if (!dateExists) {\n                            view._groupsByDate.push({\n                                array: [groups[idx].items[taskGroupIndex]],\n                                groups: [parents]\n                            });\n                        }\n                    }\n                }\n            },\n\n            _renderTaskGroups: function() {\n                return undefined;\n            }\n\n        });\n\n        kendo.ui.scheduler.AgendaGroupedView = AgendaGroupedView;\n        kendo.ui.scheduler.AgendaGroupedByDateView = AgendaGroupedByDateView;\n\n\n        ui.AgendaView = ui.SchedulerView.extend({\n            init: function(element, options) {\n                ui.SchedulerView.fn.init.call(this, element, options);\n\n                this._groupedView = this._getGroupedView();\n\n                options = this.options;\n\n                if (options.editable) {\n                    options.editable = $.extend(\n                        { \"delete\": true },\n                        options.editable,\n                        { create: false, update: false },\n                        { messages: options.messages }\n                    );\n                }\n\n                this.title = options.title;\n\n                this._eventTemplate = kendo.template(EVENT_WRAPPER_TEMPLATE);\n                this._dateTemplate = kendo.template(options.eventDateTemplate);\n                this._groupTemplate = kendo.template(options.eventGroupTemplate);\n                this._timeTemplate = kendo.template(options.eventTimeTemplate);\n\n                this.element.on(\"mouseenter\" + NS, \".k-scheduler-content tr\", \"_mouseenter\")\n                    .on(\"mouseleave\" + NS, \".k-scheduler-content tr\", \"_mouseleave\")\n                    .on(\"click\" + NS, \".k-scheduler-content .k-link:has(.k-i-x),.k-scheduler-content .k-link:has(.k-svg-i-x)\", \"_remove\");\n\n                this._renderLayout(options.date);\n                this.refreshLayout();\n            },\n\n            name: \"agenda\",\n\n            _aria: function() {\n                var table = this.table;\n\n                table.attr(ROLE, \"grid\");\n\n                table.children(\"tbody\").attr(ROLE, \"none\");\n\n                table.find(\"table\").attr(ROLE, \"none\");\n                table.find(\"table > tbody\").attr(ROLE, \"rowgroup\");\n                table.find(\"table tr\").attr(ROLE, \"row\");\n                table.find(\"table td\").attr(ROLE, \"gridcell\");\n\n                table.find(\".k-scheduler-header-wrap th\").attr(ROLE, \"columnheader\");\n                table.find(\".k-scheduler-content .k-scheduler-datecolumn, .k-scheduler-content .k-scheduler-groupcolumn\").attr(ROLE, \"rowheader\");\n            },\n\n            clearSelection: function() {\n                this.element.find(\".k-selected\").attr(\"aria-selected\", false);\n\n                kendo.ui.SchedulerView.fn.clearSelection.call(this);\n            },\n\n            _isVirtualized: function() {\n                return false;\n            },\n            _getGroupedView: function() {\n                if (this._isGroupedByDate()) {\n                    return new kendo.ui.scheduler.AgendaGroupedByDateView(this);\n                } else {\n                    return new kendo.ui.scheduler.AgendaGroupedView(this);\n                }\n            },\n\n            _mouseenter: function(e) {\n                $(e.currentTarget).addClass(\"k-hover\");\n            },\n\n            _mouseleave: function(e) {\n                $(e.currentTarget).removeClass(\"k-hover\");\n            },\n\n            _remove: function(e) {\n                e.preventDefault();\n\n                this.trigger(\"remove\", {\n                    uid: $(e.currentTarget).closest(\".k-task\").attr(kendo.attr(\"uid\"))\n                });\n            },\n\n            nextDate: function() {\n                return kendo.date.nextDay(this.startDate());\n            },\n\n            startDate: function() {\n                return this._startDate;\n            },\n\n            endDate: function() {\n                return this._endDate;\n            },\n\n            previousDate: function() {\n                return kendo.date.previousDay(this.startDate());\n            },\n\n            _renderLayout: function(date) {\n                this._startDate = date;\n                this._endDate = kendo.date.addDays(date, 7);\n                this.createLayout(this._layout());\n                this._footer();\n            },\n\n            _layout: function() {\n                var columns = [\n                    { text: this.options.messages.time, className: \"k-scheduler-timecolumn\" },\n                    { text: this.options.messages.event }\n                ];\n\n                if (!this._isMobile()) {\n                    columns.splice(0, 0, { text: this.options.messages.date, className: \"k-scheduler-datecolumn\" });\n                }\n\n                var resources = this.groupedResources;\n                if (resources.length) {\n                    var groupHeaders = [];\n                    for (var idx = 0; idx < resources.length; idx++) {\n                        groupHeaders.push({ text: \"\", className: \"k-scheduler-groupcolumn\" });\n                    }\n\n                    columns = this._groupedView._getColumns(groupHeaders, columns);\n                }\n\n                return {\n                    columns: columns\n                };\n            },\n\n            _tasks: function(events) {\n                var tasks = [];\n\n                for (var idx = 0; idx < events.length; idx++) {\n                    var event = events[idx];\n                    var start = event.start;\n                    var end = event.isAllDay ? kendo.date.getDate(event.end) : event.end;\n                    var eventStartDate = kendo.date.getDate(start);\n                    var offsetCompensation = (eventStartDate.getTimezoneOffset() - end.getTimezoneOffset()) * 60000;\n\n                    var eventDurationInDays = Math.ceil((end - eventStartDate + offsetCompensation) / kendo.date.MS_PER_DAY);\n\n                    if (event.isAllDay) {\n                        eventDurationInDays += 1;\n                    }\n\n                    var task = event.clone();\n                    task.startDate = kendo.date.getDate(start);\n\n                    if (task.startDate >= this.startDate()) {\n                        tasks.push(task);\n                    }\n\n                    if (eventDurationInDays > 1) {\n                        task.end = kendo.date.nextDay(start);\n                        task.head = true;\n                        for (var day = 1; day < eventDurationInDays; day++) {\n                            start = task.end;\n                            task = event.clone();\n                            task.start = task.startDate = kendo.date.getDate(start);\n                            task.end = kendo.date.nextDay(start);\n                            if (day == eventDurationInDays - 1) {\n                                task.end = new Date(task.start.getFullYear(), task.start.getMonth(), task.start.getDate(), end.getHours(), end.getMinutes(), end.getSeconds(), end.getMilliseconds());\n                                task.tail = true;\n                            } else {\n                                task.isAllDay = true;\n                                task.middle = true;\n                            }\n\n                            if ((kendo.date.getDate(task.end) <= this.endDate() && task.start >= this.startDate()) || kendo.date.getDate(task.start).getTime() == this.endDate().getTime()) {\n                                tasks.push(task);\n                            }\n                        }\n                    }\n                }\n\n                return new kendo.data.Query(tasks).sort([{ field: \"start\", dir: \"asc\" }, { field: \"end\", dir: \"asc\" }]).groupBy({ field: \"startDate\" }).toArray();\n            },\n\n            _renderTaskGroups: function(tasksGroups, groups) {\n                var tableRows = [];\n                var editable = this.options.editable;\n                var showDelete = editable && editable.destroy !== false && !this._isMobile();\n                var isMobile = this._isMobile();\n                var sumOfItemsForDate = this._groupedView._getSumOfItemsForDate(tasksGroups);\n                var groupsInDay = this._groupedView._getGroupsInDay(tasksGroups, groups);\n                var groupsRowSpanIndex = 0;\n\n                for (var taskGroupIndex = 0; taskGroupIndex < tasksGroups.length; taskGroupIndex++) {\n                    var date = tasksGroups[taskGroupIndex].value;\n\n                    var tasks = tasksGroups[taskGroupIndex].items;\n\n                    var today = kendo.date.isToday(date);\n\n                    for (var taskIndex = 0; taskIndex < tasks.length; taskIndex++) {\n                        var task = tasks[taskIndex];\n\n                        var tableRow = [];\n\n                        var headerCells = !isMobile ? tableRow : [];\n\n                        this._groupedView._renderTaskGroupsCells(headerCells, groups, taskGroupIndex, taskIndex, groupsInDay, sumOfItemsForDate, date, groupsRowSpanIndex);\n\n                        groupsRowSpanIndex++;\n                        if (taskIndex === 0) {\n                            if (isMobile) {\n                                headerCells.push(kendo.format(\n                                    '<td class=\"k-scheduler-datecolumn {1}\" colspan=\"2\">{0}</td>',\n                                    this._dateTemplate({ date: date, isMobile: isMobile }),\n                                    !this.groupedResources.length ? \"k-first\" : \"\"\n                                ));\n\n                                tableRows.push('<tr role=\"row\" aria-selected=\"false\"' + (today ? ' class=\"k-today\">' : \">\") + headerCells.join(\"\") + \"</tr>\");\n                            } else {\n                                this._groupedView._renderDateCell(tableRow, groups, tasks, date, taskGroupIndex, tasksGroups);\n                            }\n                        }\n\n                        if (task.head) {\n                            task.format = \"{0:t}\";\n                        } else if (task.tail) {\n                            task.format = \"{1:t}\";\n                        } else {\n                            task.format = \"{0:t}-{1:t}\";\n                        }\n\n                        task.resources = this.eventResources(task);\n\n                        tableRow.push(kendo.format(\n                            '<td class=\"k-scheduler-timecolumn {4}\"><div>{0}{1}{2}</div></td><td>{3}</td>',\n                            task.tail || task.middle ? kendo.ui.icon(\"caret-alt-left\") : \"\",\n                            this._timeTemplate(task.clone({ start: task._startTime || task.start, end: task.endTime || task.end, messages: this.options.messages })),\n                            task.head || task.middle ? kendo.ui.icon(\"caret-alt-right\") : \"\",\n                            this._eventTemplate(task.clone({ showDelete: showDelete, messages: this.options.messages, template: this.options.eventTemplate })),\n                            !this.groupedResources.length && isMobile ? \"k-first\" : \"\"\n                        ));\n\n                        tableRows.push('<tr role=\"row\" aria-selected=\"false\"' + (today ? ' class=\"k-today\">' : \">\") + tableRow.join(\"\") + \"</tr>\");\n                    }\n                }\n\n                return tableRows.join(\"\");\n            },\n\n            _renderTaskGroupsCells: function(headerCells, groups) {\n                var isMobile = this._isMobile();\n\n                for (var idx = 0; idx < groups.length; idx++) {\n                    headerCells.push(kendo.format(\n                        '<td class=\"k-scheduler-groupcolumn{2}\" rowspan=\"{0}\">{1}</td>',\n                        groups[idx].rowSpan,\n                        this._groupTemplate({ value: groups[idx].text, isMobile: isMobile }),\n                        groups[idx].className\n                    ));\n                }\n            },\n\n            render: function(events) {\n                var table = this.content.find(\"table\").empty();\n                var groups = [];\n\n                if (events.length > 0) {\n                    var resources = this.groupedResources;\n\n                    table.append($(\"<tbody>\"));\n\n                    if (resources.length) {\n                        groups = this._createGroupConfiguration(events, resources, null);\n                        this._groupsByDate = [];\n                        this._renderGroups(groups, table.find(\"tbody\"), []);\n                        this._groupedView._renderDates(table.find(\"tbody\"));\n                    } else {\n                        groups = this._tasks(events);\n                        var taskGroups = $(this._renderTaskGroups(groups, []));\n                        kendo.applyStylesFromKendoAttributes(taskGroups, [\"background-color\"]);\n\n                        table.find(\"tbody\").append(taskGroups);\n                    }\n                }\n\n                var items = this._eventsList = flattenTaskGroups(groups);\n\n                this._aria();\n                this.refreshLayout();\n                this.trigger(\"activate\");\n            },\n\n            _renderGroups: function(groups, table, parentGroups) {\n                for (var idx = 0, length = groups.length; idx < length; idx++) {\n                    var parents = this._groupedView._getParents(parentGroups);\n\n                    parents.push(groups[idx]);\n                    this._groupedView._getGroupsByDate(groups, idx, parents);\n\n                    if (groups[idx].groups) {\n                        this._renderGroups(groups[idx].groups, table, parents);\n                    } else {\n                        this._groupedView._renderTaskGroups(table, groups[idx].items, parents);\n                    }\n                }\n            },\n\n            _createGroupConfiguration: function(events, resources, parent) {\n                var resource = resources[0];\n                var configuration = [];\n                var data = resource.dataSource.view();\n                var isMobile = this._isMobile();\n\n                data = data.filter(function(item) {\n                    var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n\n                    return itemParentValue === null || itemParentValue === undefined || (parent && itemParentValue === parent.value);\n                });\n\n                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                    var value = resourceValue(resource, data[dataIndex]);\n\n                    var tmp = new kendo.data.Query(events).filter({ field: resource.field, operator: ui.SchedulerView.groupEqFilter(value) }).toArray();\n\n                    if (tmp.length) {\n                        var tasks = this._tasks(tmp);\n                        var className = parent ? \"\" : \" k-first\";\n\n                        if (dataIndex === data.length - 1 && (!parent || parent.className.indexOf(\"k-last\") > -1)) {\n                            className += \" k-last\";\n                        }\n\n                        var obj = {\n                            text: kendo.getter(resource.dataTextField)(data[dataIndex]),\n                            value: value,\n                            rowSpan: 0,\n                            className: className\n                        };\n\n                        if (resources.length > 1) {\n                            obj.groups = this._createGroupConfiguration(tmp, resources.slice(1), obj);\n                            if (parent) {\n                                parent.rowSpan += obj.rowSpan;\n                            }\n                        } else {\n                            obj.items = tasks;\n                            var span = rowSpan(obj.items);\n\n                            if (isMobile) {\n                                span += obj.items.length;\n                            }\n\n                            obj.rowSpan = span;\n                            if (parent) {\n                                parent.rowSpan += span;\n                            }\n                        }\n                        configuration.push(obj);\n                    }\n                }\n\n                return configuration;\n            },\n\n            // TODO: this method for Agenda view has never worked properly\n            // it used to return wrong resources\n            // to be clearer the deficit, it now does not return any resources\n            _resourceBySlot: function() {\n                return {};\n            },\n\n            selectionByElement: function(cell) {\n                var index, event;\n                cell = $(cell);\n                if (cell.hasClass(\"k-scheduler-datecolumn\") || !this._eventsList.length) {\n                    return;\n                }\n\n                if (cell.is(\".k-task\")) {\n                    cell = cell.closest(\"td\");\n                }\n\n                if (this._isMobile()) {\n                    var parent = cell.parent();\n                    index = parent.parent().children()\n                        .filter(function() {\n                            return $(this).children(\":not(.k-scheduler-datecolumn, .k-scheduler-groupcolumn)\").length;\n                        })\n                        .index(parent);\n                } else {\n                    index = cell.parent().index();\n                }\n\n                event = this._eventsList[index];\n\n                return {\n                    index: index,\n                    start: event.start,\n                    end: event.end,\n                    isAllDay: event.isAllDay,\n                    uid: event.uid\n                };\n            },\n\n            select: function(selection) {\n                this.clearSelection();\n\n                var row = this.table\n                    .find(\".k-task\")\n                    .eq(selection.index)\n                    .closest(\"tr\")\n                    .addClass(\"k-selected\")\n                    .attr(\"aria-selected\", true)[0];\n\n                this.current(row);\n            },\n\n            move: function(selection, key) {\n                var handled = false;\n                var index = selection.index;\n\n                if (key == kendo.keys.UP) {\n                    index--;\n                    handled = true;\n                } else if (key == kendo.keys.DOWN) {\n                    index++;\n                    handled = true;\n                }\n\n                if (handled) {\n                    var event = this._eventsList[index];\n                    if (event) {\n                        selection.start = event.start;\n                        selection.end = event.end;\n                        selection.isAllDay = event.isAllDay;\n                        selection.events = [event.uid];\n                        selection.index = index;\n                    }\n                }\n\n                return handled;\n            },\n\n            moveToEvent: function() {\n                return false;\n            },\n\n            constrainSelection: function(selection) {\n                var event = this._eventsList[0];\n                if (event) {\n                    selection.start = event.start;\n                    selection.end = event.end;\n                    selection.isAllDay = event.isAllDay;\n                    selection.events = [event.uid];\n                    selection.index = 0;\n                }\n            },\n\n            isInRange: function() {\n                return true;\n            },\n\n            destroy: function() {\n                if (this.element) {\n                    this.element.off(NS);\n                }\n\n                ui.SchedulerView.fn.destroy.call(this);\n            },\n\n            options: {\n                title: \"Agenda\",\n                name: \"agenda\",\n                editable: true,\n                selectedDateFormat: \"{0:D}-{1:D}\",\n                selectedShortDateFormat: \"{0:d} - {1:d}\",\n                selectedMobileDateFormat: \"{0: MMM} {0:dd} - {1:dd}\",\n                eventTemplate: ({ title }) => encode(title),\n                eventTimeTemplate: ({ isAllDay, messages, format, start, end }) => (isAllDay ? messages.allDay : kendo.format(format, start, end)),\n                eventDateTemplate: EVENT_DATE_TEMPLATE,\n                eventGroupTemplate: EVENT_GROUP_TEMPLATE,\n                messages: {\n                    event: \"Event\",\n                    date: \"Date\",\n                    time: \"Time\",\n                    allDay: \"all day\"\n                }\n            }\n        });\n\n        function rowSpan(tasks) {\n            var result = 0;\n\n            for (var idx = 0, length = tasks.length; idx < length; idx++) {\n                result += tasks[idx].items.length;\n            }\n\n            return result;\n        }\n\n        function resourceValue(resource, item) {\n            if (resource.valuePrimitive) {\n                item = kendo.getter(resource.dataValueField)(item);\n            }\n            return item;\n        }\n\n        function flattenTaskGroups(groups) {\n            var idx = 0,\n                length = groups.length,\n                item,\n                result = [];\n\n            for (; idx < length; idx++) {\n                item = groups[idx];\n                if (item.groups) {\n                    item = flattenGroup(item.groups);\n                    result = result.concat(item);\n                } else {\n                    result = result.concat(flattenGroup(item.items));\n                }\n            }\n\n            return result;\n        }\n\n        function flattenGroup(groups) {\n            var items = [].concat(groups),\n                item = items.shift(),\n                result = [],\n                push = [].push;\n            while (item) {\n                if (item.groups) {\n                    push.apply(items, item.groups);\n                } else if (item.items) {\n                    push.apply(items, item.items);\n                } else {\n                    push.call(result, item);\n                }\n\n                item = items.shift();\n            }\n\n            return result;\n        }\n\n    })(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}