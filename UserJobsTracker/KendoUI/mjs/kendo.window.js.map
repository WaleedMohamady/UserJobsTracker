{"version":3,"sources":["raw-mjs/kendo.window.js"],"names":["__meta__","id","name","category","description","depends","features","$","undefined$1","templates","kendo","window","Widget","ui","TabKeyTrap","Popup","Draggable","isPlainObject","activeElement","_activeElement","outerWidth","_outerWidth","outerHeight","_outerHeight","extend","each","template","BODY","NS","MODAL_NS","KWINDOW","KWINDOWTITLE","KWINDOWTITLEBAR","KWINDOWCONTENT","KWINDOWRESIZEHANDLES","KOVERLAY","KWINDOWMINIMIZED","KCONTENTFRAME","LOADINGICONCLASS","KHOVERSTATE","KFOCUSEDSTATE","MAXIMIZEDSTATE","INLINE_FLEX","VISIBLE","KHIDDEN","HIDDEN","CURSOR","OPEN","ACTIVATE","DEACTIVATE","CLOSE","REFRESH","RESIZESTART","RESIZEEND","DRAGSTART","DRAGEND","RESTORE","ERROR","OVERFLOW","DATADOCOVERFLOWRULE","ZINDEX","MINIMIZE_MAXIMIZEICONSELECTORS","KPINICONCLASSSELECTOR","KUNPINICONCLASSSELECTOR","PIN_UNPINICONCLASSSELECTOR","TITLEBAR_BUTTONSSELECTOR","REFRESHICONSELECTOR","WINDOWEVENTSHANDLED","zero","isLocalUrl","SIZE","small","medium","large","defined","x","toInt","element","property","parseInt","css","constrain","value","low","high","isNaN","toString","indexOf","Math","max","min","Infinity","executableScript","this","type","toLowerCase","getPosition","elem","result","top","offsetTop","left","offsetLeft","parent","offsetParent","parentOverflowX","parentOverflowY","scrollTop","scrollLeft","Window","init","options","wrapper","visibility","display","position","content","windowContent","globalWindow","that","offset","suppressActions","actions","length","fn","call","appendTo","containment","draggable","first","url","find","filter","remove","is","document","body","contains","visible","closest","themeColor","addClass","getValidCssClass","attr","_createWindow","title","_dimensions","_footerTemplate","append","_footerMessages","minTop","minLeft","maxTop","maxLeft","_position","refresh","toFront","modal","children","_overlay","opacity","on","_buttonEnter","bind","_buttonLeave","_windowActionHandler","_keydown","_focus","_blur","_keydownContent","data","widgetInstance","not","i","_resizable","_draggable","pinned","pin","role","add","support","mousedown","touchScroller","_resizeHandler","_onDocumentResize","_marker","guid","substring","trigger","notify","_tabKeyTrap","trap","shouldTrap","_showWatermarkOverlay","e","currentTarget","removeClass","width","height","maxHeight","sizeClass","size","dimensions","contentBoxSizing","lrBorderWidth","tbBorderWidth","paddingTop","_isPinned","_updateBoundaries","maxWidth","minWidth","minHeight","hide","containmentTop","containmentLeft","parseFloat","Number","replace","innerWidth","innerHeight","clientWidth","scrollbar","clientHeight","_animationOptions","animation","open","effects","close","_resize","resize","resizable","resizing","off","destroy","target","toggleMaximization","split","index","handler","resizeHandle","WindowResizing","dragging","WindowDragging","dragHandle","clickMoveClick","_actions","icon","container","windowSpecificCommands","icons","maximize","custom","map","action","html","render","setOptions","doc","cachedOptions","JSON","parse","stringify","_containerScrollTop","_containerScrollLeft","scrollable","restore","_enableDocumentScrolling","events","zoom","direction","fade","duration","properties","scale","autoFocus","isMaximized","isMinimized","_closable","inArray","keys","keyCode","ESC","stopPropagation","_close","handled","newWidth","newHeight","w","h","distance","_closing","altKey","unpin","UP","DOWN","minimize","getOffset","ctrlKey","LEFT","RIGHT","preventDefault","overlay","zIndex","insertBefore","preventScroll","_stopDocumentScrolling","_actionForIcon","exec","className","_modals","windowInstance","windowElements","modals","_object","push","sort","a","b","style","widget","center","newTop","newLeft","documentWindow","_scrollIsAppended","encoded","titleBar","titleElement","arguments","text","htmlEncode","prepend","titlebar","scrollContainer","empty","otherModalsVisible","showOptions","contentElement","kendoStop","Fade","overlayFx","fx","fadeIn","endValue","play","show","kendoAnimate","complete","_activate","_removeOverlay","suppressAnimation","hideOverlay","hideOptions","fadeOut","startValue","last","systemTriggered","defaultPrevented","userTriggered","reverse","_deactivate","iframe","lastModal","_actionable","_shouldFocus","active","avoidFocus","currentWindow","containmentContext","openAnimation","originalZIndex","windowObject","zIndexNew","setTimeout","focus","windowTop","restoreOptions","end","removeAttr","_sizingAction","actionId","callback","eq","before","toggle","_storeOverflowRule","$body","$html","_restoreOverflowRule","$element","_isOverflowStored","overflowRule","get","overflow","removeData","win","pinIcon","wnd","zoomLevel","showIframe","initOptions","src","contentFrame","_triggerRefresh","_ajaxRequest","toggleClass","_ajaxComplete","clearTimeout","_loadingIconTimeout","_ajaxError","xhr","status","_ajaxSuccess","contentTemplate","prop","_showLoading","ajax","dataType","cache","error","success","_destroy","unbind","iframeSrcAttributes","contentHtml","isRtl","getAttribute","hasClass","editor","owner","_preventDragging","group","dragstart","drag","dragend","userEvents","addOverlay","removeOverlay","dragcancel","iconName","renderButton","fillMode","prototype","elementPadding","initialPosition","resizeDirection","initialSize","containerOffset","marginTop","marginLeft","test","wrapperPosition","relativeElMarginLeft","relativeElMarginTop","_relativeElMarginLeft","_relativeElMarginTop","windowBottom","windowRight","rtl","leftRtlOffset","scrollOffset","location","y","newWindowTop","reset","initialWindowPosition","initialPointerPosition","startPosition","client","axis","transforms","_finishDrag","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.window.js","sourcesContent":["import './kendo.draganddrop.js';\nimport './kendo.popup.js';\nimport './kendo.icons.js';\nimport './kendo.html.button.js';\n\nvar __meta__ = {\n        id: \"window\",\n        name: \"Window\",\n        category: \"web\",\n        description: \"The Window widget displays content in a modal or non-modal HTML window.\",\n        depends: [ \"draganddrop\", \"popup\", \"icons\" ],\n        features: [ {\n            id: \"window-fx\",\n            name: \"Animation\",\n            description: \"Support for animation\",\n            depends: [ \"fx\" ]\n        } ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            TabKeyTrap = kendo.ui.Popup.TabKeyTrap,\n            Draggable = kendo.ui.Draggable,\n            isPlainObject = $.isPlainObject,\n            activeElement = kendo._activeElement,\n            outerWidth = kendo._outerWidth,\n            outerHeight = kendo._outerHeight,\n            extend = $.extend,\n            each = $.each,\n            template = kendo.template,\n            BODY = \"body\",\n            templates,\n            NS = \".kendoWindow\",\n            MODAL_NS = \".kendoWindowModal\",\n            // classNames\n            KWINDOW = \".k-window\",\n            KWINDOWTITLE = \".k-window-title\",\n            KWINDOWTITLEBAR = KWINDOWTITLE + \"bar\",\n            KWINDOWCONTENT = \".k-window-content\",\n            KDIALOGCONTENT = \".k-dialog-content\",\n            KWINDOWRESIZEHANDLES = \".k-resize-handle\",\n            KOVERLAY = \".k-overlay\",\n            KWINDOWMINIMIZED = \"k-window-minimized\",\n            KCONTENTFRAME = \"k-content-frame\",\n            LOADINGICONCLASS = \"k-i-loading\",\n            KHOVERSTATE = \"k-hover\",\n            KFOCUSEDSTATE = \"k-focus\",\n            MAXIMIZEDSTATE = \"k-window-maximized\",\n            INLINE_FLEX = \"k-display-inline-flex\",\n            // constants\n            VISIBLE = \":visible\",\n            KHIDDEN = \"k-hidden\",\n            HIDDEN = \"hidden\",\n            CURSOR = \"cursor\",\n            // events\n            OPEN = \"open\",\n            ACTIVATE = \"activate\",\n            DEACTIVATE = \"deactivate\",\n            CLOSE = \"close\",\n            REFRESH = \"refresh\",\n            MINIMIZE = \"minimize\",\n            MAXIMIZE = \"maximize\",\n            RESIZESTART = \"resizeStart\",\n            RESIZE = \"resize\",\n            RESIZEEND = \"resizeEnd\",\n            DRAGSTART = \"dragstart\",\n            DRAGEND = \"dragend\",\n            RESTORE = \"restore\",\n            KENDOKEYDOWN = \"kendoKeydown\",\n            ERROR = \"error\",\n            OVERFLOW = \"overflow\",\n            DATADOCOVERFLOWRULE = \"original-overflow-rule\",\n            ZINDEX = \"zIndex\",\n            MINIMIZE_MAXIMIZEICONSELECTORS = \".k-window-titlebar-actions .k-i-window-minimize,.k-window-titlebar-actions .k-i-window,.k-window-titlebar-actions .k-svg-i-window-minimize,.k-window-titlebar-actions .k-svg-i-window\",\n            KPINICONCLASSSELECTOR = \".k-i-pin,.k-svg-i-pin\",\n            KUNPINICONCLASSSELECTOR = \".k-i-unpin,.k-svg-i-unpin\",\n            PIN_UNPINICONCLASSSELECTOR = KPINICONCLASSSELECTOR + \",\" + KUNPINICONCLASSSELECTOR,\n            TITLEBAR_BUTTONSSELECTOR = \".k-window-titlebar .k-window-titlebar-action\",\n            REFRESHICONSELECTOR = \".k-window-titlebar .k-i-arrow-rotate-cw,.k-window-titlebar .k-svg-i-arrow-rotate-cw\",\n            WINDOWEVENTSHANDLED = \"WindowEventsHandled\",\n            zero = /^0[a-z]*$/i,\n            isLocalUrl = kendo.isLocalUrl,\n            SIZE = {\n                small: \"k-window-sm\",\n                medium: \"k-window-md\",\n                large: \"k-window-lg\"\n            };\n\n        function defined(x) {\n            return (typeof x != \"undefined\");\n        }\n\n        function toInt(element, property) {\n            return parseInt(element.css(property), 10) || 0;\n        }\n\n        function constrain(value, low, high) {\n            var normalizedValue;\n\n            if (value && isNaN(value) && value.toString().indexOf(\"px\") < 0) {\n                normalizedValue = value;\n            } else {\n                normalizedValue = Math.max(\n                    Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)),\n                    low === -Infinity ? low : parseInt(low, 10)\n                );\n            }\n\n            return normalizedValue;\n        }\n\n        function executableScript() {\n            return !this.type || this.type.toLowerCase().indexOf(\"script\") >= 0;\n        }\n\n\n        function getPosition(elem) {\n            var result = { top: elem.offsetTop, left: elem.offsetLeft },\n                parent = elem.offsetParent;\n\n            while (parent) {\n                result.top += parent.offsetTop;\n                result.left += parent.offsetLeft;\n\n                var parentOverflowX = $(parent).css(\"overflowX\");\n                var parentOverflowY = $(parent).css(\"overflowY\");\n\n                if (parentOverflowY === \"auto\" || parentOverflowY === \"scroll\") {\n                    result.top -= parent.scrollTop;\n                }\n\n                if (parentOverflowX === \"auto\" || parentOverflowX === \"scroll\") {\n                    result.left -= parent.scrollLeft;\n                }\n\n                parent = parent.offsetParent;\n            }\n\n            return result;\n        }\n\n        var Window = Widget.extend({\n            init: function(element, options) {\n                var that = this,\n                    wrapper,\n                    offset = {},\n                    visibility, display, position,\n                    isVisible = false,\n                    content,\n                    windowContent,\n                    windowFrame,\n                    globalWindow,\n                    suppressActions = options && options.actions && !options.actions.length,\n                    id;\n\n                Widget.fn.init.call(that, element, options);\n                options = that.options;\n                position = options.position;\n                element = that.element;\n                content = options.content;\n                globalWindow = $(window);\n\n                if (suppressActions) {\n                    options.actions = [];\n                }\n\n                that.appendTo = $(options.appendTo);\n\n                that.containment = options.draggable.containment ? $(options.draggable.containment).first() : null;\n\n                if (content && !isPlainObject(content)) {\n                    content = options.content = { url: content };\n                }\n\n                // remove script blocks to prevent double-execution\n                element.find(\"script\").filter(executableScript).remove();\n\n                if (!element.parent().is(that.appendTo) && !that.containment && (position.top === undefined$1 || position.left === undefined$1)) {\n                    if (element.is(VISIBLE)) {\n                        offset = element.offset();\n                        isVisible = true;\n                    } else {\n                        visibility = element.css(\"visibility\");\n                        display = element.css(\"display\");\n\n                        element.css({ visibility: HIDDEN, display: \"\" });\n\n                        if (document.body.contains(element[0])) {\n                            offset = element.offset();\n                        } else {\n                            offset = { top: 0, left: 0 };\n                        }\n\n                        element.css({ visibility: visibility, display: display });\n                    }\n\n                    if (position.top === undefined$1) {\n                        position.top = offset.top;\n                    }\n                    if (position.left === undefined$1) {\n                        position.left = offset.left;\n                    }\n                }\n\n                if (!defined(options.visible) || options.visible === null) {\n                    options.visible = element.is(VISIBLE);\n                }\n\n                wrapper = that.wrapper = element.closest(KWINDOW);\n\n                if (options.themeColor && options.themeColor !== \"none\") {\n                    wrapper.addClass(kendo.getValidCssClass(\"k-window-\", \"themeColor\", options.themeColor));\n                }\n\n                if (!element.is(\".k-window-content\") || !wrapper[0]) {\n                    element.addClass(\"k-window-content\");\n                    element.attr(\"tabindex\", 0);\n                    that._createWindow(element, options);\n                    wrapper = that.wrapper = element.closest(KWINDOW);\n\n                    that.title(that.options.title);\n                    that._dimensions();\n\n                    if (options._footerTemplate) {\n                        that.wrapper.append(kendo.template(options._footerTemplate)(options._footerMessages));\n                    }\n                }\n\n                that.minTop = that.minLeft = -Infinity;\n                that.maxTop = that.maxLeft = Infinity;\n                that._position();\n\n                if (content) {\n                    that.refresh(content);\n                }\n\n                if (options.visible) {\n                    that.toFront(null, !options.modal);\n                }\n\n                windowContent = wrapper.children(KWINDOWCONTENT);\n\n                if (options.visible && options.modal) {\n                    that._overlay(wrapper.is(VISIBLE)).css({ opacity: 0.5 });\n                }\n\n                wrapper\n                    .on(\"mouseenter\" + NS, TITLEBAR_BUTTONSSELECTOR, that._buttonEnter.bind(that))\n                    .on(\"mouseleave\" + NS, TITLEBAR_BUTTONSSELECTOR, that._buttonLeave.bind(that))\n                    .on(\"click\" + NS, \"> \" + TITLEBAR_BUTTONSSELECTOR, that._windowActionHandler.bind(that))\n                    .on(\"keydown\" + NS, that, that._keydown.bind(that))\n                    .on(\"focus\" + NS, that._focus.bind(that))\n                    .on(\"blur\" + NS, that._blur.bind(that));\n\n                windowContent\n                    .on(\"keydown\" + NS, that, that._keydownContent.bind(that));\n\n                windowFrame = windowContent.find(\".\" + KCONTENTFRAME)[0];\n\n                if (windowFrame && !globalWindow.data(WINDOWEVENTSHANDLED)) {\n\n                    globalWindow.on(\"blur\" + NS, function() {\n                        var element = $(document.activeElement).parent(KWINDOWCONTENT);\n                        if (element.length) {\n                            var windowInstance = kendo.widgetInstance(element);\n                            windowInstance._focus();\n                        }\n                    });\n\n                    globalWindow.on(\"focus\" + NS, function() {\n                        $(KWINDOWCONTENT).not(KDIALOGCONTENT).each(function(i, element) {\n                            kendo.widgetInstance($(element))._blur();\n                        });\n                    });\n\n                    globalWindow.data(WINDOWEVENTSHANDLED, true);\n                }\n\n                this._resizable();\n\n                this._draggable();\n\n                if (options.pinned && this.wrapper.is(\":visible\")) {\n                    that.pin();\n                }\n\n                id = element.attr(\"id\");\n                if (id) {\n                    id = id + \"_wnd_title\";\n                    wrapper.attr({\n                            \"role\": \"dialog\",\n                            \"aria-labelledby\": id\n                        }).children(KWINDOWTITLEBAR)\n                        .children(KWINDOWTITLE)\n                        .attr(\"id\", id);\n                }\n\n                wrapper.add(wrapper.children(\".k-resize-handle,\" + KWINDOWTITLEBAR))\n                    .on(kendo.support.mousedown + NS, that.toFront.bind(that));\n\n                that.touchScroller = kendo.touchScroller(element);\n\n                that._resizeHandler = that._onDocumentResize.bind(that);\n\n                that._marker = kendo.guid().substring(0, 8);\n\n                $(window).on(\"resize\" + NS + that._marker, that._resizeHandler);\n\n                if (options.visible) {\n                    that.trigger(OPEN);\n                    that.trigger(ACTIVATE);\n                }\n\n                kendo.notify(that);\n\n                if (this.options.modal) {\n                    this._tabKeyTrap = new TabKeyTrap(wrapper);\n                    this._tabKeyTrap.trap();\n                    this._tabKeyTrap.shouldTrap = function() {\n                        return wrapper.data(\"isFront\");\n                    };\n                }\n\n                if (that._showWatermarkOverlay) {\n                    that._showWatermarkOverlay(that.wrapper[0]);\n                }\n            },\n\n            _buttonEnter: function(e) {\n                $(e.currentTarget).addClass(KHOVERSTATE);\n            },\n\n            _buttonLeave: function(e) {\n                $(e.currentTarget).removeClass(KHOVERSTATE);\n            },\n\n            _focus: function() {\n                this.wrapper.addClass(KFOCUSEDSTATE);\n            },\n\n            _blur: function() {\n                this.wrapper.removeClass(KFOCUSEDSTATE);\n            },\n\n            _dimensions: function() {\n                var wrapper = this.wrapper;\n                var options = this.options;\n                var width = options.width;\n                var height = options.height;\n                var maxHeight = options.maxHeight;\n                var sizeClass = options.size;\n                var dimensions = [\"minWidth\",\"minHeight\",\"maxWidth\",\"maxHeight\"];\n                var contentBoxSizing = wrapper.css(\"box-sizing\") == \"content-box\";\n\n                var lrBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-left-width\") + toInt(wrapper, \"border-right-width\") : 0;\n                var tbBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-top-width\") + toInt(wrapper, \"border-bottom-width\") : 0;\n                var paddingTop = contentBoxSizing ? toInt(wrapper, \"padding-top\") : 0;\n\n                if (this.containment && !this._isPinned) {\n                    this._updateBoundaries();\n                    options.maxHeight = Math.min(this.containment.height - (tbBorderWidth + paddingTop), maxHeight);\n                    options.maxWidth = Math.min(this.containment.width - lrBorderWidth, options.maxWidth);\n                }\n\n                for (var i = 0; i < dimensions.length; i++) {\n                    var value = options[dimensions[i]] || \"\";\n                    if (value != Infinity) {\n                        wrapper.css(dimensions[i], value);\n                    }\n                }\n\n                if (maxHeight != Infinity) {\n                    this.element.css(\"maxHeight\", maxHeight);\n                }\n\n                if (width) {\n                    wrapper.outerWidth(constrain(width, options.minWidth, options.maxWidth));\n                }\n                else {\n                    wrapper.outerWidth(\"\");\n                }\n\n                if (height) {\n                    wrapper.outerHeight(constrain(height, options.minHeight, options.maxHeight));\n                }\n                else {\n                    wrapper.outerHeight(\"\");\n                }\n\n                if (!options.visible) {\n                    wrapper.removeClass(INLINE_FLEX).hide();\n                }\n\n                if (sizeClass && SIZE[sizeClass]) {\n                    wrapper.addClass(SIZE[sizeClass]);\n                }\n            },\n\n            _position: function() {\n                var wrapper = this.wrapper,\n                    position = this.options.position,\n                    containmentTop, containmentLeft;\n\n                this._updateBoundaries();\n\n                if (this.containment) {\n                    position.top = position.top || 0;\n                    position.left = position.left || 0;\n\n                    containmentTop = position.top.toString().indexOf(\"%\") > 0 ?\n                        parseInt(this.containment.height * (parseFloat(position.top) / 100), 10) :\n                        position.top;\n\n                    containmentLeft = position.left.toString().indexOf(\"%\") > 0 ?\n                        parseInt(this.containment.width * (parseFloat(position.left) / 100), 10) :\n                        position.left;\n\n                    position.top = constrain(containmentTop, this.minTop, this.maxTop);\n                    position.left = constrain(containmentLeft, this.minLeft, this.maxLeft);\n                }\n\n                if (position.top && position.top.toString().indexOf(\"px\") > 0) {\n                    position.top = Number(position.top.replace(\"px\", \"\"));\n                }\n\n                if (position.left && position.left.toString().indexOf(\"px\") > 0) {\n                    position.left = Number(position.left.replace(\"px\", \"\"));\n                }\n\n                if (position.top === 0) {\n                    position.top = position.top.toString();\n                }\n\n                if (position.left === 0) {\n                    position.left = position.left.toString();\n                }\n\n                wrapper.css({\n                    top: position.top || \"\",\n                    left: position.left || \"\"\n                });\n            },\n\n            _updateBoundaries: function() {\n                var containment = this.containment;\n\n                if (!containment) {\n                    return null;\n                }\n\n                containment.width = containment.innerWidth();\n                containment.height = containment.innerHeight();\n\n                if (parseInt(containment.width, 10) > containment[0].clientWidth) {\n                    containment.width -= kendo.support.scrollbar();\n                }\n\n                if (parseInt(containment.height, 10) > containment[0].clientHeight) {\n                    containment.height -= kendo.support.scrollbar();\n                }\n\n                containment.position = getPosition(containment[0]);\n\n                if (this._isPinned) {\n                    this.minTop = this.minLeft = -Infinity;\n                    this.maxTop = this.maxLeft = Infinity;\n                } else {\n                    this.minTop = containment.scrollTop();\n                    this.minLeft = containment.scrollLeft();\n                    this.maxLeft = this.minLeft + containment.width - outerWidth(this.wrapper, true);\n                    this.maxTop = this.minTop + containment.height - outerHeight(this.wrapper, true);\n                }\n            },\n\n            _animationOptions: function(id) {\n                var animation = this.options.animation;\n                var basicAnimation = {\n                    open: { effects: {} },\n                    close: { hide: true, effects: {} }\n                };\n\n                return animation && animation[id] || basicAnimation[id];\n            },\n\n            _resize: function() {\n                kendo.resize(this.element.children());\n            },\n\n            _resizable: function() {\n                var resizable = this.options.resizable;\n                var wrapper = this.wrapper;\n\n                if (this.resizing) {\n                    wrapper\n                        .off(\"dblclick\" + NS)\n                        .children(KWINDOWRESIZEHANDLES).remove();\n\n                    this.resizing.destroy();\n                    this.resizing = null;\n                }\n\n                if (resizable) {\n                    wrapper.on(\"dblclick\" + NS, KWINDOWTITLEBAR, (function(e) {\n                        if (!$(e.target).closest(\".k-window-titlebar-action\").length) {\n                            this.toggleMaximization();\n                        }\n                    }).bind(this));\n\n                    each(\"n e s w se sw ne nw\".split(\" \"), function(index, handler) {\n                        wrapper.append(templates.resizeHandle(handler));\n                    });\n\n                    this.resizing = new WindowResizing(this);\n                }\n\n                wrapper = null;\n            },\n\n            _draggable: function() {\n                var draggable = this.options.draggable;\n\n                if (this.dragging) {\n                    this.dragging.destroy();\n                    this.dragging = null;\n                }\n                if (draggable) {\n                    this.dragging = new WindowDragging(this, draggable.dragHandle || KWINDOWTITLEBAR, draggable.clickMoveClick);\n                }\n            },\n\n            _actions: function() {\n                var options = this.options;\n                var actions = options.actions;\n                var pinned = options.pinned;\n                var titlebar = this.wrapper.children(KWINDOWTITLEBAR);\n                var container = titlebar.find(\".k-window-titlebar-actions\");\n                var windowSpecificCommands = [ \"minimize\", \"maximize\" ];\n                var icons = {\n                    \"maximize\": \"window\",\n                    \"refresh\": \"arrow-rotate-cw\",\n                    \"custom\": \"gear\"\n                };\n                var icon;\n\n                actions = $.map(actions, function(action) {\n                    action = pinned && action.toLowerCase() === \"pin\" ? \"unpin\" : action;\n                    icon = icons[action.toLowerCase()] || \"\";\n                    return { name: (windowSpecificCommands.indexOf(action.toLowerCase()) > - 1) ? \"window-\" + action : action, icon: action.toLowerCase() == \"close\" ? \"x\" : icon };\n                });\n\n                container.html(kendo.render(templates.action, actions));\n            },\n\n            setOptions: function(options) {\n                var that = this;\n                var sizeClass = that.options.size;\n                var doc = this.containment && !that._isPinned ? this.containment : $(document);\n                // make a deep extend over options.position telerik/kendo-ui-core#844\n                var cachedOptions = JSON.parse(JSON.stringify(options));\n\n                that.wrapper.removeClass(kendo.getValidCssClass(\"k-window-\", \"themeColor\", that.options.themeColor));\n\n                extend(options.position, that.options.position);\n                extend(options.position, cachedOptions.position);\n\n                that._containerScrollTop = doc.scrollTop();\n                that._containerScrollLeft = doc.scrollLeft();\n\n                Widget.fn.setOptions.call(that, options);\n                var scrollable = that.options.scrollable !== false;\n\n                that.restore();\n\n                if (typeof options.title !== \"undefined\") {\n                    that.title(options.title);\n                }\n\n                that.wrapper.removeClass(SIZE[sizeClass]);\n                that._dimensions();\n\n                that._position();\n                that._resizable();\n                that._draggable();\n                that._actions();\n\n                if (that.options.themeColor && that.options.themeColor !== \"none\") {\n                    that.wrapper.addClass(kendo.getValidCssClass(\"k-window-\", \"themeColor\", that.options.themeColor));\n                }\n\n                if (typeof options.modal !== \"undefined\") {\n                    var visible = that.options.visible !== false;\n                    that._enableDocumentScrolling();\n                    that._overlay(options.modal && visible);\n                }\n\n                that.element.css(OVERFLOW, scrollable ? \"\" : \"hidden\");\n            },\n\n            events: [\n                OPEN,\n                ACTIVATE,\n                DEACTIVATE,\n                CLOSE,\n                MINIMIZE,\n                MAXIMIZE,\n                REFRESH,\n                RESTORE,\n                RESIZESTART,\n                RESIZE,\n                RESIZEEND,\n                DRAGSTART,\n                DRAGEND,\n                KENDOKEYDOWN,\n                ERROR\n            ],\n\n            options: {\n                name: \"Window\",\n                animation: {\n                    open: {\n                        effects: { zoom: { direction: \"in\" }, fade: { direction: \"in\" } },\n                        duration: 350\n                    },\n                    close: {\n                        effects: { zoom: { direction: \"out\", properties: { scale: 0.7 } }, fade: { direction: \"out\" } },\n                        duration: 350,\n                        hide: true\n                    }\n                },\n                title: \"\",\n                themeColor: \"\",\n                actions: [\"Close\"],\n                autoFocus: true,\n                modal: false,\n                size: \"auto\",\n                resizable: true,\n                draggable: true,\n                minWidth: 90,\n                minHeight: 50,\n                maxWidth: Infinity,\n                maxHeight: Infinity,\n                pinned: false,\n                scrollable: true,\n                position: {},\n                content: null,\n                visible: null,\n                height: null,\n                width: null,\n                appendTo: \"body\",\n                isMaximized: false,\n                isMinimized: false\n            },\n\n            _closable: function() {\n                return $.inArray(\"close\", $.map(this.options.actions, function(x) { return x.toLowerCase(); })) > -1;\n            },\n\n            _keydownContent: function(e) {\n                var that = this,\n                    keys = kendo.keys,\n                    keyCode = e.keyCode;\n\n                if (keyCode == keys.ESC && that._closable()) {\n                    e.stopPropagation();\n                    that._close(false);\n                }\n            },\n\n            _keydown: function(e) {\n                var that = this,\n                    options = that.options,\n                    keys = kendo.keys,\n                    keyCode = e.keyCode,\n                    wrapper = that.wrapper,\n                    offset, handled,\n                    distance = 10,\n                    isMaximized = options.isMaximized,\n                    isMinimized = options.isMinimized,\n                    newWidth, newHeight, w, h;\n\n                if (keyCode == keys.ESC && that._closable()) {\n                    e.stopPropagation();\n                    that._close(false);\n                }\n\n                if (e.target != e.currentTarget || that._closing) {\n                    return;\n                }\n\n                 // Refresh\n                if (e.altKey && keyCode == 82) {// Alt + R\n                    that.refresh();\n                }\n\n                // Pin/Unpin\n                if (e.altKey && keyCode == 80) {// Alt + P\n                    if (that.options.pinned) {\n                        that.unpin();\n                    } else {\n                        that.pin();\n                    }\n                }\n\n                // Maximize/Restore/Miminimize\n                if (e.altKey && keyCode == keys.UP) {\n                    if (isMinimized) {\n                        that.restore();\n                        that.wrapper.trigger(\"focus\");\n                    } else if (!isMaximized) {\n                        that.maximize();\n                        that.wrapper.trigger(\"focus\");\n                    }\n                } else if (e.altKey && keyCode == keys.DOWN) {\n                    if (!isMinimized && !isMaximized) {\n                        that.minimize();\n                        that.wrapper.trigger(\"focus\");\n                    } else if (isMaximized) {\n                        that.restore();\n                        that.wrapper.trigger(\"focus\");\n                    }\n                }\n\n                offset = kendo.getOffset(wrapper);\n\n                if (that.containment && !that._isPinned) {\n                    offset = that.options.position;\n                }\n\n                if (options.draggable && !e.ctrlKey && !e.altKey && !isMaximized) {\n                    that._updateBoundaries();\n                    if (keyCode == keys.UP) {\n                        offset.top = constrain(offset.top - distance, that.minTop, that.maxTop);\n                        handled = wrapper.css(\"top\", offset.top);\n                    } else if (keyCode == keys.DOWN) {\n                        offset.top = constrain(offset.top + distance, that.minTop, that.maxTop);\n                        handled = wrapper.css(\"top\", offset.top);\n                    } else if (keyCode == keys.LEFT) {\n                        offset.left = constrain(offset.left - distance, that.minLeft, that.maxLeft);\n                        handled = wrapper.css(\"left\", offset.left);\n                    } else if (keyCode == keys.RIGHT) {\n                        offset.left = constrain(offset.left + distance, that.minLeft, that.maxLeft);\n                        handled = wrapper.css(\"left\", offset.left);\n                    }\n                }\n\n                if (options.resizable && e.ctrlKey && !isMaximized && !isMinimized) {\n                    if (keyCode == keys.UP) {\n                        handled = true;\n                        newHeight = wrapper.outerHeight() - distance;\n                    } else if (keyCode == keys.DOWN) {\n                        handled = true;\n                        if (that.containment && !that._isPinned) {\n                            newHeight = Math.min(wrapper.outerHeight() + distance,\n                                that.containment.height - offset.top - toInt(wrapper, \"padding-top\") -\n                                toInt(wrapper, \"borderBottomWidth\") - toInt(wrapper, \"borderTopWidth\"));\n                        } else {\n                            newHeight = wrapper.outerHeight() + distance;\n                        }\n                    } if (keyCode == keys.LEFT) {\n                        handled = true;\n                        newWidth = wrapper.outerWidth() - distance;\n                    } else if (keyCode == keys.RIGHT) {\n                        handled = true;\n                        if (that.containment && !that._isPinned) {\n                            newWidth = Math.min(wrapper.outerWidth() + distance,\n                                                that.containment.width - offset.left -\n                                                toInt(wrapper, \"borderLeftWidth\") - toInt(wrapper, \"borderRightWidth\"));\n                        } else {\n                            newWidth = wrapper.outerWidth() + distance;\n                        }\n                    }\n\n                    if (handled) {\n                        w = constrain(newWidth, options.minWidth, options.maxWidth);\n                        h = constrain(newHeight, options.minHeight, options.maxHeight);\n\n                        if (!isNaN(w)) {\n                            wrapper.outerWidth(w);\n                            that.options.width = w + \"px\";\n                        }\n                        if (!isNaN(h)) {\n                            wrapper.outerHeight(h);\n                            that.options.height = h + \"px\";\n                        }\n\n                        that.resize();\n                    }\n                }\n\n                if (handled) {\n                    e.preventDefault();\n                }\n            },\n\n            _overlay: function(visible) {\n                var overlay = this.containment ? this.containment.children(KOVERLAY) : this.appendTo.children(KOVERLAY),\n                    wrapper = this.wrapper,\n                    display = visible ? \"inline-flex\" : \"none\",\n                    zIndex = parseInt(wrapper.css(ZINDEX), 10) - 1;\n\n                if (!overlay.length) {\n                    overlay = $(\"<div class='k-overlay' />\");\n                }\n\n                overlay\n                    .insertBefore(wrapper[0])\n                    .css({\n                        zIndex: zIndex,\n                        display: display\n                    });\n\n                if (this.options.modal.preventScroll && !this.containment) {\n                    this._stopDocumentScrolling();\n                }\n\n                return overlay;\n            },\n\n            _actionForIcon: function(icon) {\n                var iconClass = /\\bk(-svg)?-i(-\\w+)+\\b/.exec(icon[0].className)[0];\n                return {\n                    \"x\": \"_close\",\n                    \"window\": \"maximize\",\n                    \"window-minimize\": \"minimize\",\n                    \"window-restore\": \"restore\",\n                    \"arrow-rotate-cw\": \"refresh\",\n                    \"pin\": \"pin\",\n                    \"unpin\": \"unpin\"\n                }[iconClass.replace(/(k-i-|k-svg-i-)/, \"\")];\n            },\n\n            _windowActionHandler: function(e) {\n                if (this._closing) {\n                    return;\n                }\n                var icon = $(e.target).closest(\".k-window-titlebar-action\").find(\".k-icon,.k-svg-icon\");\n                var action = this._actionForIcon(icon);\n\n                if (action) {\n                    e.preventDefault();\n                    this[action]();\n                    return false;\n                }\n            },\n\n            _modals: function() {\n                var that = this,\n                    windowElements = $(KWINDOW + VISIBLE),\n                    windowInstance,\n                    modals = [];\n\n                for (var i = 0; i < windowElements.length; i += 1) {\n                    windowInstance = that._object($(windowElements[i]));\n\n                    if (windowInstance &&\n                        windowInstance.options &&\n                        windowInstance.options.modal &&\n                        windowInstance.options.visible &&\n                        windowInstance.options.appendTo === that.options.appendTo &&\n                        (!windowInstance.containment || (that.containment && windowInstance.containment[0] === that.containment[0]))) {\n                            modals.push(windowInstance.wrapper[0]);\n                    }\n                }\n\n                modals.sort(function(a, b) {\n                    return a.style.zIndex - b.style.zIndex;\n                });\n\n                that = null;\n\n                return $(modals);\n            },\n\n            _object: function(element) {\n                var content = element.children(KWINDOWCONTENT);\n                var widget = kendo.widgetInstance(content);\n\n                if (widget) {\n                    return widget;\n                }\n\n                return undefined$1;\n            },\n\n            center: function() {\n                var that = this,\n                    position = that.options.position,\n                    wrapper = that.wrapper,\n                    documentWindow = $(window),\n                    scrollTop = 0,\n                    scrollLeft = 0,\n                    newTop, newLeft;\n\n                if (that.options.isMaximized) {\n                    return that;\n                }\n\n                if (that.options.pinned && !that._isPinned) {\n                    that.pin();\n                }\n\n                if (!that.options.pinned) {\n                    scrollTop = documentWindow.scrollTop();\n                    scrollLeft = documentWindow.scrollLeft();\n                }\n\n                if (this.containment && !that.options.pinned) {\n                    newTop = this.minTop + (this.maxTop - this.minTop) / 2;\n                    newLeft = this.minLeft + (this.maxLeft - this.minLeft) / 2;\n                } else {\n                    that._scrollIsAppended = true;\n                    newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.outerWidth()) / 2);\n                    newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.outerHeight() - toInt(wrapper, \"paddingTop\")) / 2);\n                }\n\n                wrapper.css({\n                    left: newLeft,\n                    top: newTop\n                });\n\n                position.top = newTop;\n                position.left = newLeft;\n\n                return that;\n            },\n\n            title: function(title) {\n                var that = this,\n                    value,\n                    encoded = true,\n                    wrapper = that.wrapper,\n                    titleBar = wrapper.children(KWINDOWTITLEBAR),\n                    titleElement = titleBar.children(KWINDOWTITLE);\n\n                if (!arguments.length) {\n                    return titleElement.html();\n                }\n\n                if ($.isPlainObject(title)) {\n                    value = typeof title.text !== \"undefined\" ? title.text : \"\";\n                    encoded = title.encoded !== false;\n                } else {\n                    value = title;\n                }\n\n                if (value === false) {\n                    wrapper.addClass(\"k-window-titleless\");\n                    wrapper.css(\"padding-top\", 0);\n                    titleBar.remove();\n                } else {\n                    if (!titleBar.length) {\n                        wrapper.prepend(templates.titlebar({\n                            title: encoded ? kendo.htmlEncode(value) : value\n                        }));\n                        that._actions();\n                        titleBar = wrapper.children(KWINDOWTITLEBAR);\n                    } else {\n                        titleElement.html(encoded ? kendo.htmlEncode(value) : value);\n                    }\n                }\n\n                that.options.title = value;\n\n                return that;\n            },\n\n            content: function(html, data) {\n                var content = this.wrapper.children(KWINDOWCONTENT),\n                    scrollContainer = content.children(\".km-scroll-container\");\n\n                content = scrollContainer[0] ? scrollContainer : content;\n\n                if (!defined(html)) {\n                    return content.html();\n                }\n\n                kendo.destroy(this.element.children());\n\n                content.empty().html(html);\n\n                return this;\n            },\n\n            open: function() {\n                var that = this,\n                    wrapper = that.wrapper,\n                    options = that.options,\n                    showOptions = this._animationOptions(\"open\"),\n                    contentElement = wrapper.children(KWINDOWCONTENT),\n                    overlay, otherModalsVisible,\n                    containmentContext = this.containment && !that._isPinned,\n                    doc = containmentContext ? this.containment : $(document);\n\n                if (!that.trigger(OPEN)) {\n                    if (that._closing) {\n                        wrapper.kendoStop(true, true);\n                    }\n\n                    that._closing = false;\n\n                    that.toFront();\n\n                    if (options.autoFocus) {\n                        that.wrapper.trigger(\"focus\");\n                    }\n\n                    options.visible = true;\n\n                    if (options.modal) {\n                        otherModalsVisible = !!that._modals().length;\n                        overlay = that._overlay(otherModalsVisible);\n\n                        overlay.kendoStop(true, true);\n\n                        if (showOptions.duration && kendo.effects.Fade && !otherModalsVisible) {\n                            var overlayFx = kendo.fx(overlay).fadeIn();\n                            overlayFx.duration(showOptions.duration || 0);\n                            overlayFx.endValue(0.5);\n                            overlayFx.play();\n                        } else {\n                            overlay.css(\"opacity\", 0.5);\n                        }\n\n                        overlay.show();\n\n                        $(window).on(\"focus\" + MODAL_NS, function() {\n                            if (wrapper.data(\"isFront\") && !$(document.activeElement).closest(wrapper).length) {\n                               that.wrapper.trigger(\"focus\");\n                            }\n                        });\n                    }\n\n                    if (!wrapper.is(VISIBLE)) {\n                        contentElement.css(OVERFLOW, HIDDEN);\n\n                        that.wrapper.find(TITLEBAR_BUTTONSSELECTOR).addClass(\"k-button-flat\");\n\n                        wrapper.css({ display: \"inline-flex\" });\n                        wrapper.kendoStop().kendoAnimate({\n                            effects: showOptions.effects,\n                            duration: showOptions.duration,\n                            complete: this._activate.bind(this)\n                        });\n                    }\n                }\n\n                if (options.isMaximized) {\n                    that._containerScrollTop = doc.scrollTop();\n                    that._containerScrollLeft = doc.scrollLeft();\n                    that._stopDocumentScrolling();\n                }\n\n                if (this.options.pinned && !this._isPinned) {\n                    this.pin();\n                }\n\n                return that;\n            },\n\n            _activate: function() {\n                var scrollable = this.options.scrollable !== false;\n\n                if (this.options.autoFocus) {\n                    this.wrapper.trigger(\"focus\");\n                }\n\n                this.element.css(OVERFLOW, scrollable ? \"\" : \"hidden\");\n                kendo.resize(this.element.children());\n\n                this.trigger(ACTIVATE);\n            },\n\n            _removeOverlay: function(suppressAnimation) {\n                var modals = this._modals();\n                var options = this.options;\n                var hideOverlay = options.modal && !modals.length;\n                var hideOptions = this._animationOptions(\"close\");\n\n                if (hideOverlay) {\n                    if (!suppressAnimation && hideOptions.duration && kendo.effects.Fade) {\n                        var overlayFx = kendo.fx(options.modal ? this._overlay(true) : $(undefined$1)).fadeOut();\n                        overlayFx.duration(hideOptions.duration || 0);\n                        overlayFx.startValue(0.5);\n                        overlayFx.play();\n                    } else {\n                        this._overlay(false).remove();\n                    }\n                    if (options.modal.preventScroll) {\n                        this._enableDocumentScrolling();\n                    }\n                } else if (modals.length) {\n                    this._object(modals.last())._overlay(true);\n\n                    if (options.modal.preventScroll) {\n                        this._stopDocumentScrolling();\n                    }\n                }\n            },\n\n            _close: function(systemTriggered) {\n                var that = this,\n                    wrapper = that.wrapper,\n                    options = that.options,\n                    showOptions = this._animationOptions(\"open\"),\n                    hideOptions = this._animationOptions(\"close\"),\n                    containmentContext = this.containment && !that._isPinned,\n                    doc = containmentContext ? this.containment : $(document),\n                    defaultPrevented;\n\n                if (that._closing) {\n                    return;\n                }\n\n                defaultPrevented = that.trigger(CLOSE, { userTriggered: !systemTriggered });\n                that._closing = !defaultPrevented;\n\n                if (wrapper.is(VISIBLE) && !defaultPrevented) {\n                    options.visible = false;\n\n                    $(KWINDOW).each(function(i, element) {\n                        var contentElement = $(element).children(KWINDOWCONTENT);\n\n                        // Remove overlay set by toFront\n                        if (element != wrapper && contentElement.find(\"> .\" + KCONTENTFRAME).length > 0) {\n                            contentElement.children(KOVERLAY).remove();\n                        }\n                    });\n\n                    this._removeOverlay();\n\n                    // Prevent close animation from stopping\n                    that.wrapper.find(TITLEBAR_BUTTONSSELECTOR).removeClass(\"k-button-flat\");\n\n                    wrapper.kendoStop().kendoAnimate({\n                        effects: hideOptions.effects || showOptions.effects,\n                        reverse: hideOptions.reverse === true,\n                        duration: hideOptions.duration,\n                        complete: this._deactivate.bind(this)\n                    });\n                    $(window).off(MODAL_NS);\n                }\n\n                if (that.options.isMaximized) {\n                    that._enableDocumentScrolling();\n                    if (that._containerScrollTop && that._containerScrollTop > 0) {\n                        doc.scrollTop(that._containerScrollTop);\n                    }\n                    if (that._containerScrollLeft && that._containerScrollLeft > 0) {\n                        doc.scrollLeft(that._containerScrollLeft);\n                    }\n                }\n\n                if (that.options.iframe) {\n                    that.wrapper.trigger(\"blur\");\n                }\n            },\n\n            _deactivate: function() {\n                var that = this;\n\n                that.wrapper\n                    .removeClass(INLINE_FLEX)\n                    .hide()\n                    .css(\"opacity\", \"\");\n\n                that.trigger(DEACTIVATE);\n\n                if (that.options.modal) {\n                    var lastModal = that._object(that._modals().last());\n                    if (lastModal) {\n                        lastModal.toFront();\n                    }\n                }\n            },\n\n            close: function() {\n                this._close(true);\n                return this;\n            },\n\n            _actionable: function(element) {\n                return $(element).is(`${TITLEBAR_BUTTONSSELECTOR}, :input, a, .k-input, .k-icon, .k-svg-icon, .k-svg-icon>svg, .k-svg-icon>svg>path, .k-icon-button, [role='gridcell'], .k-input-inner, .k-input-value-text`);\n            },\n\n            _shouldFocus: function(target) {\n                var active = activeElement(),\n                    element = this.wrapper;\n\n                return this.options.autoFocus &&\n                    !$(active).is(element) &&\n                    !this._actionable(target) &&\n                    (!element.find(active).length || !element.find(target).length);\n            },\n\n            toFront: function(e, avoidFocus) {\n                var that = this,\n                    wrapper = that.wrapper,\n                    currentWindow = wrapper[0],\n                    containmentContext = that.containment && !that._isPinned,\n                    openAnimation = this._animationOptions(\"open\"),\n                    zIndex = +wrapper.css(ZINDEX),\n                    originalZIndex = zIndex,\n                    target = (e && e.target) || null;\n\n                $(KWINDOW).each(function(i, element) {\n                    var windowObject = $(element),\n                        zIndexNew = windowObject.css(ZINDEX),\n                        contentElement = windowObject.children(KWINDOWCONTENT);\n\n                    if (!isNaN(zIndexNew)) {\n                        zIndex = Math.max(+zIndexNew, zIndex);\n                    }\n\n                    wrapper.data(\"isFront\", element == currentWindow);\n                    // Add overlay to windows with iframes and lower z-index to prevent\n                    // trapping of events when resizing / dragging\n\n                    if (element != currentWindow &&\n                        contentElement.find(\".\" + KCONTENTFRAME).length &&\n                        !contentElement.find(KOVERLAY).length) {\n                        contentElement.append(templates.overlay);\n                    }\n                });\n\n                if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {\n                    wrapper.css(ZINDEX, zIndex + 2);\n                }\n                that.element.find(\"> .k-overlay\").remove();\n\n                if (that._shouldFocus(target)) {\n                    if (!avoidFocus) {\n                        setTimeout(function() {\n                            that.wrapper.focus();\n                        }, openAnimation ? openAnimation.duration : 0);\n                    }\n\n                    var scrollTop = containmentContext ? that.containment.scrollTop() : $(window).scrollTop(),\n                        windowTop = parseInt(wrapper.position().top, 10);\n\n                    if (!that.options.pinned && windowTop > 0 && windowTop < scrollTop) {\n                        if (scrollTop > 0) {\n                            $(window).scrollTop(windowTop);\n                        } else {\n                            wrapper.css(\"top\", scrollTop);\n                        }\n                    }\n                }\n\n                wrapper = null;\n\n                return that;\n            },\n\n            toggleMaximization: function() {\n                if (this._closing) {\n                    return this;\n                }\n\n                return this[this.options.isMaximized ? \"restore\" : \"maximize\"]();\n            },\n\n            restore: function() {\n                var that = this;\n                var options = that.options;\n                var minHeight = options.minHeight;\n                var restoreOptions = that.restoreOptions;\n                var shouldRestrictTop;\n                var container = that.containment && !that._isPinned ? that.containment : $(document);\n\n                if (!options.isMaximized && !options.isMinimized) {\n                    return that;\n                }\n\n                if (minHeight && minHeight != Infinity) {\n                    that.wrapper.css(\"min-height\", minHeight);\n                }\n\n                if (restoreOptions && !options.isMaximized) {\n                    restoreOptions.height = constrain(restoreOptions.height, that.options.minHeight, that.options.maxHeight);\n\n                    shouldRestrictTop = options.position.top + parseInt(restoreOptions.height, 10) > that.maxTop;\n\n                    if (shouldRestrictTop) {\n                        options.position.top = constrain(options.position.top, that.minTop, that.maxTop - parseInt(restoreOptions.height, 10));\n\n                        extend(restoreOptions, {\n                            left: options.position.left,\n                            top: options.position.top\n                        });\n                    }\n                }\n\n                that.wrapper\n                    .css({\n                        position: options.pinned ? \"fixed\" : \"absolute\",\n                        left: restoreOptions.left,\n                        top: restoreOptions.top,\n                        width: restoreOptions.width,\n                        height: restoreOptions.height\n                    })\n                    .removeClass(MAXIMIZEDSTATE)\n                    .removeClass(KWINDOWMINIMIZED)\n                    .find(\".k-window-content,.k-resize-handle\").show().end()\n                    .find(\".k-window-titlebar .k-i-window-restore,.k-window-titlebar .k-svg-i-window-restore\").parent().remove().end().end()\n                    .find(MINIMIZE_MAXIMIZEICONSELECTORS).parent().show().end().end()\n                    .find(PIN_UNPINICONCLASSSELECTOR).parent().show();\n\n                if (options.isMaximized) {\n                    that.wrapper.find(\".k-i-window,.k-svg-i-window\").parent().trigger(\"focus\");\n                } else if (options.isMinimized) {\n                    that.wrapper.find(\".k-i-window-minimize,.k-svg-i-window-minimize\").parent().trigger(\"focus\");\n                }\n\n                that.options.width = restoreOptions.width;\n                that.options.height = restoreOptions.height;\n\n                if (!that.options.modal.preventScroll) {\n                    that._enableDocumentScrolling();\n                }\n\n                if (that._containerScrollTop && that._containerScrollTop > 0) {\n                    container.scrollTop(that._containerScrollTop);\n                }\n                if (that._containerScrollLeft && that._containerScrollLeft > 0) {\n                    container.scrollLeft(that._containerScrollLeft);\n                }\n\n                options.isMaximized = options.isMinimized = false;\n\n                that.wrapper.removeAttr(\"aria-labelled-by\");\n\n                that.resize();\n\n                that.trigger(RESTORE);\n\n                return that;\n            },\n\n            _sizingAction: function(actionId, callback) {\n                var that = this,\n                    wrapper = that.wrapper,\n                    style = wrapper[0].style,\n                    options = that.options;\n\n                if (options.isMaximized || options.isMinimized) {\n                    return that;\n                }\n\n                that.restoreOptions = {\n                    width: style.width,\n                    height: style.height\n                };\n\n                wrapper\n                    .children(KWINDOWRESIZEHANDLES).hide().end()\n                    .children(KWINDOWTITLEBAR).find(MINIMIZE_MAXIMIZEICONSELECTORS).parent().hide()\n                    .eq(0).before(templates.action({ name: \"window-restore\" }));\n\n                callback.call(that);\n\n                that.wrapper.children(KWINDOWTITLEBAR).find(PIN_UNPINICONCLASSSELECTOR).parent().toggle(actionId !== \"maximize\");\n\n                that.trigger(actionId);\n\n                wrapper.find(\".k-i-window-restore,.k-svg-i-window-restore\").parent().trigger(\"focus\");\n\n                return that;\n            },\n\n            maximize: function() {\n                this._sizingAction(\"maximize\", function() {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        containmentContext = this.containment && !that._isPinned,\n                        position = wrapper.position(),\n                        doc = $(document);\n\n                    extend(that.restoreOptions, {\n                        left: position.left + (containmentContext ? this.containment.scrollLeft() : 0),\n                        top: position.top + (containmentContext ? this.containment.scrollTop() : 0)\n                    });\n\n                    this._containerScrollTop = containmentContext ? this.containment.scrollTop() : doc.scrollTop();\n                    this._containerScrollLeft = containmentContext ? this.containment.scrollLeft() : doc.scrollLeft();\n\n                    that._stopDocumentScrolling();\n\n                    wrapper\n                        .css({\n                            top: containmentContext ? this.containment.scrollTop() : 0,\n                            left: containmentContext ? this.containment.scrollLeft() : 0,\n                            position: containmentContext ? \"absolute\" : \"fixed\"\n                        })\n                        .addClass(MAXIMIZEDSTATE);\n\n                    that.options.isMaximized = true;\n\n                    that._onDocumentResize();\n                });\n\n                return this;\n            },\n\n            _stopDocumentScrolling: function() {\n                var that = this;\n                var containment = that.containment;\n\n                if (containment && !that._isPinned) {\n                    that._storeOverflowRule(containment);\n                    containment.css(OVERFLOW, HIDDEN);\n                    that.wrapper.css({\n                        maxWidth: containment.innerWidth(),\n                        maxHeight: containment.innerHeight()\n                    });\n                    return;\n                }\n\n                var $body = $(\"body\");\n                that._storeOverflowRule($body);\n                $body.css(OVERFLOW, HIDDEN);\n\n                var $html = $(\"html\");\n                that._storeOverflowRule($html);\n                $html.css(OVERFLOW, HIDDEN);\n            },\n\n            _enableDocumentScrolling: function() {\n                var that = this;\n                var containment = that.containment;\n\n                if (containment && !that._isPinned) {\n                    that._restoreOverflowRule(containment);\n                    that.wrapper.css({\n                        maxWidth: containment.width,\n                        maxHeight: containment.height\n                    });\n                    return;\n                }\n\n                that._restoreOverflowRule($(document.body));\n                that._restoreOverflowRule($(\"html\"));\n            },\n\n            _storeOverflowRule: function($element) {\n                if (this._isOverflowStored($element)) {\n                    return;\n                }\n\n                var overflowRule = $element.get(0).style.overflow;\n\n                if (typeof overflowRule === \"string\") {\n                    $element.data(DATADOCOVERFLOWRULE, overflowRule);\n                }\n            },\n\n            _isOverflowStored: function($element) {\n                return typeof $element.data(DATADOCOVERFLOWRULE) === \"string\";\n            },\n\n            _restoreOverflowRule: function($element) {\n                var overflowRule = $element.data(DATADOCOVERFLOWRULE);\n\n                if (overflowRule !== null && overflowRule !== undefined$1) {\n                    $element.css(OVERFLOW, overflowRule);\n                    $element.removeData(DATADOCOVERFLOWRULE);\n                } else {\n                    $element.css(OVERFLOW, \"\");\n                }\n            },\n\n            isMaximized: function() {\n                return this.options.isMaximized;\n            },\n\n            minimize: function() {\n                this._sizingAction(\"minimize\", function() {\n                    var that = this;\n\n                    that.wrapper.css({\n                        height: \"\",\n                        minHeight: \"\"\n                    });\n\n                    that.element.hide();\n\n                    that.options.isMinimized = true;\n                });\n\n                this.wrapper.attr(\"aria-labelled-by\", this.element.attr(\"aria-labelled-by\"));\n                this.wrapper.addClass(KWINDOWMINIMIZED);\n\n                this._updateBoundaries();\n\n                return this;\n            },\n\n            isMinimized: function() {\n                return this.options.isMinimized;\n            },\n\n            pin: function() {\n                var that = this,\n                    win = $(window),\n                    wrapper = that.wrapper,\n                    options = that.options,\n                    position = options.position,\n                    top = this.containment ? getPosition(wrapper[0]).top + toInt(this.containment, \"borderTopWidth\") : toInt(wrapper, \"top\"),\n                    left = this.containment ? getPosition(wrapper[0]).left + toInt(this.containment, \"borderLeftWidth\") : toInt(wrapper, \"left\");\n\n                if (!that.options.isMaximized) {\n                    position.top = top;\n                    position.left = left;\n\n                    if (that._scrollIsAppended && (!this.containment || this.containment.css(\"position\") !== \"fixed\")) {\n\n                        position.top -= win.scrollTop();\n                        position.left -= win.scrollLeft();\n                        that._scrollIsAppended = false;\n                    }\n\n                    wrapper.css(extend(position, { position: \"fixed\" }));\n                    var pinIcon = wrapper.children(KWINDOWTITLEBAR).find(KPINICONCLASSSELECTOR).eq(0);\n                    if (pinIcon.length > 0) {\n                        kendo.ui.icon(pinIcon, { icon: \"unpin\" });\n                    }\n\n                    that._isPinned = true;\n                    that.options.pinned = true;\n\n                    if (this.containment) {\n                        options.maxWidth = options.maxHeight = Infinity;\n                        wrapper.css({\n                            maxWidth: \"\",\n                            maxHeight: \"\"\n                        });\n                    }\n                }\n            },\n\n            unpin: function() {\n                var that = this,\n                    win = $(window),\n                    wrapper = that.wrapper,\n                    options = that.options,\n                    position = that.options.position,\n                    containment = that.containment,\n                    top = parseInt(wrapper.css(\"top\"), 10) + win.scrollTop(),\n                    left = parseInt(wrapper.css(\"left\"), 10) + win.scrollLeft();\n\n                if (!that.options.isMaximized) {\n                    that._isPinned = false;\n                    that._scrollIsAppended = true;\n                    that.options.pinned = false;\n\n                    if (containment) {\n                        that._updateBoundaries();\n\n                        options.maxWidth = Math.min(containment.width, options.maxWidth);\n                        options.maxHeight = Math.min(containment.height - toInt(wrapper, \"padding-top\"), options.maxHeight);\n\n                        wrapper.css({\n                            maxWidth: options.maxWidth,\n                            maxHeight: options.maxHeight\n                        });\n\n                        if (top < containment.position.top) {\n                            top = that.minTop;\n                        } else if (top > containment.position.top + containment.height) {\n                            top = that.maxTop;\n                        } else {\n                            top = top + containment.scrollTop() - (containment.position.top + toInt(containment, \"border-top-width\"));\n                        }\n\n                        if (left < containment.position.left) {\n                            left = that.minLeft;\n                        } else if (left > containment.position.left + containment.width) {\n                            left = that.maxLeft;\n                        } else {\n                            left = left + containment.scrollLeft() - (containment.position.left + toInt(containment, \"border-left-width\"));\n                        }\n\n                    }\n\n                    position.top = constrain(top, that.minTop, that.maxTop);\n                    position.left = constrain(left, that.minLeft, that.maxLeft);\n\n                    wrapper.css(extend(position, { position: \"\" }));\n                    var pinIcon = wrapper.children(KWINDOWTITLEBAR).find(KUNPINICONCLASSSELECTOR).eq(0);\n                    if (pinIcon.length > 0) {\n                        kendo.ui.icon(pinIcon, { icon: \"pin\" });\n                    }\n                }\n            },\n\n            _onDocumentResize: function() {\n                var that = this,\n                    wrapper = that.wrapper,\n                    wnd = $(window),\n                    zoomLevel = kendo.support.zoomLevel(),\n                    contentBoxSizing = wrapper.css(\"box-sizing\") == \"content-box\",\n                    w, h;\n\n                if (!that.options.isMaximized) {\n                    return;\n                }\n\n                var lrBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-left-width\") + toInt(wrapper, \"border-right-width\") : 0;\n                var tbBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-top-width\") + toInt(wrapper, \"border-bottom-width\") : 0;\n                var paddingTop = contentBoxSizing ? toInt(wrapper, \"padding-top\") : 0;\n\n                if (that.containment && !that._isPinned) {\n                    w = that.containment.innerWidth() - lrBorderWidth;\n                    h = that.containment.innerHeight() - (tbBorderWidth + paddingTop);\n                } else {\n                    w = wnd.width() / zoomLevel - lrBorderWidth;\n                    h = wnd.height() / zoomLevel - (tbBorderWidth + paddingTop);\n                }\n\n                wrapper.css({\n                    width: w,\n                    height: h\n                });\n                that.options.width = w;\n                that.options.height = h;\n\n                that.resize();\n            },\n\n            refresh: function(options) {\n                var that = this,\n                    initOptions = that.options,\n                    element = $(that.element),\n                    iframe,\n                    showIframe,\n                    url;\n\n                if (!isPlainObject(options)) {\n                    options = { url: options };\n                }\n\n                options = extend(initOptions.content, options);\n\n                showIframe = defined(initOptions.iframe) ? initOptions.iframe : options.iframe;\n\n                url = options.url;\n\n                if (url) {\n                    if (!defined(showIframe)) {\n                        showIframe = !isLocalUrl(url);\n                    }\n\n                    if (!showIframe) {\n                        // perform AJAX request\n                        that._ajaxRequest(options);\n                    } else {\n                        iframe = element.find(\".\" + KCONTENTFRAME)[0];\n\n                        if (iframe) {\n                            // refresh existing iframe\n                            iframe.src = url || iframe.src;\n                        } else {\n                            // render new iframe\n                            element.html(templates.contentFrame(extend({}, initOptions, { content: options })));\n                        }\n\n                        element.find(\".\" + KCONTENTFRAME)\n                            .off(\"load\" + NS)\n                            .on(\"load\" + NS, this._triggerRefresh.bind(this));\n                    }\n                } else {\n                    if (options.template) {\n                        // refresh template\n                        that.content(template(options.template)({}));\n                    }\n\n                    that.trigger(REFRESH);\n                }\n\n                element.toggleClass(\"k-window-iframecontent\", !!showIframe);\n\n                return that;\n            },\n\n            _triggerRefresh: function() {\n                this.trigger(REFRESH);\n            },\n\n            _ajaxComplete: function() {\n                clearTimeout(this._loadingIconTimeout);\n                this.wrapper.find(REFRESHICONSELECTOR).removeClass(LOADINGICONCLASS);\n            },\n\n            _ajaxError: function(xhr, status) {\n                this.trigger(ERROR, { status: status, xhr: xhr });\n            },\n\n            _ajaxSuccess: function(contentTemplate) {\n                return function(data) {\n                    var html = data;\n                    if (contentTemplate) {\n                        html = template(contentTemplate)(data || {});\n                    }\n\n                    this.content(html, data);\n                    this.element.prop(\"scrollTop\", 0);\n\n                    this.trigger(REFRESH);\n                };\n            },\n\n            _showLoading: function() {\n                this.wrapper.find(REFRESHICONSELECTOR).addClass(LOADINGICONCLASS);\n            },\n\n            _ajaxRequest: function(options) {\n                this._loadingIconTimeout = setTimeout(this._showLoading.bind(this), 100);\n\n                $.ajax(extend({\n                    type: \"GET\",\n                    dataType: \"html\",\n                    cache: false,\n                    error: this._ajaxError.bind(this),\n                    complete: this._ajaxComplete.bind(this),\n                    success: this._ajaxSuccess(options.template).bind(this)\n                }, options));\n            },\n\n            _destroy: function() {\n                if (this.resizing) {\n                    this.resizing.destroy();\n                }\n\n                if (this.dragging) {\n                    this.dragging.destroy();\n                }\n\n                this.wrapper.off(NS)\n                    .children(KWINDOWCONTENT).off(NS).end()\n                    .find(\".k-resize-handle,.k-window-titlebar\").off(NS);\n\n                $(window).off(\"resize\" + NS + this._marker);\n                $(window).off(MODAL_NS);\n                $(window).off(NS);\n\n                clearTimeout(this._loadingIconTimeout);\n\n                Widget.fn.destroy.call(this);\n\n                this.unbind(undefined$1);\n\n                kendo.destroy(this.wrapper);\n            },\n\n            destroy: function() {\n                this._destroy();\n\n                if (this.options.modal) {\n                    this._removeOverlay(true);\n                }\n\n                this.wrapper.empty().remove();\n\n                this.wrapper = this.appendTo = this.element = $();\n            },\n\n            _createWindow: function() {\n                var contentHtml = this.element,\n                    options = this.options,\n                    iframeSrcAttributes,\n                    wrapper,\n                    isRtl = kendo.support.isRtl(contentHtml);\n\n                if (options.scrollable === false) {\n                    contentHtml.css(\"overflow\", \"hidden\");\n                }\n\n                wrapper = $(templates.wrapper(options));\n\n                // Collect the src attributes of all iframes and then set them to empty string.\n                // This seems to fix this IE9 \"feature\": http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4\n                iframeSrcAttributes = contentHtml.find(\"iframe:not(.k-content-frame)\").map(function() {\n                    var src = this.getAttribute(\"src\");\n                    this.src = \"\";\n                    return src;\n                });\n\n                // Make sure the wrapper is appended to the body only once. IE9+ will throw exceptions if you move iframes in DOM\n                wrapper\n                    .toggleClass(\"k-rtl\", isRtl)\n                    .attr(\"tabindex\", 0)\n                    .append(contentHtml)\n                    .find(\"iframe:not(.k-content-frame)\").each(function(index) {\n                    // Restore the src attribute of the iframes when they are part of the live DOM tree\n                    this.src = iframeSrcAttributes[index];\n                });\n\n                if (this.containment) {\n                    this.containment.prepend(wrapper);\n                } else if (this.appendTo) {\n                    wrapper.appendTo(this.appendTo);\n                }\n\n                wrapper.find(\".k-window-title\")\n                    .css(isRtl ? \"left\" : \"right\", outerWidth(wrapper.find(\".k-window-titlebar-actions\")) + 10);\n\n                contentHtml.css(\"visibility\", \"\").show();\n\n                if ($(contentHtml).hasClass(KHIDDEN))\n                {\n                    $(contentHtml).removeClass(KHIDDEN);\n                }\n                contentHtml.find(\"[data-role=editor]\").each(function() {\n                    var editor = $(this).data(\"kendoEditor\");\n\n                    if (editor) {\n                        editor.refresh();\n                    }\n                });\n\n                wrapper = contentHtml = null;\n            }\n        });\n\n        templates = {\n            wrapper: template(() => \"<div class='k-window'></div>\"),\n            action: template(({ name, icon }) => {\n                let iconName = (icon || \"\").toLowerCase() || name.toLowerCase();\n                if (iconName == \"restore\") { iconName = \"window-restore\"; }\n\n                return kendo.html.renderButton(`<button role='button' class='k-window-titlebar-action' aria-label='${name}'></button>`, { icon: iconName, fillMode: \"flat\" });\n            }),\n            titlebar: template(({ title }) =>\n                \"<div class='k-window-titlebar'>\" +\n                    `<span class='k-window-title'>${title}</span>` +\n                    \"<div class='k-window-titlebar-actions'></div>\" +\n                \"</div>\"\n            ),\n            overlay: \"<div class='k-overlay'></div>\",\n            contentFrame: template(({ title, content }) =>\n                `<iframe frameborder='0' title='${title}' class='${KCONTENTFRAME}' ` +\n                `src='${content.url}'>` +\n                \"This page requires frames in order to show content\" +\n                \"</iframe>\"\n            ),\n            resizeHandle: template((data) => `<div aria-hidden='true' class='k-resize-handle k-resize-${data}'></div>`)\n        };\n\n\n        function WindowResizing(wnd) {\n            var that = this;\n            that.owner = wnd;\n            that._preventDragging = false;\n            that._draggable = new Draggable(wnd.wrapper, {\n                filter: \">\" + KWINDOWRESIZEHANDLES,\n                group: wnd.wrapper.id + \"-resizing\",\n                dragstart: that.dragstart.bind(that),\n                drag: that.drag.bind(that),\n                dragend: that.dragend.bind(that)\n            });\n\n            that._draggable.userEvents.bind(\"press\", that.addOverlay.bind(that));\n            that._draggable.userEvents.bind(\"release\", that.removeOverlay.bind(that));\n        }\n\n        WindowResizing.prototype = {\n            addOverlay: function() {\n                this.owner.wrapper.append(templates.overlay);\n            },\n            removeOverlay: function() {\n                this.owner.wrapper.find(KOVERLAY).remove();\n            },\n            dragstart: function(e) {\n                var that = this;\n                var wnd = that.owner;\n                var wrapper = wnd.wrapper;\n\n                that._preventDragging = wnd.trigger(RESIZESTART);\n                if (that._preventDragging) {\n                    return;\n                }\n\n                that.elementPadding = parseInt(wrapper.css(\"padding-top\"), 10);\n                that.initialPosition = kendo.getOffset(wrapper, \"position\");\n\n                that.resizeDirection = e.currentTarget.prop(\"className\").replace(\"k-resize-handle k-resize-\", \"\");\n\n                that.initialSize = {\n                    width: wrapper.outerWidth(),\n                    height: wrapper.outerHeight()\n                };\n\n                wnd._updateBoundaries();\n\n                that.containerOffset = wnd.containment ? wnd.containment.position : kendo.getOffset(wnd.appendTo);\n\n                var offsetParent = wrapper.offsetParent();\n\n                if (offsetParent.is(\"html\")) {\n                    that.containerOffset.top = that.containerOffset.left = 0;\n                } else {\n                    var marginTop = offsetParent.css(\"margin-top\");\n                    var marginLeft = offsetParent.css(\"margin-left\");\n                    var hasMargin = !zero.test(marginTop) || !zero.test(marginLeft);\n                    if (hasMargin) {\n                        var wrapperPosition = getPosition(wrapper[0]);\n                        var relativeElMarginLeft = wrapperPosition.left - that.containerOffset.left - that.initialPosition.left;\n                        var relativeElMarginTop = wrapperPosition.top - that.containerOffset.top - that.initialPosition.top;\n\n                        that._relativeElMarginLeft = relativeElMarginLeft > 1 ? relativeElMarginLeft : 0;\n                        that._relativeElMarginTop = relativeElMarginTop > 1 ? relativeElMarginTop : 0;\n\n                        that.initialPosition.left += that._relativeElMarginLeft;\n                        that.initialPosition.top += that._relativeElMarginTop;\n                    }\n                }\n\n                wrapper\n                    .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).hide();\n\n                $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));\n            },\n            drag: function(e) {\n                if (this._preventDragging) {\n                    return;\n                }\n                var that = this,\n                    wnd = that.owner,\n                    wrapper = wnd.wrapper,\n                    options = wnd.options,\n                    position = options.position,\n                    direction = that.resizeDirection,\n                    containerOffset = that.containerOffset,\n                    initialPosition = that.initialPosition,\n                    initialSize = that.initialSize,\n                    containmentContext = wnd.containment && !wnd._isPinned,\n                    rtl = kendo.support.isRtl(wnd.containment),\n                    leftRtlOffset = containmentContext && rtl && wnd.containment.innerWidth() > wnd.containment.width ? kendo.support.scrollbar() : 0,\n                    scrollOffset = containmentContext ? { top: wnd.containment.scrollTop(), left: wnd.containment.scrollLeft() } : { top: 0, left: 0 },\n                    newWidth, newHeight,\n                    windowBottom, windowRight,\n                    x = Math.max(e.x.location, 0),\n                    y = Math.max(e.y.location, 0);\n\n                    if (direction.indexOf(\"e\") >= 0) {\n\n                        if (wnd.containment && x - initialSize.width >= wnd.maxLeft - scrollOffset.left + containerOffset.left + leftRtlOffset) {\n                            newWidth = wnd.maxLeft + leftRtlOffset - initialPosition.left + initialSize.width - scrollOffset.left;\n                        } else {\n                            newWidth = x - initialPosition.left - containerOffset.left;\n                        }\n\n                        wrapper.outerWidth(constrain(newWidth, options.minWidth, options.maxWidth));\n                    } else if (direction.indexOf(\"w\") >= 0) {\n                        windowRight = initialPosition.left + initialSize.width + containerOffset.left;\n                        newWidth = constrain(windowRight - x, options.minWidth, options.maxWidth);\n                        position.left = windowRight - newWidth - containerOffset.left - leftRtlOffset - (that._relativeElMarginLeft || 0) + scrollOffset.left;\n\n                        if (wnd.containment && position.left <= wnd.minLeft) {\n                            position.left = wnd.minLeft;\n                            newWidth = constrain(windowRight - leftRtlOffset - position.left - containerOffset.left + scrollOffset.left, options.minWidth, options.maxWidth);\n                        }\n\n                        wrapper.css({\n                            left: position.left,\n                            width: newWidth\n                        });\n                    }\n\n                    var newWindowTop = y;\n                    if (wnd.options.pinned) {\n                        newWindowTop -= $(window).scrollTop();\n                    }\n                    if (direction.indexOf(\"s\") >= 0) {\n                        newHeight = newWindowTop - initialPosition.top - that.elementPadding - containerOffset.top;\n\n                        if (newWindowTop - initialSize.height - that.elementPadding >= wnd.maxTop + containerOffset.top - scrollOffset.top) {\n                            newHeight = wnd.maxTop - initialPosition.top + initialSize.height - scrollOffset.top;\n                        }\n\n                        wrapper.outerHeight(constrain(newHeight, options.minHeight, options.maxHeight));\n                    } else if (direction.indexOf(\"n\") >= 0) {\n                        windowBottom = initialPosition.top + initialSize.height + containerOffset.top;\n                        newHeight = constrain(windowBottom - newWindowTop, options.minHeight, options.maxHeight);\n                        position.top = windowBottom - newHeight - containerOffset.top - (that._relativeElMarginTop || 0) + scrollOffset.top;\n\n                        if (position.top <= wnd.minTop && wnd.containment) {\n                            position.top = wnd.minTop;\n                            newHeight = constrain(windowBottom - position.top - containerOffset.top + scrollOffset.top, options.minHeight, options.maxHeight);\n                        }\n\n                        wrapper.css({\n                            top: position.top,\n                            height: newHeight\n                        });\n                    }\n\n                    if (newWidth) {\n                        wnd.options.width = newWidth + \"px\";\n                    }\n                    if (newHeight) {\n                        wnd.options.height = newHeight + \"px\";\n                    }\n\n                    wnd.resize();\n            },\n            dragend: function(e) {\n                if (this._preventDragging) {\n                    return;\n                }\n\n                var that = this,\n                    wnd = that.owner,\n                    wrapper = wnd.wrapper;\n\n                wrapper\n                    .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).show();\n\n                $(BODY).css(CURSOR, \"\");\n\n                if (wnd.touchScroller) {\n                    wnd.touchScroller.reset();\n                }\n\n                if (e.keyCode == 27) {\n                    wrapper.css(that.initialPosition)\n                        .css(that.initialSize);\n                }\n\n                wnd.trigger(RESIZEEND);\n\n                return false;\n            },\n            destroy: function() {\n                if (this._draggable) {\n                    this._draggable.destroy();\n                }\n\n                this._draggable = this.owner = null;\n            }\n        };\n\n        function WindowDragging(wnd, dragHandle, clickMoveClick) {\n            var that = this,\n                filter = dragHandle;\n\n            if (clickMoveClick) {\n                filter += \",.k-overlay\";\n            }\n\n            that.owner = wnd;\n            that._preventDragging = false;\n            that._draggable = new Draggable(wnd.wrapper, {\n                filter: dragHandle,\n                group: wnd.wrapper.id + \"-moving\",\n                clickMoveClick: clickMoveClick,\n                dragstart: that.dragstart.bind(that),\n                drag: that.drag.bind(that),\n                dragend: that.dragend.bind(that),\n                dragcancel: that.dragcancel.bind(that)\n            });\n\n            that._draggable.userEvents.stopPropagation = false;\n        }\n\n        WindowDragging.prototype = {\n            dragstart: function(e) {\n                var wnd = this.owner,\n                    draggable = wnd.options.draggable,\n                    element = wnd.element,\n                    actions = element.find(\".k-window-titlebar-actions\"),\n                    containerOffset = kendo.getOffset(wnd.appendTo);\n\n                this._preventDragging = wnd.trigger(DRAGSTART) || !draggable;\n                if (this._preventDragging || wnd.isMaximized()) {\n                    return;\n                }\n\n                wnd.initialWindowPosition = kendo.getOffset(wnd.wrapper, \"position\");\n\n                wnd.initialPointerPosition = {\n                    left: wnd.options.position.left,\n                    top: wnd.options.position.top\n                };\n\n                wnd.startPosition = {\n                    left: e.x.client - wnd.initialWindowPosition.left,\n                    top: e.y.client - wnd.initialWindowPosition.top\n                };\n\n                wnd._updateBoundaries();\n                if (!wnd.containment) {\n                    if (actions.length > 0) {\n                        wnd.minLeft = outerWidth(actions) + parseInt(actions.css(\"right\"), 10) - outerWidth(element);\n                    } else {\n                        wnd.minLeft = 20 - outerWidth(element); // at least 20px remain visible\n                    }\n\n                    wnd.minLeft -= containerOffset.left;\n                    wnd.minTop = -containerOffset.top;\n                }\n\n                $(templates.overlay).appendTo(wnd.wrapper).css({ opacity: 0 });\n\n                wnd.wrapper.children(KWINDOWRESIZEHANDLES).hide();\n\n                $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));\n            },\n\n            drag: function(e) {\n                var wnd = this.owner;\n                var position = wnd.options.position;\n                var axis = wnd.options.draggable.axis;\n                var left;\n                var top;\n\n                if (this._preventDragging || wnd.isMaximized()) {\n                    return;\n                }\n\n                if (!axis || axis.toLowerCase() === \"x\") {\n                    left = e.x.client - wnd.startPosition.left;\n\n                    if (wnd.containment && !wnd._isPinned) {\n                        left += wnd.containment.scrollLeft();\n                    }\n\n                    position.left = constrain(left, wnd.minLeft, wnd.maxLeft);\n                }\n\n                if (!axis || axis.toLowerCase() === \"y\") {\n                    top = e.y.client - wnd.startPosition.top;\n\n                    if (wnd.containment && !wnd._isPinned) {\n                        top += wnd.containment.scrollTop();\n                    }\n\n                    position.top = constrain(top, wnd.minTop, wnd.maxTop);\n                }\n\n                if (kendo.support.transforms) {\n                    $(wnd.wrapper).css(\n                        \"transform\", \"translate(\" +\n                        (position.left - wnd.initialPointerPosition.left) + \"px, \" +\n                        (position.top - wnd.initialPointerPosition.top) + \"px)\"\n                    );\n                } else {\n                    $(wnd.wrapper).css(position);\n                }\n\n            },\n\n            _finishDrag: function() {\n                var wnd = this.owner;\n\n                wnd.wrapper\n                    .children(KWINDOWRESIZEHANDLES).toggle(!wnd.options.isMinimized).end()\n                    .find(KOVERLAY).remove();\n\n                $(BODY).css(CURSOR, \"\");\n            },\n\n            dragcancel: function(e) {\n                if (this._preventDragging) {\n                    return;\n                }\n                this._finishDrag();\n\n                e.currentTarget.closest(KWINDOW).css(this.owner.initialWindowPosition);\n            },\n\n            dragend: function() {\n                var wnd = this.owner;\n\n                if (this._preventDragging || wnd.isMaximized()) {\n                    return;\n                }\n\n                $(wnd.wrapper)\n                    .css(wnd.options.position)\n                    .css(\"transform\", \"\");\n\n                this._finishDrag();\n\n                wnd.trigger(DRAGEND);\n\n                return false;\n            },\n            destroy: function() {\n                if (this._draggable) {\n                    this._draggable.destroy();\n                }\n\n                this._draggable = this.owner = null;\n            }\n        };\n\n        kendo.ui.plugin(Window);\n\n    })(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}