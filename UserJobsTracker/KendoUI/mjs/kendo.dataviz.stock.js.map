{"version":3,"sources":["raw-mjs/kendo.dataviz.stock.js"],"names":["window","kendo","dataviz","elementStyles","deepExtend","toTime","datavizConstants","constants","Chart","drawing","FadeOutAnimation","Animation","extend","setup","this","_initialOpacity","parseFloat","element","opacity","step","pos","String","interpolateValue","abort","fn","call","display","cancel","createDiv","className","style","div","document","createElement","cssText","NavigatorHint","Class","init","container","chartService","options","padding","chartPadding","top","paddingTop","left","paddingLeft","createElements","appendChild","tooltip","scroll","innerHTML","show","from","to","bbox","ref","middle","toDate","scrollWidth","width","minPos","center","x","scale","max","min","offset","text","intl","format","template","getTemplate","clearHideTimeout","_visible","visibility","offsetWidth","y1","tooltipStyle","marginTop","borderTopWidth","height","_hideTimeout","clearTimeout","_hideAnimation","hide","this$1$1","setTimeout","play","hideDelay","destroy","removeChild","setDefaultOptions","NAVIGATOR_PANE","NAVIGATOR_AXIS","DEFAULT_PANE","Navigator","chart","obj","navigator","select","parseDate","defined","hint","visible","chartObserver","InstanceObserver","DRAG","DRAG_END","ZOOM","ZOOM_END","addObserver","value","clean","selection","removeObserver","redraw","_redrawSelf","initSelection","axis","mainAxis","ref$1","roundedRange","ref$2","mousewheel","axisClone","ClonedObject","prototype","categoriesCount","box","Selection","valueOrDefault","zoom","selectStart","selectEnd","setRange","_createPlotArea","namedCategoryAxes","filterAxes","silent","plotArea","_plotArea","last","panes","redrawSlaves","slavePanes","filter","pane","name","srcSeries","series","categoryAxis","clearSeriesPointsCache","_drag","e","duration","coords","_eventCoordinates","originalEvent","navigatorAxis","naviRange","inNavigator","containsPoint","range","axisRanges","limitValue","liveDrag","set","showHint","_dragEnd","readSelection","ref_selection_options","allAxes","idx","length","requiresHandlers","args","type","axisOptions","DateCategoryAxis","baseUnit","categories","addDuration","baseUnitStep","trigger","_zoom","ref_options","delta","fromIx","categoryIndex","toIx","preventDefault","Math","abs","scaleRange","_mousewheelZoomRate","_zoomEnd","backgroundBox","_selectStart","_select","_selectEnd","themeOptions","__navi","naviOptions","concat","paneOptions","position","push","unshift","forEach","attachAxes","attachSeries","categoryAxes","valueAxes","valueAxis","justifyAxis","filterSeriesByType","EQUALLY_SPACED_SERIES","base","roundToBaseUnit","justified","_collapse","majorTicks","labels","autoBind","autoBindElements","autoBaseUnitSteps","minutes","hours","days","weeks","months","years","user","maxDateGroups","title","plotBands","_overlap","mirror","majorGridLines","navigatorSeries","seriesColors","defaults","seriesDefaults","color","categoryField","dateField","visibleInLegend","StockChart","applyDefaults","elementSize","DEFAULT_WIDTH","theme","stockDefaults","axisDefaults","floor","_setElementClass","addClass","setOptions","destroyNavigator","noTransitionsRedraw","transitions","_fullRedraw","_resize","_redraw","_dirty","partialRedraw","seriesCount","grep","s","dirty","_seriesCount","_trackSharedTooltip","paneByPoint","_unsetActivePoint","bindCategories","copyNavigatorCategories","definitions","axisIx","_stopChartHandlers","_toggleDragZoomEvents","_dragZoomEnabled","touchAction","narrowRange","markers","highlight","line","legend","$","ChartInstanceObserver","ui","KendoStockChart","CHANGE","StockInstanceObserver","handlerMap","navigatorFilter","navigatorCreated","category","toString","persistSeriesVisibility","_createChart","_initNavigatorOptions","_instance","observer","sender","rtl","_isRtl","navigatorOptions","support","isTouch","touch","isFirefox","browser","mozilla","dataSource","_initDataSource","userOptions","hasServerFiltering","serverFiltering","hasSelect","dummyAxis","buildFilter","_onNavigatorCreated","_navigator","_initNavigatorDataSource","dsOptions","_navigatorDataChangedHandler","_onNavigatorDataChanged","bind","_navigatorDataSource","data","DataSource","create","fetch","_bindNavigatorSeries","seriesIx","currentSeries","seriesLength","_isBindable","currentAxis","naviCategories","instance","axesLength","view","_sourceSeries","_bindCategoryAxis","_model","_dataBound","_bindCategories","_onDataChanged","_removeNavigatorDataSource","_onNavigatorFilter","names","inArray","navigatorDataSource","unbind","field","operator","plugin","jQuery","__meta__","id","description","depends","kendo$1"],"mappings":"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","file":"kendo.dataviz.stock.js","sourcesContent":["import './kendo.dataviz.chart.js';\n\n/***********************************************************************\n * WARNING: this file is auto-generated.  If you change it directly,\n * your modifications will eventually be lost.  The source code is in\n * `kendo-charts` repository, you should make your changes there and\n * run `src-modules/sync.sh` in this repository.\n */\n\n(function() {\n/* eslint-disable space-before-blocks, space-before-function-paren */\n\nwindow.kendo.dataviz = window.kendo.dataviz || {};\nvar dataviz = kendo.dataviz;\nvar elementStyles = dataviz.elementStyles;\nvar deepExtend = dataviz.deepExtend;\nvar toTime = dataviz.toTime;\nvar datavizConstants = dataviz.constants;\nvar Chart = dataviz.Chart;\nvar drawing = kendo.drawing;\n\nvar FadeOutAnimation = drawing.Animation.extend({\n    setup: function() {\n        this._initialOpacity = parseFloat(elementStyles(this.element, 'opacity').opacity);\n    },\n\n    step: function(pos) {\n        elementStyles(this.element, {\n            opacity: String(dataviz.interpolateValue(this._initialOpacity, 0, pos))\n        });\n    },\n\n    abort: function() {\n        drawing.Animation.fn.abort.call(this);\n        elementStyles(this.element, {\n            display: 'none',\n            opacity: String(this._initialOpacity)\n        });\n    },\n\n    cancel: function() {\n        drawing.Animation.fn.abort.call(this);\n        elementStyles(this.element, {\n            opacity: String(this._initialOpacity)\n        });\n    }\n});\n\nfunction createDiv(className, style) {\n    var div = document.createElement(\"div\");\n    div.className = className;\n    if (style) {\n        div.style.cssText = style;\n    }\n\n    return div;\n}\n\nvar NavigatorHint = dataviz.Class.extend({\n    init: function(container, chartService, options) {\n\n        this.options = deepExtend({}, this.options, options);\n        this.container = container;\n        this.chartService = chartService;\n\n        var padding = elementStyles(container, [ \"paddingLeft\", \"paddingTop\" ]);\n        this.chartPadding = {\n            top: padding.paddingTop,\n            left: padding.paddingLeft\n        };\n\n        this.createElements();\n        container.appendChild(this.element);\n    },\n\n    createElements: function() {\n        var element = this.element = createDiv('k-navigator-hint', 'display: none; position: absolute; top: 1px; left: 1px;');\n        var tooltip = this.tooltip = createDiv('k-tooltip k-chart-tooltip');\n        var scroll = this.scroll = createDiv('k-scroll');\n\n        tooltip.innerHTML = '&nbsp;';\n\n        element.appendChild(tooltip);\n        element.appendChild(scroll);\n    },\n\n    show: function(from, to, bbox) {\n        var ref = this;\n        var element = ref.element;\n        var options = ref.options;\n        var scroll = ref.scroll;\n        var tooltip = ref.tooltip;\n        var middle = dataviz.toDate(toTime(from) + toTime(to - from) / 2);\n        var scrollWidth = bbox.width() * 0.4;\n        var minPos = bbox.center().x - scrollWidth;\n        var maxPos = bbox.center().x;\n        var posRange = maxPos - minPos;\n        var range = options.max - options.min;\n        var scale = posRange / range;\n        var offset = middle - options.min;\n        var text = this.chartService.intl.format(options.format, from, to);\n        var template = dataviz.getTemplate(options);\n\n        this.clearHideTimeout();\n\n        if (!this._visible) {\n            elementStyles(element, {\n                visibility: 'hidden',\n                display: 'block'\n            });\n            this._visible = true;\n        }\n\n        if (template) {\n            text = template({\n                from: from,\n                to: to\n            });\n        }\n\n        tooltip.innerHTML = text;\n        elementStyles(tooltip, {\n            left: bbox.center().x - tooltip.offsetWidth / 2,\n            top: bbox.y1\n        });\n\n        var tooltipStyle = elementStyles(tooltip, [ 'marginTop', 'borderTopWidth', 'height' ]);\n\n        elementStyles(scroll, {\n            width: scrollWidth,\n            left: minPos + offset * scale,\n            top: bbox.y1 + tooltipStyle.marginTop + tooltipStyle.borderTopWidth + tooltipStyle.height / 2\n        });\n\n        elementStyles(element, {\n            visibility: 'visible'\n        });\n    },\n\n    clearHideTimeout: function() {\n        if (this._hideTimeout) {\n            clearTimeout(this._hideTimeout);\n        }\n\n        if (this._hideAnimation) {\n            this._hideAnimation.cancel();\n        }\n    },\n\n    hide: function() {\n        var this$1$1 = this;\n\n        this.clearHideTimeout();\n\n        this._hideTimeout = setTimeout(function () {\n            this$1$1._visible = false;\n            this$1$1._hideAnimation = new FadeOutAnimation(this$1$1.element);\n            this$1$1._hideAnimation.setup();\n            this$1$1._hideAnimation.play();\n        }, this.options.hideDelay);\n    },\n\n    destroy: function() {\n        this.clearHideTimeout();\n        if (this.container) {\n            this.container.removeChild(this.element);\n        }\n        delete this.container;\n        delete this.chartService;\n        delete this.element;\n        delete this.tooltip;\n        delete this.scroll;\n    }\n});\n\ndataviz.setDefaultOptions(NavigatorHint, {\n    format: \"{0:d} - {1:d}\",\n    hideDelay: 500\n});\n\nvar NAVIGATOR_PANE = \"_navigator\";\nvar NAVIGATOR_AXIS = NAVIGATOR_PANE;\nvar DEFAULT_PANE = \"_default\";\n\nvar constants = {\n\tNAVIGATOR_AXIS: NAVIGATOR_AXIS,\n\tNAVIGATOR_PANE: NAVIGATOR_PANE,\n\tDEFAULT_PANE: DEFAULT_PANE\n};\n\nvar ZOOM_ACCELERATION = 3;\n\nvar Navigator = dataviz.Class.extend({\n    init: function(chart) {\n\n        this.chart = chart;\n        var options = this.options = deepExtend({}, this.options, chart.options.navigator);\n        var select = options.select;\n        if (select) {\n            select.from = this.parseDate(select.from);\n            select.to = this.parseDate(select.to);\n        }\n\n        if (!dataviz.defined(options.hint.visible)) {\n            options.hint.visible = options.visible;\n        }\n\n        var obj;\n        this.chartObserver = new dataviz.InstanceObserver(this, ( obj = {}, obj[datavizConstants.DRAG] = '_drag', obj[datavizConstants.DRAG_END] = '_dragEnd', obj[datavizConstants.ZOOM] = '_zoom', obj[datavizConstants.ZOOM_END] = '_zoomEnd', obj ));\n        chart.addObserver(this.chartObserver);\n    },\n\n    parseDate: function(value) {\n        return dataviz.parseDate(this.chart.chartService.intl, value);\n    },\n\n    clean: function() {\n        if (this.selection) {\n            this.selection.destroy();\n            this.selection = null;\n        }\n\n        if (this.hint) {\n            this.hint.destroy();\n            this.hint = null;\n        }\n    },\n\n    destroy: function() {\n        if (this.chart) {\n            this.chart.removeObserver(this.chartObserver);\n            delete this.chart;\n        }\n\n        this.clean();\n    },\n\n    redraw: function() {\n        this._redrawSelf();\n        this.initSelection();\n    },\n\n    initSelection: function() {\n        var ref = this;\n        var chart = ref.chart;\n        var options = ref.options;\n        var axis = this.mainAxis();\n        var ref$1 = axis.roundedRange();\n        var min = ref$1.min;\n        var max = ref$1.max;\n        var ref$2 = options.select;\n        var from = ref$2.from;\n        var to = ref$2.to;\n        var mousewheel = ref$2.mousewheel;\n        var axisClone = clone(axis);\n\n        if (axis.categoriesCount() === 0) {\n            return;\n        }\n\n        this.clean();\n\n        // \"Freeze\" the selection axis position until the next redraw\n        axisClone.box = axis.box;\n\n        this.selection = new dataviz.Selection(chart, axisClone, {\n            min: min,\n            max: max,\n            from: from || min,\n            to: to || max,\n            mousewheel: dataviz.valueOrDefault(mousewheel, { zoom: \"left\" }),\n            visible: options.visible\n        }, new dataviz.InstanceObserver(this, {\n            selectStart: '_selectStart',\n            select: '_select',\n            selectEnd: '_selectEnd'\n        }));\n\n        if (options.hint.visible) {\n            this.hint = new NavigatorHint(chart.element, chart.chartService, {\n                min: min,\n                max: max,\n                template: dataviz.getTemplate(options.hint),\n                format: options.hint.format\n            });\n        }\n    },\n\n    setRange: function() {\n        var plotArea = this.chart._createPlotArea(true);\n        var axis = plotArea.namedCategoryAxes[NAVIGATOR_AXIS];\n\n        var ref = axis.roundedRange();\n        var min = ref.min;\n        var max = ref.max;\n\n        var select = this.options.select || {};\n        var from = select.from || min;\n        if (from < min) {\n            from = min;\n        }\n\n        var to = select.to || max;\n        if (to > max) {\n            to = max;\n        }\n\n        this.options.select = deepExtend({}, select, {\n            from: from,\n            to: to\n        });\n\n        this.filterAxes();\n    },\n\n    _redrawSelf: function(silent) {\n        var plotArea = this.chart._plotArea;\n\n        if (plotArea) {\n            plotArea.redraw(dataviz.last(plotArea.panes), silent);\n        }\n    },\n\n    redrawSlaves: function() {\n        var chart = this.chart;\n        var plotArea = chart._plotArea;\n        var slavePanes = plotArea.panes.filter(function (pane) { return pane.options.name !== NAVIGATOR_PANE; });\n\n        // Update the original series and categoryAxis before partial refresh.\n        plotArea.srcSeries = chart.options.series;\n        plotArea.options.categoryAxis = chart.options.categoryAxis;\n        plotArea.clearSeriesPointsCache();\n\n        plotArea.redraw(slavePanes);\n    },\n\n    _drag: function(e) {\n        var ref = this;\n        var chart = ref.chart;\n        var selection = ref.selection;\n        var coords = chart._eventCoordinates(e.originalEvent);\n        var navigatorAxis = this.mainAxis();\n        var naviRange = navigatorAxis.roundedRange();\n        var inNavigator = navigatorAxis.pane.box.containsPoint(coords);\n        var axis = chart._plotArea.categoryAxis;\n        var range = e.axisRanges[axis.options.name];\n        var select = this.options.select;\n        var duration;\n\n        if (!range || inNavigator || !selection) {\n            return;\n        }\n\n        if (select.from && select.to) {\n            duration = toTime(select.to) - toTime(select.from);\n        } else {\n            duration = toTime(selection.options.to) - toTime(selection.options.from);\n        }\n\n        var from = dataviz.toDate(dataviz.limitValue(\n            toTime(range.min),\n            naviRange.min, toTime(naviRange.max) - duration\n        ));\n\n        var to = dataviz.toDate(dataviz.limitValue(\n            toTime(from) + duration,\n            toTime(naviRange.min) + duration, naviRange.max\n        ));\n\n        this.options.select = { from: from, to: to };\n\n        if (this.options.liveDrag) {\n            this.filterAxes();\n            this.redrawSlaves();\n        }\n\n        selection.set(from, to);\n\n        this.showHint(from, to);\n    },\n\n    _dragEnd: function() {\n        this.filterAxes();\n        this.filter();\n        this.redrawSlaves();\n\n        if (this.hint) {\n            this.hint.hide();\n        }\n    },\n\n    readSelection: function() {\n        var ref = this;\n        var ref_selection_options = ref.selection.options;\n        var from = ref_selection_options.from;\n        var to = ref_selection_options.to;\n        var select = ref.options.select;\n\n        select.from = from;\n        select.to = to;\n    },\n\n    filterAxes: function() {\n        var ref = this;\n        var select = ref.options.select; if (select === void 0) { select = { }; }\n        var chart = ref.chart;\n        var allAxes = chart.options.categoryAxis;\n        var from = select.from;\n        var to = select.to;\n\n        for (var idx = 0; idx < allAxes.length; idx++) {\n            var axis = allAxes[idx];\n            if (axis.pane !== NAVIGATOR_PANE) {\n                axis.min = from;\n                axis.max = to;\n            }\n        }\n    },\n\n    filter: function() {\n        var ref = this;\n        var chart = ref.chart;\n        var select = ref.options.select;\n\n        if (!chart.requiresHandlers([ \"navigatorFilter\" ])) {\n            return;\n        }\n\n        var mainAxis = this.mainAxis();\n        var args = {\n            from: select.from,\n            to: select.to\n        };\n\n        if (mainAxis.options.type !== 'category') {\n            var axisOptions = new dataviz.DateCategoryAxis(deepExtend({\n                baseUnit: \"fit\"\n            }, chart.options.categoryAxis[0], {\n                categories: [ select.from, select.to ]\n            }), chart.chartService).options;\n\n            args.from = dataviz.addDuration(axisOptions.min, -axisOptions.baseUnitStep, axisOptions.baseUnit);\n            args.to = dataviz.addDuration(axisOptions.max, axisOptions.baseUnitStep, axisOptions.baseUnit);\n        }\n\n        this.chart.trigger(\"navigatorFilter\", args);\n    },\n\n    _zoom: function(e) {\n        var ref = this;\n        var axis = ref.chart._plotArea.categoryAxis;\n        var selection = ref.selection;\n        var ref_options = ref.options;\n        var select = ref_options.select;\n        var liveDrag = ref_options.liveDrag;\n        var mainAxis = this.mainAxis();\n        var delta = e.delta;\n\n        if (!selection) {\n            return;\n        }\n\n        var fromIx = mainAxis.categoryIndex(selection.options.from);\n        var toIx = mainAxis.categoryIndex(selection.options.to);\n        var coords = this.chart._eventCoordinates(e.originalEvent);\n\n        e.originalEvent.preventDefault();\n\n        if (Math.abs(delta) > 1) {\n            delta *= ZOOM_ACCELERATION;\n        }\n\n        if (toIx - fromIx > 1) {\n            selection.zoom(delta, coords);\n            this.readSelection();\n        } else {\n            axis.options.min = select.from;\n            select.from = axis.scaleRange(-e.delta * this.chart._mousewheelZoomRate(), coords).min;\n        }\n\n        if (liveDrag) {\n            this.filterAxes();\n            this.redrawSlaves();\n        }\n\n        selection.set(select.from, select.to);\n\n        this.showHint(this.options.select.from, this.options.select.to);\n    },\n\n    _zoomEnd: function(e) {\n        this._dragEnd(e);\n    },\n\n    showHint: function(from, to) {\n        var plotArea = this.chart._plotArea;\n\n        if (this.hint) {\n            this.hint.show(from, to, plotArea.backgroundBox());\n        }\n    },\n\n    _selectStart: function(e) {\n        return this.chart._selectStart(e);\n    },\n\n    _select: function(e) {\n        this.showHint(e.from, e.to);\n\n        return this.chart._select(e);\n    },\n\n    _selectEnd: function(e) {\n        if (this.hint) {\n            this.hint.hide();\n        }\n\n        this.readSelection();\n        this.filterAxes();\n        this.filter();\n        this.redrawSlaves();\n\n        return this.chart._selectEnd(e);\n    },\n\n    mainAxis: function() {\n        var plotArea = this.chart._plotArea;\n\n        if (plotArea) {\n            return plotArea.namedCategoryAxes[NAVIGATOR_AXIS];\n        }\n    },\n\n    select: function(from, to) {\n        var select = this.options.select;\n\n        if (from && to) {\n            select.from = this.parseDate(from);\n            select.to = this.parseDate(to);\n\n            this.filterAxes();\n            this.filter();\n            this.redrawSlaves();\n\n            this.selection.set(from, to);\n        }\n\n        return {\n            from: select.from,\n            to: select.to\n        };\n    }\n});\n\nNavigator.setup = function(options, themeOptions) {\n    if (options === void 0) { options = {}; }\n    if (themeOptions === void 0) { themeOptions = {}; }\n\n    if (options.__navi) {\n        return;\n    }\n    options.__navi = true;\n\n    var naviOptions = deepExtend({}, themeOptions.navigator, options.navigator);\n    var panes = options.panes = [].concat(options.panes);\n    var paneOptions = deepExtend({}, naviOptions.pane, { name: NAVIGATOR_PANE });\n\n    if (!naviOptions.visible) {\n        paneOptions.visible = false;\n        paneOptions.height = 0.1;\n    }\n\n    if (options.navigator.position !== 'top') {\n        panes.push(paneOptions);\n    } else {\n        panes.unshift(paneOptions);\n    }\n\n    panes.forEach(function (pane) {\n        pane.name = pane.name || DEFAULT_PANE;\n    });\n\n    Navigator.attachAxes(options, naviOptions);\n    Navigator.attachSeries(options, naviOptions, themeOptions);\n};\n\nNavigator.attachAxes = function(options, naviOptions) {\n    var series = naviOptions.series || [];\n    var categoryAxes = options.categoryAxis = [].concat(options.categoryAxis);\n    var valueAxes = options.valueAxis = [].concat(options.valueAxis);\n    var allAxes = categoryAxes.concat(valueAxes);\n    allAxes.forEach(function (axis) {\n        axis.pane = axis.pane || DEFAULT_PANE;\n    });\n\n    var equallySpacedSeries = dataviz.filterSeriesByType(series, datavizConstants.EQUALLY_SPACED_SERIES);\n    var justifyAxis = equallySpacedSeries.length === 0;\n\n    var base = deepExtend({\n        type: \"date\",\n        pane: NAVIGATOR_PANE,\n        roundToBaseUnit: !justifyAxis,\n        justified: justifyAxis,\n        _collapse: false,\n        majorTicks: { visible: true },\n        tooltip: { visible: false },\n        labels: { step: 1 },\n        autoBind: naviOptions.autoBindElements,\n        autoBaseUnitSteps: {\n            minutes: [ 1 ],\n            hours: [ 1, 2 ],\n            days: [ 1, 2 ],\n            weeks: [],\n            months: [ 1 ],\n            years: [ 1 ]\n        }\n    });\n    var user = naviOptions.categoryAxis;\n\n    categoryAxes.push(\n        deepExtend({}, base, {\n            maxDateGroups: 200\n        }, user, {\n            name: NAVIGATOR_AXIS,\n            title: null,\n            baseUnit: \"fit\",\n            baseUnitStep: \"auto\",\n            labels: { visible: false },\n            majorTicks: { visible: false }\n        }), deepExtend({}, base, user, {\n            name: NAVIGATOR_AXIS + \"_labels\",\n            maxDateGroups: 20,\n            baseUnitStep: \"auto\",\n            labels: { position: \"\" },\n            plotBands: [],\n            autoBaseUnitSteps: {\n                minutes: []\n            },\n            _overlap: true\n        }), deepExtend({}, base, user, {\n            name: NAVIGATOR_AXIS + \"_ticks\",\n            maxDateGroups: 200,\n            majorTicks: {\n                width: 0.5\n            },\n            plotBands: [],\n            title: null,\n            labels: { visible: false, mirror: true },\n            _overlap: true\n        })\n    );\n\n    valueAxes.push(deepExtend({\n        name: NAVIGATOR_AXIS,\n        pane: NAVIGATOR_PANE,\n        majorGridLines: {\n            visible: false\n        },\n        visible: false\n    }, naviOptions.valueAxis));\n};\n\nNavigator.attachSeries = function(options, naviOptions, themeOptions) {\n    var series = options.series = options.series || [];\n    var navigatorSeries = [].concat(naviOptions.series || []);\n    var seriesColors = themeOptions.seriesColors;\n    var defaults = naviOptions.seriesDefaults;\n\n    for (var idx = 0; idx < navigatorSeries.length; idx++) {\n        series.push(\n            deepExtend({\n                color: seriesColors[idx % seriesColors.length],\n                categoryField: naviOptions.dateField,\n                visibleInLegend: false,\n                tooltip: {\n                    visible: false\n                }\n            }, defaults, navigatorSeries[idx], {\n                axis: NAVIGATOR_AXIS,\n                categoryAxis: NAVIGATOR_AXIS,\n                autoBind: naviOptions.autoBindElements\n            })\n        );\n    }\n};\n\nfunction ClonedObject() { }\nfunction clone(obj) {\n    ClonedObject.prototype = obj;\n    return new ClonedObject();\n}\n\nvar AUTO_CATEGORY_WIDTH = 28;\n\nvar StockChart = Chart.extend({\n    applyDefaults: function(options, themeOptions) {\n        var width = dataviz.elementSize(this.element).width || datavizConstants.DEFAULT_WIDTH;\n        var theme = themeOptions;\n\n        var stockDefaults = {\n            seriesDefaults: {\n                categoryField: options.dateField\n            },\n            axisDefaults: {\n                categoryAxis: {\n                    name: \"default\",\n                    majorGridLines: {\n                        visible: false\n                    },\n                    labels: {\n                        step: 2\n                    },\n                    majorTicks: {\n                        visible: false\n                    },\n                    maxDateGroups: Math.floor(width / AUTO_CATEGORY_WIDTH)\n                }\n            }\n        };\n\n        if (theme) {\n            theme = deepExtend({}, theme, stockDefaults);\n        }\n\n        Navigator.setup(options, theme);\n\n        Chart.fn.applyDefaults.call(this, options, theme);\n    },\n\n    _setElementClass: function(element) {\n        dataviz.addClass(element, 'k-chart k-stockchart');\n    },\n\n    setOptions: function(options) {\n        this.destroyNavigator();\n        Chart.fn.setOptions.call(this, options);\n    },\n\n    noTransitionsRedraw: function() {\n        var transitions = this.options.transitions;\n\n        this.options.transitions = false;\n        this._fullRedraw();\n        this.options.transitions = transitions;\n    },\n\n    _resize: function() {\n        this.noTransitionsRedraw();\n    },\n\n    _redraw: function() {\n        var navigator = this.navigator;\n\n        if (!this._dirty() && navigator && navigator.options.partialRedraw) {\n            navigator.redrawSlaves();\n        } else {\n            this._fullRedraw();\n        }\n    },\n\n    _dirty: function() {\n        var options = this.options;\n        var series = [].concat(options.series, options.navigator.series);\n        var seriesCount = dataviz.grep(series, function(s) { return s && s.visible; }).length;\n        var dirty = this._seriesCount !== seriesCount;\n        this._seriesCount = seriesCount;\n\n        return dirty;\n    },\n\n    _fullRedraw: function() {\n        var navigator = this.navigator;\n\n        if (!navigator) {\n            navigator = this.navigator = new Navigator(this);\n            this.trigger(\"navigatorCreated\", { navigator: navigator });\n        }\n\n        navigator.clean();\n        navigator.setRange();\n\n        Chart.fn._redraw.call(this);\n\n        navigator.initSelection();\n    },\n\n    _trackSharedTooltip: function(coords) {\n        var plotArea = this._plotArea;\n        var pane = plotArea.paneByPoint(coords);\n\n        if (pane && pane.options.name === NAVIGATOR_PANE) {\n            this._unsetActivePoint();\n        } else {\n            Chart.fn._trackSharedTooltip.call(this, coords);\n        }\n    },\n\n    bindCategories: function() {\n        Chart.fn.bindCategories.call(this);\n        this.copyNavigatorCategories();\n    },\n\n    copyNavigatorCategories: function() {\n        var definitions = [].concat(this.options.categoryAxis);\n        var categories;\n\n        for (var axisIx = 0; axisIx < definitions.length; axisIx++) {\n            var axis = definitions[axisIx];\n            if (axis.name === NAVIGATOR_AXIS) {\n                categories = axis.categories;\n            } else if (categories && axis.pane === NAVIGATOR_PANE) {\n                axis.categories = categories;\n            }\n        }\n    },\n\n    destroyNavigator: function() {\n        if (this.navigator) {\n            this.navigator.destroy();\n            this.navigator = null;\n        }\n    },\n\n    destroy: function() {\n        this.destroyNavigator();\n        Chart.fn.destroy.call(this);\n    },\n\n    _stopChartHandlers: function(e) {\n        var coords = this._eventCoordinates(e);\n        var pane = this._plotArea.paneByPoint(coords);\n\n        return Chart.fn._stopChartHandlers.call(this, e) || (pane && pane.options.name === NAVIGATOR_PANE);\n    },\n\n    _toggleDragZoomEvents: function() {\n        if (!this._dragZoomEnabled) {\n            this.element.style.touchAction = \"none\";\n\n            this._dragZoomEnabled = true;\n        }\n    }\n});\n\ndataviz.setDefaultOptions(StockChart, {\n    dateField: \"date\",\n    axisDefaults: {\n        categoryAxis: {\n            type: \"date\",\n            baseUnit: \"fit\",\n            justified: true\n        },\n        valueAxis: {\n            narrowRange: true,\n            labels: {\n                format: \"C\"\n            }\n        }\n    },\n    navigator: {\n        select: {},\n        seriesDefaults: {\n            markers: {\n                visible: false\n            },\n            tooltip: {\n                visible: false\n            },\n            highlight: {\n                visible: false\n            },\n            line: {\n                width: 2\n            }\n        },\n        hint: {},\n        visible: true\n    },\n    tooltip: {\n        visible: true\n    },\n    legend: {\n        visible: false\n    }\n});\n\nkendo.deepExtend(kendo.dataviz, {\n    constants: constants,\n    Navigator: Navigator,\n    NavigatorHint: NavigatorHint,\n    StockChart: StockChart\n});\n\n})();\n\n(function($) {\n\n    var kendo = window.kendo;\n    var dataviz = kendo.dataviz;\n    var ChartInstanceObserver = dataviz.ChartInstanceObserver;\n    var Chart = dataviz.ui.Chart;\n    var KendoStockChart = dataviz.StockChart;\n    var constants = dataviz.constants;\n    var NAVIGATOR_AXIS = constants.NAVIGATOR_AXIS;\n    var NAVIGATOR_PANE = constants.NAVIGATOR_PANE;\n    var deepExtend = kendo.deepExtend;\n    var defined = dataviz.defined;\n\n    var CHANGE = \"change\";\n\n    var StockInstanceObserver = ChartInstanceObserver.extend({\n        handlerMap: {\n            navigatorFilter: '_onNavigatorFilter',\n            navigatorCreated: '_onNavigatorCreated'\n        }\n    });\n\n    var StockChart = Chart.extend({\n\n        options: {\n            name: \"StockChart\",\n            dateField: \"date\",\n            axisDefaults: {\n                categoryAxis: {\n                    type: \"date\",\n                    baseUnit: \"fit\",\n                    justified: true\n                },\n                valueAxis: {\n                    narrowRange: true,\n                    labels: {\n                        format: \"C\"\n                    }\n                }\n            },\n            navigator: {\n                select: {},\n                seriesDefaults: {\n                    markers: {\n                        visible: false\n                    },\n                    tooltip: {\n                        visible: true,\n                        template: ({ category }) => kendo.toString(category, 'd')\n                    },\n                    line: {\n                        width: 2\n                    }\n                },\n                hint: {},\n                visible: true\n            },\n            tooltip: {\n                visible: true\n            },\n            legend: {\n                visible: false\n            },\n            persistSeriesVisibility: true\n        },\n\n        _createChart: function(options, themeOptions) {\n            this._initNavigatorOptions(options);\n            this._instance = new KendoStockChart(this.element[0], options, themeOptions, {\n                observer: new StockInstanceObserver(this),\n                sender: this,\n                rtl: this._isRtl()\n            });\n        },\n\n        _initNavigatorOptions: function(options) {\n            var navigatorOptions = options.navigator || {};\n            var support = kendo.support;\n            var isTouch = support.touch;\n            var isFirefox = support.browser.mozilla;\n\n            deepExtend(navigatorOptions, {\n                autoBindElements: !navigatorOptions.dataSource,\n                partialRedraw: navigatorOptions.dataSource,\n                liveDrag: !isTouch && !isFirefox\n            });\n        },\n\n        _initDataSource: function(userOptions) {\n            var options = userOptions || {},\n                dataSource = options.dataSource,\n                hasServerFiltering = dataSource && dataSource.serverFiltering,\n                mainAxis = [].concat(options.categoryAxis)[0],\n                naviOptions = options.navigator || {},\n                select = naviOptions.select,\n                hasSelect = select && select.from && select.to;\n\n            if (hasServerFiltering && hasSelect) {\n                var filter = [].concat(dataSource.filter || []);\n\n                var from = kendo.parseDate(select.from);\n                var to = kendo.parseDate(select.to);\n                var dummyAxis = new dataviz.DateCategoryAxis(deepExtend({\n                    baseUnit: \"fit\"\n                }, mainAxis, {\n                    categories: [from, to]\n                }), kendo);\n\n                dataSource.filter = buildFilter(dummyAxis.range().min, to).concat(filter);\n            }\n\n            Chart.fn._initDataSource.call(this, userOptions);\n        },\n\n        _onNavigatorCreated: function(e) {\n            this._instance = e.sender;\n            this.options = e.sender.options;\n            this._navigator = this.navigator = e.navigator;\n            this._initNavigatorDataSource();\n        },\n\n        _initNavigatorDataSource: function() {\n            var navigatorOptions = this.options.navigator;\n            var autoBind = navigatorOptions.autoBind;\n            var dsOptions = navigatorOptions.dataSource;\n\n            if (dsOptions) {\n                this._navigatorDataChangedHandler = this._navigatorDataChangedHandler || this._onNavigatorDataChanged.bind(this);\n                this._navigatorDataSource = kendo.data.DataSource\n                    .create(dsOptions)\n                    .bind(CHANGE, this._navigatorDataChangedHandler);\n\n                if (!defined(autoBind)) {\n                   autoBind = this.options.autoBind;\n                }\n\n                if (autoBind) {\n                    this._navigatorDataSource.fetch();\n                }\n            }\n        },\n\n        _bindNavigatorSeries: function(series, data) {\n            var seriesIx, currentSeries,\n                seriesLength = series.length;\n\n            for (seriesIx = 0; seriesIx < seriesLength; seriesIx++) {\n                currentSeries = series[seriesIx];\n\n                if (currentSeries.axis == NAVIGATOR_AXIS && this._isBindable(currentSeries)) {\n                    currentSeries.data = data;\n                }\n            }\n        },\n\n        _onNavigatorDataChanged: function() {\n            var chart = this,\n                instance = chart._instance,\n                categoryAxes = chart.options.categoryAxis,\n                axisIx,\n                axesLength = categoryAxes.length,\n                data = chart._navigatorDataSource.view(),\n                currentAxis,\n                naviCategories;\n\n            this._bindNavigatorSeries(chart.options.series, data);\n            if (chart._sourceSeries) {\n                this._bindNavigatorSeries(chart._sourceSeries, data);\n            }\n\n            for (axisIx = 0; axisIx < axesLength; axisIx++) {\n                currentAxis = categoryAxes[axisIx];\n\n                if (currentAxis.pane == NAVIGATOR_PANE) {\n                    if (currentAxis.name == NAVIGATOR_AXIS) {\n                        chart._bindCategoryAxis(currentAxis, data, axisIx);\n                        naviCategories = currentAxis.categories;\n                    } else {\n                        currentAxis.categories = naviCategories;\n                    }\n                }\n            }\n\n            if (instance._model) {\n                var navigator = this.navigator;\n                navigator.redraw();\n                navigator.setRange();\n\n                if (!chart.options.dataSource || (chart.options.dataSource && chart._dataBound)) {\n                    navigator.redrawSlaves();\n                }\n            }\n        },\n\n        _bindCategories: function() {\n            Chart.fn._bindCategories.call(this);\n            if (this._instance) {\n                this._instance.copyNavigatorCategories();\n            }\n        },\n\n        _onDataChanged: function() {\n            Chart.fn._onDataChanged.call(this);\n\n            this._dataBound = true;\n        },\n\n        setOptions: function(options) {\n            this._removeNavigatorDataSource();\n            this._initNavigatorOptions(options);\n            this._instance.destroyNavigator();\n            Chart.fn.setOptions.call(this, options);\n        },\n\n        _onNavigatorFilter: function(e) {\n            this.dataSource.filter(buildFilter(e.from, e.to));\n        },\n\n        requiresHandlers: function(names) {\n            if (dataviz.inArray('navigatorFilter', names)) {\n                var dataSource = this.dataSource;\n                var hasServerFiltering = dataSource && dataSource.options.serverFiltering;\n                return hasServerFiltering && this.options.navigator.dataSource;\n            }\n\n            return Chart.fn.requiresHandlers.call(this, names);\n        },\n\n        _removeNavigatorDataSource: function() {\n            var navigatorDataSource = this._navigatorDataSource;\n            if (navigatorDataSource) {\n                navigatorDataSource.unbind(CHANGE, this._navigatorDataChangedHandler);\n                delete this._navigatorDataSource;\n            }\n        },\n\n        destroy: function() {\n            Chart.fn.destroy.call(this);\n            this._removeNavigatorDataSource();\n        }\n    });\n\n    dataviz.ui.plugin(StockChart);\n\n    function buildFilter(from, to) {\n        return [{\n            field: \"Date\", operator: \"gte\", value: from\n        }, {\n            field: \"Date\", operator: \"lt\", value: to\n        }];\n    }\n\n})(window.kendo.jQuery);\n\nvar __meta__ = {\n    id: \"dataviz.stockchart\",\n    name: \"StockChart\",\n    category: \"dataviz\",\n    description: \"StockChart widget and associated financial series.\",\n    depends: [ \"dataviz.chart\" ]\n};\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}