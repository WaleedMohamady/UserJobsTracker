{"version":3,"sources":["raw-mjs/kendo.splitter.js"],"names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","ui","keys","extend","Widget","pxUnitsRegex","percentageUnitsRegex","NS","EXPAND","COLLAPSE","CONTENTLOAD","ERROR","LAYOUTCHANGE","HORIZONTAL","VERTICAL","CLICK","PANE","FOCUSED","KPANE","PANECLASS","isPercentageSize","size","test","isPixelSize","isFluid","calculateSize","total","output","parseInt","Math","floor","panePropertyAccessor","propertyName","triggersResize","pane","value","paneConfig","this","element","find","data","arguments","length","options","resize","Splitter","init","isHorizontal","that","fn","call","wrapper","orientation","toLowerCase","_dimension","_keys","decrease","LEFT","UP","increase","RIGHT","DOWN","_resizeStep","_marker","guid","substring","_initPanes","resizing","PaneResizing","triggerHandler","events","_addOverlays","_panes","append","_removeOverlays","children","remove","_attachEvents","on","_keydown","bind","e","currentTarget","focus","addClass","removeClass","end","_togglePane","_arrowClick","document","_detachEvents","off","clickMoveClick","panes","destroy","key","keyCode","target","navigationKeys","ctrlKey","isResizing","_triggerAction","move","preventDefault","HOME","prev","collapse","END","expand","ENTER","panesConfig","each","i","nodeName","_initPane","config","attr","toggleClass","scrollable","ajaxRequest","url","contentUrl","isLocalUrl","jQuery","ajax","type","dataType","success","html","trigger","error","xhr","status","shouldExecute","collapsed","collapsible","arrow","closest","is","next","arrowType","parent","_updateSplitBar","splitbar","previousPane","nextPane","previousPaneEl","catIconIf","actionType","iconType","condition","icon","draggable","resizable","prevCollapsible","prevCollapsed","nextCollapsible","nextCollapsed","previousPaneId","labelId","label","removeAttr","_updateSplitBars","prevAll","first","nextAll","_removeSplitBars","_resetAriaValueNow","splitBars","panesSizes","valueNow","joinDimension","round","setAttribute","_resize","splitBarsCount","sizingProperty","totalSize","_suppressResize","slice","after","sizedPanesWidth","freeSizedPanes","css","position","top","collapsedSize","add","push","freeSizePanesCount","freeSizePaneWidth","eq","forEach","sum","alternateSizingProperty","positioningProperty","sizingDomProperty","lastNonCollapsedPane","filter","last","child","tagName","style","toggle","_addPane","idx","paneElement","splice","appendTo","insertBefore","referencePane","index","insertAfter","min","max","plugin","verticalDefaults","mousePositioningProperty","horizontalDefaults","splitter","handle","owner","_element","_resizable","Resizable","hint","_createHint","start","_start","_max","_min","invalidClass","resizeend","_stop","prototype","press","delta","pressed","initialTarget","previousPaneConfig","nextPaneConfig","prevBoundary","nextBoundary","toPx","val","sender","cancel","prevMinSize","prevMaxSize","nextMinSize","nextMaxSize","_maxPosition","_minPosition","ESC","ghostPosition","previousPaneNewSize","nextPaneNewSize","fluidPanesCount","kendo$1"],"mappings":"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","file":"kendo.splitter.js","sourcesContent":["import './kendo.resizable.js';\nimport './kendo.icons.js';\n\nvar __meta__ = {\n    id: \"splitter\",\n    name: \"Splitter\",\n    category: \"web\",\n    description: \"The Splitter widget provides an easy way to create a dynamic layout of resizable and collapsible panes.\",\n    depends: [ \"resizable\", \"icons\" ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        keys = kendo.keys,\n        extend = $.extend,\n        Widget = ui.Widget,\n        pxUnitsRegex = /^\\d+(\\.\\d+)?px$/i,\n        percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n        NS = \".kendoSplitter\",\n        EXPAND = \"expand\",\n        COLLAPSE = \"collapse\",\n        CONTENTLOAD = \"contentLoad\",\n        ERROR = \"error\",\n        RESIZE = \"resize\",\n        LAYOUTCHANGE = \"layoutChange\",\n        HORIZONTAL = \"horizontal\",\n        VERTICAL = \"vertical\",\n        MOUSEENTER = \"mouseenter\",\n        CLICK = \"click\",\n        PANE = \"pane\",\n        MOUSELEAVE = \"mouseleave\",\n        FOCUSED = \"k-focus\",\n        KPANE = \"k-\" + PANE,\n        PANECLASS = \".\" + KPANE,\n        TABINDEX = \"tabindex\",\n        ARIA_VALUEMIN = \"aria-valuemin\",\n        ARIA_VALUEMAX = \"aria-valuemax\",\n        ARIA_VALUENOW = \"aria-valuenow\",\n        ARIA_CONTROLS = \"aria-controls\",\n        ARIA_LABEL = \"aria-label\",\n        ARIA_LABELLEDBY = \"aria-labelledby\",\n        ARIA_ORIENTATION = \"aria-orientation\";\n\n    function isPercentageSize(size) {\n        return percentageUnitsRegex.test(size);\n    }\n\n    function isPixelSize(size) {\n        return pxUnitsRegex.test(size) || /^\\d+$/.test(size);\n    }\n\n    function isFluid(size) {\n        return !isPercentageSize(size) && !isPixelSize(size);\n    }\n\n    function calculateSize(size, total) {\n        var output = parseInt(size, 10);\n\n        if (isPercentageSize(size)) {\n            output = Math.floor(output * total / 100);\n        }\n\n        return output;\n    }\n\n    function panePropertyAccessor(propertyName, triggersResize) {\n        return function(pane, value) {\n            var paneConfig = this.element.find(pane).data(PANE);\n\n            if (arguments.length == 1) {\n                return paneConfig[propertyName];\n            }\n\n            paneConfig[propertyName] = value;\n\n            if (triggersResize) {\n                var splitter = this.element.data(\"kendo\" + this.options.name);\n                splitter.resize(true);\n            }\n        };\n    }\n\n    var Splitter = Widget.extend({\n        init: function(element, options) {\n            var that = this,\n                isHorizontal;\n\n            Widget.fn.init.call(that, element, options);\n\n            that.wrapper = that.element;\n\n            if (that.options.orientation) {\n                isHorizontal = that.options.orientation.toLowerCase() != VERTICAL;\n            }\n\n            that.orientation = isHorizontal ? HORIZONTAL : VERTICAL;\n            that._dimension = isHorizontal ? \"width\" : \"height\";\n            that._keys = {\n                decrease: isHorizontal ? keys.LEFT : keys.UP,\n                increase: isHorizontal ? keys.RIGHT : keys.DOWN\n            };\n\n            that._resizeStep = 10;\n\n            that._marker = kendo.guid().substring(0, 8);\n\n            that._initPanes();\n\n            that.resizing = new PaneResizing(that);\n\n            that.element.triggerHandler(\"init\" + NS);\n        },\n        events: [\n            EXPAND,\n            COLLAPSE,\n            CONTENTLOAD,\n            ERROR,\n            RESIZE,\n            LAYOUTCHANGE\n        ],\n\n        _addOverlays: function() {\n            this._panes().append(\"<div class='k-splitter-overlay k-overlay' />\");\n        },\n\n        _removeOverlays: function() {\n            this._panes().children(\".k-splitter-overlay\").remove();\n        },\n\n        _attachEvents: function() {\n            var that = this,\n                orientation = that.options.orientation;\n\n            // do not use delegated events to increase performance of nested elements\n            that.element\n                .children(\".k-splitbar-draggable-\" + orientation)\n                    .on(\"keydown\" + NS, that._keydown.bind(that))\n                    .on(\"mousedown\" + NS, function(e) { e.currentTarget.focus(); })\n                    .on(\"focus\" + NS, function(e) { $(e.currentTarget).addClass(FOCUSED); })\n                    .on(\"blur\" + NS, function(e) { $(e.currentTarget).removeClass(FOCUSED);\n                        if (that.resizing) {\n                            that.resizing.end();\n                        }\n                    })\n                    .on(MOUSEENTER + NS, function() { $(this).addClass(\"k-splitbar-\" + that.orientation + \"-hover\"); })\n                    .on(MOUSELEAVE + NS, function() { $(this).removeClass(\"k-splitbar-\" + that.orientation + \"-hover\"); })\n                    .on(\"mousedown\" + NS, that._addOverlays.bind(that))\n                .end()\n                .children(\".k-splitbar\")\n                    .on(\"dblclick\" + NS, that._togglePane.bind(that))\n                    .children(\".k-collapse-next, .k-collapse-prev\").on(CLICK + NS, that._arrowClick(COLLAPSE)).end()\n                    .children(\".k-expand-next, .k-expand-prev\").on(CLICK + NS, that._arrowClick(EXPAND)).end()\n                .end();\n\n            $(window).on(\"resize\" + NS + that._marker, that.resize.bind(that, false));\n            $(document).on(\"mouseup\" + NS + that._marker, that._removeOverlays.bind(that));\n        },\n\n        _detachEvents: function() {\n            var that = this;\n\n            that.element\n                .children(\".k-splitbar-draggable-\" + that.orientation).off(NS).end()\n                .children(\".k-splitbar\").off(\"dblclick\" + NS)\n                    .children(\".k-collapse-next, .k-collapse-prev, .k-expand-next, .k-expand-prev\").off(NS);\n\n            $(window).off(NS + that._marker);\n            $(document).off(NS + that._marker);\n        },\n\n        options: {\n            name: \"Splitter\",\n            clickMoveClick: true,\n            orientation: HORIZONTAL,\n            panes: []\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            this._detachEvents();\n\n            if (this.resizing) {\n                this.resizing.destroy();\n            }\n\n            kendo.destroy(this.element);\n\n            this.wrapper = this.element = null;\n        },\n\n        _keydown: function(e) {\n            var that = this,\n                key = e.keyCode,\n                resizing = that.resizing,\n                target = $(e.currentTarget),\n                navigationKeys = that._keys,\n                increase = key === navigationKeys.increase,\n                decrease = key === navigationKeys.decrease,\n                pane;\n\n            if (increase || decrease) {\n                if (e.ctrlKey) {\n                    pane = target[decrease ? \"next\" : \"prev\"]();\n\n                    if (resizing && resizing.isResizing()) {\n                        resizing.end();\n                    }\n\n                    if (!pane[that._dimension]()) {\n                        that._triggerAction(EXPAND, pane);\n                    } else {\n                        that._triggerAction(COLLAPSE, target[decrease ? \"prev\" : \"next\"]());\n                    }\n                } else if (resizing) {\n                    resizing.move((decrease ? -1 : 1) * that._resizeStep, target);\n                }\n                e.preventDefault();\n            } else if (key === keys.HOME) {\n                pane = target.prev();\n                that.collapse(pane);\n                e.preventDefault();\n            } else if (key === keys.END) {\n                pane = target.prev();\n                that.expand(pane);\n                e.preventDefault();\n            } else if (key === keys.ENTER && resizing) {\n                resizing.end();\n                e.preventDefault();\n            }\n        },\n\n        _initPanes: function() {\n            var panesConfig = this.options.panes || [];\n            var that = this;\n\n            this.element\n                .addClass(\"k-splitter\")\n                .children()\n                    .each(function(i, pane) {\n                        if (pane.nodeName.toLowerCase() != \"script\") {\n                            that._initPane(pane, panesConfig[i]);\n                        }\n                    });\n\n            this.resize();\n        },\n\n        _initPane: function(pane, config) {\n            pane = $(pane)\n                .attr(\"role\", \"group\")\n                .addClass(KPANE);\n\n            pane.data(PANE, config ? config : {})\n                .toggleClass(\"k-scrollable\", config ? config.scrollable !== false : true);\n\n            this.ajaxRequest(pane);\n        },\n\n        ajaxRequest: function(pane, url, data) {\n            var that = this,\n                paneConfig;\n\n            pane = that.element.find(pane);\n            paneConfig = pane.data(PANE);\n\n            url = url || paneConfig.contentUrl;\n\n            if (url) {\n                pane.append(\"<span class='k-icon k-i-loading k-pane-loading' />\");\n\n                if (kendo.isLocalUrl(url)) {\n                    jQuery.ajax({\n                        url: url,\n                        data: data || {},\n                        type: \"GET\",\n                        dataType: \"html\",\n                        success: function(data) {\n                            pane.html(data);\n\n                            that.trigger(CONTENTLOAD, { pane: pane[0] });\n                        },\n                        error: function(xhr, status) {\n                            that.trigger(ERROR, {\n                                pane: pane[0],\n                                status: status,\n                                xhr: xhr\n                            });\n                        }\n                    });\n                } else {\n                    pane.removeClass(\"k-scrollable\")\n                        .html(\"<iframe src='\" + url + \"' frameborder='0' class='k-content-frame'>\" +\n                                \"This page requires frames in order to show content\" +\n                              \"</iframe>\");\n                }\n            }\n        },\n\n        _triggerAction: function(type, pane) {\n            var paneConfig = pane.data(PANE);\n            var shouldExecute = (paneConfig.collapsed && type == EXPAND) || (!paneConfig.collapsed && type == COLLAPSE);\n\n            if (!paneConfig.collapsible) {\n                return;\n            }\n\n            if (shouldExecute && !this.trigger(type, { pane: pane[0] })) {\n                this[type](pane[0]);\n            }\n        },\n\n        _togglePane: function(e) {\n            var that = this,\n                target = $(e.target),\n                arrow;\n\n            if (target.closest(\".k-splitter\")[0] != that.element[0]) {\n                return;\n            }\n\n            arrow = target.children(\"span:not(.k-resize-handle)\");\n\n            if (arrow.length !== 1) {\n                return;\n            }\n\n            if (arrow.is(\".k-collapse-prev\")) {\n                that._triggerAction(COLLAPSE, target.prev());\n            } else if (arrow.is(\".k-collapse-next\")) {\n                that._triggerAction(COLLAPSE, target.next());\n            } else if (arrow.is(\".k-expand-prev\")) {\n                that._triggerAction(EXPAND, target.prev());\n            } else if (arrow.is(\".k-expand-next\")) {\n                that._triggerAction(EXPAND, target.next());\n            }\n        },\n        _arrowClick: function(arrowType) {\n            var that = this;\n\n            return function(e) {\n                var target = $(e.currentTarget),\n                    pane;\n\n                if (target.closest(\".k-splitter\")[0] != that.element[0]) {\n                    return;\n                }\n\n                if (target.is(\".k-\" + arrowType + \"-prev\")) {\n                    pane = target.parent().prev();\n                } else {\n                    pane = target.parent().next();\n                }\n                that._triggerAction(arrowType, pane);\n            };\n        },\n        _updateSplitBar: function(splitbar, previousPane, nextPane, previousPaneEl) {\n            var catIconIf = function(actionType, iconType, condition) {\n                    var icon = iconType ? ui.icon({ icon: iconType, size: \"xsmall\" }) : \"\";\n                    return condition ? \"<span class='k-\" + actionType + \"'>\" + icon + \"</span>\" : \"\";\n                },\n                orientation = this.orientation,\n                draggable = (previousPane.resizable !== false) && (nextPane.resizable !== false),\n                prevCollapsible = previousPane.collapsible,\n                prevCollapsed = previousPane.collapsed,\n                nextCollapsible = nextPane.collapsible,\n                nextCollapsed = nextPane.collapsed,\n                previousPaneId = previousPaneEl.attr(\"id\");\n\n            if (!previousPaneId) {\n                previousPaneId = kendo.guid();\n                previousPaneEl.attr(\"id\", previousPaneId);\n            }\n\n            splitbar.addClass(\"k-splitbar k-splitbar-\" + orientation)\n                    .attr(\"role\", \"separator\")\n                    .attr(ARIA_VALUEMIN, \"0\")\n                    .attr(ARIA_VALUEMAX, \"100\")\n                    .attr(ARIA_CONTROLS, previousPaneId)\n                    .removeClass(\"k-splitbar-\" + orientation + \"-hover\")\n                    .toggleClass(\"k-splitbar-draggable-\" + orientation,\n                        draggable && !prevCollapsed && !nextCollapsed)\n                    .toggleClass(\"k-splitbar-static-\" + orientation,\n                        !draggable && !prevCollapsible && !nextCollapsible)\n                    .html(\n                        catIconIf(\"collapse-prev\", \"caret-alt-up\", prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"collapse-prev\", \"caret-alt-left\", prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +\n                        catIconIf(\"expand-prev\", \"caret-alt-down\", prevCollapsible && prevCollapsed && !nextCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"expand-prev\", \"caret-alt-right\", prevCollapsible && prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +\n                        catIconIf(\"resize-handle\", null, draggable && orientation == VERTICAL) +\n                        catIconIf(\"resize-handle\", null, draggable && orientation == HORIZONTAL) +\n                        catIconIf(\"collapse-next\", \"caret-alt-down\", nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"collapse-next\", \"caret-alt-right\", nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == HORIZONTAL) +\n                        catIconIf(\"expand-next\", \"caret-alt-up\", nextCollapsible && nextCollapsed && !prevCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"expand-next\", \"caret-alt-left\", nextCollapsible && nextCollapsed && !prevCollapsed && orientation == HORIZONTAL)\n                    );\n\n            if (previousPane.labelId) {\n                splitbar.attr(ARIA_LABELLEDBY, previousPane.labelId);\n            } else if (previousPane.label) {\n                splitbar.attr(ARIA_LABEL, previousPane.label);\n            }\n\n            if (orientation == HORIZONTAL) {\n                splitbar.attr(ARIA_ORIENTATION, VERTICAL);\n            }\n\n            if (!draggable && !prevCollapsible && !nextCollapsible) {\n                splitbar.removeAttr(TABINDEX);\n            }\n        },\n        _updateSplitBars: function() {\n            var that = this;\n\n            this.element.children(\".k-splitbar\").each(function() {\n                var splitbar = $(this),\n                    previousPaneEl = splitbar.prevAll(PANECLASS).first(),\n                    previousPane = previousPaneEl.data(PANE),\n                    nextPane = splitbar.nextAll(PANECLASS).first().data(PANE);\n\n                if (!nextPane) {\n                    return;\n                }\n\n                that._updateSplitBar(splitbar, previousPane, nextPane, previousPaneEl);\n            });\n        },\n        _removeSplitBars: function() {\n            this.element.children(\".k-splitbar\").remove();\n        },\n        _panes: function() {\n            if (!this.element) {\n                return $();\n            }\n            return this.element.children(PANECLASS);\n        },\n\n        _resetAriaValueNow: function(splitBars, panesSizes) {\n            var i, splitbar, valueNow, joinDimension;\n\n            for (i = 0; i < splitBars.length; i++) {\n                joinDimension = (panesSizes[i] + panesSizes[i + 1]) || 1;\n                valueNow = Math.round(panesSizes[i] / joinDimension * 100);\n                splitbar = splitBars[i];\n                splitbar.setAttribute(ARIA_VALUENOW, valueNow);\n            }\n        },\n\n        _resize: function() {\n            var that = this,\n                element = that.element,\n                panes = element.children(PANECLASS),\n                isHorizontal = that.orientation == HORIZONTAL,\n                splitBars = element.children(\".k-splitbar\"),\n                splitBarsCount = splitBars.length,\n                sizingProperty = isHorizontal ? \"width\" : \"height\",\n                totalSize = element[sizingProperty](),\n                panesSizes = [];\n\n            that.wrapper.addClass(\"k-splitter-resizing\");\n\n            if (that._suppressResize) {\n                return;\n            }\n\n            if (splitBarsCount === 0) {\n                splitBarsCount = panes.length - 1;\n                panes.slice(0, splitBarsCount)\n                     .after(\"<div tabindex='0' class='k-splitbar' data-marker='\" + that._marker + \"' />\");\n\n                that._updateSplitBars();\n                splitBars = element.children(\".k-splitbar\");\n            } else {\n                that._updateSplitBars();\n            }\n\n            // discard splitbar sizes from total size\n            splitBars.each(function() {\n                totalSize -= this[isHorizontal ? \"offsetWidth\" : \"offsetHeight\"];\n            });\n\n            var sizedPanesWidth = 0,\n                sizedPanesCount = 0,\n                freeSizedPanes = $();\n\n            panes.css({ position: \"absolute\", top: 0 })\n                [sizingProperty](function() {\n                    var element = $(this),\n                        config = element.data(PANE) || {}, size;\n\n                    element.removeClass(\"k-collapsed\");\n                    if (config.collapsed) {\n                        size = config.collapsedSize ? calculateSize(config.collapsedSize, totalSize) : 0;\n                        element.css(\"overflow\", \"hidden\").addClass(\"k-collapsed\");\n                    } else if (isFluid(config.size)) {\n                        freeSizedPanes = freeSizedPanes.add(this);\n                        panesSizes.push(false);\n                        return;\n                    } else { // sized in px/%, not collapsed\n                        size = calculateSize(config.size, totalSize);\n                    }\n\n                    sizedPanesCount++;\n                    sizedPanesWidth += size;\n                    panesSizes.push(size);\n\n                    return size;\n                });\n\n            totalSize -= sizedPanesWidth;\n\n            var freeSizePanesCount = freeSizedPanes.length,\n                freeSizePaneWidth = Math.floor(totalSize / freeSizePanesCount);\n\n            freeSizedPanes\n                .slice(0, freeSizePanesCount - 1)\n                    .css(sizingProperty, freeSizePaneWidth)\n                .end()\n                .eq(freeSizePanesCount - 1)\n                    .css(sizingProperty, totalSize - (freeSizePanesCount - 1) * freeSizePaneWidth);\n\n            panesSizes.forEach(function(size, i) {\n                if (size === false) {\n                    panesSizes[i] = freeSizePaneWidth;\n                }\n            });\n\n            that._resetAriaValueNow(splitBars, panesSizes);\n\n            // arrange panes\n            var sum = 0,\n                alternateSizingProperty = isHorizontal ? \"height\" : \"width\",\n                positioningProperty = isHorizontal ? \"left\" : \"top\",\n                sizingDomProperty = isHorizontal ? \"offsetWidth\" : \"offsetHeight\";\n\n            if (freeSizePanesCount === 0) {\n                var lastNonCollapsedPane = panes.filter(function() {\n                    return !(($(this).data(PANE) || {}).collapsed);\n                }).last();\n\n                lastNonCollapsedPane[sizingProperty](totalSize + lastNonCollapsedPane[0][sizingDomProperty]);\n            }\n\n            element.children()\n                .css(alternateSizingProperty, element[alternateSizingProperty]())\n                .each(function(i, child) {\n                    if (child.tagName.toLowerCase() != \"script\") {\n                        child.style[positioningProperty] = Math.floor(sum) + \"px\";\n                        sum += child[sizingDomProperty];\n                    }\n                });\n\n            that._detachEvents();\n            that._attachEvents();\n\n            that.wrapper.removeClass(\"k-splitter-resizing\");\n\n            kendo.resize(panes);\n            that.trigger(LAYOUTCHANGE);\n        },\n\n        toggle: function(pane, expand) {\n            var that = this,\n                paneConfig;\n\n            pane = that.element.find(pane);\n            paneConfig = pane.data(PANE);\n\n            if (!expand && !paneConfig.collapsible) {\n                return;\n            }\n\n            if (arguments.length == 1) {\n                expand = paneConfig.collapsed === undefined$1 ? false : paneConfig.collapsed;\n            }\n\n            paneConfig.collapsed = !expand;\n\n            if (paneConfig.collapsed) {\n                pane.css(\"overflow\", \"hidden\");\n            } else {\n                pane.css(\"overflow\", \"\");\n            }\n\n            that.resize(true);\n        },\n\n        collapse: function(pane) {\n            this.toggle(pane, false);\n        },\n\n        expand: function(pane) {\n            this.toggle(pane, true);\n        },\n\n        _addPane: function(config, idx, paneElement) {\n            var that = this;\n\n            if (paneElement.length) {\n                that.options.panes.splice(idx, 0, config);\n                that._initPane(paneElement, config);\n\n                that._removeSplitBars();\n\n                that.resize(true);\n            }\n\n            return paneElement;\n        },\n\n        append: function(config) {\n            config = config || {};\n\n            var that = this,\n                paneElement = $(\"<div />\").appendTo(that.element);\n\n            return that._addPane(config, that.options.panes.length, paneElement);\n        },\n\n        insertBefore: function(config, referencePane) {\n            referencePane = $(referencePane);\n            config = config || {};\n\n            var that = this,\n                idx = that.wrapper.children(\".k-pane\").index(referencePane),\n                paneElement = $(\"<div />\").insertBefore($(referencePane));\n\n            return that._addPane(config, idx, paneElement);\n        },\n\n        insertAfter: function(config, referencePane) {\n            referencePane = $(referencePane);\n            config = config || {};\n\n            var that = this,\n                idx = that.wrapper.children(\".k-pane\").index(referencePane),\n                paneElement = $(\"<div />\").insertAfter($(referencePane));\n\n            return that._addPane(config, idx + 1, paneElement);\n        },\n\n        remove: function(pane) {\n            var that = this;\n            pane = that.wrapper.find(pane);\n\n            if (pane.length) {\n                kendo.destroy(pane);\n                pane.each(function(idx, element) {\n                    that.options.panes.splice(that.wrapper.children(\".k-pane\").index(element), 1);\n                    $(element).remove();\n                });\n\n                that._removeSplitBars();\n\n                if (that.options.panes.length) {\n                    that.resize(true);\n                }\n            }\n\n            return that;\n        },\n\n        size: panePropertyAccessor(\"size\", true),\n\n        min: panePropertyAccessor(\"min\"),\n\n        max: panePropertyAccessor(\"max\")\n    });\n\n    ui.plugin(Splitter);\n\n    var verticalDefaults = {\n            sizingProperty: \"height\",\n            sizingDomProperty: \"offsetHeight\",\n            alternateSizingProperty: \"width\",\n            positioningProperty: \"top\",\n            mousePositioningProperty: \"pageY\"\n        };\n\n    var horizontalDefaults = {\n            sizingProperty: \"width\",\n            sizingDomProperty: \"offsetWidth\",\n            alternateSizingProperty: \"height\",\n            positioningProperty: \"left\",\n            mousePositioningProperty: \"pageX\"\n        };\n\n    function PaneResizing(splitter) {\n        var that = this,\n            orientation = splitter.orientation,\n            handle = \".k-splitbar-draggable-\" + orientation + \"[data-marker=\" + splitter._marker + \"]\";\n\n        if (splitter.options.clickMoveClick) {\n            handle += \",.k-ghost-splitbar\";\n        }\n\n        that.owner = splitter;\n        that._element = splitter.element;\n        that.orientation = orientation;\n\n        extend(that, orientation === HORIZONTAL ? horizontalDefaults : verticalDefaults);\n\n        that._resizable = new kendo.ui.Resizable(splitter.element, {\n            orientation: orientation,\n            handle: handle,\n            clickMoveClick: splitter.options.clickMoveClick,\n            hint: that._createHint.bind(that),\n            start: that._start.bind(that),\n            max: that._max.bind(that),\n            min: that._min.bind(that),\n            invalidClass: \"k-restricted-size-\" + orientation,\n            resizeend: that._stop.bind(that)\n        });\n    }\n\n    PaneResizing.prototype = {\n        press: function(target) {\n            this._resizable.press(target);\n        },\n\n        move: function(delta, target) {\n            if (!this.pressed) {\n                this.press(target);\n                this.pressed = true;\n            }\n\n            if (!this._resizable.target) {\n                this._resizable.press(target);\n            }\n\n            this._resizable.move(delta);\n        },\n\n        end: function() {\n            this._resizable.end();\n            this.pressed = false;\n        },\n\n        destroy: function() {\n            this._resizable.destroy();\n            this._resizable = this._element = this.owner = null;\n        },\n\n        isResizing: function() {\n            return this._resizable.resizing;\n        },\n\n        _createHint: function(handle) {\n            var that = this;\n            return $(\"<div class='k-ghost-splitbar k-ghost-splitbar-\" + that.orientation + \"' />\")\n                        .css(that.alternateSizingProperty, handle[that.alternateSizingProperty]());\n        },\n\n        _start: function(e) {\n            var that = this,\n                splitbar = $(e.currentTarget),\n                previousPane = splitbar.prev(),\n                nextPane = splitbar.next();\n\n            if ($(e.initialTarget).closest(\".k-expand-next, .k-expand-prev, .k-collapse-next, .k-collapse-prev\").length > 0 ||\n                !nextPane.length ||\n                !previousPane.length) {\n                    e.preventDefault();\n                    return;\n            }\n\n            var previousPaneConfig = previousPane.data(PANE),\n                nextPaneConfig = nextPane.data(PANE),\n                prevBoundary = parseInt(previousPane[0].style[that.positioningProperty], 10),\n                nextBoundary = parseInt(nextPane[0].style[that.positioningProperty], 10) + nextPane[0][that.sizingDomProperty] - splitbar[0][that.sizingDomProperty],\n                totalSize = parseInt(that._element.css(that.sizingProperty), 10),\n                toPx = function(value) {\n                    var val = parseInt(value, 10);\n                    return (isPixelSize(value) ? val : (totalSize * val) / 100) || 0;\n                };\n\n            if (!previousPaneConfig || !nextPaneConfig) {\n                e.preventDefault();\n                e.sender.draggable.clickMoveClick.cancel();\n                that.owner.element.find(\".k-ghost-splitbar\").remove();\n                return;\n            }\n\n            var prevMinSize = toPx(previousPaneConfig.min),\n                prevMaxSize = toPx(previousPaneConfig.max) || nextBoundary - prevBoundary,\n                nextMinSize = toPx(nextPaneConfig.min),\n                nextMaxSize = toPx(nextPaneConfig.max) || nextBoundary - prevBoundary;\n\n            that.previousPane = previousPane;\n            that.nextPane = nextPane;\n            that._maxPosition = Math.min(nextBoundary - nextMinSize, prevBoundary + prevMaxSize);\n            that._minPosition = Math.max(prevBoundary + prevMinSize, nextBoundary - nextMaxSize);\n        },\n        _max: function() {\n            return this._maxPosition;\n        },\n        _min: function() {\n            return this._minPosition;\n        },\n        _stop: function(e) {\n            var that = this,\n                splitbar = $(e.currentTarget),\n                owner = that.owner;\n\n            owner._panes().children(\".k-splitter-overlay\").remove();\n\n            if (e.keyCode !== kendo.keys.ESC) {\n                var ghostPosition = e.position,\n                    previousPane = splitbar.prev(),\n                    nextPane = splitbar.next();\n\n                if (!nextPane.length || !previousPane.length) {\n                    return false;\n                }\n\n                var previousPaneConfig = previousPane.data(PANE),\n                    nextPaneConfig = nextPane.data(PANE),\n                    previousPaneNewSize = ghostPosition - parseInt(previousPane[0].style[that.positioningProperty], 10),\n                    nextPaneNewSize = parseInt(nextPane[0].style[that.positioningProperty], 10) + nextPane[0][that.sizingDomProperty] - ghostPosition - splitbar[0][that.sizingDomProperty],\n                    fluidPanesCount = that._element.children(PANECLASS).filter(function() { return isFluid($(this).data(PANE).size); }).length;\n\n                if (!isFluid(previousPaneConfig.size) || fluidPanesCount > 1) {\n                    if (isFluid(previousPaneConfig.size)) {\n                        fluidPanesCount--;\n                    }\n\n                    previousPaneConfig.size = previousPaneNewSize + \"px\";\n                }\n\n                if (!isFluid(nextPaneConfig.size) || fluidPanesCount > 1) {\n                    nextPaneConfig.size = nextPaneNewSize + \"px\";\n                }\n\n                owner.resize(true);\n            }\n\n            return false;\n        }\n    };\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}