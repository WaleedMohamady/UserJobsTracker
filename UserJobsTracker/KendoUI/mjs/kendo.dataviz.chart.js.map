{"version":3,"sources":["raw-mjs/kendo.dataviz.chart.js"],"names":["$","window","kendo","dataviz","Class","isNumber","datavizConstants","constants","MAX_VALUE","MIN_VALUE","VALUE","DATE","CENTER","TOP","BOTTOM","LEFT","WHITE","CIRCLE","X","Y","RIGHT","BLACK","COORD_PRECISION","END","START","DEFAULT_PRECISION","ARC","defined","getter","isArray","ChartElement","Point","Box","alignPathToPixel","setDefaultOptions","isString","inArray","isFunction","valueOrDefault","isObject","parseDate","deepExtend","last","eventElement","TextBox","getTemplate","ShapeElement","getSpacing","CurveProcessor","append","styleValue","CategoryAxis","BoxElement","Title","round","limitValue","cycleIndex","grep","elementStyles","autoTextColor","rad","bindEvents","services","unbindEvents","support","drawing","Path","Animation","AnimationFactory","Group","Circle","MultiPath","Color","geometry","GeometryPoint","GeometryCircle","transform","ChartAxis","extend","init","axis","this","_axis","options","value","point","getCategory","getValue","slot","from","to","limit","range","valueRange","findAxisByName","name","axes","idx","length","prepareUserOptions","ChartPane","pane","visual","chartsVisual","chartContainer","_pane","ChartPlotArea","plotArea","_plotArea","backgroundVisual","_bgVisual","countNumbers","values","count","i","num","Aggregates","min","Math","max","sum","sumOrNull","result","avg","first","getField","field","row","get","SeriesBinder","_valueFields","_otherFields","_nullValue","_undefinedValue","register","seriesTypes","valueFields","otherFields","this$1$1","type","_makeValue","undefined","canonicalFields","series","concat","bindPoint","pointIx","item","fields","data","pointData","Array","fieldData","slice","_bindFromArray","srcValueFields","sourceFields","srcPointFields","_bindFromObject","initialValue","array","object","srcFields","fieldName","srcFieldName","sourceFieldName","push","current","percentRegex","standardDeviationRegex","RegExp","ErrorRangeCalculator","errorValue","initGlobalRanges","deviationMatch","exec","valueGetter","createValueGetter","average","getAverage","deviation","getStandardDeviation","multiple","parseFloat","errorRange","low","high","globalRange","indexOf","standardError","getStandardError","binder","index","OBJECT","getErrorRange","pointValue","Error","percentValue","abs","sqrt","isSample","total","squareDifferenceSum","pow","browser","INITIAL_ANIMATION_DURATION","FADEIN","BORDER_BRIGHTNESS","START_SCALE","msie","ERROR_LOW_FIELD","ERROR_HIGH_FIELD","X_ERROR_LOW_FIELD","X_ERROR_HIGH_FIELD","Y_ERROR_LOW_FIELD","Y_ERROR_HIGH_FIELD","ZERO","INTERPOLATE","GAP","ABOVE","BELOW","SMOOTH","STEP","AREA","BAR","BOX_PLOT","BUBBLE","BULLET","CANDLESTICK","COLUMN","DONUT","FUNNEL","PYRAMID","HEATMAP","HORIZONTAL_WATERFALL","LINE","OHLC","PIE","POLAR_AREA","POLAR_LINE","POLAR_SCATTER","RADAR_AREA","RADAR_COLUMN","RADAR_LINE","RANGE_AREA","RANGE_BAR","RANGE_COLUMN","SCATTER","SCATTER_LINE","VERTICAL_AREA","VERTICAL_BOX_PLOT","VERTICAL_BULLET","VERTICAL_LINE","VERTICAL_RANGE_AREA","WATERFALL","EQUALLY_SPACED_SERIES","TRENDLINE_EXPONENTIAL","TRENDLINE_LINEAR","TRENDLINE_LOGARITHMIC","TRENDLINE_MOVING_AVERAGE","TRENDLINE_POLYNOMIAL","TRENDLINE_POWER","TRENDLINE_SERIES","LEGEND_ITEM_CLICK","LEGEND_ITEM_HOVER","LEGEND_ITEM_LEAVE","SERIES_CLICK","SERIES_HOVER","SERIES_OVER","SERIES_LEAVE","PLOT_AREA_CLICK","PLOT_AREA_HOVER","PLOT_AREA_LEAVE","DRAG","DRAG_END","DRAG_START","ZOOM_START","ZOOM","ZOOM_END","SELECT_START","SELECT","SELECT_END","RENDER","SHOW_TOOLTIP","HIDE_TOOLTIP","PANE_RENDER","CHART_POINT_ROLE","CHART_POINT_CLASSNAME","CHART_POINT_ROLE_DESCRIPTION","LEGEND_ITEM_ROLE","LEGEND_ITEM_CLASSNAME","LEGEND_ITEM_ARIA_ROLE_DESCRIPTION","LOGARITHMIC","CATEGORY","INSIDE_END","INSIDE_BASE","OUTSIDE_END","MOUSEWHEEL","MOUSEWHEEL_DELAY","DRILLDOWN","DRILLDOWN_FIELD","MIN_MOVING_AVERAGE_PERIOD","GLASS","TOOLTIP_OFFSET","LINE_MARKER_SIZE","MOUSEWHEEL_ZOOM_RATE","ErrorBarBase","isVertical","chart","fn","call","reflow","targetBox","linePoints","endCaps","valueBox","getAxis","getSlot","centerBox","center","capsWidth","getCapsWidth","capValue","x","y","capStart","capEnd","y1","y2","box","x1","x2","boxSize","width","height","floor","createVisual","rect","toRect","sender","getSender","color","line","createDefaultVisual","defaultVisual","lineOptions","stroke","dashType","moveTo","lineTo","animation","delay","zIndex","CategoricalErrorBar","seriesValueAxis","anyHasZIndex","elements","appendIfNotNull","element","areNumbers","segmentVisible","visible","pointVisibility","bindSegments","points","categoriesCount","seriesCount","categories","equalsIgnoreCase","a","b","toLowerCase","evalOptions","context","state","dryRun","defaults","depth","needsEval","excluded","property","hasOwnProperty","propValue","filterSeriesByType","types","currentSeries","dateCache","WeakMap","parseDateCategory","category","intlService","date","set","hasGradientOverlay","overlay","gradient","hasValue","isDateAxis","axisOptions","sampleCategory","dateCategory","Date","singleItemOrArray","AREA_REGEX","hasValue$1","convertableToNumber","findNext","ref","pointHasValue","outPoint","start","dir","getter$$1","hasItem","createOutOfRangePoints","hasMinPoint","hasMaxPoint","minPoint","maxPoint","missingValues","test","stack","seriesMissingValues","_outOfRangeMinPoint","_outOfRangeMaxPoint","CategoricalChart","chartService","categoryAxis","seriesCategoryAxis","valueAxisRanges","categoryPoints","seriesPoints","seriesOptions","_evalSeries","render","traverseDataPoints","addValue","bind","pointOptions","seriesIx","pointType","prototype","vertical","invertAxes","plotValue","isStacked100","categoryIx","otherValues","categorySum","other","otherStack","group","plotRange","startValue","isStacked","positive","prevValue","isStackedBar","defaultStack","isNonGroupStack","STRING","otherValue","valueAxis","axisCrossingValue","categoryAxisCrossingValue","stackLimits","axisName","stackName","pIx","isFinite","updateStackRange","chartSeries","limitsCache","key","limits","errorTotals","negative","sparseArrayLimits","addErrorBar","errorBars","lowValue","highValue","seriesErrorRanges","addPointErrorBar","stackedErrorRange","updateRange","errorBar","createPoint","owner","noteText","dataItem","evalPointOptions","_defaults","doEval","axisRange","namedValueAxes","categorySlots","chartPoints","categorySlot","valueSlot","pointSlot","aboveAxis","stackValue","percentage","reflowPoint","reflowCategories","clip","limitPoints","limitPoint","limitedSlot","limitSlot","equals","reverse","axisCrossingValues","axisIndex","slotX","slotY","callback","_outOfRangeCallback","seriesIx$1","currentCategory","categoryAt","seriesIx$2","outOfRangePoint","formatPointValue","format","auto","PointEventsMixin","click","e","trigger","eventArgs","hover","over","out","runningTotal","originalEvent","NoteMixin","createNote","notes","text","label","note","Note","guid","random","id","toString","LinePoint","tooltipTracking","_id","markers","_rendered","size","marker","createMarker","createLabel","labels","createLabelElement","getLabelText","align","vAlign","margin","left","right","labelTemplate","formatValue","getAriaLabelText","ariaTemplate","getAriaTemplate","markerBorder","background","border","brightness","toHex","rotation","opacity","accessibilityOptions","ariaLabel","accessibility","markerBox","_childBox","childBox","clone","reflowLabel","noteTargetBox","anchor","position","alignTo","createHighlight","highlight","defaultColor","shadow","getElement","highlightVisual","highlightVisualArgs","paddingBox","halfSize","Rect","createFocusHighlight","markerOptions","highlightOptions","padding","tooltipAnchor","clipBox","overlaps","verticalAlign","horizontalAlign","horizontal","overlapsBox","unclipElements","noclip","focusVisual","toggleFocusHighlight","clearFocusFromVisual","getIndex","HIGHLIGHT_ZINDEX","tabIndex","role","className","ariaRoleDescription","LineSegment","toGeometryPoints","customVisual","segmentVisual","fromPoints","closed","close","aliasFor","coords","parent","getNearestPoint","StepLineMixin","calculateStepPoints","justified","stepAxis","stepDir","previousPoint","toGeometryPoint","stepPoint","lintPoint","StepLineSegment","SplineSegment","segments","process","curve","apply","LineChartMixin","renderSegments","lastSegment","_segments","sortedPoints","sortPoints","pointCount","createSegment","_addSegment","children","unshift","segment","nearestPoint","target","allPoints","nearestPointDistance","pointDistance","distanceTo","ClipAnimation","setup","_setEnd","step","pos","interpolateValue","topRight","bottomRight","suspend","setX","resume","duration","ClipAnimationMixin","createAnimation","root","getRoot","transitions","clipPath","fromRect","_setChildrenAnimation","animationPoints","LineChart","style","supportsPointInactiveOpacity","AreaSegment","prevSegment","stackPoints","createFill","fill","createStroke","lineCap","strokeSegments","_strokeSegments","createStrokeSegments","segmentsFromPoints","stackSegments","createStackSegments","map","Segment","hasStackSegment","fillSegments","hasStackSegments","fillToAxes","fillPath","crossingValue","endSlot","firstPoint","lastPoint","end","StepAreaSegment","SplineAreaSegment","curveProcessor","controlOut","controlIn","AreaChart","previousSegment","_gapStackPoints","_stackPoints","stackPoint","startIdx","endIdx","pointOffset","currentSeriesIx","_previousSegmentPoint","gapStackPoint","_createGapStackPoint","segmentIx","seriesIdx","AxisGroupRangeTracker","axisRanges","update","chartAxisRanges","chartRange","reset","query","BarLabel","content","textBox","textOptions","labelBox","contentBox","top","bottom","alignToClipBox","parentBox","addAccessibilityAttributesToVisual","ariaChecked","AccessibilityAttributesMixin","Bar","rectVisual","createRect","strokeOpacity","path","getBorderColor","lineJoin","createGradientOverlay","baseColor","borderWidth","pad","_brightness","borderColor","forEach","forEachReverse","ClusterLayout","rtl","gap","spacing","slots","slotSize","child","StackWrap","positionAxis","childrenCount","currentChild","snapTo","wrap","BarChart","clusterType","stackType","stackOrDefault","labelOptions","negativeColor","cluster","getStackWrap","stackWrap","stackGroup","wraps","_stackGroup","zeroSlot","stackAxis","childrenLength","_setAnimationOptions","pointVisual","origin","Candlestick","ocSlot","open","lhSlot","realBody","mid","lines","reflowNote","_mainVisual","mainVisual","createOverlay","createBody","createLines","container","body","drawLines","lineStyle","normalColor","meanPoints","medianPoints","whiskerPoints","tooltip","CandlestickChart","splitValue","downColor","parts","BoxPlot","whiskerSlot","boxSlot","q1","q3","reflowBoxSlot","lower","upper","reflowWhiskerSlot","medianSlot","median","mean","meanSlot","calcMeanPoints","calcWhiskerPoints","calcMedianPoints","renderOutliers","outliers","outerFence","outlierValue","extremes","markersBorder","shape","reflowOutliers","move","whiskers","CROSS","VerticalBoxPlot","BoxPlotChart","filterOutliers","items","ScatterErrorBar","seriesAxes","ScatterChart","_initFields","xAxisRanges","yAxisRanges","valueErrorField","lowField","highField","createMissingValue","intl","xAxisName","xAxis","yAxisName","yAxis","xAxisRange","yAxisRange","namedXAxes","axisX","namedYAxes","axisY","ref$1","Bubble","radius","highlightGroup","createGradient","stops","offset","BubbleChart","_maxSize","negativeValues","updateBubblesSize","pointsCount","animationOptions","minR","minSize","maxR","maxSize","minArea","PI","areaRatio","area","Target","Bullet","targetValueSlot","targetSlotX","targetSlotY","targetSlot","bodyVisual","create","BulletChart","seriesItem","wrapData","bulletOptions","bullet","isNaN","BaseTooltip","getStyle","pointColor","backgroundColor","font","paddingTop","paddingBottom","paddingLeft","paddingRight","show","tooltipOptions","isDark","notify","hide","destroy","CrosshairTooltip","crosshair","formatService","initAxisName","showAt","stickyMode","formattedValue","dateFormats","baseUnit","getAnchor","ref_options","lineBox","bbox","bottomLeft","translate","topLeft","Crosshair","moveLine","lineEnd","getBox","dim","lineStart","pointCategoryIndex","axisLineBox","currentAxis","ChartContainer","shouldClip","_clipBox","chartsBox","clipRect","unclipLabels","stackRoot","charts","j","isStackRoot","Pane","ID","createTitle","titleOptions","title","buildTitle","appendAxis","appendAxisAt","splice","appendChart","empty","removeAxis","i$1","removeChart","pop","visualStyle","renderComplete","createGridLines","clipRoot","allAxes","vGridLines","hGridLines","gridLines","altAxis","refresh","clear","renderVisual","notifyRender","axisValueField","length$1","idx$1","axis$1","lineBox$1","service","getService","paneIndex","shrinkToFit","PlotAreaBase","initFields","initSeries","legend","crosshairs","originalOptions","originalSeries","_bindCache","createPanes","createCrosshairs","cached","paneDefaults","paneOptions","panes","panesLength","currentPane","crosshairOptions","currentCrosshair","removeCrosshairs","hideCrosshairs","findPane","matchingPane","findPointPane","containsPoint","axisToRemove","filteredAxes","chartToRemove","filteredCharts","addToLegend","inactiveItems","inactiveItemsLabels","seriesVisible","visibleInLegend","itemLabelOptions","markerColor","active","groupAxes","xAxes","yAxes","paneIx","paneAxes","axisIx","any","groupSeriesByPane","seriesByPane","seriesPaneName","filterVisibleSeries","unpad","reflowPanes","detachLabels","reflowAxes","reflowCharts","redraw","panesArray","cleanGradients","crossingAxes","crossingValues","valuesToAdd","defaultValue","alignAxisTo","targetAxis","targetCrossingValue","slotEdge","targetEdge","axisBox","alignAxes","xAnchor","yAnchor","xAnchorCrossings","yAnchorCrossings","leftAnchors","rightAnchors","topAnchors","bottomAnchors","paneId","paneAnchor","anchorCrossings","_overlap","_mirrored","mirror","paneYAnchor","pane$1","paneId$1","visible$1","anchor$1","anchorCrossings$1","shrinkAxisWidth","axisGroupBox","overflowX","shrink","shrinkAxisHeight","shrinked","overflowY","fitAxes","offsetX","paneBox","offsetY","currentAxis$1","reflowPaneAxes","autoRotateAxisLabels","groupedAxes","rotated","allPaneAxes","autoRotateLabels","chartPane","remainingHeight","autoHeightPanes","percents","parseInt","currentPane$1","i$2","currentPane$2","backgroundBox","axesCount","axisA","axisB","chartsBoxes","boxes","addBackgroundPaths","multipath","paths","backgroundContainsPoint","bg","appendVisual","pointsByCategoryIndex","categoryIndex","pointsBySeriesIndex","seriesIndex","filterPoints","pointsByPointIndex","pointIndex","pointsBySeriesName","findPoint","paneByPoint","detachAxisGroupLabels","labelAxisCount","labelAxis","createLabelAxis","onAxis","edge","plotBands","isTrendline","trendlineFactory","createTrendlineSeries","modifiedSeries","forSeries","seriesByName","for","trendlineSeries","INHERIT","filter","find","getFirstPoint","getPointBelow","_getNextPoint","_pointsByVertical","getPointAbove","getPointToTheRight","_pointsByHorizontal","getPointToTheLeft","getPointsFunc","increment","nextIndex","loopPoints","direction","at","basePoint","isSingleAxis","some","reduce","acc","PlotAreaEventsMixin","_dispatchEvent","SeriesAggregator","defaultAggregates","seriesFields","_seriesFields","rootAggregate","aggregate","_series","_binder","fieldAggregate","canonicalName","aggregatePoints","srcPoints","_bindPoints","firstDataItem","dataItems","srcValues","_bindField","setValue","parentObj","split","shift","DefaultAggregates","aggregates","seriesType","RangeBar","fromOptions","toOptions","labelFrom","labelTo","RangeBarChart","plotLimits","RangeLinePoint","AUTO","RangeAreaPoint","initLabelsFormat","fromPoint","toPoint","copyFields","fromBox","toBox","positionLabels","fromLabelPosition","toLabelPosition","RangeAreaSegment","toPoints","fromSegments","toPath","fromPath","SplineRangeAreaSegment","createCurveSegments","StepRangeAreaSegment","RangeAreaChart","fromSlot","toSlot","OHLCPoint","oPoints","cPoints","lhPoints","oSlot","cSlot","OHLCChart","WaterfallSegment","WaterfallChart","createSegments","totalCategories","summary","prevPoint","registry","impl","String","calculateSlope","sourceValues","slope","intercept","xy","xMin","Number","xMax","xValue","yValue","checkAllPositive","every","getTrendlineData","valueMapper","totalRange","totalRangeIndices","currentRange","currentRangeIndices","ceil","log","valueGetter$1","valueGetter$2","calculateMovingAverage","period","averagePoints","lastValue","valueGetter$3","MIN_ORDER","MAX_ORDER","calculatePolynomial","order","k","X$$1","Matrix","Y$$1","coefficients","Xt","transpose","B","multiply","inverse","linearRegression","n","valueGetter$4","valueGetter$5","seriesValues","exp","getData","categoryField","getData$1","getData$2","trendline","calculatePoints","getData$3","getData$4","getData$5","AREA_SERIES","OUT_OF_RANGE_SERIES","CategoricalPlotArea","namedCategoryAxes","valueAxisRangeTracker","_seriesPointsCache","_currentPointsCache","stack100","createCategoryAxes","aggregateCategories","createCategoryAxesLabels","createCharts","createValueAxes","filterSeries","trendlineAggregateForecast","forecast","before","after","srcSeries","aggregateSeries","paneSeries","visibleSeries","groups","groupSeriesByCategoryAxis","groupIx","createChartGroup","createAreaChart","createRangeAreaChart","createBarChart","createRangeBarChart","createBulletChart","createCandlestickChart","createBoxPlotChart","createOHLCChart","createWaterfallChart","createLineChart","processedSeries","axisPane","dataLength","_seriesMax","outOfRangePoints","clearSeriesPointsCache","seriesSourcePoints","categoriesHash","srcCategories","dateAxis","srcData","indexCategories","totalIndex","aggregator","categoryItem","categoryIdx","totalCount","categoriesToAdd","defaultPaneName","stackableChartOptions","anyStackedSeries","s","categoryAxes","unique","axisSeries","groupSeries","firstSeries","barChart","rangeColumnChart","bulletChart","lineChart","areaChart","rangeAreaChart","waterfallChart","axisRequiresRounding","categoryAxisName","categoryAxisIndex","centeredSeries","seriesAxis","aggregatedAxis","createLabels","definitions","isJustified","_forecast","DateCategoryAxis","primaryAxis","tracker","defaultRange","baseOptions","roundToMajorUnit","defaultAxisRange","LogarithmicAxis","NumericAxis","eventType","_eventCoordinates","pointPane","updateAxisOptions","_siblingsBySeriesIndex","_siblingsByPointIndex","siblings","sort","_getSeriesCompareFn","_isInStackedSeries","sortableSeries","stackableSeries","targetOptions","axesOptions","Highlight","_points","arrayPoints","toggleHighlight","hasHighlight","togglePointHighlight","toggleHandler","toggle","preventDefault","_defaultPrevented","isHighlighted","acceptKey","mouseKey","event","ctrlKey","shiftKey","altKey","toChartAxisRanges","ranges","Pannable","_active","_panAxes","pan","delta","lock","updatedAxes","limitRange","ZoomSelection","createElement","marquee","_marquee","document","marqueeColor","appendChild","removeElement","parentNode","removeChild","setStyles","styles","zoomPane","_zoomPane","_elementOffset","_zoomPaneClipBox","pageX","pageY","chartElement","elementOffset","_selectionPosition","elementOffset$$1","selectionPosition","_updateAxisRanges","zoom","pointsRange","startLocation","location","util","limitValue$1","valueOrDefault$1","MousewheelZoom","rate","updateRanges","zoomRange","LegendLayout","Layout","lineSpacing","orientation","VERTICAL","HORIZONTAL","alignItems","legendItem","clippedBBox","rectToBox","addVisual","DEFAULT_MARKER_SIZE","LegendItemMarker","cursor","markerHighlightOptions","ChartElement$1","initUserOptions","translateChildren","dx","dy","arguments$1","arguments","renderChildren","childVisual","stackVisual","visuals","sibling","insert","traverse","closest","match","matched","_highlight","focusHighlight","_focusHighlight","rootBackground","highlightColor","focusHighlightOptions","gradientOptions","Point$1","rotate","degrees","theta","cosT","cos","sinT","sin","cx","cy","onCircle","angle","radians","Box$1","wrapPoint","arrayPoint","targetCenter","dw","dh","expand","getHash","join","r1","rotatePoint","r2","r3","r4","hasSize","alignment","c1","c2","sizeFunc","WIDTH","HEIGHT","BoxElement$1","hasSetSize","reflowPaddingBox","hasBox","ShapeElement$1","halfWidth","halfHeight","TRIANGLE","ROUNDED_RECT","borderRadius","setCornerRadius","visualOptions","MarkerLineArea","LegendItemLine","centerY","createHighlightLine","createHighlightMarker","highlightLine","highlightMarker","RECT","LegendItemSquare","LegendItem","createContainer","FloatElement","markerWrap","createMarkerArea","_marker","_createMarker","_createLine","_createMarkerLine","_createSquare","_highlightOptions","_line","_markerLineArea","_square","_highlightMarkers","_toggleHighlight","_restoreMarkers","h","eventSink","_itemOverlay","widget","args","_legendItemHover","_unsetActivePoint","CUSTOM","Legend","createContainers","createLegendTitle","createItems","userAlign","hasTitle","itemsContainer","innerElement","markersOptions","itemOptions","hasItems","getItems","legendBox","containerCustomReflow","containerReflow","alignTarget","containerBox","createTitleLayout","appendTitleLayoutContent","layout","Boolean","POINTER","SQUARE","PlotAreaFactory","_registry","entry","trendlines","createDiv","classNames","closestHandle","hasClasses","Selection","observer","_dateAxis","initOptions","offsetHeight","createElements","_index","onPane","wrapper","selection","leftMask","rightMask","leftHandle","rightHandle","selectionStyles","leftHandleHeight","rightHandleHeight","borderLeftWidth","borderRightWidth","cssText","obj","mousewheel","_mousewheelHandler","_mousewheel","_domEvents","DomEventsBuilder","stopPropagation","_start","_move","_end","tap","_tap","press","_press","gesturestart","_gesturestart","gesturechange","_gesturechange","gestureend","_gestureend","clearTimeout","_mwTimeout","_state","_rangeEventArgs","_value","_pointInPane","modelCoords","_toModelCoordinates","eventCoordinates","handle","bodyRect","getBoundingClientRect","inBody","moveTarget","addClass","oldRange","span","scale","removeClass","rightClick","which","mousewheelDelta","setTimeout","touch","touches","p0","p1","_slot","leftMaskWidth","rightMaskWidth","distance","fromValue","toValue","zDir","relative","minDelta","maxDelta","Tooltip","_current","SharedTooltip","tooltipPoints","_slotAnchor","_defaultAnchor","shared","categoryText","categoryFormat","slotCenter","BarChartAnimation","fromScale","abort","scaleX","scaleY","BubbleAnimation","easing","FadeInAnimation","fadeTo","PieAnimation","ScatterLineChart","missingValue","getScatterTrendlineData","samplingInterval","diff","relativeValue","autoMajorUnit","valueGetter$6","scatterValueGetter","xValueLimits","valueGetter$7","logValueGetter","valueGetter$8","scatterRegistry","getData$6","getData$7","getData$8","getData$9","getData$10","getData$11","XYPlotArea","xAxisRangeTracker","yAxisRangeTracker","filteredSeries","createScatterChart","createScatterLineChart","createBubbleChart","createAxes","xAxisOptions","yAxisOptions","createXYAxis","inferredDate","namedAxes","isLog","typeSamples","seriesAxisName","firstPointValue","DateValueAxis","xAxesOptions","yAxesOptions","axisPane$1","xValues","yValues","currentValue","updateAxisOptions$1","PieSegment","sector","labelText","themeLabels","theme","seriesDefaults","animationDelay","labelsOptions","labelsDistance","middle","lp","labelHeight","labelWidth","startAngle","innerRadius","endAngle","createSegmentVisual","borderOptions","fallbackFill","userSpace","singleSegment","ShapeBuilder","createRing","midAndle","tooltipAlignment","RAD_30","RAD_60","sine","cosine","DEFAULT_FONT","PieChartMixin","createLegendItem","legendOptions","pointVisible","legendItems","PieChart","seriesColors","colorsCount","anglePerValue","constantAngle","currentAngle","explode","Ring","evalSegmentOptions","segmentOptions","seriesConfigs","minWidth","halfMinWidth","defaultPadding","newBox","newBoxCenter","boxCenter","leftSideLabels","rightSideLabels","seriesConfig","setRadius","labelComparator","leftLabelsReflow","rightLabelsReflow","distances","distanceBetweenLabels","distributeLabels","lr","firstBox","secondBox","remaining","_takeDistance","reflowLabels","amount","available","boxX","labelsCount","labelDistance","boxY","hAlignLabel","connectors","_connectorLines","connectorsColor","connectorLine","centerPoint","sr","crossing","intersection","pointInCircle","space","autoFit","pieCenter","bboxBottom","reverseValue","originalX","sector_center","t","a1","a2","b1","b2","uat","ub","ua","PiePlotArea","createPieChart","pieChart","DonutSegment","DonutChart","holeSize","totalSize","seriesWithoutSize","currentSeries$1","DonutPlotArea","createDonutChart","donutChart","PolarPlotAreaBase","createPolarAxis","createValueAxis","polarAxis","axisType","axisDefaultRange","valueAxisOptions","RadarLogarithmicAxis","RadarNumericAxis","valueAxisBox","heightDiff","PolarScatterChart","valueRadius","PolarLineChart","SplinePolarAreaSegment","_polarAxisCenter","PolarAreaSegment","centerSegment","PolarAreaChart","_hasMissingValuesGap","xComparer","PolarPlotArea","PolarAxis","majorGridLines","minorGridLines","scatterChart","RadarLineChart","seriesSegments","groupBySeriesIx","isFirstDataPoint","isLastDataPoint","SplineRadarAreaSegment","RadarAreaSegment","RadarAreaChart","RadarSegment","RadarClusterLayout","slotAngle","slotSector","RadarStackLayout","childSector","RadarBarChart","RadarPlotArea","RadarCategoryAxis","_hasBarCharts","_isStacked100","chartOptions","FunnelSegment","chartBox","createPath","FunnelChart","labelPadding","dynamicSlopeReflow","totalHeight","firstSegment","maxSegment","lastUpperSide","previousOffset","previousHeight","nextSegment","nextPercentage","segmentSpacing","constantSlopeReflow","decreasingWidth","neckRatio","finalNarrow","dynamicSlope","dynamicHeight","PyramidChart","FunnelPlotArea","createChart","chartType","HeatmapPoint","labelColor","isRoundRect","halfBorderWidth","HeatmapChart","setRange","minLightnessOffset","parseColor","hsl","toHSL","l","toCss","colorScale","indexX","indexY","xRange","yRange","ref$2","xIndex","yIndex","xIn","yIn","HeatmapPlotArea","bindCategories","createAxisLabels","xCategories","createHashSet","yCategories","has","add","createHeatmapChart","firstCategory","updateAxisOptions$2","normalizedOffset","axisXItems","_getPointAxisXIndex","targetXValue","compareValues","_getPointAxisYIndex","axisYItems","targetYValue","_getPointAxisIndex","findIndex","axisItem","dateEquals","COLOR","FIRST","MAX","MIN","NOTE_TEXT","errorLow","errorHigh","AXIS_NAMES","MOUSEMOVE","CONTEXTMENU","MOUSELEAVE","KEYDOWN","FOCUS","BLUR","Chart","userOptions","themeOptions","observers","addObserver","ChartService","_initElement","_originalOptions","_theme","_initTheme","_focusState","_initHandlers","_initSurface","FontLoader","preloadFonts","fontLoaded","_destroyed","_redraw","_attachEvents","_setElementClass","getAttribute","setAttribute","firstChild","seriesCopies","aliases","alias","resolveAxisAliases","applyDefaults","applySeriesColors","getSize","chartArea","offsetWidth","resize","force","currentSize","_size","_resize","_selections","_destroySelections","_setupSelection","_noTransitionsRedraw","paneName","_model","findPaneByName","findPaneByIndex","seriesName","categoryName","pointByCategoryName","togglePointsHighlight","showTooltip","_sharedTooltip","_tooltip","hideTooltip","surface","_surfaceWrap","elementSize","renderAs","_destroySurface","Surface","_surfaceMouseenterHandler","_surfaceMouseleaveHandler","model","_getModel","_destroyView","_setElementAccessibilityAttributes","_legend","draw","play","_createTooltip","_createPannable","_createZoomSelection","_createMousewheelZoom","triggerPaneRender","_navState","_cancelDomEvents","_redrawFocusHighlight","ref_focusState","legendInFocus","preserveHighlight","_focusElement","_getFocusedLegendItem","description","exportVisual","exportOptions","currentOptions","clearMissingValues","pannable","_pannable","zoomable","_zoomSelection","_mousewheelZoom","_toggleDragZoomEvents","allowDrag","requiresHandlers","allowZoom","_dragZoomEnabled","touchAction","_touchAction","_toggleDomEvents","drag","domEvents","toggleDrag","toggleZoom","_createSharedTooltip","axisDefaults","themeAxisDefaults","mapAxisOptions","axisColor","applyAxisDefaults","seriesLength","commonDefaults","themeSeriesDefaults","commonThemeDefaults","cleanupNestedSeriesDefaults","applySeriesDefaults","colors","seriesColor","_createPlotArea","RootElement","_modelOptions","subtitle","orderTitles","DEFAULT_WIDTH","DEFAULT_HEIGHT","skipSeries","selections","select","_selectStart","_select","_selectEnd","_clickHandler","_click","_keydownHandler","_keydown","_focusHandler","_focus","_blurHandler","_blur","_mousedownHandler","_mousedown","_mouseleaveHandler","_mouseleave","_mouseover","_mouseout","_mousemove","throttle","removeObserver","eventNames","_toDocumentCoordinates","_updateDrilldownPoint","_resetDrilldownPoint","_focusPoint","_startDrilldown","_focusLegendItem","isDefaultPrevented","obj$1","_shouldAttachMouseMove","_hoveredPoint","_plotAreaHovered","_hasInactiveOpacity","_activeChartInstance","_applySeriesOpacity","_updateSeriesOpacity","cancel","_stopChartHandlers","_gestureDistance","_clearFocusedElement","suspendTracking","_zooming","resumeTracking","mousewheelZoom","previousGestureDistance","scaleDelta","_drawingChartElement","leave","_startNavigation","_suppressHover","panning","ranges$1","translateRange","_endNavigation","_mousewheelZoomRate","totalDelta","scaleRange","chartEvent","_getChartElement","eventTarget","coordinates","_elementPadding","_padding","clientX","clientY","inverseTransform","elementScale","invert","drawingElement","sharedTooltip","_startHover","_trackSharedTooltip","_propagateClick","handlingTap","_isLegendBeforeChart","legendPosition","_preventInitialPointFocus","_focusFirstLegendItem","_focusFirstPoint","focusedElement","TAB","isLegendBeforeChart","_navigatePoints","_navigateLegend","ESCAPE","_hideTooltip","ENTER","focusState","moveFocus","focusedPoint","_displayTooltip","ARROW_RIGHT","ARROW_LEFT","ARROW_DOWN","ARROW_UP","itemsLength","cycleFunc","focusedLegendItemIndex","cycleUp","cycleDown","_hasFocus","ownerDocument","activeElement","_focusChart","focus","omitHighlight","_setElementActiveDescendant","_showSeriesInactiveOpacity","_showInactiveOpacity","_clearElementActiveDescendant","_pseudoFocusedElement","_createPseudoFocusedElement","ARIA_ACTIVE_DESCENDANT","remove","removeAttribute","pseudoElement","checked","_hideInactiveOpacity","activePoint","_activePoint","_updateHoveredPoint","_displayInactiveOpacity","multipleSeries","highlightPoints","chartInstance","_chartInstanceFromPoint","inactivePoints","_getInactivePoints","_getInactiveOpacityForSeries","_getAllPointsOfType","constructor","hoveredPoint","drilldown","_drilldownState","resetOpacity","currSeries","defaultOpacity","_getDefaultOpacityForSeries","inactiveOpacity","activeSeries","hasDefaultInactiveOpacity","hasInactiveOpacity","defaultInactiveOpacity","DEFAULT_SERIES_OPACITY","_mouseMoveTrackHandler","_mouseMoveTracking","seriesPoint","_trackCrosshairs","overPlotArea","_tooltipCategoryIx","_sharedHighlight","pointArgs","hoverArgs","hideElements","keepTooltipOpen","_deferRedraw","_clearRedrawTimeout","_redrawTimeout","clearInterval","autoBind","bindCategoryAxisFromSeries","uniqueCategories","Set","seriesOnAxis","hasCategoryBinding","seriesWithData","categorySamples","getTime","time","_isBindable","transitionsState","updateMouseMoveHandler","applyOptions","setOptions","setDirection","setIntlService","noTransitionsRedraw","unbind","bar","column","rangeColumn","verticalLine","pie","donut","verticalArea","scatter","scatterLine","bubble","candlestick","ohlc","boxPlot","verticalBullet","polarArea","polarLine","radarArea","radarLine","waterfall","DATA_FIELDS","fieldValue","originalValue","nullValue","jQuery","undefined$1","Widget","ui","ChartBreadcrumb","_attachChartEvents","_renderBreadcrumb","events","rootItem","icon","showIcon","breadcrumb","_onChartDrilldown","_onChartDrilldownLevelChange","deferred","resetDrilldownLevel","getKendoChart","breadcrumbElement","Breadcrumb","_onBreadcrumbClick","level","plugin","NS","outerWidth","_outerWidth","outerHeight","_outerHeight","KendoChart","DataSource","InstanceObserver","template","encode","htmlEncode","MOUSELEAVE_NS","AXIS_LABEL_CLICK","DRILLDOWN_LEVEL_CHANGE","NOTE_CLICK","NOTE_HOVER","NOTE_LEAVE","DOCUMENT_ELEMENT","documentElement","CHANGE","DATABOUND","LEAVE","Observable","UserEvents","global","multiTouch","fastTap","ChartInstanceObserver","handlerMap","legendItemClick","dataSource","_seriesVisibility","SeriesVisibilityState","_initDataSource","_showWatermarkOverlay","instance","_instance","_bindSeries","_bindCategories","dimensions","_setEvents","_getThemeOptions","_sourceSeries","setDataSource","_hasDataSource","_onDataChanged","_dataChangeHandler","_hasData","fetch","off","_destroyCrosshairTooltips","findSeries","ChartSeries","findSeriesByName","_createSeries","findSeriesByIndex","originalChartArea","_seriesOptions","on","relatedTarget","autoHide","themeName","SASS_THEMES","autoTheme","themes","_initChart","_createChart","_isRtl","_onInit","_initTooltip","tooltips","_crosshairTooltips","_getCrosshairTooltip","_showTooltip","_onRender","_copyMembers","names","_events","_tooltipleave","_onLegendItemClick","_legendItemClick","save","_onDrilldown","drilldownSeriesFactory","Promise","then","resolved","_onDrilldownData","drilldownSeries","Object","assign","_bindData","groupedSeries","view","grouped","seriesVisibility","read","applyByGroup","applyByIndex","seriesData","_groupIx","categoriesData","_bindCategoryAxis","isRtl","css","proxyMembers","createProxyMember","nameTemplate","seriesClone","legacyTemplate","groupNameTemplate","logToConsole","_groupValue","ExportMixin","PDFMixin","action","persistSeriesVisibility","saveState","geom","attr","applyStylesFromKendoAttributes","mobileScrollerSelector","_mobileScroller","downEvent","applyEventMap","_closeTooltipHandler","_closeTooltip","_clearShowTimeout","sharedTemplate","colspan","colorMarker","nameColumn","sharedTemplateIterator","_offset","_ensureElement","stop","animate","showTimeout","_measure","zoomLevel","viewport","scrollTop","pageYOffset","scrollLeft","pageXOffset","movable","_fit","fakeContainer","normalizeStyle","toggleClass","_sharedContent","_pointContent","html","forceHide","_hideElement","is","appendTo","contains","fadeOut","always","tooltipTemplate","xLow","xHigh","yLow","yHigh","viewPortSize","output","_chart","_options","_filterPoints","_clearFields","toggleVisibility","_filterData","__meta__","depends","features","kendo$1"],"mappings":"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","file":"kendo.dataviz.chart.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.color.js';\nimport './kendo.drawing.js';\nimport './kendo.dataviz.core.js';\nimport './kendo.breadcrumb.js';\nimport './kendo.data.js';\nimport './kendo.dataviz.themes.js';\nimport './kendo.userevents.js';\nimport './kendo.icons.js';\n\n/***********************************************************************\n * WARNING: this file is auto-generated.  If you change it directly,\n * your modifications will eventually be lost.  The source code is in\n * `kendo-charts` repository, you should make your changes there and\n * run `src-modules/sync.sh` in this repository.\n */\n\n(function($) {\n/* eslint-disable */\n\nwindow.kendo.dataviz = window.kendo.dataviz || {};\nvar dataviz = kendo.dataviz;\nvar Class = dataviz.Class;\nvar isNumber = dataviz.isNumber;\nvar datavizConstants = dataviz.constants;\nvar MAX_VALUE = datavizConstants.MAX_VALUE;\nvar MIN_VALUE = datavizConstants.MIN_VALUE;\nvar VALUE = datavizConstants.VALUE;\nvar DATE = datavizConstants.DATE;\nvar CENTER = datavizConstants.CENTER;\nvar TOP = datavizConstants.TOP;\nvar BOTTOM = datavizConstants.BOTTOM;\nvar LEFT = datavizConstants.LEFT;\nvar WHITE = datavizConstants.WHITE;\nvar CIRCLE = datavizConstants.CIRCLE;\nvar X = datavizConstants.X;\nvar Y = datavizConstants.Y;\nvar RIGHT = datavizConstants.RIGHT;\nvar BLACK = datavizConstants.BLACK;\nvar COORD_PRECISION = datavizConstants.COORD_PRECISION;\nvar END = datavizConstants.END;\nvar START = datavizConstants.START;\nvar DEFAULT_PRECISION = datavizConstants.DEFAULT_PRECISION;\nvar ARC = datavizConstants.ARC;\nvar defined = dataviz.defined;\nvar getter = dataviz.getter;\nvar isArray = dataviz.isArray;\nvar ChartElement = dataviz.ChartElement;\nvar Point = dataviz.Point;\nvar Box = dataviz.Box;\nvar alignPathToPixel = dataviz.alignPathToPixel;\nvar setDefaultOptions = dataviz.setDefaultOptions;\nvar isString = dataviz.isString;\nvar inArray = dataviz.inArray;\nvar isFunction = dataviz.isFunction;\nvar valueOrDefault = dataviz.valueOrDefault;\nvar isObject = dataviz.isObject;\nvar parseDate = dataviz.parseDate;\nvar deepExtend = dataviz.deepExtend;\nvar last = dataviz.last;\nvar eventElement = dataviz.eventElement;\nvar TextBox = dataviz.TextBox;\nvar getTemplate = dataviz.getTemplate;\nvar ShapeElement = dataviz.ShapeElement;\nvar getSpacing = dataviz.getSpacing;\nvar CurveProcessor = dataviz.CurveProcessor;\nvar append = dataviz.append;\nvar styleValue = dataviz.styleValue;\nvar CategoryAxis = dataviz.CategoryAxis;\nvar BoxElement = dataviz.BoxElement;\nvar Title = dataviz.Title;\nvar round = dataviz.round;\nvar limitValue = dataviz.limitValue;\nvar cycleIndex = dataviz.cycleIndex;\nvar grep = dataviz.grep;\nvar elementStyles = dataviz.elementStyles;\nvar autoTextColor = dataviz.autoTextColor;\nvar rad = dataviz.rad;\nvar bindEvents = dataviz.bindEvents;\nvar services = dataviz.services;\nvar unbindEvents = dataviz.unbindEvents;\nvar support = kendo.support;\nvar drawing = kendo.drawing;\nvar Path = drawing.Path;\nvar Animation = drawing.Animation;\nvar AnimationFactory = drawing.AnimationFactory;\nvar Group = drawing.Group;\nvar Circle = drawing.Circle;\nvar MultiPath = drawing.MultiPath;\nvar Color = kendo.Color;\nvar geometry = kendo.geometry;\nvar GeometryPoint = geometry.Point;\nvar GeometryCircle = geometry.Circle;\nvar transform = geometry.transform;\n\nvar ChartAxis = Class.extend({\n    init: function(axis) {\n\n        this._axis = axis;\n        this.options = axis.options;\n    },\n\n    value: function(point) {\n        var axis = this._axis;\n        var value = axis.getCategory ? axis.getCategory(point) : axis.getValue(point);\n\n        return value;\n    },\n\n    slot: function(from, to, limit) {\n        if (limit === void 0) { limit = true; }\n\n        return this._axis.slot(from, to, limit);\n    },\n\n    range: function() {\n        return this._axis.range();\n    },\n\n    valueRange: function() {\n        return this._axis.valueRange();\n    }\n});\n\nfunction findAxisByName(name, axes) {\n    for (var idx = 0; idx < axes.length; idx++) {\n        if (axes[idx].options.name === name) {\n            axes[idx].prepareUserOptions();\n            return new ChartAxis(axes[idx]);\n        }\n    }\n}\n\nvar ChartPane = kendo.Class.extend({\n    init: function(pane) {\n        this.visual = pane.visual;\n        this.chartsVisual = pane.chartContainer.visual;\n        this._pane = pane;\n    },\n\n    findAxisByName: function(name) {\n        return findAxisByName(name, this._pane.axes);\n    }\n});\n\nvar ChartPlotArea = Class.extend({\n    init: function(plotArea) {\n\n        this._plotArea = plotArea;\n        this.visual = plotArea.visual;\n        this.backgroundVisual = plotArea._bgVisual;\n    }\n});\n\nfunction countNumbers(values) {\n    var length = values.length;\n    var count = 0;\n\n    for (var i = 0; i < length; i++) {\n        var num = values[i];\n        if (isNumber(num)) {\n            count++;\n        }\n    }\n\n    return count;\n}\n\nvar Aggregates = {\n    min: function(values) {\n        var length = values.length;\n        var min = MAX_VALUE;\n\n        for (var i = 0; i < length; i++) {\n            var value = values[i];\n            if (isNumber(value)) {\n                min = Math.min(min, value);\n            }\n        }\n\n        return min === MAX_VALUE ? values[0] : min;\n    },\n\n    max: function(values) {\n        var length = values.length;\n        var max = MIN_VALUE;\n\n        for (var i = 0; i < length; i++) {\n            var value = values[i];\n            if (isNumber(value)) {\n                max = Math.max(max, value);\n            }\n        }\n\n        return max === MIN_VALUE ? values[0] : max;\n    },\n\n    sum: function(values) {\n        var length = values.length;\n        var sum = 0;\n\n        for (var i = 0; i < length; i++) {\n            var value = values[i];\n            if (isNumber(value)) {\n                sum += value;\n            }\n        }\n\n        return sum;\n    },\n\n    sumOrNull: function(values) {\n        var result = null;\n\n        if (countNumbers(values)) {\n            result = Aggregates.sum(values);\n        }\n\n        return result;\n    },\n\n    count: function(values) {\n        var length = values.length;\n        var count = 0;\n\n        for (var i = 0; i < length; i++) {\n            var value = values[i];\n            if (value !== null && defined(value)) {\n                count++;\n            }\n        }\n\n        return count;\n    },\n\n    avg: function(values) {\n        var count = countNumbers(values);\n        var result = values[0];\n\n        if (count > 0) {\n            result = Aggregates.sum(values) / count;\n        }\n\n        return result;\n    },\n\n    first: function(values) {\n        var length = values.length;\n\n        for (var i = 0; i < length; i++) {\n            var value = values[i];\n            if (value !== null && defined(value)) {\n                return value;\n            }\n        }\n\n        return values[0];\n    }\n};\n\nfunction getField(field, row) {\n    if (row === null) {\n        return row;\n    }\n\n    var get = getter(field, true);\n    return get(row);\n}\n\nvar SeriesBinder = Class.extend({\n    init: function() {\n\n        this._valueFields = {};\n        this._otherFields = {};\n        this._nullValue = {};\n        this._undefinedValue = {};\n    },\n\n    register: function(seriesTypes, valueFields, otherFields) {\n        var this$1$1 = this;\n        if (valueFields === void 0) { valueFields = [ VALUE ]; }\n        if (otherFields === void 0) { otherFields = {}; }\n\n        for (var i = 0; i < seriesTypes.length; i++) {\n            var type = seriesTypes[i];\n\n            this$1$1._valueFields[type] = valueFields;\n            this$1$1._otherFields[type] = otherFields;\n            this$1$1._nullValue[type] = this$1$1._makeValue(valueFields, null);\n            this$1$1._undefinedValue[type] = this$1$1._makeValue(valueFields, undefined);\n        }\n    },\n\n    canonicalFields: function(series) {\n        return this.valueFields(series).concat(this.otherFields(series));\n    },\n\n    valueFields: function(series) {\n        return this._valueFields[series.type] || [ VALUE ];\n    },\n\n    otherFields: function(series) {\n        return this._otherFields[series.type] || [ VALUE ];\n    },\n\n    bindPoint: function(series, pointIx, item) {\n        var data = series.data;\n        var pointData = defined(item) ? item : data[pointIx];\n        var result = { valueFields: { value: pointData } };\n        var valueFields = this.valueFields(series);\n        var otherFields = this._otherFields[series.type];\n        var fields, value;\n\n        if (pointData === null) {\n            value = this._nullValue[series.type];\n        } else if (!defined(pointData)) {\n            value = this._undefinedValue[series.type];\n        } else if (Array.isArray(pointData)) {\n            var fieldData = pointData.slice(valueFields.length);\n            value = this._bindFromArray(pointData, valueFields);\n            fields = this._bindFromArray(fieldData, otherFields);\n        } else if (typeof pointData === \"object\") {\n            var srcValueFields = this.sourceFields(series, valueFields);\n            var srcPointFields = this.sourceFields(series, otherFields);\n\n            value = this._bindFromObject(pointData, valueFields, srcValueFields);\n            fields = this._bindFromObject(pointData, otherFields, srcPointFields);\n        }\n\n        if (defined(value)) {\n            if (valueFields.length === 1) {\n                result.valueFields.value = value[valueFields[0]];\n            } else {\n                result.valueFields = value;\n            }\n        }\n\n        result.fields = fields || {};\n\n        return result;\n    },\n\n    _makeValue: function(fields, initialValue) {\n        var value = {};\n        var length = fields.length;\n\n        for (var i = 0; i < length; i++) {\n            var fieldName = fields[i];\n            value[fieldName] = initialValue;\n        }\n\n        return value;\n    },\n\n    _bindFromArray: function(array, fields) {\n        var value = {};\n\n        if (fields) {\n            var length = Math.min(fields.length, array.length);\n\n            for (var i = 0; i < length; i++) {\n                value[fields[i]] = array[i];\n            }\n        }\n\n        return value;\n    },\n\n    _bindFromObject: function(object, fields, srcFields) {\n        if (srcFields === void 0) { srcFields = fields; }\n\n        var value = {};\n\n        if (fields) {\n            var length = fields.length;\n\n            for (var i = 0; i < length; i++) {\n                var fieldName = fields[i];\n                var srcFieldName = srcFields[i];\n                if (srcFieldName !== null) {\n                    value[fieldName] = getField(srcFieldName, object);\n                }\n            }\n        }\n\n        return value;\n    },\n\n    sourceFields: function(series, canonicalFields) {\n        var sourceFields = [];\n\n        if (canonicalFields) {\n            var length = canonicalFields.length;\n\n            for (var i = 0; i < length; i++) {\n                var fieldName = canonicalFields[i];\n                var sourceFieldName = fieldName === VALUE ? \"field\" : fieldName + \"Field\";\n\n                sourceFields.push(series[sourceFieldName] !== null ? (series[sourceFieldName] || fieldName) : null);\n            }\n        }\n\n        return sourceFields;\n    }\n});\n\nSeriesBinder.current = new SeriesBinder();\n\nvar STD_ERR = \"stderr\";\nvar STD_DEV = \"stddev\";\nvar percentRegex = /percent(?:\\w*)\\((\\d+)\\)/;\nvar standardDeviationRegex = new RegExp(\"^\" + STD_DEV + \"(?:\\\\((\\\\d+(?:\\\\.\\\\d+)?)\\\\))?$\");\n\nvar ErrorRangeCalculator = Class.extend({\n    init: function(errorValue, series, field) {\n\n        this.initGlobalRanges(errorValue, series, field);\n    },\n\n    initGlobalRanges: function(errorValue, series, field) {\n        var data = series.data;\n        var deviationMatch = standardDeviationRegex.exec(errorValue);\n\n        if (deviationMatch) {\n            this.valueGetter = this.createValueGetter(series, field);\n\n            var average = this.getAverage(data);\n            var deviation = this.getStandardDeviation(data, average, false);\n            var multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;\n            var errorRange = { low: average.value - deviation * multiple, high: average.value + deviation * multiple };\n\n            this.globalRange = function() {\n                return errorRange;\n            };\n        } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {\n            this.valueGetter = this.createValueGetter(series, field);\n            var standardError = this.getStandardError(data, this.getAverage(data));\n\n            this.globalRange = function(value) {\n                return { low: value - standardError, high: value + standardError };\n            };\n        }\n    },\n\n    createValueGetter: function(series, field) {\n        var data = series.data;\n        var binder = SeriesBinder.current;\n        var valueFields = binder.valueFields(series);\n        var item = defined(data[0]) ? data[0] : {};\n        var valueGetter;\n\n        if (isArray(item)) {\n            var index = field ? valueFields.indexOf(field) : 0;\n            valueGetter = getter(\"[\" + index + \"]\");\n        } else if (isNumber(item)) {\n            valueGetter = getter();\n        } else if (typeof item === datavizConstants.OBJECT) {\n            var srcValueFields = binder.sourceFields(series, valueFields);\n            valueGetter = getter(srcValueFields[valueFields.indexOf(field)]);\n        }\n\n        return valueGetter;\n    },\n\n    getErrorRange: function(pointValue, errorValue) {\n        var low, high, value;\n\n        if (!defined(errorValue)) {\n            return null;\n        }\n\n        if (this.globalRange) {\n            return this.globalRange(pointValue);\n        }\n\n        if (isArray(errorValue)) {\n            low = pointValue - errorValue[0];\n            high = pointValue + errorValue[1];\n        } else if (isNumber(value = parseFloat(errorValue))) {\n            low = pointValue - value;\n            high = pointValue + value;\n        } else if ((value = percentRegex.exec(errorValue))) {\n            var percentValue = pointValue * (parseFloat(value[1]) / 100);\n            low = pointValue - Math.abs(percentValue);\n            high = pointValue + Math.abs(percentValue);\n        } else {\n            throw new Error(\"Invalid ErrorBar value: \" + errorValue);\n        }\n\n        return { low: low, high: high };\n    },\n\n    getStandardError: function(data, average) {\n        return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);\n    },\n\n    getStandardDeviation: function(data, average, isSample) {\n        var this$1$1 = this;\n\n        var length = data.length;\n        var total = isSample ? average.count - 1 : average.count;\n        var squareDifferenceSum = 0;\n\n        for (var idx = 0; idx < length; idx++) {\n            var value = this$1$1.valueGetter(data[idx]);\n            if (isNumber(value)) {\n                squareDifferenceSum += Math.pow(value - average.value, 2);\n            }\n        }\n\n        return Math.sqrt(squareDifferenceSum / total);\n    },\n\n    getAverage: function(data) {\n        var this$1$1 = this;\n\n        var length = data.length;\n        var sum = 0;\n        var count = 0;\n\n        for (var idx = 0; idx < length; idx++) {\n            var value = this$1$1.valueGetter(data[idx]);\n            if (isNumber(value)) {\n                sum += value;\n                count++;\n            }\n        }\n\n        return {\n            value: sum / count,\n            count: count\n        };\n    }\n});\n\nvar browser = support.browser || {};\n\nvar INITIAL_ANIMATION_DURATION = 600;\nvar FADEIN = \"fadeIn\";\n\nvar GLASS = \"glass\";\nvar BORDER_BRIGHTNESS = 0.8;\nvar TOOLTIP_OFFSET = 5;\nvar START_SCALE = browser.msie ? 0.001 : 0;\nvar ERROR_LOW_FIELD = \"errorLow\";\nvar ERROR_HIGH_FIELD = \"errorHigh\";\nvar X_ERROR_LOW_FIELD = \"xErrorLow\";\nvar X_ERROR_HIGH_FIELD = \"xErrorHigh\";\nvar Y_ERROR_LOW_FIELD = \"yErrorLow\";\nvar Y_ERROR_HIGH_FIELD = \"yErrorHigh\";\nvar LINE_MARKER_SIZE = 8;\nvar ZERO = \"zero\";\nvar INTERPOLATE = \"interpolate\";\nvar GAP = \"gap\";\nvar ABOVE = \"above\";\nvar BELOW = \"below\";\n\nvar SMOOTH = \"smooth\";\nvar STEP = \"step\";\n\nvar AREA = \"area\";\nvar BAR = \"bar\";\nvar BOX_PLOT = \"boxPlot\";\nvar BUBBLE = \"bubble\";\nvar BULLET = \"bullet\";\nvar CANDLESTICK = \"candlestick\";\nvar COLUMN = \"column\";\nvar DONUT = \"donut\";\nvar FUNNEL = \"funnel\";\nvar PYRAMID = \"pyramid\";\nvar HEATMAP = \"heatmap\";\nvar HORIZONTAL_WATERFALL = \"horizontalWaterfall\";\nvar LINE = \"line\";\nvar OHLC = \"ohlc\";\nvar PIE = \"pie\";\nvar POLAR_AREA = \"polarArea\";\nvar POLAR_LINE = \"polarLine\";\nvar POLAR_SCATTER = \"polarScatter\";\nvar RADAR_AREA = \"radarArea\";\nvar RADAR_COLUMN = \"radarColumn\";\nvar RADAR_LINE = \"radarLine\";\nvar RANGE_AREA = \"rangeArea\";\nvar RANGE_BAR = \"rangeBar\";\nvar RANGE_COLUMN = \"rangeColumn\";\nvar SCATTER = \"scatter\";\nvar SCATTER_LINE = \"scatterLine\";\nvar VERTICAL_AREA = \"verticalArea\";\nvar VERTICAL_BOX_PLOT = \"verticalBoxPlot\";\nvar VERTICAL_BULLET = \"verticalBullet\";\nvar VERTICAL_LINE = \"verticalLine\";\nvar VERTICAL_RANGE_AREA = \"verticalRangeArea\";\nvar WATERFALL = \"waterfall\";\nvar EQUALLY_SPACED_SERIES = [\n    BAR, COLUMN, OHLC, CANDLESTICK, BOX_PLOT, VERTICAL_BOX_PLOT,\n    BULLET, RANGE_COLUMN, RANGE_BAR, WATERFALL, HORIZONTAL_WATERFALL\n];\n\nvar TRENDLINE_EXPONENTIAL = 'exponentialTrendline';\nvar TRENDLINE_LINEAR = 'linearTrendline';\nvar TRENDLINE_LOGARITHMIC = 'logarithmicTrendline';\nvar TRENDLINE_MOVING_AVERAGE = 'movingAverageTrendline';\nvar TRENDLINE_POLYNOMIAL = 'polynomialTrendline';\nvar TRENDLINE_POWER = 'powerTrendline';\nvar TRENDLINE_SERIES = [\n    TRENDLINE_EXPONENTIAL,\n    TRENDLINE_LINEAR,\n    TRENDLINE_LOGARITHMIC,\n    TRENDLINE_MOVING_AVERAGE,\n    TRENDLINE_POLYNOMIAL,\n    TRENDLINE_POWER\n];\n\nvar LEGEND_ITEM_CLICK = \"legendItemClick\";\nvar LEGEND_ITEM_HOVER = \"legendItemHover\";\nvar LEGEND_ITEM_LEAVE = \"legendItemLeave\";\nvar SERIES_CLICK = \"seriesClick\";\nvar SERIES_HOVER = \"seriesHover\";\nvar SERIES_OVER = \"seriesOver\";\nvar SERIES_LEAVE = \"seriesLeave\";\nvar PLOT_AREA_CLICK = \"plotAreaClick\";\nvar PLOT_AREA_HOVER = \"plotAreaHover\";\nvar PLOT_AREA_LEAVE = \"plotAreaLeave\";\nvar DRAG = \"drag\";\nvar DRAG_END = \"dragEnd\";\nvar DRAG_START = \"dragStart\";\nvar ZOOM_START = \"zoomStart\";\nvar ZOOM = \"zoom\";\nvar ZOOM_END = \"zoomEnd\";\nvar SELECT_START = \"selectStart\";\nvar SELECT = \"select\";\nvar SELECT_END = \"selectEnd\";\nvar RENDER = \"render\";\nvar SHOW_TOOLTIP = \"showTooltip\";\nvar HIDE_TOOLTIP = \"hideTooltip\";\nvar PANE_RENDER = \"paneRender\";\n\nvar CHART_POINT_ROLE = \"graphics-symbol\";\nvar CHART_POINT_CLASSNAME = \"k-chart-point\";\nvar CHART_POINT_ROLE_DESCRIPTION = \"Point\";\nvar LEGEND_ITEM_ROLE = \"checkbox\";\nvar LEGEND_ITEM_CLASSNAME = \"k-chart-legend-item\";\nvar LEGEND_ITEM_ARIA_ROLE_DESCRIPTION = \"Legend item\";\n\nvar LOGARITHMIC = \"log\";\nvar CATEGORY = \"category\";\n\nvar INSIDE_END = \"insideEnd\";\nvar INSIDE_BASE = \"insideBase\";\nvar OUTSIDE_END = \"outsideEnd\";\n\nvar MOUSEWHEEL = \"wheel\";\nvar MOUSEWHEEL_DELAY = 150;\nvar MOUSEWHEEL_ZOOM_RATE = 0.3;\n\nvar DRILLDOWN = \"drilldown\";\nvar DRILLDOWN_FIELD = \"drilldown\";\n\nvar MIN_MOVING_AVERAGE_PERIOD = 2;\n\nvar constants = {\n\tINITIAL_ANIMATION_DURATION: INITIAL_ANIMATION_DURATION,\n\tFADEIN: FADEIN,\n\tLEGEND_ITEM_CLICK: LEGEND_ITEM_CLICK,\n\tLEGEND_ITEM_HOVER: LEGEND_ITEM_HOVER,\n\tLEGEND_ITEM_LEAVE: LEGEND_ITEM_LEAVE,\n\tSERIES_CLICK: SERIES_CLICK,\n\tSERIES_HOVER: SERIES_HOVER,\n\tSERIES_OVER: SERIES_OVER,\n\tSERIES_LEAVE: SERIES_LEAVE,\n\tGLASS: GLASS,\n\tBORDER_BRIGHTNESS: BORDER_BRIGHTNESS,\n\tTOOLTIP_OFFSET: TOOLTIP_OFFSET,\n\tSTART_SCALE: START_SCALE,\n\tERROR_LOW_FIELD: ERROR_LOW_FIELD,\n\tERROR_HIGH_FIELD: ERROR_HIGH_FIELD,\n\tX_ERROR_LOW_FIELD: X_ERROR_LOW_FIELD,\n\tX_ERROR_HIGH_FIELD: X_ERROR_HIGH_FIELD,\n\tY_ERROR_LOW_FIELD: Y_ERROR_LOW_FIELD,\n\tY_ERROR_HIGH_FIELD: Y_ERROR_HIGH_FIELD,\n\tLINE_MARKER_SIZE: LINE_MARKER_SIZE,\n\tINTERPOLATE: INTERPOLATE,\n\tZERO: ZERO,\n\tSMOOTH: SMOOTH,\n\tSTEP: STEP,\n\tCATEGORY: CATEGORY,\n\tFUNNEL: FUNNEL,\n\tPYRAMID: PYRAMID,\n\tBAR: BAR,\n\tCANDLESTICK: CANDLESTICK,\n\tPIE: PIE,\n\tCOLUMN: COLUMN,\n\tAREA: AREA,\n\tVERTICAL_BULLET: VERTICAL_BULLET,\n\tBOX_PLOT: BOX_PLOT,\n\tOHLC: OHLC,\n\tWATERFALL: WATERFALL,\n\tLINE: LINE,\n\tBULLET: BULLET,\n\tVERTICAL_LINE: VERTICAL_LINE,\n\tVERTICAL_AREA: VERTICAL_AREA,\n\tRANGE_AREA: RANGE_AREA,\n\tVERTICAL_RANGE_AREA: VERTICAL_RANGE_AREA,\n\tRANGE_COLUMN: RANGE_COLUMN,\n\tVERTICAL_BOX_PLOT: VERTICAL_BOX_PLOT,\n\tRANGE_BAR: RANGE_BAR,\n\tHORIZONTAL_WATERFALL: HORIZONTAL_WATERFALL,\n\tSCATTER: SCATTER,\n\tSCATTER_LINE: SCATTER_LINE,\n\tBUBBLE: BUBBLE,\n\tRADAR_AREA: RADAR_AREA,\n\tRADAR_LINE: RADAR_LINE,\n\tRADAR_COLUMN: RADAR_COLUMN,\n\tPOLAR_LINE: POLAR_LINE,\n\tPOLAR_AREA: POLAR_AREA,\n\tPOLAR_SCATTER: POLAR_SCATTER,\n\tRENDER: RENDER,\n\tPLOT_AREA_CLICK: PLOT_AREA_CLICK,\n\tPLOT_AREA_HOVER: PLOT_AREA_HOVER,\n\tPLOT_AREA_LEAVE: PLOT_AREA_LEAVE,\n\tLOGARITHMIC: LOGARITHMIC,\n\tDRAG: DRAG,\n\tDRAG_START: DRAG_START,\n\tDRAG_END: DRAG_END,\n\tZOOM_START: ZOOM_START,\n\tZOOM: ZOOM,\n\tZOOM_END: ZOOM_END,\n\tSELECT_START: SELECT_START,\n\tSELECT: SELECT,\n\tSELECT_END: SELECT_END,\n\tPANE_RENDER: PANE_RENDER,\n\tGAP: GAP,\n\tDONUT: DONUT,\n\tINSIDE_END: INSIDE_END,\n\tINSIDE_BASE: INSIDE_BASE,\n\tOUTSIDE_END: OUTSIDE_END,\n\tMOUSEWHEEL: MOUSEWHEEL,\n\tMOUSEWHEEL_DELAY: MOUSEWHEEL_DELAY,\n\tMOUSEWHEEL_ZOOM_RATE: MOUSEWHEEL_ZOOM_RATE,\n\tSHOW_TOOLTIP: SHOW_TOOLTIP,\n\tHIDE_TOOLTIP: HIDE_TOOLTIP,\n\tEQUALLY_SPACED_SERIES: EQUALLY_SPACED_SERIES,\n\tABOVE: ABOVE,\n\tBELOW: BELOW,\n\tHEATMAP: HEATMAP,\n\tDRILLDOWN: DRILLDOWN,\n\tDRILLDOWN_FIELD: DRILLDOWN_FIELD,\n\tMIN_MOVING_AVERAGE_PERIOD: MIN_MOVING_AVERAGE_PERIOD,\n\tTRENDLINE_SERIES: TRENDLINE_SERIES,\n\tTRENDLINE_EXPONENTIAL: TRENDLINE_EXPONENTIAL,\n\tTRENDLINE_LINEAR: TRENDLINE_LINEAR,\n\tTRENDLINE_LOGARITHMIC: TRENDLINE_LOGARITHMIC,\n\tTRENDLINE_MOVING_AVERAGE: TRENDLINE_MOVING_AVERAGE,\n\tTRENDLINE_POLYNOMIAL: TRENDLINE_POLYNOMIAL,\n\tTRENDLINE_POWER: TRENDLINE_POWER,\n\tCHART_POINT_ROLE: CHART_POINT_ROLE,\n\tCHART_POINT_CLASSNAME: CHART_POINT_CLASSNAME,\n\tCHART_POINT_ROLE_DESCRIPTION: CHART_POINT_ROLE_DESCRIPTION,\n\tLEGEND_ITEM_ROLE: LEGEND_ITEM_ROLE,\n\tLEGEND_ITEM_CLASSNAME: LEGEND_ITEM_CLASSNAME,\n\tLEGEND_ITEM_ARIA_ROLE_DESCRIPTION: LEGEND_ITEM_ARIA_ROLE_DESCRIPTION\n};\n\nvar DEFAULT_ERROR_BAR_WIDTH = 4;\n\nvar ErrorBarBase = ChartElement.extend({\n    init: function(low, high, isVertical, chart, series, options) {\n        ChartElement.fn.init.call(this, options);\n\n        this.low = low;\n        this.high = high;\n        this.isVertical = isVertical;\n        this.chart = chart;\n        this.series = series;\n    },\n\n    reflow: function(targetBox) {\n        var endCaps = this.options.endCaps;\n        var isVertical = this.isVertical;\n        var axis = this.getAxis();\n        var valueBox = axis.getSlot(this.low, this.high);\n        var centerBox = targetBox.center();\n        var capsWidth = this.getCapsWidth(targetBox, isVertical);\n        var capValue = isVertical ? centerBox.x : centerBox.y;\n        var capStart = capValue - capsWidth;\n        var capEnd = capValue + capsWidth;\n        var linePoints;\n\n        if (isVertical) {\n            linePoints = [\n                new Point(centerBox.x, valueBox.y1),\n                new Point(centerBox.x, valueBox.y2)\n            ];\n            if (endCaps) {\n                linePoints.push(new Point(capStart, valueBox.y1),\n                    new Point(capEnd, valueBox.y1),\n                    new Point(capStart, valueBox.y2),\n                    new Point(capEnd, valueBox.y2));\n            }\n            this.box = new Box(capStart, valueBox.y1, capEnd, valueBox.y2);\n        } else {\n            linePoints = [\n                new Point(valueBox.x1, centerBox.y),\n                new Point(valueBox.x2, centerBox.y)\n            ];\n            if (endCaps) {\n                linePoints.push(new Point(valueBox.x1, capStart),\n                    new Point(valueBox.x1, capEnd),\n                    new Point(valueBox.x2, capStart),\n                    new Point(valueBox.x2, capEnd));\n            }\n            this.box = new Box(valueBox.x1, capStart, valueBox.x2, capEnd);\n        }\n\n        this.linePoints = linePoints;\n    },\n\n    getCapsWidth: function(box, isVertical) {\n        var boxSize = isVertical ? box.width() : box.height();\n        var capsWidth = Math.min(Math.floor(boxSize / 2), DEFAULT_ERROR_BAR_WIDTH) || DEFAULT_ERROR_BAR_WIDTH;\n\n        return capsWidth;\n    },\n\n    createVisual: function() {\n        var this$1$1 = this;\n\n        var options = this.options;\n        var visual = options.visual;\n\n        if (visual) {\n            this.visual = visual({\n                low: this.low,\n                high: this.high,\n                rect: this.box.toRect(),\n                sender: this.getSender(),\n                options: {\n                    endCaps: options.endCaps,\n                    color: options.color,\n                    line: options.line\n                },\n                createVisual: function () {\n                    this$1$1.createDefaultVisual();\n                    var defaultVisual = this$1$1.visual;\n                    delete this$1$1.visual;\n                    return defaultVisual;\n                }\n            });\n        } else {\n            this.createDefaultVisual();\n        }\n    },\n\n    createDefaultVisual: function() {\n        var this$1$1 = this;\n\n        var ref = this;\n        var options = ref.options;\n        var linePoints = ref.linePoints;\n        var lineOptions = {\n            stroke: {\n                color: options.color,\n                width: options.line.width,\n                dashType: options.line.dashType\n            }\n        };\n\n        ChartElement.fn.createVisual.call(this);\n\n        for (var idx = 0; idx < linePoints.length; idx += 2) {\n            var line = new Path(lineOptions)\n                .moveTo(linePoints[idx].x, linePoints[idx].y)\n                .lineTo(linePoints[idx + 1].x, linePoints[idx + 1].y);\n\n            alignPathToPixel(line);\n            this$1$1.visual.append(line);\n        }\n    }\n});\n\nsetDefaultOptions(ErrorBarBase, {\n    animation: {\n        type: FADEIN,\n        delay: INITIAL_ANIMATION_DURATION\n    },\n    endCaps: true,\n    line: {\n        width: 2\n    },\n    zIndex: 1\n});\n\nvar CategoricalErrorBar = ErrorBarBase.extend({\n    getAxis: function() {\n        var axis = this.chart.seriesValueAxis(this.series);\n\n        return axis;\n    }\n});\n\nfunction anyHasZIndex(elements) {\n    for (var idx = 0; idx < elements.length; idx++) {\n        if (defined(elements[idx].zIndex)) {\n            return true;\n        }\n    }\n}\n\nfunction appendIfNotNull(array, element) {\n    if (element !== null) {\n        array.push(element);\n    }\n}\n\nfunction areNumbers(values) {\n    return countNumbers(values) === values.length;\n}\n\nfunction segmentVisible(series, fields, index) {\n    var visible = fields.visible;\n    if (defined(visible)) {\n        return visible;\n    }\n\n    var pointVisibility = series.pointVisibility;\n    if (pointVisibility) {\n        return pointVisibility[index];\n    }\n}\n\nfunction bindSegments(series) {\n    var data = series.data;\n    var points = [];\n    var sum = 0;\n    var count = 0;\n\n    for (var idx = 0; idx < data.length; idx++) {\n        var pointData = SeriesBinder.current.bindPoint(series, idx);\n        var value = pointData.valueFields.value;\n\n        if (isString(value)) {\n            value = parseFloat(value);\n        }\n\n        if (isNumber(value)) {\n            pointData.visible = segmentVisible(series, pointData.fields, idx) !== false;\n\n            pointData.value = Math.abs(value);\n            points.push(pointData);\n\n            if (pointData.visible) {\n                sum += pointData.value;\n            }\n\n            if (value !== 0) {\n                count++;\n            }\n        } else {\n            points.push(null);\n        }\n    }\n\n    return {\n        total: sum,\n        points: points,\n        count: count\n    };\n}\n\nfunction categoriesCount(series) {\n    var seriesCount = series.length;\n    var categories = 0;\n\n    for (var i = 0; i < seriesCount; i++) {\n        categories = Math.max(categories, series[i].data.length);\n    }\n\n    return categories;\n}\n\nfunction equalsIgnoreCase(a, b) {\n    if (a && b) {\n        return a.toLowerCase() === b.toLowerCase();\n    }\n\n    return a === b;\n}\n\nvar MAX_EXPAND_DEPTH = 5;\n\nfunction evalOptions(options, context, state, dryRun) {\n    if (state === void 0) { state = {}; }\n    if (dryRun === void 0) { dryRun = false; }\n\n    var defaults = state.defaults = state.defaults || {};\n    var depth = state.depth = state.depth || 0;\n    var needsEval = false;\n\n    state.excluded = state.excluded || [];\n\n    if (depth > MAX_EXPAND_DEPTH) {\n        return null;\n    }\n\n    for (var property in options) {\n        if (!inArray(property, state.excluded) && dataviz.hasOwnProperty(options, property)) {\n            var propValue = options[property];\n            if (isFunction(propValue)) {\n                needsEval = true;\n                if (!dryRun) {\n                    options[property] = valueOrDefault(propValue(context), defaults[property]);\n                }\n            } else if (isObject(propValue)) {\n                if (!dryRun) {\n                    state.defaults = defaults[property];\n                }\n                state.depth++;\n                needsEval = evalOptions(propValue, context, state, dryRun) || needsEval;\n                state.depth--;\n            }\n        }\n    }\n\n    return needsEval;\n}\n\nfunction filterSeriesByType(series, types) {\n    var result = [];\n\n    var seriesTypes = [].concat(types);\n    for (var idx = 0; idx < series.length; idx++) {\n        var currentSeries = series[idx];\n        if (inArray(currentSeries.type, seriesTypes)) {\n            result.push(currentSeries);\n        }\n    }\n\n    return result;\n}\n\nvar dateCache = new WeakMap();\n\nfunction parseDateCategory(category, row, intlService) {\n    if (row === null || typeof row !== 'object') {\n        return parseDate(intlService, category);\n    }\n\n    var date = dateCache.get(row);\n    if (!date) {\n        date = parseDate(intlService, category);\n        dateCache.set(row, date);\n    }\n\n    return date;\n}\n\nfunction hasGradientOverlay(options) {\n    var overlay = options.overlay;\n\n    return overlay && overlay.gradient && overlay.gradient !== \"none\";\n}\n\nfunction hasValue(value) {\n    return defined(value) && value !== null;\n}\n\nfunction isDateAxis(axisOptions, sampleCategory) {\n    var type = axisOptions.type;\n    var dateCategory = sampleCategory instanceof Date;\n\n    return (!type && dateCategory) || equalsIgnoreCase(type, DATE);\n}\n\nfunction singleItemOrArray(array) {\n    return array.length === 1 ? array[0] : array;\n}\n\nvar AREA_REGEX = /area/i;\n\nfunction seriesMissingValues(series) {\n    if (series.missingValues) {\n        return series.missingValues;\n    }\n\n    return AREA_REGEX.test(series.type) || series.stack ? ZERO : INTERPOLATE;\n}\n\nfunction hasValue$1(series, item) {\n    var fields = SeriesBinder.current.bindPoint(series, null, item);\n    var valueFields = fields.valueFields;\n\n    for (var field in valueFields) {\n        if (dataviz.convertableToNumber(valueFields[field])) {\n            return true;\n        }\n    }\n}\n\nfunction findNext(ref) {\n    var start = ref.start;\n    var dir = ref.dir;\n    var min = ref.min;\n    var max = ref.max;\n    var getter$$1 = ref.getter;\n    var hasItem = ref.hasItem;\n    var series = ref.series;\n\n    var pointHasValue, outPoint;\n    var idx = start;\n    do {\n        idx += dir;\n        //aggregating and binding the item takes too much time for large number of categories\n        //will assume that if the aggregation does not create value for a missing item for one it will not create for others\n        if (hasItem(idx)) {\n            outPoint = getter$$1(idx);\n            pointHasValue = hasValue$1(series, outPoint.item);\n        }\n    } while (min <= idx && idx <= max && !pointHasValue);\n\n    if (pointHasValue) {\n        return outPoint;\n    }\n}\n\nfunction createOutOfRangePoints(series, range, count, getter$$1, hasItem) {\n    var min = range.min;\n    var max = range.max;\n    var hasMinPoint = min > 0 && min < count;\n    var hasMaxPoint = max + 1 < count;\n\n    if (hasMinPoint || hasMaxPoint) {\n        var missingValues = seriesMissingValues(series);\n        var minPoint, maxPoint;\n        if (missingValues !== INTERPOLATE) {\n            if (hasMinPoint) {\n                minPoint = getter$$1(min - 1);\n            }\n\n            if (hasMaxPoint) {\n                maxPoint = getter$$1(max + 1);\n            }\n        } else {\n            var outPoint, pointHasValue;\n            if (hasMinPoint) {\n                outPoint = getter$$1(min - 1);\n                pointHasValue = hasValue$1(series, outPoint.item);\n                if (!pointHasValue) {\n                    minPoint = findNext({\n                        start: min,\n                        dir: -1,\n                        min: 0,\n                        max: count - 1,\n                        getter: getter$$1,\n                        hasItem: hasItem,\n                        series: series\n                    });\n                } else {\n                    minPoint = outPoint;\n                }\n            }\n\n            if (hasMaxPoint) {\n                outPoint = getter$$1(max + 1);\n                pointHasValue = hasValue$1(series, outPoint.item);\n                if (!pointHasValue) {\n                    maxPoint = findNext({\n                        start: max,\n                        dir: 1,\n                        min: 0,\n                        max: count - 1,\n                        getter: getter$$1,\n                        hasItem: hasItem,\n                        series: series\n                    });\n                } else {\n                    maxPoint = outPoint;\n                }\n            }\n        }\n\n        if (minPoint) {\n            series._outOfRangeMinPoint = minPoint;\n        }\n\n        if (maxPoint) {\n            series._outOfRangeMaxPoint = maxPoint;\n        }\n    }\n}\n\nvar CategoricalChart = ChartElement.extend({\n    init: function(plotArea, options) {\n        ChartElement.fn.init.call(this, options);\n\n        this.plotArea = plotArea;\n        this.chartService = plotArea.chartService;\n        this.categoryAxis = plotArea.seriesCategoryAxis(options.series[0]);\n\n        // Value axis ranges grouped by axis name, e.g.:\n        // primary: { min: 0, max: 1 }\n        this.valueAxisRanges = {};\n\n        this.points = [];\n        this.categoryPoints = [];\n        this.seriesPoints = [];\n        this.seriesOptions = [];\n        this._evalSeries = [];\n\n        this.render();\n    },\n\n    render: function() {\n        this.traverseDataPoints(this.addValue.bind(this));\n    },\n\n    pointOptions: function(series, seriesIx) {\n        var options = this.seriesOptions[seriesIx];\n        if (!options) {\n            var defaults = this.pointType().prototype.defaults;\n            this.seriesOptions[seriesIx] = options = deepExtend({ }, defaults, {\n                vertical: !this.options.invertAxes\n            }, series);\n        }\n\n        return options;\n    },\n\n    plotValue: function(point) {\n        if (!point) {\n            return 0;\n        }\n\n        if (this.options.isStacked100 && isNumber(point.value)) {\n            var categoryIx = point.categoryIx;\n            var categoryPoints = this.categoryPoints[categoryIx];\n            var otherValues = [];\n            var categorySum = 0;\n\n            for (var i = 0; i < categoryPoints.length; i++) {\n                var other = categoryPoints[i];\n                if (other) {\n                    var stack = point.series.stack;\n                    var otherStack = other.series.stack;\n\n                    if ((stack && otherStack) && stack.group !== otherStack.group) {\n                        continue;\n                    }\n\n                    if (isNumber(other.value)) {\n                        categorySum += Math.abs(other.value);\n                        otherValues.push(Math.abs(other.value));\n                    }\n                }\n            }\n\n            if (categorySum > 0) {\n                return point.value / categorySum;\n            }\n        }\n\n        return point.value;\n    },\n\n    plotRange: function(point, startValue) {\n        var this$1$1 = this;\n        if (startValue === void 0) { startValue = 0; }\n\n        var categoryPoints = this.categoryPoints[point.categoryIx];\n\n        if (this.options.isStacked) {\n            var plotValue = this.plotValue(point);\n            var positive = plotValue >= 0;\n            var prevValue = startValue;\n            var isStackedBar = false;\n            var stack = defined(point.series.stack) ? point.series.stack : this.options.defaultStack;\n            var isNonGroupStack = function (stack) { return stack === true || typeof stack === datavizConstants.OBJECT && !stack.group; };\n\n            if (stack) {\n                for (var i = 0; i < categoryPoints.length; i++) {\n                    var other = categoryPoints[i];\n\n                    if (point === other) {\n                        break;\n                    }\n\n                    var otherStack = defined(other.series.stack) ? other.series.stack : this$1$1.options.defaultStack;\n\n                    if (!otherStack) {\n                        continue;\n                    }\n\n                    if (typeof stack === datavizConstants.STRING && stack !== otherStack) {\n                        continue;\n                    }\n\n                    if (isNonGroupStack(stack) && !isNonGroupStack(otherStack)) {\n                        continue;\n                    }\n\n                    if (stack.group && stack.group !== otherStack.group) {\n                        continue;\n                    }\n\n                    var otherValue = this$1$1.plotValue(other);\n                    if ((otherValue >= 0 && positive) ||\n                        (otherValue < 0 && !positive)) {\n                        // zero values should be skipped for log axis (startValue !== 0)\n                        if (startValue === 0 || otherValue !== 0) {\n                            prevValue += otherValue;\n                            plotValue += otherValue;\n                            isStackedBar = true;\n\n                            if (this$1$1.options.isStacked100) {\n                                plotValue = Math.min(plotValue, 1);\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (isStackedBar) {\n                prevValue -= startValue;\n            }\n\n            return [ prevValue, plotValue ];\n        }\n\n        var series = point.series;\n        var valueAxis = this.seriesValueAxis(series);\n        var axisCrossingValue = this.categoryAxisCrossingValue(valueAxis);\n\n        return [ axisCrossingValue, dataviz.convertableToNumber(point.value) ? point.value : axisCrossingValue ];\n    },\n\n    stackLimits: function(axisName, stackName) {\n        var this$1$1 = this;\n\n        var min = MAX_VALUE;\n        var max = MIN_VALUE;\n\n        for (var i = 0; i < this.categoryPoints.length; i++) {\n            var categoryPoints = this$1$1.categoryPoints[i];\n            if (!categoryPoints) {\n                continue;\n            }\n\n            for (var pIx = 0; pIx < categoryPoints.length; pIx++) {\n                var point = categoryPoints[pIx];\n                if (point) {\n                    if (point.series.stack === stackName || point.series.axis === axisName) {\n                        var to = this$1$1.plotRange(point, 0)[1];\n                        if (defined(to) && isFinite(to)) {\n                            max = Math.max(max, to);\n                            min = Math.min(min, to);\n                        }\n                    }\n                }\n            }\n        }\n\n        return { min: min, max: max };\n    },\n\n    updateStackRange: function() {\n        var this$1$1 = this;\n\n        var ref = this.options;\n        var isStacked = ref.isStacked;\n        var chartSeries = ref.series;\n        var limitsCache = {};\n\n        if (isStacked) {\n            for (var i = 0; i < chartSeries.length; i++) {\n                var series = chartSeries[i];\n                var axisName = series.axis;\n                var key = axisName + series.stack;\n\n                var limits = limitsCache[key];\n                if (!limits) {\n                    limits = this$1$1.stackLimits(axisName, series.stack);\n\n                    var errorTotals = this$1$1.errorTotals;\n                    if (errorTotals) {\n                        if (errorTotals.negative.length) {\n                            limits.min = Math.min(limits.min, dataviz.sparseArrayLimits(errorTotals.negative).min);\n                        }\n                        if (errorTotals.positive.length) {\n                            limits.max = Math.max(limits.max, dataviz.sparseArrayLimits(errorTotals.positive).max);\n                        }\n                    }\n\n                    if (limits.min !== MAX_VALUE || limits.max !== MIN_VALUE) {\n                        limitsCache[key] = limits;\n                    } else {\n                        limits = null;\n                    }\n                }\n\n                if (limits) {\n                    this$1$1.valueAxisRanges[axisName] = limits;\n                }\n            }\n        }\n    },\n\n    addErrorBar: function(point, data, categoryIx) {\n        var value = point.value;\n        var series = point.series;\n        var seriesIx = point.seriesIx;\n        var errorBars = point.options.errorBars;\n        var lowValue = data.fields[ERROR_LOW_FIELD];\n        var highValue = data.fields[ERROR_HIGH_FIELD];\n        var errorRange;\n\n        if (isNumber(lowValue) && isNumber(highValue)) {\n            errorRange = { low: lowValue, high: highValue };\n        } else if (errorBars && defined(errorBars.value)) {\n            this.seriesErrorRanges = this.seriesErrorRanges || [];\n            this.seriesErrorRanges[seriesIx] = this.seriesErrorRanges[seriesIx] ||\n                new ErrorRangeCalculator(errorBars.value, series, VALUE);\n\n            errorRange = this.seriesErrorRanges[seriesIx].getErrorRange(value, errorBars.value);\n        }\n\n        if (errorRange) {\n            point.low = errorRange.low;\n            point.high = errorRange.high;\n            this.addPointErrorBar(point, categoryIx);\n        }\n    },\n\n    addPointErrorBar: function(point, categoryIx) {\n        var isVertical = !this.options.invertAxes;\n        var options = point.options.errorBars;\n        var series = point.series;\n        var low = point.low;\n        var high = point.high;\n\n        if (this.options.isStacked) {\n            var stackedErrorRange = this.stackedErrorRange(point, categoryIx);\n            low = stackedErrorRange.low;\n            high = stackedErrorRange.high;\n        } else {\n            var fields = { categoryIx: categoryIx, series: series };\n            this.updateRange({ value: low }, fields);\n            this.updateRange({ value: high }, fields);\n        }\n\n        var errorBar = new CategoricalErrorBar(low, high, isVertical, this, series, options);\n        point.errorBars = [ errorBar ];\n        point.append(errorBar);\n    },\n\n    stackedErrorRange: function(point, categoryIx) {\n        var plotValue = this.plotRange(point, 0)[1] - point.value;\n        var low = point.low + plotValue;\n        var high = point.high + plotValue;\n\n        this.errorTotals = this.errorTotals || { positive: [], negative: [] };\n\n        if (low < 0) {\n            this.errorTotals.negative[categoryIx] = Math.min(this.errorTotals.negative[categoryIx] || 0, low);\n        }\n\n        if (high > 0) {\n            this.errorTotals.positive[categoryIx] = Math.max(this.errorTotals.positive[categoryIx] || 0, high);\n        }\n\n        return { low: low, high: high };\n    },\n\n    addValue: function(data, fields) {\n        var categoryIx = fields.categoryIx;\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n\n        var categoryPoints = this.categoryPoints[categoryIx];\n        if (!categoryPoints) {\n            this.categoryPoints[categoryIx] = categoryPoints = [];\n        }\n\n        var seriesPoints = this.seriesPoints[seriesIx];\n        if (!seriesPoints) {\n            this.seriesPoints[seriesIx] = seriesPoints = [];\n        }\n\n        var point = this.createPoint(data, fields);\n        if (point) {\n            $.extend(point, fields);\n\n            point.owner = this;\n            point.noteText = data.fields.noteText;\n            if (!defined(point.dataItem)) {\n                point.dataItem = series.data[categoryIx];\n            }\n            this.addErrorBar(point, data, categoryIx);\n        }\n\n        this.points.push(point);\n        seriesPoints.push(point);\n        categoryPoints.push(point);\n\n        this.updateRange(data.valueFields, fields);\n    },\n\n    evalPointOptions: function(options, value, fields) {\n        var categoryIx = fields.categoryIx;\n        var category = fields.category;\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var state = {\n            defaults: series._defaults,\n            excluded: [\n                \"data\", \"aggregate\", \"_events\", \"tooltip\", \"content\", \"template\",\n                \"visual\", \"toggle\", \"_outOfRangeMinPoint\", \"_outOfRangeMaxPoint\",\n                \"drilldownSeriesFactory\", \"ariaTemplate\", \"ariaContent\"\n            ]\n        };\n\n        var doEval = this._evalSeries[seriesIx];\n        if (!defined(doEval)) {\n            this._evalSeries[seriesIx] = doEval = evalOptions(options, {}, state, true);\n        }\n\n        var pointOptions = options;\n        if (doEval) {\n            pointOptions = deepExtend({}, pointOptions);\n            evalOptions(pointOptions, {\n                value: value,\n                category: category,\n                index: categoryIx,\n                series: series,\n                dataItem: series.data[categoryIx]\n            }, state);\n        }\n\n        return pointOptions;\n    },\n\n    updateRange: function(data, fields) {\n        var axisName = fields.series.axis;\n        var value = data.value;\n        var axisRange = this.valueAxisRanges[axisName];\n\n        if (isFinite(value) && value !== null) {\n            axisRange = this.valueAxisRanges[axisName] =\n                axisRange || { min: MAX_VALUE, max: MIN_VALUE };\n\n            axisRange.min = Math.min(axisRange.min, value);\n            axisRange.max = Math.max(axisRange.max, value);\n        }\n    },\n\n    seriesValueAxis: function(series) {\n        var plotArea = this.plotArea;\n        var axisName = series.axis;\n        var axis = axisName ? plotArea.namedValueAxes[axisName] : plotArea.valueAxis;\n\n        if (!axis) {\n            throw new Error(\"Unable to locate value axis with name \" + axisName);\n        }\n\n        return axis;\n    },\n\n    reflow: function(targetBox) {\n        var this$1$1 = this;\n\n        var categorySlots = this.categorySlots = [];\n        var chartPoints = this.points;\n        var categoryAxis = this.categoryAxis;\n        var pointIx = 0;\n\n        this.traverseDataPoints(function (data, fields) {\n            var categoryIx = fields.categoryIx;\n            var currentSeries = fields.series;\n\n            var valueAxis = this$1$1.seriesValueAxis(currentSeries);\n            var point = chartPoints[pointIx++];\n\n            var categorySlot = categorySlots[categoryIx];\n            if (!categorySlot) {\n                categorySlots[categoryIx] = categorySlot =\n                    this$1$1.categorySlot(categoryAxis, categoryIx, valueAxis);\n            }\n\n            if (point) {\n                var plotRange = this$1$1.plotRange(point, valueAxis.startValue());\n                var valueSlot = this$1$1.valueSlot(valueAxis, plotRange);\n                if (valueSlot) {\n                    var pointSlot = this$1$1.pointSlot(categorySlot, valueSlot);\n\n                    point.aboveAxis = this$1$1.aboveAxis(point, valueAxis);\n                    point.stackValue = plotRange[1];\n\n                    if (this$1$1.options.isStacked100) {\n                        point.percentage = this$1$1.plotValue(point);\n                    }\n\n                    this$1$1.reflowPoint(point, pointSlot);\n                } else {\n                    point.visible = false;\n                }\n            }\n        });\n\n        this.reflowCategories(categorySlots);\n        if (!this.options.clip && this.options.limitPoints && this.points.length) {\n            this.limitPoints();\n        }\n\n        this.box = targetBox;\n    },\n\n    valueSlot: function(valueAxis, plotRange) {\n        return valueAxis.getSlot(plotRange[0], plotRange[1], !this.options.clip);\n    },\n\n    limitPoints: function() {\n        var this$1$1 = this;\n\n        var categoryPoints = this.categoryPoints;\n        var points = categoryPoints[0].concat(last(categoryPoints));\n        for (var idx = 0; idx < points.length; idx++) {\n            if (points[idx]) {\n                this$1$1.limitPoint(points[idx]);\n            }\n        }\n    },\n\n    limitPoint: function(point) {\n        var limitedSlot = this.categoryAxis.limitSlot(point.box);\n        if (!limitedSlot.equals(point.box)) {\n            point.reflow(limitedSlot);\n        }\n    },\n\n    aboveAxis: function(point, valueAxis) {\n        var axisCrossingValue = this.categoryAxisCrossingValue(valueAxis);\n        var value = point.value;\n\n        return valueAxis.options.reverse ?\n            value < axisCrossingValue : value >= axisCrossingValue;\n    },\n\n    categoryAxisCrossingValue: function(valueAxis) {\n        var categoryAxis = this.categoryAxis;\n        var options = valueAxis.options;\n        var crossingValues = [].concat(\n            options.axisCrossingValues || options.axisCrossingValue\n        );\n\n        return crossingValues[categoryAxis.axisIndex || 0] || 0;\n    },\n\n    reflowPoint: function(point, pointSlot) {\n        point.reflow(pointSlot);\n    },\n\n    reflowCategories: function() { },\n\n    pointSlot: function(categorySlot, valueSlot) {\n        var options = this.options;\n        var invertAxes = options.invertAxes;\n        var slotX = invertAxes ? valueSlot : categorySlot;\n        var slotY = invertAxes ? categorySlot : valueSlot;\n\n        return new Box(slotX.x1, slotY.y1, slotX.x2, slotY.y2);\n    },\n\n    categorySlot: function(categoryAxis, categoryIx) {\n        return categoryAxis.getSlot(categoryIx);\n    },\n\n    traverseDataPoints: function(callback) {\n        var this$1$1 = this;\n\n        var series = this.options.series;\n        var count = categoriesCount(series);\n        var seriesCount = series.length;\n\n        for (var seriesIx = 0; seriesIx < seriesCount; seriesIx++) {\n            this$1$1._outOfRangeCallback(series[seriesIx], \"_outOfRangeMinPoint\", seriesIx, callback);\n        }\n\n        for (var categoryIx = 0; categoryIx < count; categoryIx++) {\n            for (var seriesIx$1 = 0; seriesIx$1 < seriesCount; seriesIx$1++) {\n                var currentSeries = series[seriesIx$1];\n                var currentCategory = this$1$1.categoryAxis.categoryAt(categoryIx);\n                var pointData = this$1$1.plotArea.bindPoint(currentSeries, categoryIx);\n\n                callback(pointData, {\n                    category: currentCategory,\n                    categoryIx: categoryIx,\n                    categoriesCount: count,\n                    series: currentSeries,\n                    seriesIx: seriesIx$1\n                });\n            }\n        }\n\n        for (var seriesIx$2 = 0; seriesIx$2 < seriesCount; seriesIx$2++) {\n            this$1$1._outOfRangeCallback(series[seriesIx$2], \"_outOfRangeMaxPoint\", seriesIx$2, callback);\n        }\n    },\n\n    _outOfRangeCallback: function(series, field, seriesIx, callback) {\n        var outOfRangePoint = series[field];\n        if (outOfRangePoint) {\n            var categoryIx = outOfRangePoint.categoryIx;\n            var pointData = this.plotArea.bindPoint(series, categoryIx, outOfRangePoint.item);\n\n            callback(pointData, {\n                category: outOfRangePoint.category,\n                categoryIx: categoryIx,\n                series: series,\n                seriesIx: seriesIx,\n                dataItem: outOfRangePoint.item\n            });\n        }\n    },\n\n    formatPointValue: function(point, format) {\n        if (point.value === null) {\n            return \"\";\n        }\n\n        return this.chartService.format.auto(format, point.value);\n    },\n\n    pointValue: function(data) {\n        return data.valueFields.value;\n    }\n});\n\nsetDefaultOptions(CategoricalChart, {\n    series: [],\n    invertAxes: false,\n    isStacked: false,\n    clip: true,\n    limitPoints: true\n});\n\nvar PointEventsMixin = {\n    click: function(chart, e) {\n        return chart.trigger(\n            SERIES_CLICK,\n            this.eventArgs(e)\n        );\n    },\n\n    hover: function(chart, e) {\n        return chart.trigger(\n            SERIES_HOVER,\n            this.eventArgs(e)\n        );\n    },\n\n    over: function(chart, e) {\n        return chart.trigger(\n            SERIES_OVER,\n            this.eventArgs(e)\n        );\n    },\n\n    out: function(chart, e) {\n        return chart.trigger(\n            SERIES_LEAVE,\n            this.eventArgs(e)\n        );\n    },\n\n    eventArgs: function(e) {\n        return {\n            value: this.value,\n            percentage: this.percentage,\n            stackValue: this.stackValue,\n            category: this.category,\n            series: this.series,\n            dataItem: this.dataItem,\n            runningTotal: this.runningTotal,\n            total: this.total,\n            element: eventElement(e),\n            originalEvent: e,\n            point: this\n        };\n    }\n};\n\nvar NoteMixin = {\n    createNote: function() {\n        var options = this.options.notes;\n        var text = this.noteText || options.label.text;\n\n        if (options.visible !== false && defined(text) && text !== null) {\n            this.note = new dataviz.Note({\n                value: this.value,\n                text: text,\n                dataItem: this.dataItem,\n                category: this.category,\n                series: this.series\n            }, this.options.notes, this.owner.chartService);\n\n            this.append(this.note);\n        }\n    }\n};\n\nfunction guid() {\n    var id = \"\";\n    var i;\n    var random;\n\n    for (i = 0; i < 32; i++) {\n        random = Math.random() * 16 | 0;\n\n        if (i === 8 || i === 12 || i === 16 || i === 20) {\n            id += \"-\";\n        }\n\n        id += (i === 12 ? 4 : (i === 16 ? (random & 3 | 8) : random)).toString(16); // eslint-disable-line no-nested-ternary\n    }\n\n    return id;\n}\n\nvar LinePoint = ChartElement.extend({\n    init: function(value, options) {\n        ChartElement.fn.init.call(this);\n\n        this.value = value;\n        this.options = options;\n        this.aboveAxis = valueOrDefault(this.options.aboveAxis, true);\n        this.tooltipTracking = true;\n        this._id = guid();\n    },\n\n    render: function() {\n        var ref = this.options;\n        var markers = ref.markers;\n\n        if (this._rendered) {\n            return;\n        }\n\n        this._rendered = true;\n\n        if (markers.visible && markers.size) {\n            this.marker = this.createMarker();\n            this.append(this.marker);\n        }\n\n        this.createLabel();\n        this.createNote();\n\n        if (this.errorBar) {\n            this.append(this.errorBar);\n        }\n    },\n\n    createLabel: function() {\n        var options = this.options;\n        var labels = options.labels;\n\n        if (labels.visible) {\n            this.label = this.createLabelElement(labels);\n            this.append(this.label);\n        }\n    },\n\n    createLabelElement: function(options) {\n        return new TextBox(this.getLabelText(options),\n            deepExtend({\n                align: CENTER,\n                vAlign: CENTER,\n                margin: {\n                    left: 5,\n                    right: 5\n                },\n                zIndex: valueOrDefault(options.zIndex, this.series.zIndex)\n            }, options),\n            this.pointData()\n        );\n    },\n\n    getLabelText: function(options) {\n        var labelTemplate = getTemplate(options);\n\n        if (labelTemplate) {\n            return labelTemplate(this.pointData());\n        } else if (options.format) {\n            return this.formatValue(options.format);\n        }\n\n        return this.value;\n    },\n\n    getAriaLabelText: function() {\n        var labels = this.options.labels;\n        var ariaTemplate = dataviz.getAriaTemplate(labels);\n\n        if (ariaTemplate) {\n            return ariaTemplate(this.pointData());\n        }\n\n        return this.getLabelText(labels);\n    },\n\n    markerBorder: function() {\n        var options = this.options.markers;\n        var background = options.background;\n        var border = deepExtend({ color: this.color }, options.border);\n\n        if (!defined(border.color)) {\n            border.color = new Color(background).brightness(BORDER_BRIGHTNESS).toHex();\n        }\n\n        return border;\n    },\n\n    createVisual: function() {},\n\n    createMarker: function() {\n        var options = this.options.markers;\n        var marker = new ShapeElement({\n            type: options.type,\n            width: options.size,\n            height: options.size,\n            rotation: options.rotation,\n            background: options.background,\n            border: this.markerBorder(),\n            opacity: options.opacity,\n            zIndex: valueOrDefault(options.zIndex, this.series.zIndex),\n            animation: options.animation,\n            visual: options.visual,\n            accessibilityOptions: deepExtend({\n                ariaLabel: this.getAriaLabelText(this.options.labels)\n            }, this.options.accessibility)\n        }, {\n            dataItem: this.dataItem,\n            value: this.value,\n            series: this.series,\n            category: this.category\n        });\n\n        return marker;\n    },\n\n    markerBox: function() {\n        if (!this.marker) {\n            this.marker = this.createMarker();\n            this.marker.reflow(this._childBox);\n        }\n\n        return this.marker.box;\n    },\n\n    reflow: function(targetBox) {\n        var this$1$1 = this;\n\n        var ref = this;\n        var options = ref.options;\n        var aboveAxis = ref.aboveAxis;\n        var vertical = options.vertical;\n\n        this.render();\n\n        this.box = targetBox;\n        var childBox = targetBox.clone();\n\n        if (vertical) {\n            if (aboveAxis) {\n                childBox.y1 -= childBox.height();\n            } else {\n                childBox.y2 += childBox.height();\n            }\n        } else {\n            if (aboveAxis) {\n                childBox.x1 += childBox.width();\n            } else {\n                childBox.x2 -= childBox.width();\n            }\n        }\n\n        this._childBox = childBox;\n        if (this.marker) {\n            this.marker.reflow(childBox);\n        }\n\n        this.reflowLabel(childBox);\n\n        if (this.errorBars) {\n            for (var i = 0; i < this.errorBars.length; i++) {\n                this$1$1.errorBars[i].reflow(childBox);\n            }\n        }\n\n        if (this.note) {\n            var noteTargetBox = this.markerBox();\n\n            if (!(options.markers.visible && options.markers.size)) {\n                var center = noteTargetBox.center();\n                noteTargetBox = new Box(center.x, center.y, center.x, center.y);\n            }\n\n            this.note.reflow(noteTargetBox);\n        }\n    },\n\n    reflowLabel: function(box) {\n        var ref = this;\n        var options = ref.options;\n        var label = ref.label;\n        var anchor = options.labels.position;\n\n        if (label) {\n            anchor = anchor === ABOVE ? TOP : anchor;\n            anchor = anchor === BELOW ? BOTTOM : anchor;\n\n            label.reflow(box);\n            label.box.alignTo(this.markerBox(), anchor);\n            label.reflow(label.box);\n        }\n    },\n\n    createHighlight: function() {\n        var markers = this.options.highlight.markers;\n        var defaultColor = this.markerBorder().color;\n        var options = this.options.markers;\n        var size = options.size + (options.border.width || 0) + (markers.border.width || 0);\n\n        var shadow = new ShapeElement({\n            type: options.type,\n            width: size,\n            height: size,\n            rotation: options.rotation,\n            background: markers.color || defaultColor,\n            border: {\n                color: markers.border.color,\n                width: markers.border.width,\n                opacity: valueOrDefault(markers.border.opacity, 1)\n            },\n            opacity: valueOrDefault(markers.opacity, 1)\n        });\n        shadow.reflow(this._childBox);\n\n        return shadow.getElement();\n    },\n\n    highlightVisual: function() {\n        return (this.marker || {}).visual;\n    },\n\n    highlightVisualArgs: function() {\n        var marker = this.marker;\n        var visual, rect;\n\n        if (marker) {\n            rect = marker.paddingBox.toRect();\n            visual = marker.visual;\n        } else {\n            var size = this.options.markers.size;\n            var halfSize = size / 2;\n            var center = this.box.center();\n            rect = new geometry.Rect([ center.x - halfSize, center.y - halfSize ], [ size, size ]);\n        }\n\n        return {\n            options: this.options,\n            rect: rect,\n            visual: visual\n        };\n    },\n\n    createFocusHighlight: function() {\n        var markerOptions = this.options.markers;\n        var highlightOptions = this.options.accessibility.highlight;\n        var size = markerOptions.size + (markerOptions.border.width || 0);\n\n        var highlight = new ShapeElement({\n            type: markerOptions.type,\n            width: size,\n            height: size,\n            rotation: markerOptions.rotation,\n            background: highlightOptions.color,\n            border: highlightOptions.border,\n            opacity: highlightOptions.opacity,\n            padding: highlightOptions.border.width / 2,\n            zIndex: highlightOptions.zIndex\n        });\n\n        highlight.reflow(this._childBox);\n\n        return highlight.getElement();\n    },\n\n    tooltipAnchor: function() {\n        var markerBox = this.markerBox();\n        var clipBox = this.owner.pane.clipBox();\n        var showTooltip = !clipBox || clipBox.overlaps(markerBox);\n\n        if (showTooltip) {\n            var x = markerBox.x2 + TOOLTIP_OFFSET;\n            var horizontalAlign = LEFT;\n            var y, verticalAlign;\n\n            if (this.aboveAxis) {\n                y = markerBox.y1;\n                verticalAlign = BOTTOM;\n            } else {\n                y = markerBox.y2;\n                verticalAlign = TOP;\n            }\n\n            return {\n                point: new Point(x, y),\n                align: {\n                    horizontal: horizontalAlign,\n                    vertical: verticalAlign\n                }\n            };\n        }\n    },\n\n    formatValue: function(format) {\n        return this.owner.formatPointValue(this, format);\n    },\n\n    overlapsBox: function(box) {\n        var markerBox = this.markerBox();\n        return markerBox.overlaps(box);\n    },\n\n    unclipElements: function() {\n        if (this.label) {\n            this.label.options.noclip = true;\n        }\n\n        if (this.note) {\n            this.note.options.noclip = true;\n        }\n    },\n\n    pointData: function() {\n        return {\n            dataItem: this.dataItem,\n            category: this.category,\n            value: this.value,\n            percentage: this.percentage,\n            stackValue: this.stackValue,\n            series: this.series\n        };\n    },\n\n    focusVisual: function() {\n        if (this.marker) {\n            if (this.marker.visual) {\n                this.marker.visual.options.set(\"id\", this._id);\n            }\n\n            this.toggleFocusHighlight(true);\n        }\n    },\n\n    clearFocusFromVisual: function() {\n        if (this.marker) {\n            if (this.marker.visual) {\n                this.marker.visual.options.set(\"id\", \"\");\n            }\n\n            this.toggleFocusHighlight(false);\n        }\n    },\n\n    getIndex: function() {\n        return defined(this.categoryIx) ? this.categoryIx : this.pointIx;\n    }\n});\n\nLinePoint.prototype.defaults = {\n    vertical: true,\n    markers: {\n        visible: true,\n        background: WHITE,\n        size: LINE_MARKER_SIZE,\n        type: CIRCLE,\n        border: {\n            width: 2\n        },\n        opacity: 1\n    },\n    labels: {\n        visible: false,\n        position: ABOVE,\n        margin: getSpacing(3),\n        padding: getSpacing(4),\n        animation: {\n            type: FADEIN,\n            delay: INITIAL_ANIMATION_DURATION\n        }\n    },\n    notes: {\n        label: {}\n    },\n    highlight: {\n        markers: {\n            border: {\n                color: \"#fff\",\n                width: 2\n            }\n        },\n        zIndex: datavizConstants.HIGHLIGHT_ZINDEX\n    },\n    errorBars: {\n        line: {\n            width: 1\n        }\n    },\n    accessibility: {\n        tabIndex: 0,\n        role: CHART_POINT_ROLE,\n        className: CHART_POINT_CLASSNAME,\n        ariaRoleDescription: CHART_POINT_ROLE_DESCRIPTION\n    }\n};\n\ndeepExtend(LinePoint.prototype, PointEventsMixin);\ndeepExtend(LinePoint.prototype, NoteMixin);\n\nvar LineSegment = ChartElement.extend({\n    init: function(linePoints, series, seriesIx) {\n        ChartElement.fn.init.call(this);\n\n        this.linePoints = linePoints;\n        this.series = series;\n        this.seriesIx = seriesIx;\n    },\n\n    points: function() {\n        return this.toGeometryPoints(this.linePoints);\n    },\n\n    toGeometryPoints: function(points) {\n        var result = [];\n        for (var i = 0, length = points.length; i < length; i++) {\n            if (points[i] && points[i].visible !== false) {\n                result.push(points[i]._childBox.toRect().center());\n            }\n        }\n\n        return result;\n    },\n\n    createVisual: function() {\n        var this$1$1 = this;\n\n        var customVisual = this.series.visual;\n        if (customVisual) {\n            this.visual = customVisual({\n                points: this.toGeometryPoints(this.linePoints),\n                series: this.series,\n                sender: this.getSender(),\n                createVisual: function () {\n                    this$1$1.segmentVisual();\n\n                    return this$1$1.visual;\n                }\n            });\n            if (this.visual && !defined(this.visual.options.zIndex)) {\n                this.visual.options.zIndex = this.series.zIndex;\n            }\n        } else {\n            this.segmentVisual();\n        }\n    },\n\n    segmentVisual: function() {\n        var ref = this;\n        var options = ref.options;\n        var series = ref.series;\n        var color = series.color;\n        var defaults = series._defaults;\n\n        if (isFunction(color) && defaults) {\n            color = defaults.color;\n        }\n\n        var line = Path.fromPoints(this.points(), {\n            stroke: {\n                color: color,\n                width: series.width,\n                opacity: series.opacity,\n                dashType: series.dashType\n            },\n            zIndex: series.zIndex\n        });\n\n        if (options.closed) {\n            line.close();\n        }\n\n        this.visual = line;\n    },\n\n    aliasFor: function(e, coords) {\n        return this.parent.getNearestPoint(coords.x, coords.y, this.seriesIx);\n    }\n});\n\nsetDefaultOptions(LineSegment, {\n    closed: false\n});\n\nvar StepLineMixin = {\n    calculateStepPoints: function(points) {\n        var categoryAxis = this.parent.plotArea.seriesCategoryAxis(this.series);\n        var ref = categoryAxis.options;\n        var justified = ref.justified;\n        var vertical = ref.vertical;\n        var reverse = ref.reverse;\n\n        var stepAxis = vertical ? X : Y;\n        var axis = vertical ? Y : X;\n        var stepDir = reverse ? 2 : 1;\n        var dir = stepDir;\n\n        var previousPoint = toGeometryPoint(points[0], stepAxis, stepDir, axis, dir);\n        var result = [ previousPoint ];\n\n        for (var idx = 1; idx < points.length; idx++) {\n            var point = toGeometryPoint(points[idx], stepAxis, stepDir, axis, dir);\n\n            if (previousPoint[stepAxis] !== point[stepAxis]) {\n                var stepPoint = new GeometryPoint();\n                stepPoint[stepAxis] = previousPoint[stepAxis];\n                stepPoint[axis] = point[axis];\n\n                result.push(stepPoint, point);\n            }\n\n            previousPoint = point;\n        }\n\n        if (!justified) {\n            result.push(toGeometryPoint(last(points), stepAxis, stepDir, axis, reverse ? 1 : 2));\n        } else if (previousPoint !== last(result)) {\n            result.push(previousPoint);\n        }\n\n        return result;\n\n    }\n};\n\nfunction toGeometryPoint(lintPoint, stepAxis, stepDir, axis, dir) {\n    var box = lintPoint.box;\n    var result = new GeometryPoint();\n\n    result[stepAxis] = box[stepAxis + stepDir];\n    result[axis] = box[axis + dir];\n\n    return result;\n}\n\nvar StepLineSegment = LineSegment.extend({\n    points: function() {\n        return this.calculateStepPoints(this.linePoints);\n    }\n});\n\ndeepExtend(StepLineSegment.prototype, StepLineMixin);\n\nvar SplineSegment = LineSegment.extend({\n    segmentVisual: function() {\n        var series = this.series;\n        var defaults = series._defaults;\n        var color = series.color;\n\n        if (isFunction(color) && defaults) {\n            color = defaults.color;\n        }\n\n        var curveProcessor = new CurveProcessor(this.options.closed);\n        var segments = curveProcessor.process(this.points());\n        var curve = new Path({\n            stroke: {\n                color: color,\n                width: series.width,\n                opacity: series.opacity,\n                dashType: series.dashType\n            },\n            zIndex: series.zIndex\n        });\n\n        curve.segments.push.apply(curve.segments, segments);\n\n        this.visual = curve;\n    }\n});\n\nvar LineChartMixin = {\n    renderSegments: function() {\n        var this$1$1 = this;\n\n        var ref = this;\n        var options = ref.options;\n        var seriesPoints = ref.seriesPoints;\n        var series = options.series;\n        var seriesCount = seriesPoints.length;\n        var lastSegment;\n\n        this._segments = [];\n\n        for (var seriesIx = 0; seriesIx < seriesCount; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var sortedPoints = this$1$1.sortPoints(seriesPoints[seriesIx]);\n            var pointCount = sortedPoints.length;\n            var linePoints = [];\n\n            for (var pointIx = 0; pointIx < pointCount; pointIx++) {\n                var point = sortedPoints[pointIx];\n                if (point) {\n                    linePoints.push(point);\n                } else if (this$1$1.seriesMissingValues(currentSeries) !== INTERPOLATE) {\n                    if (linePoints.length > 1) {\n                        lastSegment = this$1$1.createSegment(\n                            linePoints, currentSeries, seriesIx, lastSegment\n                        );\n                        this$1$1._addSegment(lastSegment);\n                    }\n                    linePoints = [];\n                }\n            }\n\n            if (linePoints.length > 1) {\n                lastSegment = this$1$1.createSegment(\n                    linePoints, currentSeries, seriesIx, lastSegment\n                );\n                this$1$1._addSegment(lastSegment);\n            }\n        }\n\n        this.children.unshift.apply(this.children, this._segments);\n    },\n\n    _addSegment: function(segment) {\n        this._segments.push(segment);\n        segment.parent = this;\n    },\n\n    sortPoints: function(points) {\n        return points;\n    },\n\n    seriesMissingValues: function(series) {\n        var missingValues = series.missingValues;\n        var assumeZero = !missingValues && this.options.isStacked;\n\n        return assumeZero ? ZERO : missingValues || INTERPOLATE;\n    },\n\n    getNearestPoint: function(x, y, seriesIx) {\n        var target = new Point(x, y);\n        var allPoints = this.seriesPoints[seriesIx];\n        var nearestPointDistance = MAX_VALUE;\n        var nearestPoint;\n\n        for (var i = 0; i < allPoints.length; i++) {\n            var point = allPoints[i];\n\n            if (point && defined(point.value) && point.value !== null && point.visible !== false) {\n                var pointBox = point.box;\n                var pointDistance = pointBox.center().distanceTo(target);\n\n                if (pointDistance < nearestPointDistance) {\n                    nearestPoint = point;\n                    nearestPointDistance = pointDistance;\n                }\n            }\n        }\n\n        return nearestPoint;\n    }\n};\n\nvar ClipAnimation = Animation.extend({\n    setup: function() {\n        this._setEnd(this.options.box.x1);\n    },\n\n    step: function(pos) {\n        var box = this.options.box;\n        this._setEnd(dataviz.interpolateValue(box.x1, box.x2, pos));\n    },\n\n    _setEnd: function(x) {\n        var element = this.element;\n        var segments = element.segments;\n        var topRight = segments[1].anchor();\n        var bottomRight = segments[2].anchor();\n\n        element.suspend();\n        topRight.setX(x);\n        element.resume();\n        bottomRight.setX(x);\n    }\n});\n\nsetDefaultOptions(ClipAnimation, {\n    duration: INITIAL_ANIMATION_DURATION\n});\n\nAnimationFactory.current.register(\"clip\", ClipAnimation);\n\nvar ClipAnimationMixin = {\n    createAnimation: function() {\n        var root = this.getRoot();\n        if (root && (root.options || {}).transitions !== false) {\n            var box = root.size();\n            var clipPath = Path.fromRect(box.toRect());\n            this.visual.clip(clipPath);\n            this.animation = new ClipAnimation(clipPath, {\n                box: box\n            });\n            if (anyHasZIndex(this.options.series)) {\n                this._setChildrenAnimation(clipPath);\n            }\n        }\n    },\n\n    _setChildrenAnimation: function(clipPath) {\n        var points = this.animationPoints();\n\n        for (var idx = 0; idx < points.length; idx++) {\n            var point = points[idx];\n            if (point && point.visual && defined(point.visual.options.zIndex)) {\n                point.visual.clip(clipPath);\n            }\n        }\n    }\n};\n\nvar LineChart = CategoricalChart.extend({\n    render: function() {\n\n        CategoricalChart.fn.render.call(this);\n\n        this.updateStackRange();\n        this.renderSegments();\n    },\n\n    pointType: function() {\n        return LinePoint;\n    },\n\n    createPoint: function(data, fields) {\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var missingValues = this.seriesMissingValues(series);\n        var value = data.valueFields.value;\n\n        if (!defined(value) || value === null) {\n            if (missingValues === ZERO) {\n                value = 0;\n            } else {\n                return null;\n            }\n        }\n\n        var pointOptions = this.pointOptions(series, seriesIx);\n        pointOptions = this.evalPointOptions(pointOptions, value, fields);\n\n        var color = data.fields.color || series.color;\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        var point = new LinePoint(value, pointOptions);\n        point.color = color;\n\n        this.append(point);\n\n        return point;\n    },\n\n    plotRange: function(point) {\n        var this$1$1 = this;\n\n        var plotValue = this.plotValue(point);\n\n        if (this.options.isStacked) {\n            var categoryIx = point.categoryIx;\n            var categoryPoints = this.categoryPoints[categoryIx];\n\n            for (var i = 0; i < categoryPoints.length; i++) {\n                var other = categoryPoints[i];\n\n                if (point === other) {\n                    break;\n                }\n\n                plotValue += this$1$1.plotValue(other);\n\n                if (this$1$1.options.isStacked100) {\n                    plotValue = Math.min(plotValue, 1);\n                }\n            }\n\n        }\n\n        return [ plotValue, plotValue ];\n    },\n\n    createSegment: function(linePoints, currentSeries, seriesIx) {\n        var style = currentSeries.style;\n        var pointType;\n\n        if (style === STEP) {\n            pointType = StepLineSegment;\n        } else if (style === SMOOTH) {\n            pointType = SplineSegment;\n        } else {\n            pointType = LineSegment;\n        }\n\n        return new pointType(linePoints, currentSeries, seriesIx);\n    },\n\n    animationPoints: function() {\n        var points = this.points;\n        var result = [];\n        for (var idx = 0; idx < points.length; idx++) {\n            result.push((points[idx] || {}).marker);\n        }\n        return result.concat(this._segments);\n    },\n\n    supportsPointInactiveOpacity: function() {\n        return false;\n    }\n});\n\ndeepExtend(LineChart.prototype, LineChartMixin, ClipAnimationMixin);\n\nvar AreaSegment = LineSegment.extend({\n    init: function(linePoints, currentSeries, seriesIx, prevSegment, stackPoints) {\n        LineSegment.fn.init.call(this, linePoints, currentSeries, seriesIx);\n\n        this.prevSegment = prevSegment;\n        this.stackPoints = stackPoints;\n    },\n\n    createVisual: function() {\n        var series = this.series;\n        var defaults = series._defaults;\n        var lineOptions = series.line || {};\n        var color = series.color;\n\n        if (isFunction(color) && defaults) {\n            color = defaults.color;\n        }\n\n        this.visual = new Group({\n            zIndex: series.zIndex\n        });\n\n        this.createFill({\n            fill: {\n                color: color,\n                opacity: series.opacity\n            },\n            stroke: null\n        });\n\n        if (lineOptions.width > 0 && lineOptions.visible !== false) {\n            this.createStroke({\n                stroke: deepExtend({\n                    color: color,\n                    opacity: series.opacity,\n                    lineCap: \"butt\"\n                }, lineOptions)\n            });\n        }\n    },\n\n    strokeSegments: function() {\n        var segments = this._strokeSegments;\n\n        if (!segments) {\n            segments = this._strokeSegments = this.createStrokeSegments();\n        }\n\n        return segments;\n    },\n\n    createStrokeSegments: function() {\n        return this.segmentsFromPoints(this.points());\n    },\n\n    stackSegments: function() {\n        if (this.prevSegment) {\n            return this.prevSegment.createStackSegments(this.stackPoints);\n        }\n\n        return this.createStackSegments(this.stackPoints);\n    },\n\n    createStackSegments: function(stackPoints) {\n        return this.segmentsFromPoints(this.toGeometryPoints(stackPoints)).reverse();\n    },\n\n    segmentsFromPoints: function(points) {\n        return points.map(function (point) { return new geometry.Segment(point); });\n    },\n\n    createStroke: function(style) {\n        var stroke = new Path(style);\n        stroke.segments.push.apply(stroke.segments, this.strokeSegments());\n\n        this.visual.append(stroke);\n    },\n\n    hasStackSegment: function() {\n        return this.prevSegment || (this.stackPoints && this.stackPoints.length);\n    },\n\n    createFill: function(style) {\n        var strokeSegments = this.strokeSegments();\n        var fillSegments = strokeSegments.slice(0);\n        var hasStackSegments = this.hasStackSegment();\n\n        if (hasStackSegments) {\n            var stackSegments = this.stackSegments();\n\n            append(fillSegments, stackSegments);\n        }\n\n        var fill = new Path(style);\n        fill.segments.push.apply(fill.segments, fillSegments);\n\n        if (!hasStackSegments && strokeSegments.length > 1) {\n            this.fillToAxes(fill);\n        }\n\n        this.visual.append(fill);\n    },\n\n    fillToAxes: function(fillPath) {\n        var chart = this.parent;\n        var invertAxes = chart.options.invertAxes;\n        var valueAxis = chart.seriesValueAxis(this.series);\n        var crossingValue = chart.categoryAxisCrossingValue(valueAxis);\n        var endSlot = valueAxis.getSlot(crossingValue, crossingValue, true);\n        var segments = this.strokeSegments();\n        var firstPoint = segments[0].anchor();\n        var lastPoint = last(segments).anchor();\n        var end = invertAxes ? endSlot.x1 : endSlot.y1;\n\n        if (invertAxes) {\n            fillPath.lineTo(end, lastPoint.y)\n                .lineTo(end, firstPoint.y);\n        } else {\n            fillPath.lineTo(lastPoint.x, end)\n                .lineTo(firstPoint.x, end);\n        }\n    }\n});\n\nvar StepAreaSegment = AreaSegment.extend({\n    createStrokeSegments: function() {\n        return this.segmentsFromPoints(this.calculateStepPoints(this.linePoints));\n    },\n\n    createStackSegments: function(stackPoints) {\n        return this.segmentsFromPoints(this.calculateStepPoints(stackPoints)).reverse();\n    }\n});\n\ndeepExtend(StepAreaSegment.prototype, StepLineMixin);\n\nvar SplineAreaSegment = AreaSegment.extend({\n    createStrokeSegments: function() {\n        var curveProcessor = new CurveProcessor(this.options.closed);\n        var linePoints = this.points();\n\n        return curveProcessor.process(linePoints);\n    },\n\n    createStackSegments: function() {\n        var strokeSegments = this.strokeSegments();\n        var stackSegments = [];\n        for (var idx = strokeSegments.length - 1; idx >= 0; idx--) {\n            var segment = strokeSegments[idx];\n            stackSegments.push(new geometry.Segment(\n                segment.anchor(),\n                segment.controlOut(),\n                segment.controlIn()\n            ));\n        }\n\n        return stackSegments;\n    }\n});\n\nvar AreaChart = LineChart.extend({\n    createSegment: function(linePoints, currentSeries, seriesIx, prevSegment) {\n        var isStacked = this.options.isStacked;\n        var style = (currentSeries.line || {}).style;\n        var previousSegment;\n\n        var stackPoints;\n        if (isStacked && seriesIx > 0 && prevSegment) {\n            var missingValues = this.seriesMissingValues(currentSeries);\n            if (missingValues !== \"gap\") {\n                stackPoints = prevSegment.linePoints;\n                previousSegment = prevSegment;\n            } else {\n                stackPoints = this._gapStackPoints(linePoints, seriesIx, style);\n            }\n        }\n\n        var pointType;\n        if (style === STEP) {\n            pointType = StepAreaSegment;\n        } else if (style === SMOOTH) {\n            pointType = SplineAreaSegment;\n        } else {\n            pointType = AreaSegment;\n        }\n\n        return new pointType(linePoints, currentSeries, seriesIx, previousSegment, stackPoints);\n    },\n\n    reflow: function(targetBox) {\n        var this$1$1 = this;\n\n        LineChart.fn.reflow.call(this, targetBox);\n\n        var stackPoints = this._stackPoints;\n        if (stackPoints) {\n            for (var idx = 0; idx < stackPoints.length; idx++) {\n                var stackPoint = stackPoints[idx];\n                var pointSlot = this$1$1.categoryAxis.getSlot(stackPoint.categoryIx);\n                stackPoint.reflow(pointSlot);\n            }\n        }\n    },\n\n    _gapStackPoints: function(linePoints, seriesIx, style) {\n        var this$1$1 = this;\n\n        var seriesPoints = this.seriesPoints;\n        var startIdx = linePoints[0].categoryIx;\n        var length = linePoints.length;\n        if (startIdx < 0) {\n            startIdx = 0;\n            length--;\n        }\n\n        var endIdx = startIdx + length;\n        var pointOffset = this.seriesOptions[0]._outOfRangeMinPoint ? 1 : 0;\n        var stackPoints = [];\n\n        this._stackPoints = this._stackPoints || [];\n        for (var categoryIx = startIdx; categoryIx < endIdx; categoryIx++) {\n            var pointIx = categoryIx + pointOffset;\n            var currentSeriesIx = seriesIx;\n            var point = (void 0);\n\n            do {\n                currentSeriesIx--;\n                point = seriesPoints[currentSeriesIx][pointIx];\n            } while (currentSeriesIx > 0 && !point);\n\n            if (point) {\n                if (style !== STEP && categoryIx > startIdx && !seriesPoints[currentSeriesIx][pointIx - 1]) {\n                    stackPoints.push(this$1$1._previousSegmentPoint(categoryIx, pointIx, pointIx - 1, currentSeriesIx));\n                }\n\n                stackPoints.push(point);\n\n                if (style !== STEP && categoryIx + 1 < endIdx && !seriesPoints[currentSeriesIx][pointIx + 1]) {\n                    stackPoints.push(this$1$1._previousSegmentPoint(categoryIx, pointIx, pointIx + 1, currentSeriesIx));\n                }\n            } else {\n                var gapStackPoint = this$1$1._createGapStackPoint(categoryIx);\n                this$1$1._stackPoints.push(gapStackPoint);\n                stackPoints.push(gapStackPoint);\n            }\n        }\n\n        return stackPoints;\n    },\n\n    _previousSegmentPoint: function(categoryIx, pointIx, segmentIx, seriesIdx) {\n        var seriesPoints = this.seriesPoints;\n        var index = seriesIdx;\n        var point;\n\n        while (index > 0 && !point) {\n            index--;\n            point = seriesPoints[index][segmentIx];\n        }\n\n        if (!point) {\n            point = this._createGapStackPoint(categoryIx);\n            this._stackPoints.push(point);\n        } else {\n            point = seriesPoints[index][pointIx];\n        }\n\n        return point;\n    },\n\n    _createGapStackPoint: function(categoryIx) {\n        var options = this.pointOptions({}, 0);\n        var point = new LinePoint(0, options);\n        point.categoryIx = categoryIx;\n        point.series = {};\n\n        return point;\n    },\n\n    seriesMissingValues: function(series) {\n        return series.missingValues || ZERO;\n    },\n\n    supportsPointInactiveOpacity: function() {\n        return false;\n    }\n});\n\nvar AxisGroupRangeTracker = Class.extend({\n    init: function() {\n\n        this.axisRanges = {};\n    },\n\n    update: function(chartAxisRanges) {\n        var axisRanges = this.axisRanges;\n\n        for (var axisName in chartAxisRanges) {\n            var chartRange = chartAxisRanges[axisName];\n            var range = axisRanges[axisName];\n            axisRanges[axisName] = range = range || { min: MAX_VALUE, max: MIN_VALUE };\n\n            range.min = Math.min(range.min, chartRange.min);\n            range.max = Math.max(range.max, chartRange.max);\n        }\n    },\n\n    reset: function(axisName) {\n        this.axisRanges[axisName] = undefined;\n    },\n\n    query: function(axisName) {\n        return this.axisRanges[axisName];\n    }\n});\n\nvar BarLabel = ChartElement.extend({\n    init: function(content, options, pointData) {\n        ChartElement.fn.init.call(this, options);\n\n        this.textBox = new TextBox(content, this.options, pointData);\n        this.append(this.textBox);\n    },\n\n    createVisual: function() {\n        this.textBox.options.noclip = this.options.noclip;\n    },\n\n    reflow: function(targetBox) {\n        var options = this.options;\n        var vertical = options.vertical;\n        var aboveAxis = options.aboveAxis;\n        var text = this.children[0];\n        var textOptions = text.options;\n        var box = text.box;\n        var padding = text.options.padding;\n        var labelBox = targetBox;\n\n        textOptions.align = vertical ? CENTER : LEFT;\n        textOptions.vAlign = vertical ? TOP : CENTER;\n\n        if (options.position === INSIDE_END) {\n            if (vertical) {\n                textOptions.vAlign = TOP;\n\n                if (!aboveAxis && box.height() < targetBox.height()) {\n                    textOptions.vAlign = BOTTOM;\n                }\n            } else {\n                textOptions.align = aboveAxis ? RIGHT : LEFT;\n            }\n        } else if (options.position === CENTER) {\n            textOptions.vAlign = CENTER;\n            textOptions.align = CENTER;\n        } else if (options.position === INSIDE_BASE) {\n            if (vertical) {\n                textOptions.vAlign = aboveAxis ? BOTTOM : TOP;\n            } else {\n                textOptions.align = aboveAxis ? LEFT : RIGHT;\n            }\n        } else if (options.position === OUTSIDE_END) {\n            if (vertical) {\n                if (aboveAxis) {\n                    labelBox = new Box(\n                        targetBox.x1, targetBox.y1 - box.height(),\n                        targetBox.x2, targetBox.y1\n                    );\n                } else {\n                    labelBox = new Box(\n                        targetBox.x1, targetBox.y2,\n                        targetBox.x2, targetBox.y2 + box.height()\n                    );\n                }\n            } else {\n                textOptions.align = CENTER;\n                if (aboveAxis) {\n                    labelBox = new Box(\n                        targetBox.x2, targetBox.y1,\n                        targetBox.x2 + box.width(), targetBox.y2\n                    );\n                } else {\n                    labelBox = new Box(\n                        targetBox.x1 - box.width(), targetBox.y1,\n                        targetBox.x1, targetBox.y2\n                    );\n                }\n            }\n        }\n\n        if (!options.rotation) {\n            if (vertical) {\n                padding.left = padding.right =\n                    (labelBox.width() - text.contentBox.width()) / 2;\n            } else {\n                padding.top = padding.bottom =\n                    (labelBox.height() - text.contentBox.height()) / 2;\n            }\n        }\n\n        text.reflow(labelBox);\n    },\n\n    alignToClipBox: function(clipBox) {\n        var vertical = this.options.vertical;\n        var field = vertical ? Y : X;\n        var start = field + \"1\";\n        var end = field + \"2\";\n        var text = this.children[0];\n        var parentBox = this.parent.box;\n\n        if (parentBox[start] < clipBox[start] || clipBox[end] < parentBox[end]) {\n            var targetBox = text.paddingBox.clone();\n            targetBox[start] = Math.max(parentBox[start], clipBox[start]);\n            targetBox[end] = Math.min(parentBox[end], clipBox[end]);\n\n            this.reflow(targetBox);\n        }\n    }\n});\n\nsetDefaultOptions(BarLabel, {\n    position: OUTSIDE_END,\n    margin: getSpacing(3),\n    padding: getSpacing(4),\n    color: BLACK,\n    background: \"\",\n    border: {\n        width: 1,\n        color: \"\"\n    },\n    aboveAxis: true,\n    vertical: false,\n    animation: {\n        type: FADEIN,\n        delay: INITIAL_ANIMATION_DURATION\n    },\n    zIndex: 2\n});\n\nfunction addAccessibilityAttributesToVisual(visual, accessibilityOptions) {\n    if (accessibilityOptions) {\n        visual.options.className = accessibilityOptions.className;\n        visual.options.role = accessibilityOptions.role;\n        visual.options.ariaLabel = accessibilityOptions.ariaLabel;\n        visual.options.ariaRoleDescription = accessibilityOptions.ariaRoleDescription;\n        visual.options.ariaChecked = accessibilityOptions.ariaChecked;\n    }\n}\n\nvar AccessibilityAttributesMixin = {\n    addAccessibilityAttributesToVisual: function() {\n        this._id = this._id || guid();\n\n        var accessibilityOptions = deepExtend({\n            ariaLabel: this.getAriaLabelText()\n        }, this.options.accessibility);\n\n        addAccessibilityAttributesToVisual(this.visual, accessibilityOptions);\n    },\n\n    getAriaLabelText: function getAriaLabelText() {\n        var labels = this.options.labels;\n        var ariaTemplate = dataviz.getAriaTemplate(labels);\n\n        if (ariaTemplate) {\n            return ariaTemplate(this.pointData());\n        }\n\n        return this.getLabelText(labels);\n    },\n\n    focusVisual: function focusVisual() {\n        this.visual.options.set(\"id\", this._id);\n        this.toggleFocusHighlight(true);\n    },\n\n    clearFocusFromVisual: function clearFocusFromVisual() {\n        this.visual.options.set(\"id\", \"\");\n        this.toggleFocusHighlight(false);\n    }\n};\n\nvar BAR_ALIGN_MIN_WIDTH = 6;\n\nvar Bar = ChartElement.extend({\n    init: function(value, options) {\n        ChartElement.fn.init.call(this);\n\n        this.options = options;\n        this.color = options.color || WHITE;\n        this.aboveAxis = valueOrDefault(this.options.aboveAxis, true);\n        this.value = value;\n    },\n\n    render: function() {\n        if (this._rendered) {\n            return;\n        }\n\n        this._rendered = true;\n\n        this.createLabel();\n        this.createNote();\n\n        if (this.errorBar) {\n            this.append(this.errorBar);\n        }\n    },\n\n    createLabel: function() {\n        var options = this.options;\n        var labels = options.labels;\n\n        if (labels.visible) {\n            this.label = this.createLabelElement(labels);\n            this.append(this.label);\n        }\n    },\n\n    createLabelElement: function(options) {\n        return new BarLabel(this.getLabelText(options),\n            deepExtend({\n                vertical: this.options.vertical\n            },\n            options\n            ), this.pointData());\n    },\n\n    getLabelText: function(options) {\n        var labelTemplate = getTemplate(options);\n\n        if (labelTemplate) {\n            return labelTemplate(this.pointData());\n        }\n\n        return this.formatValue(options.format);\n    },\n\n    formatValue: function(format) {\n        return this.owner.formatPointValue(this, format);\n    },\n\n    reflow: function(targetBox) {\n        var this$1$1 = this;\n\n        this.render();\n\n        var label = this.label;\n\n        this.box = targetBox;\n\n        if (label) {\n            label.options.aboveAxis = this.aboveAxis;\n            label.reflow(targetBox);\n        }\n\n        if (this.note) {\n            this.note.reflow(targetBox);\n        }\n\n        if (this.errorBars) {\n            for (var i = 0; i < this.errorBars.length; i++) {\n                this$1$1.errorBars[i].reflow(targetBox);\n            }\n        }\n    },\n\n    createVisual: function() {\n        var this$1$1 = this;\n\n        var ref = this;\n        var box = ref.box;\n        var options = ref.options;\n        var customVisual = options.visual;\n\n        if (this.visible !== false) {\n            ChartElement.fn.createVisual.call(this);\n\n            this.addAccessibilityAttributesToVisual();\n\n            if (customVisual) {\n                var visual = this.rectVisual = customVisual({\n                    category: this.category,\n                    dataItem: this.dataItem,\n                    value: this.value,\n                    sender: this.getSender(),\n                    series: this.series,\n                    percentage: this.percentage,\n                    stackValue: this.stackValue,\n                    runningTotal: this.runningTotal,\n                    total: this.total,\n                    rect: box.toRect(),\n                    createVisual: function () {\n                        var group = new Group();\n                        this$1$1.createRect(group);\n                        return group;\n                    },\n                    options: options\n                });\n\n                if (visual) {\n                    this.visual.append(visual);\n                }\n            } else if (box.width() > 0 && box.height() > 0) {\n                this.createRect(this.visual);\n            }\n        }\n    },\n\n    createRect: function(visual) {\n        var options = this.options;\n        var border = options.border;\n        var strokeOpacity = defined(border.opacity) ? border.opacity : options.opacity;\n        var rect = this.box.toRect();\n\n        rect.size.width = Math.round(rect.size.width);\n\n        var path = this.rectVisual = Path.fromRect(rect, {\n            fill: {\n                color: this.color,\n                opacity: options.opacity\n            },\n            stroke: {\n                color: this.getBorderColor(),\n                width: border.width,\n                opacity: strokeOpacity,\n                dashType: border.dashType\n            }\n        });\n\n        var width = this.box.width();\n        var height = this.box.height();\n\n        var size = options.vertical ? width : height;\n\n        if (size > BAR_ALIGN_MIN_WIDTH) {\n            alignPathToPixel(path);\n\n            // Fixes lineJoin issue in firefox when the joined lines are parallel\n            if (width < 1 || height < 1) {\n                path.options.stroke.lineJoin = \"round\";\n            }\n        }\n\n        visual.append(path);\n\n        if (hasGradientOverlay(options)) {\n            var overlay = this.createGradientOverlay(path, { baseColor: this.color }, deepExtend({\n                end: !options.vertical ? [ 0, 1 ] : undefined\n            }, options.overlay));\n\n            visual.append(overlay);\n        }\n    },\n\n    createHighlight: function(style) {\n        var highlight = Path.fromRect(this.box.toRect(), style);\n\n        return alignPathToPixel(highlight);\n    },\n\n    highlightVisual: function() {\n        return this.rectVisual;\n    },\n\n    highlightVisualArgs: function() {\n        return {\n            options: this.options,\n            rect: this.box.toRect(),\n            visual: this.rectVisual\n        };\n    },\n\n    createFocusHighlight: function(style) {\n        var borderWidth = this.options.accessibility.highlight.border.width;\n        var highlight = Path.fromRect(this.box.pad(borderWidth / 2).toRect(), style);\n\n        return alignPathToPixel(highlight);\n    },\n\n    getBorderColor: function() {\n        var color = this.color;\n        var border = this.options.border;\n        var brightness = border._brightness || BORDER_BRIGHTNESS;\n        var borderColor = border.color;\n\n        if (!defined(borderColor)) {\n            borderColor = new Color(color).brightness(brightness).toHex();\n        }\n\n        return borderColor;\n    },\n\n    tooltipAnchor: function() {\n        var ref = this;\n        var options = ref.options;\n        var box = ref.box;\n        var aboveAxis = ref.aboveAxis;\n        var clipBox = this.owner.pane.clipBox() || box;\n        var horizontalAlign = LEFT;\n        var verticalAlign = TOP;\n        var x, y;\n\n        if (options.vertical) {\n            x = Math.min(box.x2, clipBox.x2) + TOOLTIP_OFFSET;\n            if (aboveAxis) {\n                y = Math.max(box.y1, clipBox.y1);\n            } else {\n                y = Math.min(box.y2, clipBox.y2);\n                verticalAlign = BOTTOM;\n            }\n        } else {\n            var x1 = Math.max(box.x1, clipBox.x1);\n            var x2 = Math.min(box.x2, clipBox.x2);\n\n            if (options.isStacked) {\n                verticalAlign = BOTTOM;\n                if (aboveAxis) {\n                    horizontalAlign = RIGHT;\n                    x = x2;\n                } else {\n                    x = x1;\n                }\n                y = Math.max(box.y1, clipBox.y1) - TOOLTIP_OFFSET;\n            } else {\n                if (aboveAxis) {\n                    x = x2 + TOOLTIP_OFFSET;\n                } else {\n                    x = x1 - TOOLTIP_OFFSET;\n                    horizontalAlign = RIGHT;\n                }\n                y = Math.max(box.y1, clipBox.y1);\n            }\n        }\n\n        return {\n            point: new Point(x, y),\n            align: {\n                horizontal: horizontalAlign,\n                vertical: verticalAlign\n            }\n        };\n    },\n\n    overlapsBox: function(box) {\n        return this.box.overlaps(box);\n    },\n\n    pointData: function() {\n        return {\n            dataItem: this.dataItem,\n            category: this.category,\n            value: this.value,\n            percentage: this.percentage,\n            stackValue: this.stackValue,\n            runningTotal: this.runningTotal,\n            total: this.total,\n            series: this.series\n        };\n    },\n\n    getIndex: function() {\n        return this.categoryIx;\n    }\n});\n\ndeepExtend(Bar.prototype, PointEventsMixin);\ndeepExtend(Bar.prototype, NoteMixin);\ndeepExtend(Bar.prototype, AccessibilityAttributesMixin);\n\nBar.prototype.defaults = {\n    border: {\n        width: 1\n    },\n    vertical: true,\n    overlay: {\n        gradient: \"glass\"\n    },\n    labels: {\n        visible: false,\n        format: \"{0}\"\n    },\n    opacity: 1,\n    notes: {\n        label: {}\n    },\n    accessibility: {\n        role: CHART_POINT_ROLE,\n        className: CHART_POINT_CLASSNAME,\n        ariaRoleDescription: CHART_POINT_ROLE_DESCRIPTION\n    }\n};\n\nfunction forEach(elements, callback) {\n    elements.forEach(callback);\n}\n\nfunction forEachReverse(elements, callback) {\n    var length = elements.length;\n\n    for (var idx = length - 1; idx >= 0; idx--) {\n        callback(elements[idx], idx - length - 1);\n    }\n}\n\nvar ClusterLayout = ChartElement.extend({\n    init: function(options) {\n        ChartElement.fn.init.call(this, options);\n\n        this.forEach = options.rtl ? forEachReverse : forEach;\n    },\n\n    reflow: function(box) {\n        var ref = this.options;\n        var vertical = ref.vertical;\n        var gap = ref.gap;\n        var spacing = ref.spacing;\n        var children = this.children;\n        var count = children.length;\n        var axis = vertical ? Y : X;\n        var slots = count + gap + (spacing * (count - 1));\n        var slotSize = (vertical ? box.height() : box.width()) / slots;\n        var position = box[axis + 1] + slotSize * (gap / 2);\n\n        this.forEach(children, function (child, idx) {\n            var childBox = (child.box || box).clone();\n\n            childBox[axis + 1] = position;\n            childBox[axis + 2] = position + slotSize;\n\n            child.reflow(childBox);\n            if (idx < count - 1) {\n                position += (slotSize * spacing);\n            }\n\n            position += slotSize;\n        });\n    }\n});\n\nsetDefaultOptions(ClusterLayout, {\n    vertical: false,\n    gap: 0,\n    spacing: 0\n});\n\nvar StackWrap = ChartElement.extend({\n    reflow: function(targetBox) {\n        var this$1$1 = this;\n\n        var positionAxis = this.options.vertical ? X : Y;\n        var children = this.children;\n        var childrenCount = children.length;\n        var box = this.box = new Box();\n\n        for (var i = 0; i < childrenCount; i++) {\n            var currentChild = children[i];\n\n            if (currentChild.visible !== false) {\n                var childBox = currentChild.box.clone();\n                childBox.snapTo(targetBox, positionAxis);\n\n                if (i === 0) {\n                    box = this$1$1.box = childBox.clone();\n                }\n\n                currentChild.reflow(childBox);\n                box.wrap(childBox);\n            }\n        }\n    }\n});\n\nsetDefaultOptions(StackWrap, {\n    vertical: true\n});\n\nvar BarChart = CategoricalChart.extend({\n    render: function() {\n        CategoricalChart.fn.render.call(this);\n        this.updateStackRange();\n    },\n\n    pointType: function() {\n        return Bar;\n    },\n\n    clusterType: function() {\n        return ClusterLayout;\n    },\n\n    stackType: function() {\n        return StackWrap;\n    },\n\n    stackLimits: function(axisName, stackName) {\n        var limits = CategoricalChart.fn.stackLimits.call(this, axisName, stackName);\n\n        return limits;\n    },\n\n    createPoint: function(data, fields) {\n        var categoryIx = fields.categoryIx;\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var ref = this;\n        var options = ref.options;\n        var children = ref.children;\n        var stackOrDefault = defined(series.stack) ? series.stack : options.defaultStack;\n        var value = this.pointValue(data);\n        var pointOptions = this.pointOptions(series, seriesIx);\n\n        var labelOptions = pointOptions.labels;\n        if (stackOrDefault) {\n            if (labelOptions.position === OUTSIDE_END) {\n                labelOptions.position = INSIDE_END;\n            }\n        }\n\n        pointOptions.isStacked = stackOrDefault;\n\n        var color = data.fields.color || series.color;\n        if (value < 0 && pointOptions.negativeColor) {\n            color = pointOptions.negativeColor;\n        }\n\n        pointOptions = this.evalPointOptions(pointOptions, value, fields);\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        var pointType = this.pointType();\n        var point = new pointType(value, pointOptions);\n        point.color = color;\n\n        var cluster = children[categoryIx];\n        if (!cluster) {\n            var clusterType = this.clusterType();\n            cluster = new clusterType({\n                vertical: options.invertAxes,\n                gap: options.gap,\n                spacing: options.spacing,\n                rtl: !options.invertAxes && (this.chartService || {}).rtl\n            });\n            this.append(cluster);\n        }\n\n        if (options.isStacked) {\n            var stackWrap = this.getStackWrap(stackOrDefault, cluster);\n            stackWrap.append(point);\n        } else {\n            cluster.append(point);\n        }\n\n        return point;\n    },\n\n    getStackWrap: function(stack, cluster) {\n        var stackGroup = (typeof stack === datavizConstants.OBJECT) ? (stack.group || true) : stack;\n        var wraps = cluster.children;\n        var stackWrap;\n\n        if (typeof stackGroup === datavizConstants.STRING || stackGroup === true) {\n            for (var i = 0; i < wraps.length; i++) {\n                if (wraps[i]._stackGroup === stackGroup) {\n                    stackWrap = wraps[i];\n                    break;\n                }\n            }\n        }\n\n        if (!stackWrap) {\n            var stackType = this.stackType();\n            stackWrap = new stackType({\n                vertical: !this.options.invertAxes\n            });\n            stackWrap._stackGroup = stackGroup;\n            cluster.append(stackWrap);\n        }\n\n        return stackWrap;\n    },\n\n    categorySlot: function(categoryAxis, categoryIx, valueAxis) {\n        var options = this.options;\n        var categorySlot = categoryAxis.getSlot(categoryIx);\n        var startValue = valueAxis.startValue();\n\n        if (options.isStacked) {\n            var zeroSlot = valueAxis.getSlot(startValue, startValue, true);\n            var stackAxis = options.invertAxes ? X : Y;\n            categorySlot[stackAxis + 1] = categorySlot[stackAxis + 2] = zeroSlot[stackAxis + 1];\n        }\n\n        return categorySlot;\n    },\n\n    reflowCategories: function(categorySlots) {\n        var children = this.children;\n        var childrenLength = children.length;\n\n        for (var i = 0; i < childrenLength; i++) {\n            children[i].reflow(categorySlots[i]);\n        }\n    },\n\n    createAnimation: function() {\n        this._setAnimationOptions();\n        CategoricalChart.fn.createAnimation.call(this);\n\n        if (anyHasZIndex(this.options.series)) {\n            this._setChildrenAnimation();\n        }\n    },\n\n    _setChildrenAnimation: function() {\n        var this$1$1 = this;\n\n        var points = this.points;\n\n        for (var idx = 0; idx < points.length; idx++) {\n            var point = points[idx];\n            var pointVisual = point.visual;\n            if (pointVisual && defined(pointVisual.options.zIndex)) {\n                point.options.animation = this$1$1.options.animation;\n                point.createAnimation();\n            }\n        }\n    },\n\n    _setAnimationOptions: function() {\n        var options = this.options;\n        var animation = options.animation || {};\n        var origin;\n\n        if (options.isStacked) {\n            var valueAxis = this.seriesValueAxis(options.series[0]);\n            origin = valueAxis.getSlot(valueAxis.startValue());\n        } else {\n            origin = this.categoryAxis.getSlot(0);\n        }\n\n        animation.origin = new GeometryPoint(origin.x1, origin.y1);\n        animation.vertical = !options.invertAxes;\n    }\n});\n\nsetDefaultOptions(BarChart, {\n    animation: {\n        type: BAR\n    }\n});\n\nvar Candlestick = ChartElement.extend({\n    init: function(value, options) {\n        ChartElement.fn.init.call(this, options);\n        this.value = value;\n    },\n\n    getLabelText: function(options) {\n        return this.formatValue(options.format);\n    },\n\n    reflow: function(box) {\n        var ref = this;\n        var options = ref.options;\n        var value = ref.value;\n        var chart = ref.owner;\n        var valueAxis = chart.seriesValueAxis(options);\n        var ocSlot = valueAxis.getSlot(value.open, value.close);\n        var lhSlot = valueAxis.getSlot(value.low, value.high);\n\n        ocSlot.x1 = lhSlot.x1 = box.x1;\n        ocSlot.x2 = lhSlot.x2 = box.x2;\n\n        this.realBody = ocSlot;\n\n        var mid = lhSlot.center().x;\n        var points = [];\n\n        points.push([ [ mid, lhSlot.y1 ], [ mid, ocSlot.y1 ] ]);\n        points.push([ [ mid, ocSlot.y2 ], [ mid, lhSlot.y2 ] ]);\n\n        this.lines = points;\n\n        this.box = lhSlot.clone().wrap(ocSlot);\n\n        if (!this._rendered) {\n            this._rendered = true;\n            this.createNote();\n        }\n\n        this.reflowNote();\n    },\n\n    reflowNote: function() {\n        if (this.note) {\n            this.note.reflow(this.box);\n        }\n    },\n\n    createVisual: function() {\n        ChartElement.fn.createVisual.call(this);\n\n        this.addAccessibilityAttributesToVisual();\n\n        this._mainVisual = this.mainVisual(this.options);\n        this.visual.append(\n            this._mainVisual\n        );\n\n        this.createOverlay();\n    },\n\n    mainVisual: function(options) {\n        var group = new Group();\n\n        this.createBody(group, options);\n        this.createLines(group, options);\n\n        return group;\n    },\n\n    createBody: function(container, options) {\n        var body = Path.fromRect(this.realBody.toRect(), {\n            fill: {\n                color: this.color,\n                opacity: options.opacity\n            },\n            stroke: null\n        });\n\n        if (options.border.width > 0) {\n            body.options.set(\"stroke\", {\n                color: this.getBorderColor(),\n                width: options.border.width,\n                dashType: options.border.dashType,\n                opacity: valueOrDefault(options.border.opacity, options.opacity)\n            });\n        }\n\n        alignPathToPixel(body);\n        container.append(body);\n\n        if (hasGradientOverlay(options)) {\n            container.append(this.createGradientOverlay(body, { baseColor: this.color }, deepExtend({\n                end: !options.vertical ? [ 0, 1 ] : undefined\n            }, options.overlay)));\n        }\n    },\n\n    createLines: function(container, options) {\n        this.drawLines(container, options, this.lines, options.line);\n    },\n\n    drawLines: function(container, options, lines, lineOptions) {\n        if (!lines) {\n            return;\n        }\n\n        var lineStyle = {\n            stroke: {\n                color: lineOptions.color || this.color,\n                opacity: valueOrDefault(lineOptions.opacity, options.opacity),\n                width: lineOptions.width,\n                dashType: lineOptions.dashType,\n                lineCap: \"butt\"\n            }\n        };\n\n        for (var i = 0; i < lines.length; i++) {\n            var line = Path.fromPoints(lines[i], lineStyle);\n            alignPathToPixel(line);\n            container.append(line);\n        }\n    },\n\n    getBorderColor: function() {\n        var border = this.options.border;\n        var borderColor = border.color;\n\n        if (!defined(borderColor)) {\n            borderColor = new Color(this.color).brightness(border._brightness).toHex();\n        }\n\n        return borderColor;\n    },\n\n    createOverlay: function() {\n        var overlay = Path.fromRect(this.box.toRect(), {\n            fill: {\n                color: WHITE,\n                opacity: 0\n            },\n            stroke: null\n        });\n\n        this.visual.append(overlay);\n    },\n\n    createHighlight: function() {\n        var highlight = this.options.highlight;\n        var normalColor = this.color;\n\n        this.color = highlight.color || this.color;\n        var overlay = this.mainVisual(\n            deepExtend({}, this.options, {\n                line: {\n                    color: this.getBorderColor()\n                }\n            }, highlight)\n        );\n        this.color = normalColor;\n\n        return overlay;\n    },\n\n    highlightVisual: function() {\n        return this._mainVisual;\n    },\n\n    highlightVisualArgs: function() {\n        return {\n            options: this.options,\n            rect: this.box.toRect(),\n            visual: this._mainVisual\n        };\n    },\n\n    tooltipAnchor: function() {\n        var box = this.box;\n        var clipBox = this.owner.pane.clipBox() || box;\n\n        return {\n            point: new Point(box.x2 + TOOLTIP_OFFSET, Math.max(box.y1, clipBox.y1) + TOOLTIP_OFFSET),\n            align: {\n                horizontal: LEFT,\n                vertical: TOP\n            }\n        };\n    },\n\n    formatValue: function(format) {\n        return this.owner.formatPointValue(this, format);\n    },\n\n    overlapsBox: function(box) {\n        return this.box.overlaps(box);\n    },\n\n    pointData: function() {\n        return {\n            dataItem: this.dataItem,\n            value: this.value,\n            meanPoints: this.meanPoints,\n            medianPoints: this.medianPoints,\n            whiskerPoints: this.whiskerPoints,\n            stackValue: this.stackValue,\n            series: this.series\n        };\n    },\n\n    getIndex: function() {\n        return this.categoryIx;\n    }\n});\n\nCandlestick.prototype.createFocusHighlight = Bar.prototype.createFocusHighlight;\n\nsetDefaultOptions(Candlestick, {\n    vertical: true,\n    border: {\n        _brightness: 0.8\n    },\n    line: {\n        width: 2\n    },\n    overlay: {\n        gradient: \"glass\"\n    },\n    tooltip: {\n        format: \"<table>\" +\n                    \"<tr><th colspan='2'>{4:d}</th></tr>\" +\n                    \"<tr><td>Open:</td><td>{0:C}</td></tr>\" +\n                    \"<tr><td>High:</td><td>{1:C}</td></tr>\" +\n                    \"<tr><td>Low:</td><td>{2:C}</td></tr>\" +\n                    \"<tr><td>Close:</td><td>{3:C}</td></tr>\" +\n                \"</table>\"\n    },\n    labels: {\n        format: \"\"\n    },\n    highlight: {\n        opacity: 1,\n        border: {\n            width: 1,\n            opacity: 1\n        },\n        line: {\n            width: 1,\n            opacity: 1\n        }\n    },\n    notes: {\n        visible: true,\n        label: {}\n    },\n    accessibility: {\n        role: CHART_POINT_ROLE,\n        className: CHART_POINT_CLASSNAME,\n        ariaRoleDescription: CHART_POINT_ROLE_DESCRIPTION\n    }\n});\n\ndeepExtend(Candlestick.prototype, PointEventsMixin);\ndeepExtend(Candlestick.prototype, NoteMixin);\ndeepExtend(Candlestick.prototype, AccessibilityAttributesMixin);\n\nvar CandlestickChart = CategoricalChart.extend({\n    reflowCategories: function(categorySlots) {\n        var children = this.children;\n        var childrenLength = children.length;\n\n        for (var i = 0; i < childrenLength; i++) {\n            children[i].reflow(categorySlots[i]);\n        }\n    },\n\n    addValue: function(data, fields) {\n        var categoryIx = fields.categoryIx;\n        var category = fields.category;\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var ref = this;\n        var children = ref.children;\n        var options = ref.options;\n        var value = data.valueFields;\n        var valueParts = this.splitValue(value);\n        var hasValue = areNumbers(valueParts);\n        var dataItem = series.data[categoryIx];\n        var categoryPoints = this.categoryPoints[categoryIx];\n        var point;\n\n        if (!categoryPoints) {\n            this.categoryPoints[categoryIx] = categoryPoints = [];\n        }\n\n        if (hasValue) {\n            point = this.createPoint(data, fields);\n        }\n\n        var cluster = children[categoryIx];\n        if (!cluster) {\n            cluster = new ClusterLayout({\n                vertical: options.invertAxes,\n                gap: options.gap,\n                spacing: options.spacing,\n                rtl: !options.invertAxes && (this.chartService || {}).rtl\n            });\n            this.append(cluster);\n        }\n\n        if (point) {\n            this.updateRange(value, fields);\n\n            cluster.append(point);\n\n            point.categoryIx = categoryIx;\n            point.category = category;\n            point.series = series;\n            point.seriesIx = seriesIx;\n            point.owner = this;\n            point.dataItem = dataItem;\n            point.noteText = data.fields.noteText;\n        }\n\n        this.points.push(point);\n        categoryPoints.push(point);\n    },\n\n    pointType: function() {\n        return Candlestick;\n    },\n\n    createPoint: function(data, fields) {\n        var series = fields.series;\n        var pointType = this.pointType();\n        var value = data.valueFields;\n        var pointOptions = deepExtend({}, series);\n        var color = data.fields.color || series.color;\n\n        pointOptions = this.evalPointOptions(pointOptions, value, fields);\n\n        if (series.type === CANDLESTICK || series.type === OHLC) {\n            if (value.open > value.close) {\n                color = data.fields.downColor || series.downColor || series.color;\n            }\n        }\n\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        pointOptions.vertical = !this.options.invertAxes;\n\n        var point = new pointType(value, pointOptions);\n        point.color = color;\n\n        return point;\n    },\n\n    splitValue: function(value) {\n        return [ value.low, value.open, value.close, value.high ];\n    },\n\n    updateRange: function(value, fields) {\n        var axisName = fields.series.axis;\n        var parts = this.splitValue(value);\n        var axisRange = this.valueAxisRanges[axisName] || { min: MAX_VALUE, max: MIN_VALUE };\n\n        this.valueAxisRanges[axisName] = {\n            min: Math.min.apply(Math, parts.concat([ axisRange.min ])),\n            max: Math.max.apply(Math, parts.concat([ axisRange.max ]))\n        };\n    },\n\n    formatPointValue: function(point, format) {\n        var value = point.value;\n\n        return this.chartService.format.auto(format,\n            value.open, value.high,\n            value.low, value.close, point.category\n        );\n    },\n\n    animationPoints: function() {\n        return this.points;\n    }\n});\n\ndeepExtend(CandlestickChart.prototype, ClipAnimationMixin);\n\nvar BoxPlot = Candlestick.extend({\n    init: function(value, options) {\n        Candlestick.fn.init.call(this, value, options);\n\n        this.createNote();\n    },\n\n    reflow: function(box) {\n        var ref = this;\n        var options = ref.options;\n        var value = ref.value;\n        var chart = ref.owner;\n        var valueAxis = chart.seriesValueAxis(options);\n        var whiskerSlot, boxSlot;\n\n        this.boxSlot = boxSlot = valueAxis.getSlot(value.q1, value.q3);\n        this.realBody = boxSlot;\n        this.reflowBoxSlot(box);\n\n        this.whiskerSlot = whiskerSlot = valueAxis.getSlot(value.lower, value.upper);\n        this.reflowWhiskerSlot(box);\n\n        var medianSlot = valueAxis.getSlot(value.median);\n\n        if (value.mean) {\n            var meanSlot = valueAxis.getSlot(value.mean);\n            this.meanPoints = this.calcMeanPoints(box, meanSlot);\n        }\n\n        this.whiskerPoints = this.calcWhiskerPoints(boxSlot, whiskerSlot);\n        this.medianPoints = this.calcMedianPoints(box, medianSlot);\n\n        this.box = whiskerSlot.clone().wrap(boxSlot);\n        this.reflowNote();\n    },\n\n    reflowBoxSlot: function(box) {\n        this.boxSlot.x1 = box.x1;\n        this.boxSlot.x2 = box.x2;\n    },\n\n    reflowWhiskerSlot: function(box) {\n        this.whiskerSlot.x1 = box.x1;\n        this.whiskerSlot.x2 = box.x2;\n    },\n\n    calcMeanPoints: function(box, meanSlot) {\n        return [\n            [ [ box.x1, meanSlot.y1 ], [ box.x2, meanSlot.y1 ] ]\n        ];\n    },\n\n    calcWhiskerPoints: function(boxSlot, whiskerSlot) {\n        var mid = whiskerSlot.center().x;\n        return [ [\n            [ mid - 5, whiskerSlot.y1 ], [ mid + 5, whiskerSlot.y1 ],\n            [ mid, whiskerSlot.y1 ], [ mid, boxSlot.y1 ]\n        ], [\n            [ mid - 5, whiskerSlot.y2 ], [ mid + 5, whiskerSlot.y2 ],\n            [ mid, whiskerSlot.y2 ], [ mid, boxSlot.y2 ]\n        ] ];\n    },\n\n    calcMedianPoints: function(box, medianSlot) {\n        return [\n            [ [ box.x1, medianSlot.y1 ], [ box.x2, medianSlot.y1 ] ]\n        ];\n    },\n\n    renderOutliers: function(options) {\n        var this$1$1 = this;\n\n        var value = this.value;\n        var outliers = value.outliers || [];\n        var outerFence = Math.abs(value.q3 - value.q1) * 3;\n        var elements = [];\n        var markers = options.markers || {};\n\n        for (var i = 0; i < outliers.length; i++) {\n            var outlierValue = outliers[i];\n            if (outlierValue < value.q3 + outerFence && outlierValue > value.q1 - outerFence) {\n                markers = options.outliers;\n            } else {\n                markers = options.extremes;\n            }\n            var markersBorder = deepExtend({}, markers.border);\n\n            if (!defined(markersBorder.color)) {\n                if (defined(this$1$1.color)) {\n                    markersBorder.color = this$1$1.color;\n                } else {\n                    markersBorder.color =\n                        new Color(markers.background).brightness(BORDER_BRIGHTNESS).toHex();\n                }\n            }\n\n            var shape = new ShapeElement({\n                type: markers.type,\n                width: markers.size,\n                height: markers.size,\n                rotation: markers.rotation,\n                background: markers.background,\n                border: markersBorder,\n                opacity: markers.opacity\n            });\n\n            shape.value = outlierValue;\n\n            elements.push(shape);\n        }\n\n        this.reflowOutliers(elements);\n        return elements;\n    },\n\n    reflowOutliers: function(outliers) {\n        var this$1$1 = this;\n\n        var valueAxis = this.owner.seriesValueAxis(this.options);\n        var center = this.box.center();\n\n        for (var i = 0; i < outliers.length; i++) {\n            var outlierValue = outliers[i].value;\n            var markerBox = valueAxis.getSlot(outlierValue);\n\n            if (this$1$1.options.vertical) {\n                markerBox.move(center.x);\n            } else {\n                markerBox.move(undefined, center.y);\n            }\n\n            this$1$1.box = this$1$1.box.wrap(markerBox);\n            outliers[i].reflow(markerBox);\n        }\n    },\n\n    mainVisual: function(options) {\n        var group = Candlestick.fn.mainVisual.call(this, options);\n        var outliers = this.renderOutliers(options);\n\n        for (var i = 0; i < outliers.length; i++) {\n            var element = outliers[i].getElement();\n            if (element) {\n                group.append(element);\n            }\n        }\n\n        return group;\n    },\n\n    createLines: function(container, options) {\n        this.drawLines(container, options, this.whiskerPoints, options.whiskers);\n        this.drawLines(container, options, this.medianPoints, options.median);\n        this.drawLines(container, options, this.meanPoints, options.mean);\n    },\n\n    getBorderColor: function() {\n        if ((this.options.border || {}).color) {\n            return this.options.border.color;\n        }\n\n        if (this.color) {\n            return this.color;\n        }\n\n        return Candlestick.fn.getBorderColor.call(this);\n    }\n});\n\nsetDefaultOptions(BoxPlot, {\n    border: {\n        _brightness: 0.8\n    },\n    line: {\n        width: 2\n    },\n    median: {\n        color: \"#f6f6f6\"\n    },\n    mean: {\n        width: 2,\n        dashType: \"dash\",\n        color: \"#f6f6f6\"\n    },\n    overlay: {\n        gradient: \"glass\"\n    },\n    tooltip: {\n        format: \"<table>\" +\n                    \"<tr><th colspan='2'>{6:d}</th></tr>\" +\n                    \"<tr><td>Lower:</td><td>{0:C}</td></tr>\" +\n                    \"<tr><td>Q1:</td><td>{1:C}</td></tr>\" +\n                    \"<tr><td>Median:</td><td>{2:C}</td></tr>\" +\n                    \"<tr><td>Mean:</td><td>{5:C}</td></tr>\" +\n                    \"<tr><td>Q3:</td><td>{3:C}</td></tr>\" +\n                    \"<tr><td>Upper:</td><td>{4:C}</td></tr>\" +\n                \"</table>\"\n    },\n    highlight: {\n        opacity: 1,\n        border: {\n            width: 1,\n            opacity: 1\n        },\n        line: {\n            width: 1,\n            opacity: 1\n        }\n    },\n    notes: {\n        visible: true,\n        label: {}\n    },\n    outliers: {\n        visible: true,\n        size: LINE_MARKER_SIZE,\n        type: datavizConstants.CROSS,\n        background: WHITE,\n        border: {\n            width: 2,\n            opacity: 1\n        },\n        opacity: 0\n    },\n    extremes: {\n        visible: true,\n        size: LINE_MARKER_SIZE,\n        type: CIRCLE,\n        background: WHITE,\n        border: {\n            width: 2,\n            opacity: 1\n        },\n        opacity: 0\n    }\n});\n\ndeepExtend(BoxPlot.prototype, PointEventsMixin);\n\nvar VerticalBoxPlot = BoxPlot.extend({\n    reflowBoxSlot: function(box) {\n        this.boxSlot.y1 = box.y1;\n        this.boxSlot.y2 = box.y2;\n    },\n\n    reflowWhiskerSlot: function(box) {\n        this.whiskerSlot.y1 = box.y1;\n        this.whiskerSlot.y2 = box.y2;\n    },\n\n    calcMeanPoints: function(box, meanSlot) {\n        return [\n            [ [ meanSlot.x1, box.y1 ], [ meanSlot.x1, box.y2 ] ]\n        ];\n    },\n\n    calcWhiskerPoints: function(boxSlot, whiskerSlot) {\n        var mid = whiskerSlot.center().y;\n        return [ [\n            [ whiskerSlot.x1, mid - 5 ], [ whiskerSlot.x1, mid + 5 ],\n            [ whiskerSlot.x1, mid ], [ boxSlot.x1, mid ]\n        ], [\n            [ whiskerSlot.x2, mid - 5 ], [ whiskerSlot.x2, mid + 5 ],\n            [ whiskerSlot.x2, mid ], [ boxSlot.x2, mid ]\n        ] ];\n    },\n\n    calcMedianPoints: function(box, medianSlot) {\n        return [\n            [ [ medianSlot.x1, box.y1 ], [ medianSlot.x1, box.y2 ] ]\n        ];\n    }\n});\n\nvar BoxPlotChart = CandlestickChart.extend({\n    addValue: function(data, fields) {\n        var categoryIx = fields.categoryIx;\n        var category = fields.category;\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var ref = this;\n        var children = ref.children;\n        var options = ref.options;\n        var value = data.valueFields;\n        var valueParts = this.splitValue(value);\n        var hasValue = areNumbers(valueParts);\n        var dataItem = series.data[categoryIx];\n        var categoryPoints = this.categoryPoints[categoryIx];\n        var point;\n\n        if (!categoryPoints) {\n            this.categoryPoints[categoryIx] = categoryPoints = [];\n        }\n\n        if (hasValue) {\n            point = this.createPoint(data, fields);\n        }\n\n        var cluster = children[categoryIx];\n        if (!cluster) {\n            cluster = new ClusterLayout({\n                vertical: options.invertAxes,\n                gap: options.gap,\n                spacing: options.spacing,\n                rtl: !options.invertAxes && (this.chartService || {}).rtl\n            });\n            this.append(cluster);\n        }\n\n        if (point) {\n            this.updateRange(value, fields);\n\n            cluster.append(point);\n\n            point.categoryIx = categoryIx;\n            point.category = category;\n            point.series = series;\n            point.seriesIx = seriesIx;\n            point.owner = this;\n            point.dataItem = dataItem;\n        }\n\n        this.points.push(point);\n        categoryPoints.push(point);\n    },\n\n    pointType: function() {\n        if (this.options.invertAxes) {\n            return VerticalBoxPlot;\n        }\n\n        return BoxPlot;\n    },\n\n    splitValue: function(value) {\n        return [\n            value.lower, value.q1, value.median,\n            value.q3, value.upper\n        ];\n    },\n\n    updateRange: function(value, fields) {\n        var axisName = fields.series.axis;\n        var parts = this.splitValue(value).concat(this.filterOutliers(value.outliers));\n\n        if (defined(value.mean)) {\n            parts = parts.concat(value.mean);\n        }\n\n        var axisRange = this.valueAxisRanges[axisName] || { min: MAX_VALUE, max: MIN_VALUE };\n\n        this.valueAxisRanges[axisName] = {\n            min: Math.min.apply(Math, parts.concat([ axisRange.min ])),\n            max: Math.max.apply(Math, parts.concat([ axisRange.max ]))\n        };\n    },\n\n    formatPointValue: function(point, format) {\n        var value = point.value;\n\n        return this.chartService.format.auto(format,\n            value.lower, value.q1, value.median,\n            value.q3, value.upper, value.mean, point.category\n        );\n    },\n\n    filterOutliers: function(items) {\n        var length = (items || []).length;\n        var result = [];\n\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (defined(item) && item !== null) {\n                result.push(item);\n            }\n        }\n\n        return result;\n    },\n\n    supportsPointInactiveOpacity: function() {\n        return false;\n    }\n});\n\nvar ScatterErrorBar = ErrorBarBase.extend({\n    getAxis: function() {\n        var axes = this.chart.seriesAxes(this.series);\n        var axis = this.isVertical ? axes.y : axes.x;\n\n        return axis;\n    }\n});\n\nvar ScatterChart = ChartElement.extend({\n    init: function(plotArea, options) {\n\n        ChartElement.fn.init.call(this, options);\n\n        this.plotArea = plotArea;\n        this.chartService = plotArea.chartService;\n        this._initFields();\n\n        this.render();\n    },\n\n    _initFields: function() {\n        // X and Y axis ranges grouped by name, e.g.:\n        // primary: { min: 0, max: 1 }\n        this.xAxisRanges = {};\n        this.yAxisRanges = {};\n\n        this.points = [];\n        this.seriesPoints = [];\n        this.seriesOptions = [];\n        this._evalSeries = [];\n    },\n\n    render: function() {\n        this.traverseDataPoints(this.addValue.bind(this));\n    },\n\n    addErrorBar: function(point, field, fields) {\n        var value = point.value[field];\n        var valueErrorField = field + \"Value\";\n        var lowField = field + \"ErrorLow\";\n        var highField = field + \"ErrorHigh\";\n        var seriesIx = fields.seriesIx;\n        var series = fields.series;\n        var errorBars = point.options.errorBars;\n        var lowValue = fields[lowField];\n        var highValue = fields[highField];\n\n        if (isNumber(value)) {\n            var errorRange;\n            if (isNumber(lowValue) && isNumber(highValue)) {\n                errorRange = { low: lowValue, high: highValue };\n            }\n\n            if (errorBars && defined(errorBars[valueErrorField])) {\n                this.seriesErrorRanges = this.seriesErrorRanges || { x: [], y: [] };\n                this.seriesErrorRanges[field][seriesIx] = this.seriesErrorRanges[field][seriesIx] ||\n                    new ErrorRangeCalculator(errorBars[valueErrorField], series, field);\n\n                errorRange = this.seriesErrorRanges[field][seriesIx].getErrorRange(value, errorBars[valueErrorField]);\n            }\n\n            if (errorRange) {\n                this.addPointErrorBar(errorRange, point, field);\n            }\n        }\n    },\n\n    addPointErrorBar: function(errorRange, point, field) {\n        var low = errorRange.low;\n        var high = errorRange.high;\n        var series = point.series;\n        var options = point.options.errorBars;\n        var isVertical = field === Y;\n        var item = {};\n\n        point[field + \"Low\"] = low;\n        point[field + \"High\"] = high;\n\n        point.errorBars = point.errorBars || [];\n        var errorBar = new ScatterErrorBar(low, high, isVertical, this, series, options);\n        point.errorBars.push(errorBar);\n        point.append(errorBar);\n\n        item[field] = low;\n        this.updateRange(item, series);\n        item[field] = high;\n        this.updateRange(item, series);\n    },\n\n    addValue: function(value, fields) {\n        var x = value.x;\n        var y = value.y;\n        var seriesIx = fields.seriesIx;\n        var series = this.options.series[seriesIx];\n        var missingValues = this.seriesMissingValues(series);\n        var seriesPoints = this.seriesPoints[seriesIx];\n\n        var pointValue = value;\n        if (!(hasValue(x) && hasValue(y))) {\n            pointValue = this.createMissingValue(pointValue, missingValues);\n        }\n\n        var point;\n        if (pointValue) {\n            point = this.createPoint(pointValue, fields);\n            if (point) {\n                $.extend(point, fields);\n                this.addErrorBar(point, X, fields);\n                this.addErrorBar(point, Y, fields);\n            }\n            this.updateRange(pointValue, fields.series);\n        }\n\n        this.points.push(point);\n        seriesPoints.push(point);\n    },\n\n    seriesMissingValues: function(series) {\n        return series.missingValues;\n    },\n\n    createMissingValue: function() {},\n\n    updateRange: function(value, series) {\n        var intlService = this.chartService.intl;\n        var xAxisName = series.xAxis;\n        var yAxisName = series.yAxis;\n        var x = value.x;\n        var y = value.y;\n        var xAxisRange = this.xAxisRanges[xAxisName];\n        var yAxisRange = this.yAxisRanges[yAxisName];\n\n        if (hasValue(x)) {\n            xAxisRange = this.xAxisRanges[xAxisName] =\n                xAxisRange || { min: MAX_VALUE, max: MIN_VALUE };\n\n            if (isString(x)) {\n                x = parseDate(intlService, x);\n            }\n\n            xAxisRange.min = Math.min(xAxisRange.min, x);\n            xAxisRange.max = Math.max(xAxisRange.max, x);\n        }\n\n        if (hasValue(y)) {\n            yAxisRange = this.yAxisRanges[yAxisName] =\n                yAxisRange || { min: MAX_VALUE, max: MIN_VALUE };\n\n            if (isString(y)) {\n                y = parseDate(intlService, y);\n            }\n\n            yAxisRange.min = Math.min(yAxisRange.min, y);\n            yAxisRange.max = Math.max(yAxisRange.max, y);\n        }\n    },\n\n    evalPointOptions: function(options, value, fields) {\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var state = {\n            defaults: series._defaults,\n            excluded: [\n                \"data\", \"tooltip\", \"content\", \"template\", \"visual\", \"toggle\",\n                \"_outOfRangeMinPoint\", \"_outOfRangeMaxPoint\",\n                \"drilldownSeriesFactory\", \"ariaTemplate\", \"ariaContent\"\n            ]\n        };\n\n        var doEval = this._evalSeries[seriesIx];\n        if (!defined(doEval)) {\n            this._evalSeries[seriesIx] = doEval = evalOptions(options, {}, state, true);\n        }\n\n        var pointOptions = options;\n        if (doEval) {\n            pointOptions = deepExtend({}, options);\n            evalOptions(pointOptions, {\n                value: value,\n                series: series,\n                dataItem: fields.dataItem\n            }, state);\n        }\n\n        return pointOptions;\n    },\n\n    pointType: function() {\n        return LinePoint;\n    },\n\n    pointOptions: function(series, seriesIx) {\n        var options = this.seriesOptions[seriesIx];\n        if (!options) {\n            var defaults = this.pointType().prototype.defaults;\n            this.seriesOptions[seriesIx] = options = deepExtend({}, defaults, {\n                markers: {\n                    opacity: series.opacity\n                },\n                tooltip: {\n                    format: this.options.tooltip.format\n                },\n                labels: {\n                    format: this.options.labels.format\n                }\n            }, series);\n        }\n\n        return options;\n    },\n\n    createPoint: function(value, fields) {\n        var series = fields.series;\n        var pointOptions = this.pointOptions(series, fields.seriesIx);\n        var color = fields.color || series.color;\n\n        pointOptions = this.evalPointOptions(pointOptions, value, fields);\n\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        var point = new LinePoint(value, pointOptions);\n        point.color = color;\n\n        this.append(point);\n\n        return point;\n    },\n\n    seriesAxes: function(series) {\n        var xAxisName = series.xAxis;\n        var yAxisName = series.yAxis;\n        var plotArea = this.plotArea;\n        var xAxis = xAxisName ? plotArea.namedXAxes[xAxisName] : plotArea.axisX;\n        var yAxis = yAxisName ? plotArea.namedYAxes[yAxisName] : plotArea.axisY;\n\n        if (!xAxis) {\n            throw new Error(\"Unable to locate X axis with name \" + xAxisName);\n        }\n\n        if (!yAxis) {\n            throw new Error(\"Unable to locate Y axis with name \" + yAxisName);\n        }\n\n        return {\n            x: xAxis,\n            y: yAxis\n        };\n    },\n\n    reflow: function(targetBox) {\n        var this$1$1 = this;\n\n        var chartPoints = this.points;\n        var limit = !this.options.clip;\n        var pointIx = 0;\n\n        this.traverseDataPoints(function (value, fields) {\n            var point = chartPoints[pointIx++];\n            var seriesAxes = this$1$1.seriesAxes(fields.series);\n            var slotX = seriesAxes.x.getSlot(value.x, value.x, limit);\n            var slotY = seriesAxes.y.getSlot(value.y, value.y, limit);\n\n            if (point) {\n                if (slotX && slotY) {\n                    var pointSlot = this$1$1.pointSlot(slotX, slotY);\n                    point.reflow(pointSlot);\n                } else {\n                    point.visible = false;\n                }\n            }\n        });\n\n        this.box = targetBox;\n    },\n\n    pointSlot: function(slotX, slotY) {\n        return new Box(slotX.x1, slotY.y1, slotX.x2, slotY.y2);\n    },\n\n    traverseDataPoints: function(callback) {\n        var this$1$1 = this;\n\n        var ref = this;\n        var series = ref.options.series;\n        var seriesPoints = ref.seriesPoints;\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var currentSeriesPoints = seriesPoints[seriesIx];\n            if (!currentSeriesPoints) {\n                seriesPoints[seriesIx] = [];\n            }\n\n            for (var pointIx = 0; pointIx < currentSeries.data.length; pointIx++) {\n                var ref$1 = this$1$1.plotArea.bindPoint(currentSeries, pointIx);\n                var value = ref$1.valueFields;\n                var fields = ref$1.fields;\n\n                callback(value, deepExtend({\n                    pointIx: pointIx,\n                    series: currentSeries,\n                    seriesIx: seriesIx,\n                    dataItem: currentSeries.data[pointIx],\n                    owner: this$1$1\n                }, fields));\n            }\n        }\n    },\n\n    formatPointValue: function(point, format) {\n        var value = point.value;\n        return this.chartService.format.auto(format, value.x, value.y);\n    },\n\n    animationPoints: function() {\n        var points = this.points;\n        var result = [];\n        for (var idx = 0; idx < points.length; idx++) {\n            result.push((points[idx] || {}).marker);\n        }\n        return result;\n    }\n});\nsetDefaultOptions(ScatterChart, {\n    series: [],\n    tooltip: {\n        format: \"{0}, {1}\"\n    },\n    labels: {\n        format: \"{0}, {1}\"\n    },\n    clip: true\n});\ndeepExtend(ScatterChart.prototype, ClipAnimationMixin);\n\nvar Bubble = LinePoint.extend({\n    init: function(value, options) {\n        LinePoint.fn.init.call(this, value, options);\n\n        this.category = value.category;\n    },\n\n    createHighlight: function() {\n        var highlight = this.options.highlight;\n        var border = highlight.border;\n        var markers = this.options.markers;\n        var center = this.box.center();\n        var radius = (markers.size + markers.border.width + border.width) / 2;\n        var highlightGroup = new Group();\n        var shadow = new Circle(new GeometryCircle([ center.x, center.y + radius / 5 + border.width / 2 ], radius + border.width / 2), {\n            stroke: {\n                color: 'none'\n            },\n            fill: this.createGradient({\n                gradient: 'bubbleShadow',\n                color: markers.background,\n                stops: [ {\n                    offset: 0,\n                    color: markers.background,\n                    opacity: 0.3\n                }, {\n                    offset: 1,\n                    color: markers.background,\n                    opacity: 0\n                } ]\n            })\n        });\n        var overlay = new Circle(new GeometryCircle([ center.x, center.y ], radius), {\n            stroke: {\n                color: border.color ||\n                    new Color(markers.background).brightness(BORDER_BRIGHTNESS).toHex(),\n                width: border.width,\n                opacity: border.opacity\n            },\n            fill: {\n                color: markers.background,\n                opacity: highlight.opacity\n            }\n        });\n\n        highlightGroup.append(shadow, overlay);\n\n        return highlightGroup;\n    },\n\n    createFocusHighlight: function(style) {\n        var highlightOptions = this.options.accessibility.highlight;\n        var markers = this.options.markers;\n        var center = this.box.center();\n        var radius = (markers.size + markers.border.width) / 2 + highlightOptions.border.width / 2;\n        var highlight = new Circle(new GeometryCircle([ center.x, center.y ], radius), style);\n\n        return highlight;\n    }\n});\n\nBubble.prototype.defaults = deepExtend({}, Bubble.prototype.defaults, {\n    labels: {\n        position: CENTER\n    },\n    highlight: {\n        opacity: 1,\n        border: {\n            color: \"#fff\",\n            width: 2,\n            opacity: 1\n        }\n    }\n});\n\nBubble.prototype.defaults.highlight.zIndex = undefined;\n\nvar BubbleChart = ScatterChart.extend({\n    _initFields: function() {\n        this._maxSize = MIN_VALUE;\n        ScatterChart.fn._initFields.call(this);\n    },\n\n    addValue: function(value, fields) {\n        if (value.size !== null && (value.size > 0 || (value.size < 0 && fields.series.negativeValues.visible))) {\n            this._maxSize = Math.max(this._maxSize, Math.abs(value.size));\n            ScatterChart.fn.addValue.call(this, value, fields);\n        } else {\n            this.points.push(null);\n            this.seriesPoints[fields.seriesIx].push(null);\n        }\n    },\n\n    reflow: function(box) {\n        this.updateBubblesSize(box);\n        ScatterChart.fn.reflow.call(this, box);\n    },\n\n    pointType: function() {\n        return Bubble;\n    },\n\n    createPoint: function(value, fields) {\n        var series = fields.series;\n        var pointsCount = series.data.length;\n        var delay = fields.pointIx * (INITIAL_ANIMATION_DURATION / pointsCount);\n        var animationOptions = {\n            delay: delay,\n            duration: INITIAL_ANIMATION_DURATION - delay,\n            type: BUBBLE\n        };\n\n        var color = fields.color || series.color;\n        if (value.size < 0 && series.negativeValues.visible) {\n            color = valueOrDefault(\n                series.negativeValues.color, color\n            );\n        }\n\n        var pointOptions = deepExtend({\n            labels: {\n                animation: {\n                    delay: delay,\n                    duration: INITIAL_ANIMATION_DURATION - delay\n                }\n            }\n        }, this.pointOptions(series, fields.seriesIx), {\n            markers: {\n                type: CIRCLE,\n                border: series.border,\n                opacity: series.opacity,\n                animation: animationOptions\n            }\n        });\n\n        pointOptions = this.evalPointOptions(pointOptions, value, fields);\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        pointOptions.markers.background = color;\n\n        var point = new Bubble(value, pointOptions);\n        point.color = color;\n\n        this.append(point);\n\n        return point;\n    },\n\n    updateBubblesSize: function(box) {\n        var this$1$1 = this;\n\n        var ref = this;\n        var series = ref.options.series;\n        var boxSize = Math.min(box.width(), box.height());\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var seriesPoints = this$1$1.seriesPoints[seriesIx];\n            var minSize = currentSeries.minSize || Math.max(boxSize * 0.02, 10);\n            var maxSize = currentSeries.maxSize || boxSize * 0.2;\n            var minR = minSize / 2;\n            var maxR = maxSize / 2;\n            var minArea = Math.PI * minR * minR;\n            var maxArea = Math.PI * maxR * maxR;\n            var areaRange = maxArea - minArea;\n            var areaRatio = areaRange / this$1$1._maxSize;\n\n            for (var pointIx = 0; pointIx < seriesPoints.length; pointIx++) {\n                var point = seriesPoints[pointIx];\n                if (point) {\n                    var area = Math.abs(point.value.size) * areaRatio;\n                    var radius = Math.sqrt((minArea + area) / Math.PI);\n                    var baseZIndex = valueOrDefault(point.options.zIndex, 0);\n                    var zIndex = baseZIndex + (1 - radius / maxR);\n\n                    deepExtend(point.options, {\n                        zIndex: zIndex,\n                        markers: {\n                            size: radius * 2,\n                            zIndex: zIndex\n                        },\n                        labels: {\n                            zIndex: zIndex + 1\n                        }\n                    });\n                }\n            }\n        }\n    },\n\n    formatPointValue: function(point, format) {\n        var value = point.value;\n        return this.chartService.format.auto(format, value.x, value.y, value.size, point.category);\n    },\n\n    createAnimation: function() {},\n\n    createVisual: function() {}\n});\n\nsetDefaultOptions(BubbleChart, {\n    tooltip: {\n        format: \"{3}\"\n    },\n    labels: {\n        format: \"{3}\"\n    }\n});\n\nvar Target = ShapeElement.extend({\n\n});\n\ndeepExtend(Target.prototype, PointEventsMixin);\n\nvar Bullet = ChartElement.extend({\n    init: function(value, options) {\n        ChartElement.fn.init.call(this, options);\n\n        this.aboveAxis = this.options.aboveAxis;\n        this.color = options.color || WHITE;\n        this.value = value;\n    },\n\n    render: function() {\n        var options = this.options;\n\n        if (!this._rendered) {\n            this._rendered = true;\n\n            if (defined(this.value.target)) {\n                this.target = new Target({\n                    type: options.target.shape,\n                    background: options.target.color || this.color,\n                    opacity: options.opacity,\n                    zIndex: options.zIndex,\n                    border: options.target.border,\n                    vAlign: TOP,\n                    align: RIGHT\n                });\n\n                this.target.value = this.value;\n                this.target.dataItem = this.dataItem;\n                this.target.series = this.series;\n\n                this.append(this.target);\n            }\n\n            this.createLabel();\n            this.createNote();\n        }\n    },\n\n    createLabel: function() {\n        var options = this.options;\n        var labels = options.labels;\n\n        if (labels.visible) {\n            this.label = this.createLabelElement(labels);\n            this.append(this.label);\n        }\n    },\n\n    createLabelElement: function(options) {\n        return new BarLabel(this.getLabelText(options),\n            options,\n            this.pointData());\n    },\n\n    getLabelText: function(options) {\n        var labelTemplate = getTemplate(options);\n\n        if (labelTemplate) {\n            return labelTemplate(this.pointData());\n        }\n\n        return this.formatValue(options.format);\n    },\n\n    reflow: function(box) {\n        this.render();\n\n        var ref = this;\n        var options = ref.options;\n        var target = ref.target;\n        var chart = ref.owner;\n        var invertAxes = options.invertAxes;\n        var valueAxis = chart.seriesValueAxis(this.options);\n        var categorySlot = chart.categorySlot(chart.categoryAxis, options.categoryIx, valueAxis);\n        var targetValueSlot = valueAxis.getSlot(this.value.target);\n        var targetSlotX = invertAxes ? targetValueSlot : categorySlot;\n        var targetSlotY = invertAxes ? categorySlot : targetValueSlot;\n\n        if (target) {\n            var targetSlot = new Box(\n                targetSlotX.x1, targetSlotY.y1,\n                targetSlotX.x2, targetSlotY.y2\n            );\n            target.options.height = invertAxes ? targetSlot.height() : options.target.line.width;\n            target.options.width = invertAxes ? options.target.line.width : targetSlot.width();\n            target.reflow(targetSlot);\n        }\n\n        var label = this.label;\n        if (label) {\n            label.options.aboveAxis = this.aboveAxis;\n            label.reflow(box);\n        }\n\n        if (this.note) {\n            this.note.reflow(box);\n        }\n\n        this.box = box;\n    },\n\n    createVisual: function() {\n        ChartElement.fn.createVisual.call(this);\n\n        this.addAccessibilityAttributesToVisual();\n\n        var options = this.options;\n        var body = Path.fromRect(this.box.toRect(), {\n            fill: {\n                color: this.color,\n                opacity: options.opacity\n            },\n            stroke: null\n        });\n\n        if (options.border.width > 0) {\n            body.options.set(\"stroke\", {\n                color: options.border.color || this.color,\n                width: options.border.width,\n                dashType: options.border.dashType,\n                opacity: valueOrDefault(options.border.opacity, options.opacity)\n            });\n        }\n\n        this.bodyVisual = body;\n\n        alignPathToPixel(body);\n        this.visual.append(body);\n    },\n\n    createAnimation: function() {\n        if (this.bodyVisual) {\n            this.animation = Animation.create(\n                this.bodyVisual, this.options.animation\n            );\n        }\n    },\n\n    createHighlight: function(style) {\n        return Path.fromRect(this.box.toRect(), style);\n    },\n\n    highlightVisual: function() {\n        return this.bodyVisual;\n    },\n\n    highlightVisualArgs: function() {\n        return {\n            rect: this.box.toRect(),\n            visual: this.bodyVisual,\n            options: this.options\n        };\n    },\n\n    formatValue: function(format) {\n        return this.owner.formatPointValue(this, format);\n    },\n\n    pointData: function() {\n        return {\n            dataItem: this.dataItem,\n            category: this.category,\n            value: this.value,\n            series: this.series\n        };\n    },\n\n    overlapsBox: function(box) {\n        return this.box.overlaps(box);\n    },\n\n    getIndex: function() {\n        return this.categoryIx;\n    }\n});\n\nBullet.prototype.tooltipAnchor = Bar.prototype.tooltipAnchor;\nBullet.prototype.createFocusHighlight = Bar.prototype.createFocusHighlight;\n\nsetDefaultOptions(Bullet, {\n    border: {\n        width: 1\n    },\n    vertical: false,\n    opacity: 1,\n    target: {\n        shape: \"\",\n        border: {\n            width: 0,\n            color: \"green\"\n        },\n        line: {\n            width: 2\n        }\n    },\n    labels: {\n        visible: false\n    },\n    tooltip: {\n        format: \"Current: {0}<br />Target: {1}\"\n    },\n    notes: {\n        label: {}\n    },\n    accessibility: {\n        role: CHART_POINT_ROLE,\n        className: CHART_POINT_CLASSNAME,\n        ariaRoleDescription: CHART_POINT_ROLE_DESCRIPTION\n    }\n});\n\ndeepExtend(Bullet.prototype, PointEventsMixin);\ndeepExtend(Bullet.prototype, NoteMixin);\ndeepExtend(Bullet.prototype, AccessibilityAttributesMixin);\n\nvar BulletChart = CategoricalChart.extend({\n    init: function(plotArea, options) {\n\n        wrapData(options);\n\n        CategoricalChart.fn.init.call(this, plotArea, options);\n    },\n\n    reflowCategories: function(categorySlots) {\n        var children = this.children;\n        var childrenLength = children.length;\n\n        for (var i = 0; i < childrenLength; i++) {\n            children[i].reflow(categorySlots[i]);\n        }\n    },\n\n    plotRange: function(point) {\n        var series = point.series;\n        var valueAxis = this.seriesValueAxis(series);\n        var axisCrossingValue = this.categoryAxisCrossingValue(valueAxis);\n\n        return [ axisCrossingValue, point.value.current || axisCrossingValue ];\n    },\n\n    createPoint: function(data, fields) {\n        var categoryIx = fields.categoryIx;\n        var series = fields.series;\n        var ref = this;\n        var options = ref.options;\n        var children = ref.children;\n        var value = data.valueFields;\n\n        var bulletOptions = deepExtend({\n            vertical: !options.invertAxes,\n            overlay: series.overlay,\n            categoryIx: categoryIx,\n            invertAxes: options.invertAxes\n        }, series);\n\n        var color = data.fields.color || series.color;\n        bulletOptions = this.evalPointOptions(bulletOptions, value, fields);\n        if (isFunction(series.color)) {\n            color = bulletOptions.color;\n        }\n\n        var bullet = new Bullet(value, bulletOptions);\n        bullet.color = color;\n\n        var cluster = children[categoryIx];\n        if (!cluster) {\n            cluster = new ClusterLayout({\n                vertical: options.invertAxes,\n                gap: options.gap,\n                spacing: options.spacing,\n                rtl: !options.invertAxes && (this.chartService || {}).rtl\n            });\n            this.append(cluster);\n        }\n\n        cluster.append(bullet);\n\n        return bullet;\n    },\n\n    updateRange: function(value, fields) {\n        var current = value.current;\n        var target = value.target;\n        var axisName = fields.series.axis;\n        var axisRange = this.valueAxisRanges[axisName];\n\n        if (defined(current) && !isNaN(current) && defined(target && !isNaN(target))) {\n            axisRange = this.valueAxisRanges[axisName] =\n                axisRange || { min: MAX_VALUE, max: MIN_VALUE };\n\n            axisRange.min = Math.min(axisRange.min, current, target);\n            axisRange.max = Math.max(axisRange.max, current, target);\n        }\n    },\n\n    formatPointValue: function(point, format) {\n        return this.chartService.format.auto(format, point.value.current, point.value.target);\n    },\n\n    pointValue: function(data) {\n        return data.valueFields.current;\n    },\n\n    aboveAxis: function(point) {\n        var value = point.value.current;\n\n        return value > 0;\n    },\n\n    createAnimation: function() {\n        var this$1$1 = this;\n\n        var points = this.points;\n\n        this._setAnimationOptions();\n\n        for (var idx = 0; idx < points.length; idx++) {\n            var point = points[idx];\n            point.options.animation = this$1$1.options.animation;\n            point.createAnimation();\n        }\n    }\n});\n\nBulletChart.prototype._setAnimationOptions = BarChart.prototype._setAnimationOptions;\n\nsetDefaultOptions(BulletChart, {\n    animation: {\n        type: BAR\n    }\n});\n\nfunction wrapData(options) {\n    var series = options.series;\n\n    for (var i = 0; i < series.length; i++) {\n        var seriesItem = series[i];\n        var data = seriesItem.data;\n        if (data && !isArray(data[0]) && !isObject(data[0])) {\n            seriesItem.data = [ data ];\n        }\n    }\n}\n\nvar BaseTooltip = Class.extend({\n    init: function(chartService, options) {\n\n        this.chartService = chartService;\n        this.options = deepExtend({}, this.options, options);\n    },\n\n    getStyle: function(options, point) {\n        var background = options.background;\n        var border = options.border.color;\n\n        if (point) {\n            var pointColor = point.color || point.options.color;\n            background = valueOrDefault(background, pointColor);\n            border = valueOrDefault(border, pointColor);\n        }\n\n        var padding = getSpacing(options.padding || {}, \"auto\");\n\n        return {\n            backgroundColor: background,\n            borderColor: border,\n            font: options.font,\n            color: options.color,\n            opacity: options.opacity,\n            borderWidth: styleValue(options.border.width),\n            paddingTop: styleValue(padding.top),\n            paddingBottom: styleValue(padding.bottom),\n            paddingLeft: styleValue(padding.left),\n            paddingRight: styleValue(padding.right)\n        };\n    },\n\n    show: function(options, tooltipOptions, point) {\n        options.format = tooltipOptions.format;\n\n        var style = this.getStyle(tooltipOptions, point);\n        options.style = style;\n\n        var background = new Color(style.backgroundColor);\n        if (!defined(tooltipOptions.color) && !background.isDark()) {\n            options.className = \"k-chart-tooltip-inverse\";\n        }\n\n        this.chartService.notify(SHOW_TOOLTIP, options);\n\n        this.visible = true;\n    },\n\n    hide: function() {\n        if (this.chartService) {\n            this.chartService.notify(HIDE_TOOLTIP);\n        }\n\n        this.visible = false;\n    },\n\n    destroy: function() {\n        delete this.chartService;\n    }\n});\n\nsetDefaultOptions(BaseTooltip, {\n    border: {\n        width: 1\n    },\n    opacity: 1\n});\n\nvar CrosshairTooltip = BaseTooltip.extend({\n    init: function(chartService, crosshair, options) {\n        BaseTooltip.fn.init.call(this, chartService, options);\n\n        this.crosshair = crosshair;\n        this.formatService = chartService.format;\n        this.initAxisName();\n    },\n\n    initAxisName: function() {\n        var axis = this.crosshair.axis;\n        var plotArea = axis.plotArea;\n        var name;\n        if (plotArea.categoryAxis) {\n            name = axis.getCategory ? \"categoryAxis\" : \"valueAxis\";\n        } else {\n            name = axis.options.vertical ? \"yAxis\" : \"xAxis\";\n        }\n        this.axisName = name;\n    },\n\n    showAt: function(point) {\n        var ref = this;\n        var axis = ref.crosshair.axis;\n        var options = ref.options;\n        var value = axis[options.stickyMode ? \"getCategory\" : \"getValue\"](point);\n        var formattedValue = value;\n\n        if (options.format) {\n            formattedValue = this.formatService.auto(options.format, value);\n        } else if (axis.options.type === DATE) {\n            formattedValue = this.formatService.auto(axis.options.labels.dateFormats[axis.options.baseUnit], value);\n        }\n\n        this.show({\n            point: point,\n            anchor: this.getAnchor(),\n            crosshair: this.crosshair,\n            value: formattedValue,\n            axisName: this.axisName,\n            axisIndex: this.crosshair.axis.axisIndex\n        }, this.options);\n    },\n\n    hide: function() {\n        this.chartService.notify(HIDE_TOOLTIP, {\n            crosshair: this.crosshair,\n            axisName: this.axisName,\n            axisIndex: this.crosshair.axis.axisIndex\n        });\n    },\n\n    getAnchor: function() {\n        var ref = this;\n        var crosshair = ref.crosshair;\n        var ref_options = ref.options;\n        var position = ref_options.position;\n        var padding = ref_options.padding;\n        var vertical = !crosshair.axis.options.vertical;\n        var lineBox = crosshair.line.bbox();\n        var horizontalAlign, verticalAlign, point;\n\n        if (vertical) {\n            horizontalAlign = CENTER;\n            if (position === BOTTOM) {\n                verticalAlign = TOP;\n                point = lineBox.bottomLeft().translate(0, padding);\n            } else {\n                verticalAlign = BOTTOM;\n                point = lineBox.topLeft().translate(0, -padding);\n            }\n        } else {\n            verticalAlign = CENTER;\n            if (position === LEFT) {\n                horizontalAlign = RIGHT;\n                point = lineBox.topLeft().translate(-padding, 0);\n            } else {\n                horizontalAlign = LEFT;\n                point = lineBox.topRight().translate(padding, 0);\n            }\n        }\n\n        return {\n            point: point,\n            align: {\n                horizontal: horizontalAlign,\n                vertical: verticalAlign\n            }\n        };\n    }\n});\n\nsetDefaultOptions(CrosshairTooltip, {\n    padding: 10\n});\n\nvar Crosshair = ChartElement.extend({\n    init: function(chartService, axis, options) {\n        ChartElement.fn.init.call(this, options);\n\n        this.axis = axis;\n        this.stickyMode = axis instanceof CategoryAxis;\n\n        var tooltipOptions = this.options.tooltip;\n\n        if (tooltipOptions.visible) {\n            this.tooltip = new CrosshairTooltip(chartService, this,\n                deepExtend({}, tooltipOptions, { stickyMode: this.stickyMode })\n            );\n        }\n    },\n\n    showAt: function(point) {\n        this.point = point;\n        this.moveLine();\n        this.line.visible(true);\n\n        if (this.tooltip) {\n            this.tooltip.showAt(point);\n        }\n    },\n\n    hide: function() {\n        this.line.visible(false);\n\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    },\n\n    moveLine: function() {\n        var ref = this;\n        var axis = ref.axis;\n        var point = ref.point;\n        var vertical = axis.options.vertical;\n        var box = this.getBox();\n        var dim = vertical ? Y : X;\n        var lineStart = new GeometryPoint(box.x1, box.y1);\n        var lineEnd;\n\n        if (vertical) {\n            lineEnd = new GeometryPoint(box.x2, box.y1);\n        } else {\n            lineEnd = new GeometryPoint(box.x1, box.y2);\n        }\n\n        if (point) {\n            if (this.stickyMode) {\n                var slot = axis.getSlot(axis.pointCategoryIndex(point));\n                lineStart[dim] = lineEnd[dim] = slot.center()[dim];\n            } else {\n                lineStart[dim] = lineEnd[dim] = point[dim];\n            }\n        }\n\n        this.box = box;\n\n        this.line.moveTo(lineStart).lineTo(lineEnd);\n    },\n\n    getBox: function() {\n        var axis = this.axis;\n        var axes = axis.pane.axes;\n        var length = axes.length;\n        var vertical = axis.options.vertical;\n        var box = axis.lineBox().clone();\n        var dim = vertical ? X : Y;\n        var axisLineBox;\n\n        for (var i = 0; i < length; i++) {\n            var currentAxis = axes[i];\n            if (currentAxis.options.vertical !== vertical) {\n                if (!axisLineBox) {\n                    axisLineBox = currentAxis.lineBox().clone();\n                } else {\n                    axisLineBox.wrap(currentAxis.lineBox());\n                }\n            }\n        }\n\n        box[dim + 1] = axisLineBox[dim + 1];\n        box[dim + 2] = axisLineBox[dim + 2];\n\n        return box;\n    },\n\n    createVisual: function() {\n        ChartElement.fn.createVisual.call(this);\n\n        var options = this.options;\n        this.line = new Path({\n            stroke: {\n                color: options.color,\n                width: options.width,\n                opacity: options.opacity,\n                dashType: options.dashType\n            },\n            visible: false\n        });\n\n        this.moveLine();\n        this.visual.append(this.line);\n    },\n\n    destroy: function() {\n        if (this.tooltip) {\n            this.tooltip.destroy();\n        }\n\n        ChartElement.fn.destroy.call(this);\n    }\n});\n\nsetDefaultOptions(Crosshair, {\n    color: BLACK,\n    width: 2,\n    zIndex: -1,\n    tooltip: {\n        visible: false\n    }\n});\n\nvar ChartContainer = ChartElement.extend({\n    init: function(options, pane) {\n        ChartElement.fn.init.call(this, options);\n        this.pane = pane;\n    },\n\n    shouldClip: function() {\n        var children = this.children;\n        var length = children.length;\n\n        for (var i = 0; i < length; i++) {\n            if (children[i].options.clip === true) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    _clipBox: function() {\n        return this.pane.chartsBox();\n    },\n\n    createVisual: function() {\n        this.visual = new Group({\n            zIndex: 0\n        });\n\n        if (this.shouldClip()) {\n            var clipBox = this.clipBox = this._clipBox();\n            var clipRect = clipBox.toRect();\n            var clipPath = Path.fromRect(clipRect);\n            alignPathToPixel(clipPath);\n\n            this.visual.clip(clipPath);\n            this.unclipLabels();\n        }\n    },\n\n    stackRoot: function() {\n        return this;\n    },\n\n    unclipLabels: function() {\n        var ref = this;\n        var charts = ref.children;\n        var clipBox = ref.clipBox;\n\n        for (var i = 0; i < charts.length; i++) {\n            var points = charts[i].points || {};\n            var length = points.length;\n\n            for (var j = 0; j < length; j++) {\n                var point = points[j];\n                if (point && point.visible !== false && point.overlapsBox && point.overlapsBox(clipBox)) {\n                    if (point.unclipElements) {\n                        point.unclipElements();\n                    } else {\n                        var label = point.label;\n                        var note = point.note;\n\n                        if (label && label.options.visible) {\n                            if (label.alignToClipBox) {\n                                label.alignToClipBox(clipBox);\n                            }\n                            label.options.noclip = true;\n                        }\n\n                        if (note && note.options.visible) {\n                            note.options.noclip = true;\n                        }\n                    }\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        ChartElement.fn.destroy.call(this);\n\n        delete this.parent;\n    }\n});\n\nChartContainer.prototype.isStackRoot = true;\n\nvar Pane = BoxElement.extend({\n    init: function(options) {\n        BoxElement.fn.init.call(this, options);\n\n        this.id = paneID();\n\n        this.createTitle();\n\n        this.content = new ChartElement();\n\n        this.chartContainer = new ChartContainer({}, this);\n        this.append(this.content);\n\n        this.axes = [];\n        this.charts = [];\n    },\n\n    createTitle: function() {\n        var titleOptions = this.options.title;\n        if (isObject(titleOptions)) {\n            titleOptions = deepExtend({}, titleOptions, {\n                align: titleOptions.position,\n                position: TOP\n            });\n        }\n\n        this.title = Title.buildTitle(titleOptions, Pane.prototype.options.title);\n        if (this.title) {\n            this.append(this.title);\n        }\n    },\n\n    appendAxis: function(axis) {\n        this.content.append(axis);\n        this.axes.push(axis);\n        axis.pane = this;\n    },\n\n    appendAxisAt: function(axis, pos) {\n        this.content.append(axis);\n        this.axes.splice(pos, 0, axis);\n        axis.pane = this;\n    },\n\n    appendChart: function(chart) {\n        if (this.chartContainer.parent !== this.content) {\n            this.content.append(this.chartContainer);\n        }\n\n        this.charts.push(chart);\n        this.chartContainer.append(chart);\n        chart.pane = this;\n    },\n\n    empty: function() {\n        var this$1$1 = this;\n\n        var plotArea = this.parent;\n\n        if (plotArea) {\n            for (var i = 0; i < this.axes.length; i++) {\n                plotArea.removeAxis(this$1$1.axes[i]);\n            }\n\n            for (var i$1 = 0; i$1 < this.charts.length; i$1++) {\n                plotArea.removeChart(this$1$1.charts[i$1]);\n            }\n        }\n\n        this.axes = [];\n        this.charts = [];\n\n        this.content.destroy();\n        this.content.children = [];\n        this.chartContainer.children = [];\n    },\n\n    reflow: function(targetBox) {\n        // Content (such as charts) is rendered, but excluded from reflows\n        var content;\n        if (last(this.children) === this.content) {\n            content = this.children.pop();\n        }\n\n        BoxElement.fn.reflow.call(this, targetBox);\n\n        if (content) {\n            this.children.push(content);\n        }\n\n        if (this.title) {\n            this.contentBox.y1 += this.title.box.height();\n        }\n    },\n\n    visualStyle: function() {\n        var style = BoxElement.fn.visualStyle.call(this);\n        style.zIndex = -10;\n\n        return style;\n    },\n\n    renderComplete: function() {\n        if (this.options.visible) {\n            this.createGridLines();\n        }\n    },\n\n    stackRoot: function() {\n        return this;\n    },\n\n    clipRoot: function() {\n        return this;\n    },\n\n    createGridLines: function() {\n        var axes = this.axes;\n        var allAxes = axes.concat(this.parent.axes);\n        var vGridLines = [];\n        var hGridLines = [];\n\n        // TODO\n        // Is full combination really necessary?\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i];\n            var vertical = axis.options.vertical;\n            var gridLines = vertical ? vGridLines : hGridLines;\n            for (var j = 0; j < allAxes.length; j++) {\n                if (gridLines.length === 0) {\n                    var altAxis = allAxes[j];\n                    if (vertical !== altAxis.options.vertical) {\n                        append(gridLines, axis.createGridLines(altAxis));\n                    }\n                }\n            }\n        }\n    },\n\n    refresh: function() {\n        this.visual.clear();\n\n        this.content.parent = null;\n        this.content.createGradient = this.createGradient.bind(this);\n        this.content.renderVisual();\n        this.content.parent = this;\n\n        if (this.title) {\n            this.visual.append(this.title.visual);\n        }\n\n        this.visual.append(this.content.visual);\n\n        this.renderComplete();\n        this.notifyRender();\n    },\n\n    chartsBox: function() {\n        var axes = this.axes;\n        var length = axes.length;\n        var chartsBox = new Box();\n\n        for (var idx = 0; idx < length; idx++) {\n            var axis = axes[idx];\n            var axisValueField = axis.options.vertical ? Y : X;\n            var lineBox = axis.lineBox();\n            chartsBox[axisValueField + 1] = lineBox[axisValueField + 1];\n            chartsBox[axisValueField + 2] = lineBox[axisValueField + 2];\n        }\n\n        if (chartsBox.x2 === 0) {\n            var allAxes = this.parent.axes;\n            var length$1 = allAxes.length;\n\n            for (var idx$1 = 0; idx$1 < length$1; idx$1++) {\n                var axis$1 = allAxes[idx$1];\n                if (!axis$1.options.vertical) {\n                    var lineBox$1 = axis$1.lineBox();\n                    chartsBox.x1 = lineBox$1.x1;\n                    chartsBox.x2 = lineBox$1.x2;\n                }\n            }\n        }\n        return chartsBox;\n    },\n\n    clipBox: function() {\n        return this.chartContainer.clipBox;\n    },\n\n    notifyRender: function() {\n        var service = this.getService();\n        if (service) {\n            service.notify(PANE_RENDER, {\n                pane: new ChartPane(this),\n                index: this.paneIndex,\n                name: this.options.name\n            });\n        }\n    }\n});\n\nvar ID = 1;\n\nfunction paneID() {\n    return \"pane\" + ID++;\n}\n\nPane.prototype.isStackRoot = true;\n\nsetDefaultOptions(Pane, {\n    zIndex: -1,\n    shrinkToFit: true,\n    title: {\n        align: LEFT\n    },\n    visible: true\n});\n\nvar PlotAreaBase = ChartElement.extend({\n    init: function(series, options, chartService) {\n        ChartElement.fn.init.call(this, options);\n\n        this.initFields(series, options);\n        this.series = series;\n        this.initSeries();\n        this.charts = [];\n        this.options.legend = this.options.legend || {};\n        this.options.legend.data = [];\n        this.axes = [];\n        this.crosshairs = [];\n        this.chartService = chartService;\n        this.originalOptions = options;\n        this.originalSeries = series;\n        this._bindCache = new WeakMap();\n\n        this.createPanes();\n        this.render();\n        this.createCrosshairs();\n    },\n\n    initFields: function() { },\n\n    initSeries: function() {\n        var series = this.series;\n\n        for (var i = 0; i < series.length; i++) {\n            series[i].index = i;\n        }\n    },\n\n    bindPoint: function(series, pointIx, item) {\n        var cached = this._bindCache.get(series);\n        if (!cached) {\n            cached = [];\n            this._bindCache.set(series, cached);\n        }\n\n        var data = cached[pointIx];\n        if (!data) {\n            data = cached[pointIx] = SeriesBinder.current.bindPoint(series, pointIx, item);\n        }\n\n        return data;\n    },\n\n    createPanes: function() {\n        var this$1$1 = this;\n\n        var titleOptions = this.options.title || {};\n        var paneDefaults = this.options.paneDefaults;\n        var paneOptions = this.options.panes || [];\n        var panesLength = Math.max(paneOptions.length, 1);\n        var panes = [];\n\n        var defaults = deepExtend({\n            title: {\n                color: titleOptions.color\n            }\n        }, paneDefaults);\n\n        for (var i = 0; i < panesLength; i++) {\n            var options = deepExtend({}, defaults, paneOptions[i]);\n            if (isString(options.title)) {\n                options.title = deepExtend({ text: options.title }, defaults.title);\n            }\n\n            var currentPane = new Pane(options);\n            currentPane.paneIndex = i;\n\n            panes.push(currentPane);\n            this$1$1.append(currentPane);\n        }\n\n        this.panes = panes;\n    },\n\n    crosshairOptions: function(axis) {\n        return axis.options.crosshair;\n    },\n\n    createCrosshairs: function(panes) {\n        var this$1$1 = this;\n        if (panes === void 0) { panes = this.panes; }\n\n        for (var i = 0; i < panes.length; i++) {\n            var pane = panes[i];\n            for (var j = 0; j < pane.axes.length; j++) {\n                var axis = pane.axes[j];\n                var options = this$1$1.crosshairOptions(axis);\n                if (options && options.visible) {\n                    var currentCrosshair = new Crosshair(this$1$1.chartService, axis, options);\n\n                    this$1$1.crosshairs.push(currentCrosshair);\n                    pane.content.append(currentCrosshair);\n                }\n            }\n        }\n    },\n\n    removeCrosshairs: function(pane) {\n        var crosshairs = this.crosshairs;\n        var axes = pane.axes;\n\n        for (var i = crosshairs.length - 1; i >= 0; i--) {\n            for (var j = 0; j < axes.length; j++) {\n                if (crosshairs[i].axis === axes[j]) {\n                    crosshairs.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    },\n\n    hideCrosshairs: function() {\n        var crosshairs = this.crosshairs;\n        for (var idx = 0; idx < crosshairs.length; idx++) {\n            crosshairs[idx].hide();\n        }\n    },\n\n    findPane: function(name) {\n        var panes = this.panes;\n        var matchingPane;\n\n        for (var i = 0; i < panes.length; i++) {\n            if (panes[i].options.name === name) {\n                matchingPane = panes[i];\n                break;\n            }\n        }\n\n        return matchingPane || panes[0];\n    },\n\n    findPointPane: function(point) {\n        var panes = this.panes;\n        var matchingPane;\n\n        for (var i = 0; i < panes.length; i++) {\n            if (panes[i].box.containsPoint(point)) {\n                matchingPane = panes[i];\n                break;\n            }\n        }\n\n        return matchingPane;\n    },\n\n    appendAxis: function(axis) {\n        var pane = this.findPane(axis.options.pane);\n\n        pane.appendAxis(axis);\n        this.axes.push(axis);\n        axis.plotArea = this;\n    },\n\n    removeAxis: function(axisToRemove) {\n        var this$1$1 = this;\n\n        var filteredAxes = [];\n\n        for (var i = 0; i < this.axes.length; i++) {\n            var axis = this$1$1.axes[i];\n            if (axisToRemove !== axis) {\n                filteredAxes.push(axis);\n            } else {\n                axis.destroy();\n            }\n        }\n\n        this.axes = filteredAxes;\n    },\n\n    appendChart: function(chart, pane) {\n        this.charts.push(chart);\n        if (pane) {\n            pane.appendChart(chart);\n        } else {\n            this.append(chart);\n        }\n    },\n\n    removeChart: function(chartToRemove) {\n        var this$1$1 = this;\n\n        var filteredCharts = [];\n\n        for (var i = 0; i < this.charts.length; i++) {\n            var chart = this$1$1.charts[i];\n            if (chart !== chartToRemove) {\n                filteredCharts.push(chart);\n            } else {\n                chart.destroy();\n            }\n        }\n\n        this.charts = filteredCharts;\n    },\n\n    addToLegend: function(series) {\n        var count = series.length;\n        var legend = this.options.legend;\n        var labels = legend.labels || {};\n        var inactiveItems = legend.inactiveItems || {};\n        var inactiveItemsLabels = inactiveItems.labels || {};\n        var data = [];\n\n        for (var i = 0; i < count; i++) {\n            var currentSeries = series[i];\n            var seriesVisible = currentSeries.visible !== false;\n            if (currentSeries.visibleInLegend === false) {\n                continue;\n            }\n\n            var text = currentSeries.name;\n            var labelTemplate = seriesVisible ? getTemplate(labels) : getTemplate(inactiveItemsLabels) || getTemplate(labels);\n            if (labelTemplate) {\n                text = labelTemplate({\n                    text: hasValue(text) ? text : \"\",\n                    series: currentSeries\n                });\n            }\n\n            var defaults = currentSeries._defaults;\n            var color = currentSeries.color;\n            if (isFunction(color) && defaults) {\n                color = defaults.color;\n            }\n\n            var itemLabelOptions = (void 0), markerColor = (void 0);\n            if (seriesVisible) {\n                itemLabelOptions = {};\n                markerColor = color;\n            } else {\n                itemLabelOptions = {\n                    color: inactiveItemsLabels.color,\n                    font: inactiveItemsLabels.font\n                };\n                markerColor = inactiveItems.markers.color;\n            }\n\n            if (hasValue(text) && text !== \"\") {\n                data.push({\n                    text: text,\n                    labels: itemLabelOptions,\n                    markerColor: markerColor,\n                    series: currentSeries,\n                    active: seriesVisible\n                });\n            }\n        }\n\n        append(legend.data, data);\n    },\n\n    groupAxes: function(panes) {\n        var xAxes = [];\n        var yAxes = [];\n\n        for (var paneIx = 0; paneIx < panes.length; paneIx++) {\n            var paneAxes = panes[paneIx].axes;\n            for (var axisIx = 0; axisIx < paneAxes.length; axisIx++) {\n                var axis = paneAxes[axisIx];\n                if (axis.options.vertical) {\n                    yAxes.push(axis);\n                } else {\n                    xAxes.push(axis);\n                }\n            }\n        }\n\n        return { x: xAxes, y: yAxes, any: xAxes.concat(yAxes) };\n    },\n\n    groupSeriesByPane: function() {\n        var this$1$1 = this;\n\n        var series = this.series;\n        var seriesByPane = {};\n\n        for (var i = 0; i < series.length; i++) {\n            var currentSeries = series[i];\n            var pane = this$1$1.seriesPaneName(currentSeries);\n\n            if (seriesByPane[pane]) {\n                seriesByPane[pane].push(currentSeries);\n            } else {\n                seriesByPane[pane] = [ currentSeries ];\n            }\n        }\n\n        return seriesByPane;\n    },\n\n    filterVisibleSeries: function(series) {\n        var result = [];\n\n        for (var i = 0; i < series.length; i++) {\n            var currentSeries = series[i];\n            if (currentSeries.visible !== false) {\n                result.push(currentSeries);\n            }\n        }\n\n        return result;\n    },\n\n    reflow: function(targetBox) {\n        var options = this.options.plotArea;\n        var panes = this.panes;\n        var margin = getSpacing(options.margin);\n\n        this.box = targetBox.clone().unpad(margin);\n        this.reflowPanes();\n\n        this.detachLabels();\n        this.reflowAxes(panes);\n        this.reflowCharts(panes);\n    },\n\n    redraw: function(panes) {\n        var this$1$1 = this;\n\n        var panesArray = [].concat(panes);\n        this.initSeries();\n\n        //prevents leak during partial redraws. the cached gradients observers retain reference to the destroyed elements.\n        var root = this.getRoot();\n        if (root) {\n            root.cleanGradients();\n        }\n\n        for (var i = 0; i < panesArray.length; i++) {\n            this$1$1.removeCrosshairs(panesArray[i]);\n            panesArray[i].empty();\n        }\n\n        this._bindCache = new WeakMap();\n\n        this.render(panesArray);\n        this.detachLabels();\n        this.reflowAxes(this.panes);\n        this.reflowCharts(panesArray);\n\n        this.createCrosshairs(panesArray);\n\n        for (var i$1 = 0; i$1 < panesArray.length; i$1++) {\n            panesArray[i$1].refresh();\n        }\n    },\n\n    axisCrossingValues: function(axis, crossingAxes) {\n        var options = axis.options;\n        var crossingValues = [].concat(\n            options.axisCrossingValues || options.axisCrossingValue\n        );\n        var valuesToAdd = crossingAxes.length - crossingValues.length;\n        var defaultValue = crossingValues[0] || 0;\n\n        for (var i = 0; i < valuesToAdd; i++) {\n            crossingValues.push(defaultValue);\n        }\n\n        return crossingValues;\n    },\n\n    alignAxisTo: function(axis, targetAxis, crossingValue, targetCrossingValue) {\n        var slot = axis.getSlot(crossingValue, crossingValue, true);\n        var slotEdge = axis.options.reverse ? 2 : 1;\n        var targetSlot = targetAxis.getSlot(targetCrossingValue, targetCrossingValue, true);\n        var targetEdge = targetAxis.options.reverse ? 2 : 1;\n        var axisBox = axis.box.translate(\n            targetSlot[X + targetEdge] - slot[X + slotEdge],\n            targetSlot[Y + targetEdge] - slot[Y + slotEdge]\n        );\n\n        if (axis.pane !== targetAxis.pane) {\n            axisBox.translate(0, axis.pane.box.y1 - targetAxis.pane.box.y1);\n        }\n\n        axis.reflow(axisBox);\n    },\n\n    alignAxes: function(xAxes, yAxes) {\n        var this$1$1 = this;\n\n        var xAnchor = xAxes[0];\n        var yAnchor = yAxes[0];\n        var xAnchorCrossings = this.axisCrossingValues(xAnchor, yAxes);\n        var yAnchorCrossings = this.axisCrossingValues(yAnchor, xAxes);\n        var leftAnchors = {};\n        var rightAnchors = {};\n        var topAnchors = {};\n        var bottomAnchors = {};\n\n        for (var i = 0; i < yAxes.length; i++) {\n            var axis = yAxes[i];\n            var pane = axis.pane;\n            var paneId = pane.id;\n            var visible = axis.options.visible !== false;\n\n            // Locate pane anchor, if any, and use its axisCrossingValues\n            var anchor = paneAnchor(xAxes, pane) || xAnchor;\n            var anchorCrossings = xAnchorCrossings;\n\n            if (anchor !== xAnchor) {\n                anchorCrossings = this$1$1.axisCrossingValues(anchor, yAxes);\n            }\n\n            this$1$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);\n\n            if (axis.options._overlap) {\n                continue;\n            }\n\n            if (round(axis.lineBox().x1) === round(anchor.lineBox().x1)) {\n                // Push the axis to the left the previous y-axis so they don't overlap\n                if (leftAnchors[paneId]) {\n                    axis.reflow(axis.box\n                        .alignTo(leftAnchors[paneId].box, LEFT)\n                        .translate(-axis.options.margin, 0)\n                    );\n                }\n\n                if (visible) {\n                    leftAnchors[paneId] = axis;\n                }\n            }\n\n            if (round(axis.lineBox().x2) === round(anchor.lineBox().x2)) {\n                // Flip the labels on the right if we're at the right end of the pane\n                if (!axis._mirrored) {\n                    axis.options.labels.mirror = !axis.options.labels.mirror;\n                    axis._mirrored = true;\n                }\n\n                this$1$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);\n\n                // Push the axis to the right the previous y-axis so they don't overlap\n                if (rightAnchors[paneId]) {\n                    axis.reflow(axis.box\n                        .alignTo(rightAnchors[paneId].box, RIGHT)\n                        .translate(axis.options.margin, 0)\n                    );\n                }\n\n                if (visible) {\n                    rightAnchors[paneId] = axis;\n                }\n            }\n\n            // Locate pane anchor, if any, and align the axis to it\n            var paneYAnchor = paneAnchor(yAxes, pane) || yAnchor;\n            if (paneYAnchor !== axis) {\n                axis.alignTo(paneYAnchor);\n                axis.reflow(axis.box);\n            }\n        }\n\n        for (var i$1 = 0; i$1 < xAxes.length; i$1++) {\n            var axis$1 = xAxes[i$1];\n            var pane$1 = axis$1.pane;\n            var paneId$1 = pane$1.id;\n            var visible$1 = axis$1.options.visible !== false;\n\n            // Locate pane anchor and use its axisCrossingValues\n            var anchor$1 = paneAnchor(yAxes, pane$1) || yAnchor;\n            var anchorCrossings$1 = yAnchorCrossings;\n            if (anchor$1 !== yAnchor) {\n                anchorCrossings$1 = this$1$1.axisCrossingValues(anchor$1, xAxes);\n            }\n\n            this$1$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);\n\n            if (axis$1.options._overlap) {\n                continue;\n            }\n\n            if (round(axis$1.lineBox().y1) === round(anchor$1.lineBox().y1)) {\n                // Flip the labels on top if we're at the top of the pane\n                if (!axis$1._mirrored) {\n                    axis$1.options.labels.mirror = !axis$1.options.labels.mirror;\n                    axis$1._mirrored = true;\n                }\n                this$1$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);\n\n                // Push the axis above the previous x-axis so they don't overlap\n                if (topAnchors[paneId$1]) {\n                    axis$1.reflow(axis$1.box\n                        .alignTo(topAnchors[paneId$1].box, TOP)\n                        .translate(0, -axis$1.options.margin)\n                    );\n                }\n\n                if (visible$1) {\n                    topAnchors[paneId$1] = axis$1;\n                }\n            }\n\n            if (round(axis$1.lineBox().y2, COORD_PRECISION) === round(anchor$1.lineBox().y2, COORD_PRECISION)) {\n                // Push the axis below the previous x-axis so they don't overlap\n                if (bottomAnchors[paneId$1]) {\n                    axis$1.reflow(axis$1.box\n                        .alignTo(bottomAnchors[paneId$1].box, BOTTOM)\n                        .translate(0, axis$1.options.margin)\n                    );\n                }\n\n                if (visible$1) {\n                    bottomAnchors[paneId$1] = axis$1;\n                }\n            }\n\n            if (i$1 !== 0) {\n                axis$1.alignTo(xAnchor);\n                axis$1.reflow(axis$1.box);\n            }\n        }\n    },\n\n    shrinkAxisWidth: function(panes) {\n        var axes = this.groupAxes(panes).any;\n        var axisBox = axisGroupBox(axes);\n        var overflowX = 0;\n\n        for (var i = 0; i < panes.length; i++) {\n            var currentPane = panes[i];\n\n            if (currentPane.axes.length > 0) {\n                overflowX = Math.max(\n                    overflowX,\n                    axisBox.width() - currentPane.contentBox.width()\n                );\n            }\n        }\n\n        if (overflowX !== 0) {\n            for (var i$1 = 0; i$1 < axes.length; i$1++) {\n                var currentAxis = axes[i$1];\n\n                if (!currentAxis.options.vertical) {\n                    currentAxis.reflow(currentAxis.box.shrink(overflowX, 0));\n                }\n            }\n        }\n    },\n\n    shrinkAxisHeight: function(panes) {\n        var shrinked;\n\n        for (var i = 0; i < panes.length; i++) {\n            var currentPane = panes[i];\n            var axes = currentPane.axes;\n            var overflowY = Math.max(0, axisGroupBox(axes).height() - currentPane.contentBox.height());\n\n            if (overflowY !== 0) {\n                for (var j = 0; j < axes.length; j++) {\n                    var currentAxis = axes[j];\n\n                    if (currentAxis.options.vertical) {\n                        currentAxis.reflow(\n                            currentAxis.box.shrink(0, overflowY)\n                        );\n                    }\n                }\n                shrinked = true;\n            }\n        }\n\n        return shrinked;\n    },\n\n    fitAxes: function(panes) {\n        var axes = this.groupAxes(panes).any;\n        var offsetX = 0;\n\n        for (var i = 0; i < panes.length; i++) {\n            var currentPane = panes[i];\n            var paneAxes = currentPane.axes;\n            var paneBox = currentPane.contentBox;\n\n            if (paneAxes.length > 0) {\n                var axisBox = axisGroupBox(paneAxes);\n                // OffsetY is calculated and applied per pane\n                var offsetY = Math.max(paneBox.y1 - axisBox.y1, paneBox.y2 - axisBox.y2);\n\n                // OffsetX is calculated and applied globally\n                offsetX = Math.max(offsetX, paneBox.x1 - axisBox.x1);\n\n                for (var j = 0; j < paneAxes.length; j++) {\n                    var currentAxis = paneAxes[j];\n\n                    currentAxis.reflow(\n                        currentAxis.box.translate(0, offsetY)\n                    );\n                }\n            }\n        }\n\n        for (var i$1 = 0; i$1 < axes.length; i$1++) {\n            var currentAxis$1 = axes[i$1];\n\n            currentAxis$1.reflow(\n                currentAxis$1.box.translate(offsetX, 0)\n            );\n        }\n    },\n\n    reflowAxes: function(panes) {\n        var this$1$1 = this;\n\n        var axes = this.groupAxes(panes);\n\n        for (var i = 0; i < panes.length; i++) {\n            this$1$1.reflowPaneAxes(panes[i]);\n        }\n\n        if (axes.x.length > 0 && axes.y.length > 0) {\n            this.alignAxes(axes.x, axes.y);\n            this.shrinkAxisWidth(panes);\n\n            this.autoRotateAxisLabels(axes);\n\n            this.alignAxes(axes.x, axes.y);\n            if (this.shrinkAxisWidth(panes)) {\n                this.alignAxes(axes.x, axes.y);\n            }\n\n            this.shrinkAxisHeight(panes);\n            this.alignAxes(axes.x, axes.y);\n\n            if (this.shrinkAxisHeight(panes)) {\n                this.alignAxes(axes.x, axes.y);\n            }\n\n            this.fitAxes(panes);\n        }\n    },\n\n    autoRotateAxisLabels: function(groupedAxes) {\n        var this$1$1 = this;\n\n        var ref = this;\n        var panes = ref.panes;\n        var axes = allPaneAxes(panes);\n        var rotated;\n\n        for (var idx = 0; idx < axes.length; idx++) {\n            var axis = axes[idx];\n            if (axis.autoRotateLabels()) {\n                rotated = true;\n            }\n        }\n\n        if (rotated) {\n            for (var idx$1 = 0; idx$1 < panes.length; idx$1++) {\n                this$1$1.reflowPaneAxes(panes[idx$1]);\n            }\n\n            if (groupedAxes.x.length > 0 && groupedAxes.y.length > 0) {\n                this.alignAxes(groupedAxes.x, groupedAxes.y);\n                this.shrinkAxisWidth(panes);\n            }\n        }\n    },\n\n    reflowPaneAxes: function(pane) {\n        var axes = pane.axes;\n        var length = axes.length;\n\n        if (length > 0) {\n            for (var i = 0; i < length; i++) {\n                axes[i].reflow(pane.contentBox);\n            }\n        }\n    },\n\n    reflowCharts: function(panes) {\n        var charts = this.charts;\n        var count = charts.length;\n        var box = this.box;\n\n        for (var i = 0; i < count; i++) {\n            var chartPane = charts[i].pane;\n            if (!chartPane || inArray(chartPane, panes)) {\n                charts[i].reflow(box);\n            }\n        }\n    },\n\n    reflowPanes: function() {\n        var ref = this;\n        var box = ref.box;\n        var panes = ref.panes;\n        var panesLength = panes.length;\n        var remainingHeight = box.height();\n        var autoHeightPanes = 0;\n        var top = box.y1;\n\n        for (var i = 0; i < panesLength; i++) {\n            var currentPane = panes[i];\n            var height = currentPane.options.height;\n\n            currentPane.options.width = box.width();\n\n            if (!currentPane.options.height) {\n                autoHeightPanes++;\n            } else {\n                if (height.indexOf && height.indexOf(\"%\")) {\n                    var percents = parseInt(height, 10) / 100;\n                    currentPane.options.height = percents * box.height();\n                }\n\n                currentPane.reflow(box.clone());\n\n                remainingHeight -= currentPane.options.height;\n            }\n        }\n\n        for (var i$1 = 0; i$1 < panesLength; i$1++) {\n            var currentPane$1 = panes[i$1];\n\n            if (!currentPane$1.options.height) {\n                currentPane$1.options.height = remainingHeight / autoHeightPanes;\n            }\n        }\n\n        for (var i$2 = 0; i$2 < panesLength; i$2++) {\n            var currentPane$2 = panes[i$2];\n            var paneBox = box\n                .clone()\n                .move(box.x1, top);\n\n            currentPane$2.reflow(paneBox);\n\n            top += currentPane$2.options.height;\n        }\n    },\n\n    backgroundBox: function() {\n        var axes = this.axes;\n        var axesCount = axes.length;\n        var box;\n\n        for (var i = 0; i < axesCount; i++) {\n            var axisA = axes[i];\n\n            for (var j = 0; j < axesCount; j++) {\n                var axisB = axes[j];\n\n                if (axisA.options.vertical !== axisB.options.vertical) {\n                    var lineBox = axisA.lineBox().clone().wrap(axisB.lineBox());\n\n                    if (!box) {\n                        box = lineBox;\n                    } else {\n                        box = box.wrap(lineBox);\n                    }\n                }\n            }\n        }\n\n        return box || this.box;\n    },\n\n    chartsBoxes: function() {\n        var panes = this.panes;\n        var boxes = [];\n\n        for (var idx = 0; idx < panes.length; idx++) {\n            boxes.push(panes[idx].chartsBox());\n        }\n\n        return boxes;\n    },\n\n    addBackgroundPaths: function(multipath) {\n        var boxes = this.chartsBoxes();\n        for (var idx = 0; idx < boxes.length; idx++) {\n            multipath.paths.push(Path.fromRect(boxes[idx].toRect()));\n        }\n    },\n\n    backgroundContainsPoint: function(point) {\n        var boxes = this.chartsBoxes();\n        for (var idx = 0; idx < boxes.length; idx++) {\n            if (boxes[idx].containsPoint(point)) {\n                return true;\n            }\n        }\n    },\n\n    createVisual: function() {\n        ChartElement.fn.createVisual.call(this);\n\n        var options = this.options.plotArea;\n        var opacity = options.opacity;\n        var background = options.background;\n        var border = options.border; if (border === void 0) { border = {}; }\n        if (isTransparent(background)) {\n            background = WHITE;\n            opacity = 0;\n        }\n\n        var bg = this._bgVisual = new MultiPath({\n            fill: {\n                color: background,\n                opacity: opacity\n            },\n            stroke: {\n                color: border.width ? border.color : \"\",\n                width: border.width,\n                dashType: border.dashType\n            },\n            zIndex: -1\n        });\n\n        this.addBackgroundPaths(bg);\n\n        this.appendVisual(bg);\n    },\n\n    pointsByCategoryIndex: function(categoryIndex) {\n        var charts = this.charts;\n        var result = [];\n\n        if (categoryIndex !== null) {\n            for (var i = 0; i < charts.length; i++) {\n                var chart = charts[i];\n\n                if (chart.pane.options.name === \"_navigator\") {\n                    continue;\n                }\n\n                var points = charts[i].categoryPoints[categoryIndex];\n                if (points && points.length) {\n                    for (var j = 0; j < points.length; j++) {\n                        var point = points[j];\n                        if (point && defined(point.value) && point.value !== null) {\n                            result.push(point);\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    },\n\n    pointsBySeriesIndex: function(seriesIndex) {\n        return this.filterPoints(function(point) {\n            return point.series.index === seriesIndex;\n        });\n    },\n\n    pointsByPointIndex: function(pointIndex) {\n        return this.filterPoints(function(point) {\n            return point.getIndex() === pointIndex;\n        });\n    },\n\n    pointsBySeriesName: function(name) {\n        return this.filterPoints(function(point) {\n            return point.series.name === name;\n        });\n    },\n\n    filterPoints: function(callback) {\n        var charts = this.charts;\n        var result = [];\n\n        for (var i = 0; i < charts.length; i++) {\n            var chart = charts[i];\n            var points = chart.points;\n            for (var j = 0; j < points.length; j++) {\n                var point = points[j];\n                if (point && point.visible !== false && callback(point)) {\n                    result.push(point);\n                }\n            }\n        }\n\n        return result;\n    },\n\n    findPoint: function(callback) {\n        var charts = this.charts;\n\n        for (var i = 0; i < charts.length; i++) {\n            var chart = charts[i];\n            var points = chart.points;\n            for (var j = 0; j < points.length; j++) {\n                var point = points[j];\n                if (point && point.visible !== false && callback(point)) {\n                    return point;\n                }\n            }\n        }\n    },\n\n    paneByPoint: function(point) {\n        var panes = this.panes;\n\n        for (var i = 0; i < panes.length; i++) {\n            var pane = panes[i];\n            if (pane.box.containsPoint(point)) {\n                return pane;\n            }\n        }\n    },\n\n    detachLabels: function() {\n        var axes = this.groupAxes(this.panes);\n        var xAxes = axes.x;\n        var yAxes = axes.y;\n\n        this.detachAxisGroupLabels(yAxes, xAxes);\n        this.detachAxisGroupLabels(xAxes, yAxes);\n    },\n\n    detachAxisGroupLabels: function(axes, crossingAxes) {\n        var this$1$1 = this;\n\n        var labelAxisCount = 0;\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i];\n            var pane = axis.pane;\n            var anchor = paneAnchor(crossingAxes, pane) || crossingAxes[0];\n            var axisIndex = i + labelAxisCount;\n            var labelAxis = this$1$1.createLabelAxis(axis, axisIndex, anchor);\n\n            if (labelAxis) {\n                labelAxisCount++;\n\n                var pos = pane.axes.indexOf(axis) + labelAxisCount;\n                pane.appendAxisAt(labelAxis, pos);\n            }\n        }\n    },\n\n    createLabelAxis: function(axis, axisIndex, anchor) {\n        var labelOptions = axis.options.labels;\n        var position = labelOptions.position;\n        var onAxis = position !== END && position !== START;\n        var visible = labelOptions.visible;\n\n        if (onAxis || visible === false) {\n            return null;\n        }\n\n        var allAxes = this.groupAxes(this.panes);\n        var crossingAxes = anchor.options.vertical ? allAxes.x : allAxes.y;\n        var anchorCrossings = this.axisCrossingValues(anchor, crossingAxes);\n        var end = position === END;\n        var range = anchor.range();\n        var edge = end ? range.max : range.min;\n        var crossingValue = limitValue(anchorCrossings[axisIndex], range.min, range.max);\n\n        if (crossingValue - edge === 0) {\n            return null;\n        }\n\n        anchorCrossings.splice(axisIndex + 1, 0, edge);\n        anchor.options.axisCrossingValues = anchorCrossings;\n\n        var labelAxis = axis.clone();\n        axis.clear();\n\n        labelAxis.options.name = undefined;\n        labelAxis.options.line.visible = false;\n\n        labelAxis.options.crosshair = undefined;\n        labelAxis.options.notes = undefined;\n        labelAxis.options.plotBands = undefined;\n\n        return labelAxis;\n    },\n\n    isTrendline: function(series) {\n        return series && inArray(series.type, TRENDLINE_SERIES);\n    },\n\n    trendlineFactory: function() { /* abstract */ },\n\n    createTrendlineSeries: function() {\n        var this$1$1 = this;\n\n        var modifiedSeries = [];\n\n        this.series = this.series.map(function (series) {\n            if (!this$1$1.isTrendline(series)) {\n                return series;\n            }\n\n            var forSeries = this$1$1.seriesByName(series.for);\n            if (!forSeries) {\n                throw new Error('Invalid Configuration: Unable to locate linked series ' +\n                    \"\\\"\" + (series.for) + \"\\\" for trendline \\\"\" + (series.name) + \"\\\".\");\n            }\n\n            var valueFields = SeriesBinder.current.valueFields(forSeries);\n            var field = last(valueFields); // Use the last field for multi-field series\n\n            var trendlineSeries = this$1$1.trendlineFactory($.extend({}, {field: field}, series), forSeries);\n            if (trendlineSeries) {\n                if (forSeries.visible === false) {\n                    trendlineSeries.visible = false;\n                }\n\n                if (trendlineSeries.color === datavizConstants.INHERIT) {\n                    trendlineSeries.color = forSeries.color;\n                }\n\n                modifiedSeries.push(trendlineSeries);\n            }\n\n            return trendlineSeries;\n        }).filter(function (series) { return series !== null; });\n\n        return modifiedSeries;\n    },\n\n    seriesByName: function(name) {\n        return this.series.find(function (series) { return series.name === name; });\n    },\n\n    getFirstPoint: function() {\n        return this.pointsBySeriesIndex(0)[0];\n    },\n\n    getPointBelow: function(point) {\n        return this._getNextPoint(point, this._pointsByVertical, 1);\n    },\n\n    getPointAbove: function(point) {\n        return this._getNextPoint(point, this._pointsByVertical, -1);\n    },\n\n    getPointToTheRight: function(point) {\n        return this._getNextPoint(point, this._pointsByHorizontal, 1);\n    },\n\n    getPointToTheLeft: function(point) {\n        return this._getNextPoint(point, this._pointsByHorizontal, -1);\n    },\n\n    _getNextPoint: function(point, getPointsFunc, increment) {\n        var this$1$1 = this;\n\n        var points = getPointsFunc.call(this, point);\n        var pointIndex = points.indexOf(point);\n        var nextIndex = pointIndex + increment;\n        var loopPoints = function (direction) {\n            // loop over to last non-empty collection\n            var result;\n            var offset = 0;\n            do {\n                offset += direction;\n                result = getPointsFunc.call(this$1$1, point, offset);\n            } while (result.length === 0);\n\n            return result;\n        };\n\n        if (nextIndex < 0) {\n            points = loopPoints(-1);\n\n            return points.at(-1);\n        } else if (nextIndex >= points.length) {\n            points = loopPoints(1);\n\n            return points.at(0);\n        }\n\n        return points[nextIndex];\n    },\n\n    _pointsByVertical: function(basePoint) {\n        return this.pointsByPointIndex(basePoint.getIndex());\n    },\n\n    _pointsByHorizontal: function(basePoint, offset) {\n        if (offset === void 0) { offset = 0; }\n\n        var index = cycleIndex(basePoint.series.index + offset, this.series.length);\n        return this.pointsBySeriesIndex(index);\n    }\n});\n\nfunction isSingleAxis(axis) {\n    return !axis.pane.axes.some(function (a) { return a.options.vertical === axis.options.vertical && a !== axis && a.options.visible !== false; }\n    );\n}\n\nfunction axisGroupBox(axes) {\n    var length = axes.length;\n    var box;\n\n    for (var i = 0; i < length; i++) {\n        var axis = axes[i];\n        var visible = axis.options.visible !== false;\n        if (visible || isSingleAxis(axis)) {\n            var axisBox = visible ? axis.contentBox() : axis.lineBox();\n\n            if (!box) {\n                box = axisBox.clone();\n            } else {\n                box.wrap(axisBox);\n            }\n        }\n    }\n\n    return box || new Box();\n}\n\nfunction paneAnchor(axes, pane) {\n    for (var i = 0; i < axes.length; i++) {\n        var anchor = axes[i];\n        if (anchor && anchor.pane === pane) {\n            return anchor;\n        }\n    }\n}\n\nfunction isTransparent(color) {\n    return color === \"\" || color === null || color === \"none\" || color === \"transparent\" || !defined(color);\n}\n\nvar allPaneAxes = function (panes) { return panes.reduce(function (acc, pane) { return acc.concat(pane.axes); }, []); };\n\nsetDefaultOptions(PlotAreaBase, {\n    series: [],\n    plotArea: {\n        margin: {}\n    },\n    background: \"\",\n    border: {\n        color: BLACK,\n        width: 0\n    },\n    paneDefaults: {\n        title: {}\n    },\n    legend: {\n        inactiveItems: {\n            labels: {\n                color: \"#919191\"\n            },\n            markers: {\n                color: \"#919191\"\n            }\n        }\n    }\n});\n\nvar PlotAreaEventsMixin = {\n    hover: function(chart, e) {\n        this._dispatchEvent(chart, e, PLOT_AREA_HOVER);\n    },\n\n    click: function(chart, e) {\n        this._dispatchEvent(chart, e, PLOT_AREA_CLICK);\n    }\n};\n\nvar SeriesAggregator = Class.extend({\n    init: function(series, binder, defaultAggregates) {\n\n        var canonicalFields = binder.canonicalFields(series);\n        var valueFields = binder.valueFields(series);\n        var sourceFields = binder.sourceFields(series, canonicalFields);\n        var seriesFields = this._seriesFields = [];\n        var defaults = defaultAggregates.query(series.type);\n        var rootAggregate = series.aggregate || defaults;\n\n        this._series = series;\n        this._binder = binder;\n\n        for (var i = 0; i < canonicalFields.length; i++) {\n            var field = canonicalFields[i];\n            var fieldAggregate = (void 0);\n\n            if (isObject(rootAggregate)) {\n                fieldAggregate = rootAggregate[field];\n            } else if (i === 0 || inArray(field, valueFields)) {\n                fieldAggregate = rootAggregate;\n            } else {\n                break;\n            }\n\n            if (fieldAggregate) {\n                seriesFields.push({\n                    canonicalName: field,\n                    name: sourceFields[i],\n                    transform: isFunction(fieldAggregate) ? fieldAggregate : Aggregates[fieldAggregate]\n                });\n            }\n        }\n    },\n\n    aggregatePoints: function(srcPoints, group) {\n        var this$1$1 = this;\n\n        var ref = this;\n        var series = ref._series;\n        var seriesFields = ref._seriesFields;\n        var data = this._bindPoints(srcPoints || []);\n        var firstDataItem = data.dataItems[0];\n        var result = {};\n\n        if (firstDataItem && !isNumber(firstDataItem) && !isArray(firstDataItem)) {\n            var fn = function() {};\n            fn.prototype = firstDataItem;\n            result = new fn();\n        }\n\n        for (var i = 0; i < seriesFields.length; i++) {\n            var field = seriesFields[i];\n            var srcValues = this$1$1._bindField(data.values, field.canonicalName);\n            var value = field.transform(srcValues, series, data.dataItems, group);\n\n            if (value !== null && isObject(value) && !defined(value.length) && !(value instanceof Date)) {\n                result = value;\n                break;\n            } else {\n                if (defined(value)) {\n                    setValue(field.name, result, value);\n                }\n            }\n        }\n\n        return result;\n    },\n\n    _bindPoints: function(points) {\n        var ref = this;\n        var binder = ref._binder;\n        var series = ref._series;\n        var values = [];\n        var dataItems = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var pointIx = points[i];\n\n            values.push(binder.bindPoint(series, pointIx));\n            dataItems.push(series.data[pointIx]);\n        }\n\n        return {\n            values: values,\n            dataItems: dataItems\n        };\n    },\n\n    _bindField: function(data, field) {\n        var values = [];\n        var count = data.length;\n\n        for (var i = 0; i < count; i++) {\n            var item = data[i];\n            var valueFields = item.valueFields;\n            var value = (void 0);\n\n            if (defined(valueFields[field])) {\n                value = valueFields[field];\n            } else {\n                value = item.fields[field];\n            }\n\n            values.push(value);\n        }\n\n        return values;\n    }\n});\n\nfunction setValue(fieldName, target, value) {\n    var parentObj = target;\n    var field = fieldName;\n\n    if (fieldName.indexOf(\".\") > -1) {\n        var parts = fieldName.split(\".\");\n\n        while (parts.length > 1) {\n            field = parts.shift();\n            if (!defined(parentObj[field])) {\n                parentObj[field] = {};\n            }\n            parentObj = parentObj[field];\n        }\n        field = parts.shift();\n    }\n\n    parentObj[field] = value;\n}\n\nvar DefaultAggregates = Class.extend({\n    init: function() {\n\n        this._defaults = {};\n    },\n\n    register: function(seriesTypes, aggregates) {\n        var this$1$1 = this;\n\n        for (var i = 0; i < seriesTypes.length; i++) {\n            this$1$1._defaults[seriesTypes[i]] = aggregates;\n        }\n    },\n\n    query: function(seriesType) {\n        return this._defaults[seriesType];\n    }\n});\n\nDefaultAggregates.current = new DefaultAggregates();\n\nvar RangeBar = Bar.extend({\n    createLabel: function() {\n        var labels = this.options.labels;\n        var fromOptions = deepExtend({}, labels, labels.from);\n        var toOptions = deepExtend({}, labels, labels.to);\n\n        if (fromOptions.visible) {\n            this.labelFrom = this.createLabelElement(fromOptions);\n            this.append(this.labelFrom);\n        }\n\n        if (toOptions.visible) {\n            this.labelTo = this.createLabelElement(toOptions);\n            this.append(this.labelTo);\n        }\n    },\n\n    reflow: function(targetBox) {\n        this.render();\n\n        var ref = this;\n        var labelFrom = ref.labelFrom;\n        var labelTo = ref.labelTo;\n        var value = ref.value;\n\n        this.box = targetBox;\n\n        if (labelFrom) {\n            labelFrom.options.aboveAxis = value.from > value.to;\n            labelFrom.reflow(targetBox);\n        }\n\n        if (labelTo) {\n            labelTo.options.aboveAxis = value.to > value.from;\n            labelTo.reflow(targetBox);\n        }\n\n        if (this.note) {\n            this.note.reflow(targetBox);\n        }\n    }\n});\n\nRangeBar.prototype.defaults = deepExtend({}, RangeBar.prototype.defaults, {\n    labels: {\n        format: \"{0} - {1}\"\n    },\n    tooltip: {\n        format: \"{1}\"\n    }\n});\n\nvar RangeBarChart = BarChart.extend({\n    pointType: function() {\n        return RangeBar;\n    },\n\n    pointValue: function(data) {\n        return data.valueFields;\n    },\n\n    formatPointValue: function(point, format) {\n        if (point.value.from === null && point.value.to === null) {\n            return \"\";\n        }\n\n        return this.chartService.format.auto(format, point.value.from, point.value.to);\n    },\n\n    plotRange: function(point) {\n        if (!point) {\n            return 0;\n        }\n\n        return [ point.value.from, point.value.to ];\n    },\n\n    updateRange: function(value, fields) {\n        var axisName = fields.series.axis;\n        var from = value.from;\n        var to = value.to;\n        var axisRange = this.valueAxisRanges[axisName];\n\n        if (value !== null && isNumber(from) && isNumber(to)) {\n            axisRange = this.valueAxisRanges[axisName] = axisRange || { min: MAX_VALUE, max: MIN_VALUE };\n\n            axisRange.min = Math.min(axisRange.min, from);\n            axisRange.max = Math.max(axisRange.max, from);\n\n            axisRange.min = Math.min(axisRange.min, to);\n            axisRange.max = Math.max(axisRange.max, to);\n        }\n    },\n\n    aboveAxis: function(point) {\n        var value = point.value;\n        return value.from < value.to;\n    }\n});\n\nRangeBarChart.prototype.plotLimits = CategoricalChart.prototype.plotLimits;\n\nvar RangeLinePoint = LinePoint.extend({\n    aliasFor: function() {\n        return this.parent;\n    }\n});\n\nvar AUTO = 'auto';\nvar DEFAULT_FROM_FORMAT = '{0}';\nvar DEFAULT_TO_FORMAT = '{1}';\n\nvar RangeAreaPoint = ChartElement.extend({\n    init: function(value, options) {\n        ChartElement.fn.init.call(this);\n\n        this.value = value;\n        this.options = options;\n        this.aboveAxis = valueOrDefault(this.options.aboveAxis, true);\n        this.tooltipTracking = true;\n        this._id = guid();\n        this.initLabelsFormat();\n    },\n\n    render: function() {\n        if (this._rendered) {\n            return;\n        }\n\n        this._rendered = true;\n\n        var ref = this.options;\n        var markers = ref.markers;\n        var labels = ref.labels;\n        var value = this.value;\n\n        var fromPoint = this.fromPoint = new RangeLinePoint(value, deepExtend({}, this.options, {\n            labels: labels.from,\n            markers: markers.from\n        }));\n\n        var toPoint = this.toPoint = new RangeLinePoint(value, deepExtend({}, this.options, {\n            labels: labels.to,\n            markers: markers.to\n        }));\n\n        this.copyFields(fromPoint);\n        this.copyFields(toPoint);\n\n        this.append(fromPoint);\n        this.append(toPoint);\n    },\n\n    reflow: function(targetBox) {\n        this.render();\n\n        var fromBox = targetBox.from;\n        var toBox = targetBox.to;\n\n        this.positionLabels(fromBox, toBox);\n\n        this.fromPoint.reflow(fromBox);\n        this.toPoint.reflow(toBox);\n\n        this.box = this.fromPoint.markerBox().clone().wrap(this.toPoint.markerBox());\n    },\n\n    createHighlight: function() {\n        var group = new Group();\n        group.append(this.fromPoint.createHighlight());\n        group.append(this.toPoint.createHighlight());\n\n        return group;\n    },\n\n    highlightVisual: function() {\n        return this.visual;\n    },\n\n    highlightVisualArgs: function() {\n        return {\n            options: this.options,\n            from: this.fromPoint.highlightVisualArgs(),\n            to: this.toPoint.highlightVisualArgs()\n        };\n    },\n\n    createFocusHighlight: function() {\n        var group = new Group();\n        group.append(this.fromPoint.createFocusHighlight());\n        group.append(this.toPoint.createFocusHighlight());\n\n        return group;\n    },\n\n    tooltipAnchor: function() {\n        var clipBox = this.owner.pane.clipBox();\n        var showTooltip = !clipBox || clipBox.overlaps(this.box);\n\n        if (showTooltip) {\n            var box = this.box;\n            var center = box.center();\n            var horizontalAlign = LEFT;\n            var x, y, verticalAlign;\n\n            if (this.options.vertical) {\n                x = center.x;\n                y = box.y1 - TOOLTIP_OFFSET;\n                verticalAlign = BOTTOM;\n            } else {\n                x = box.x2 + TOOLTIP_OFFSET;\n                y = center.y;\n                verticalAlign = CENTER;\n            }\n\n            return {\n                point: new Point(x, y),\n                align: {\n                    horizontal: horizontalAlign,\n                    vertical: verticalAlign\n                }\n            };\n        }\n    },\n\n    formatValue: function(format) {\n        return this.owner.formatPointValue(this, format);\n    },\n\n    overlapsBox: function(box) {\n        return this.box.overlaps(box);\n    },\n\n    unclipElements: function() {\n        this.fromPoint.unclipElements();\n        this.toPoint.unclipElements();\n    },\n\n    initLabelsFormat: function() {\n        var labels = this.options.labels;\n        if (!labels.format) {\n            if (!labels.from || !labels.from.format) {\n                labels.from = $.extend({}, labels.from, {\n                    format: DEFAULT_FROM_FORMAT\n                });\n            }\n\n            if (!labels.to || !labels.to.format) {\n                labels.to = $.extend({}, labels.to, {\n                    format: DEFAULT_TO_FORMAT\n                });\n            }\n        }\n    },\n\n    positionLabels: function(fromBox, toBox) {\n        var ref = this.options;\n        var labels = ref.labels;\n        var vertical = ref.vertical;\n\n        if (labels.position === AUTO) {\n            var fromLabelPosition, toLabelPosition;\n            if (vertical) {\n                if (toBox.y1 <= fromBox.y1) {\n                    toLabelPosition = ABOVE;\n                    fromLabelPosition = BELOW;\n                } else {\n                    toLabelPosition = BELOW;\n                    fromLabelPosition = ABOVE;\n                }\n            } else {\n                if (toBox.x1 <= fromBox.x1) {\n                    toLabelPosition = LEFT;\n                    fromLabelPosition = RIGHT;\n                } else {\n                    toLabelPosition = RIGHT;\n                    fromLabelPosition = LEFT;\n                }\n            }\n\n            if (!labels.from || !labels.from.position) {\n                this.fromPoint.options.labels.position = fromLabelPosition;\n            }\n\n            if (!labels.to || !labels.to.position) {\n                this.toPoint.options.labels.position = toLabelPosition;\n            }\n        }\n    },\n\n    copyFields: function(point) {\n        point.dataItem = this.dataItem;\n        point.category = this.category;\n        point.series = this.series;\n        point.color = this.color;\n        point.owner = this.owner;\n    },\n\n    focusVisual: function() {\n        this.fromPoint.focusVisual();\n    },\n\n    clearFocusFromVisual: function() {\n        this.toPoint.clearFocusFromVisual();\n    },\n\n    getIndex: function() {\n        return this.categoryIx;\n    }\n});\n\ndeepExtend(RangeAreaPoint.prototype, PointEventsMixin);\ndeepExtend(RangeAreaPoint.prototype, NoteMixin);\n\nRangeAreaPoint.prototype.defaults = {\n    markers: {\n        visible: false,\n        background: WHITE,\n        size: LINE_MARKER_SIZE,\n        type: CIRCLE,\n        border: {\n            width: 2\n        },\n        opacity: 1\n    },\n    labels: {\n        visible: false,\n        margin: getSpacing(3),\n        padding: getSpacing(4),\n        animation: {\n            type: FADEIN,\n            delay: INITIAL_ANIMATION_DURATION\n        },\n        position: AUTO\n    },\n    notes: {\n        label: {}\n    },\n    highlight: {\n        markers: {\n            border: {\n                color: WHITE,\n                width: 2\n            }\n        },\n        zIndex: datavizConstants.HIGHLIGHT_ZINDEX\n    },\n    tooltip: {\n        format: '{0} - {1}'\n    },\n    accessibility: {\n        role: CHART_POINT_ROLE,\n        className: CHART_POINT_CLASSNAME,\n        ariaRoleDescription: CHART_POINT_ROLE_DESCRIPTION\n    }\n};\n\nvar RangeAreaSegment = AreaSegment.extend({\n    createStrokeSegments: function() {\n        return this.segmentsFromPoints(this.toGeometryPoints(this.toPoints()));\n    },\n\n    stackSegments: function() {\n        var fromSegments = this.fromSegments;\n        if (!this.fromSegments) {\n            fromSegments = this.fromSegments = this.segmentsFromPoints(this.toGeometryPoints(this.fromPoints().reverse()));\n        }\n\n        return fromSegments;\n    },\n\n    createStroke: function(style) {\n        var toPath = new Path(style);\n        var fromPath = new Path(style);\n\n        toPath.segments.push.apply(toPath.segments, this.strokeSegments());\n        fromPath.segments.push.apply(fromPath.segments, this.stackSegments());\n\n        this.visual.append(toPath);\n        this.visual.append(fromPath);\n    },\n\n    hasStackSegment: function() {\n        return true;\n    },\n\n    fromPoints: function() {\n        return this.linePoints.map(function (point) { return point.fromPoint; });\n    },\n\n    toPoints: function() {\n        return this.linePoints.map(function (point) { return point.toPoint; });\n    }\n});\n\nvar SplineRangeAreaSegment = RangeAreaSegment.extend({\n    createStrokeSegments: function() {\n        return this.createCurveSegments(this.toPoints());\n    },\n\n    stackSegments: function() {\n        var fromSegments = this.fromSegments;\n        if (!this.fromSegments) {\n            fromSegments = this.fromSegments = this.createCurveSegments(this.fromPoints().reverse());\n        }\n\n        return fromSegments;\n    },\n\n    createCurveSegments: function(points) {\n        var curveProcessor = new CurveProcessor();\n\n        return curveProcessor.process(this.toGeometryPoints(points));\n    }\n});\n\nvar StepRangeAreaSegment = RangeAreaSegment.extend({\n    createStrokeSegments: function() {\n        return this.segmentsFromPoints(this.calculateStepPoints(this.toPoints()));\n    },\n\n    stackSegments: function() {\n        var fromSegments = this.fromSegments;\n        if (!this.fromSegments) {\n            fromSegments = this.fromSegments = this.segmentsFromPoints(this.calculateStepPoints(this.fromPoints()));\n            fromSegments.reverse();\n        }\n\n        return fromSegments;\n    }\n});\n\ndeepExtend(StepRangeAreaSegment.prototype, StepLineMixin);\n\nvar RangeAreaChart = CategoricalChart.extend({\n    render: function() {\n        CategoricalChart.fn.render.call(this);\n\n        this.renderSegments();\n    },\n\n    pointType: function() {\n        return RangeAreaPoint;\n    },\n\n    createPoint: function(data, fields) {\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var value = data.valueFields;\n\n        if (!hasValue(value.from) && !hasValue(value.to)) {\n            if (this.seriesMissingValues(series) === ZERO) {\n                value = {\n                    from: 0,\n                    to: 0\n                };\n            } else {\n                return null;\n            }\n        }\n\n        var pointOptions = this.pointOptions(series, seriesIx);\n        pointOptions = this.evalPointOptions(pointOptions, value, fields);\n\n        var color = data.fields.color || series.color;\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        var point = new RangeAreaPoint(value, pointOptions);\n        point.color = color;\n\n        this.append(point);\n\n        return point;\n    },\n\n    createSegment: function(linePoints, currentSeries, seriesIx) {\n        var style = (currentSeries.line || {}).style;\n        var segmentType;\n        if (style === \"smooth\") {\n            segmentType = SplineRangeAreaSegment;\n        } else if (style === \"step\") {\n            segmentType = StepRangeAreaSegment;\n        } else {\n            segmentType = RangeAreaSegment;\n        }\n\n        return new segmentType(linePoints, currentSeries, seriesIx);\n    },\n\n    plotRange: function(point, startValue) {\n        if (!point) {\n            return [ startValue, startValue ];\n        }\n\n        return [ point.value.from, point.value.to ];\n    },\n\n    valueSlot: function(valueAxis, plotRange) {\n        var fromSlot = valueAxis.getSlot(plotRange[0], plotRange[0], !this.options.clip);\n        var toSlot = valueAxis.getSlot(plotRange[1], plotRange[1], !this.options.clip);\n        if (fromSlot && toSlot) {\n            return {\n                from: fromSlot,\n                to: toSlot\n            };\n        }\n    },\n\n    pointSlot: function(categorySlot, valueSlot) {\n        var from = valueSlot.from;\n        var to = valueSlot.to;\n        var fromSlot, toSlot;\n\n        if (this.options.invertAxes) {\n            fromSlot = new Box(from.x1, categorySlot.y1, from.x2, categorySlot.y2);\n            toSlot = new Box(to.x1, categorySlot.y1, to.x2, categorySlot.y2);\n        } else {\n            fromSlot = new Box(categorySlot.x1, from.y1, categorySlot.x2, from.y2);\n            toSlot = new Box(categorySlot.x1, to.y1, categorySlot.x2, to.y2);\n        }\n\n        return {\n            from: fromSlot,\n            to: toSlot\n        };\n    },\n\n    addValue: function(data, fields) {\n        var valueFields = data.valueFields;\n        if (!isNumber(valueFields.from)) {\n            valueFields.from = valueFields.to;\n        }\n\n        if (!isNumber(valueFields.to)) {\n            valueFields.to = valueFields.from;\n        }\n\n        CategoricalChart.fn.addValue.call(this, data, fields);\n    },\n\n    updateRange: function(value, fields) {\n        if (value !== null && isNumber(value.from) && isNumber(value.to)) {\n            var axisName = fields.series.axis;\n            var axisRange = this.valueAxisRanges[axisName] = this.valueAxisRanges[axisName] || { min: MAX_VALUE, max: MIN_VALUE };\n            var from = value.from;\n            var to = value.to;\n\n            axisRange.min = Math.min(axisRange.min, from, to);\n            axisRange.max = Math.max(axisRange.max, from, to);\n        }\n    },\n\n    formatPointValue: function(point, format) {\n        var value = point.value;\n\n        return this.chartService.format.auto(format, value.from, value.to);\n    },\n\n    animationPoints: function() {\n        var points = this.points;\n        var result = [];\n        for (var idx = 0; idx < points.length; idx++) {\n            var point = points[idx];\n            if (point) {\n                result.push((point.fromPoint || {}).marker);\n                result.push((point.toPoint || {}).marker);\n            }\n        }\n\n        return result.concat(this._segments);\n    }\n});\n\ndeepExtend(RangeAreaChart.prototype, LineChartMixin, ClipAnimationMixin);\n\nvar OHLCPoint = Candlestick.extend({\n    reflow: function(box) {\n        var ref = this;\n        var options = ref.options;\n        var value = ref.value;\n        var chart = ref.owner;\n        var valueAxis = chart.seriesValueAxis(options);\n        var oPoints = [];\n        var cPoints = [];\n        var lhPoints = [];\n\n        var lhSlot = valueAxis.getSlot(value.low, value.high);\n        var oSlot = valueAxis.getSlot(value.open, value.open);\n        var cSlot = valueAxis.getSlot(value.close, value.close);\n\n        oSlot.x1 = cSlot.x1 = lhSlot.x1 = box.x1;\n        oSlot.x2 = cSlot.x2 = lhSlot.x2 = box.x2;\n\n        var mid = lhSlot.center().x;\n\n        oPoints.push([ oSlot.x1, oSlot.y1 ]);\n        oPoints.push([ mid, oSlot.y1 ]);\n        cPoints.push([ mid, cSlot.y1 ]);\n        cPoints.push([ cSlot.x2, cSlot.y1 ]);\n        lhPoints.push([ mid, lhSlot.y1 ]);\n        lhPoints.push([ mid, lhSlot.y2 ]);\n\n        this.lines = [\n            oPoints, cPoints, lhPoints\n        ];\n\n        this.box = lhSlot.clone().wrap(oSlot.clone().wrap(cSlot));\n\n        this.reflowNote();\n    },\n\n    createBody: function() {}\n});\n\nvar OHLCChart = CandlestickChart.extend({\n    pointType: function() {\n        return OHLCPoint;\n    }\n});\n\nvar WaterfallSegment = ChartElement.extend({\n    init: function(from, to, series) {\n        ChartElement.fn.init.call(this);\n\n        this.from = from;\n        this.to = to;\n        this.series = series;\n    },\n\n    linePoints: function() {\n        var from = this.from;\n        var ref = this;\n        var fromBox = ref.from.box;\n        var toBox = ref.to.box;\n        var points = [];\n\n        if (from.isVertical) {\n            var y = from.aboveAxis ? fromBox.y1 : fromBox.y2;\n            points.push(\n                [ fromBox.x1, y ],\n                [ toBox.x2, y ]\n            );\n        } else {\n            var x = from.aboveAxis ? fromBox.x2 : fromBox.x1;\n            points.push(\n                [ x, fromBox.y1 ],\n                [ x, toBox.y2 ]\n            );\n        }\n\n        return points;\n    },\n\n    createVisual: function() {\n        ChartElement.fn.createVisual.call(this);\n\n        var line = this.series.line || {};\n\n        var path = Path.fromPoints(this.linePoints(), {\n            stroke: {\n                color: line.color,\n                width: line.width,\n                opacity: line.opacity,\n                dashType: line.dashType\n            }\n        });\n\n        alignPathToPixel(path);\n        this.visual.append(path);\n    }\n});\n\nsetDefaultOptions(WaterfallSegment, {\n    animation: {\n        type: FADEIN,\n        delay: INITIAL_ANIMATION_DURATION\n    }\n});\n\nvar WaterfallChart = BarChart.extend({\n    render: function() {\n        BarChart.fn.render.call(this);\n        this.createSegments();\n    },\n\n    traverseDataPoints: function(callback) {\n        var this$1$1 = this;\n\n        var series = this.options.series;\n        var totalCategories = categoriesCount(series);\n        var isVertical = !this.options.invertAxes;\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var total = 0;\n            var runningTotal = 0;\n\n            for (var categoryIx = 0; categoryIx < totalCategories; categoryIx++) {\n                var data = SeriesBinder.current.bindPoint(currentSeries, categoryIx);\n                var value = data.valueFields.value;\n                var summary = data.fields.summary;\n                var from = total;\n                var to = (void 0);\n\n                if (summary) {\n                    if (summary.toLowerCase() === \"total\") {\n                        data.valueFields.value = total;\n                        from = 0;\n                        to = total;\n                    } else {\n                        data.valueFields.value = runningTotal;\n                        to = from - runningTotal;\n                        runningTotal = 0;\n                    }\n                } else if (isNumber(value)) {\n                    runningTotal += value;\n                    total += value;\n                    to = total;\n                }\n\n                callback(data, {\n                    category: this$1$1.categoryAxis.categoryAt(categoryIx),\n                    categoryIx: categoryIx,\n                    series: currentSeries,\n                    seriesIx: seriesIx,\n                    total: total,\n                    runningTotal: runningTotal,\n                    from: from,\n                    to: to,\n                    isVertical: isVertical\n                });\n            }\n        }\n    },\n\n    updateRange: function(value, fields) {\n        BarChart.fn.updateRange.call(this, { value: fields.to }, fields);\n    },\n\n    aboveAxis: function(point) {\n        return point.value >= 0;\n    },\n\n    plotRange: function(point) {\n        return [ point.from, point.to ];\n    },\n\n    createSegments: function() {\n        var this$1$1 = this;\n\n        var series = this.options.series;\n        var seriesPoints = this.seriesPoints;\n        var segments = this.segments = [];\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var points = seriesPoints[seriesIx];\n\n            if (points) {\n                var prevPoint = (void 0);\n                for (var pointIx = 0; pointIx < points.length; pointIx++) {\n                    var point = points[pointIx];\n\n                    if (point && prevPoint) {\n                        var segment = new WaterfallSegment(prevPoint, point, currentSeries);\n                        segments.push(segment);\n                        this$1$1.append(segment);\n                    }\n\n                    prevPoint = point;\n                }\n            }\n        }\n    }\n});\n\nfunction trendlineFactory(registry, type, context) {\n    var impl = registry[String(type)];\n    if (impl) {\n        return impl(context);\n    }\n\n    return null;\n}\n\n// Optimized version of calculatePolynomial for order = 1\nfunction calculateSlope(sourceValues, valueGetter) {\n    var x = 0;\n    var y = 0;\n    var x2 = 0;\n    var xy = 0;\n    var count = 0;\n    var slope, intercept;\n    var xMin = Number.MAX_VALUE;\n    var xMax = Number.MIN_VALUE;\n\n    for (var i = 0; i < sourceValues.length; i++) {\n        var value = sourceValues[i];\n        var ref = valueGetter(value);\n        var xValue = ref.xValue;\n        var yValue = ref.yValue;\n\n        if (isFinite(xValue) && xValue !== null && isFinite(yValue) && yValue !== null) {\n            xMin = Math.min(xValue, xMin);\n            xMax = Math.max(xValue, xMax);\n\n            count++;\n            x += xValue;\n            y += yValue;\n            x2 += Math.pow(xValue, 2);\n            xy += xValue * yValue;\n        }\n    }\n\n    if (count > 0) {\n        slope = (count * xy - x * y) / (count * x2 - Math.pow(x, 2));\n        intercept = (y - slope * x) / count;\n    }\n\n    return { slope: slope, intercept: intercept, count: count, xMin: xMin, xMax: xMax };\n}\n\nvar checkAllPositive = function (sourceValues, fieldName) { return sourceValues.every(function (ref) {\n        var valueFields = ref.valueFields;\n\n        return !hasValue(valueFields[fieldName]) || valueFields[fieldName] > 0;\n        }); };\n\nfunction getTrendlineData(valueMapper, categoryAxis) {\n    var data = [];\n    var totalRange = categoryAxis.totalRangeIndices();\n    var currentRange = categoryAxis.currentRangeIndices();\n    var range = {\n        min: Math.floor(Math.max(currentRange.min - 1, totalRange.min)),\n        max: Math.ceil(Math.min(currentRange.max + 2, totalRange.max))\n    };\n\n    for (var i = range.min; i < range.max; i++) {\n        var x = (i + 1);\n        data[i] = {\n            category: categoryAxis.categoryAt(i, true),\n            value: valueMapper(x)\n        };\n    }\n\n    return data;\n}\n\nfunction exponentialTrendline(context) {\n    var options = context.options;\n    var categoryAxis = context.categoryAxis;\n    var seriesValues = context.seriesValues;\n\n    var data = getData({ seriesValues: seriesValues, categoryAxis: categoryAxis, options: options });\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'line',\n            data: data,\n            categoryField: 'category',\n            field: 'value'});\n    }\n\n    return null;\n}\n\nvar valueGetter = function (fieldName) { return function (ref) {\n        var categoryIx = ref.categoryIx;\n        var valueFields = ref.valueFields;\n\n        return ({ xValue: categoryIx + 1, yValue: Math.log(valueFields[fieldName]) });\n }    };\n\nfunction getData(ref) {\n    var seriesValues = ref.seriesValues;\n    var categoryAxis = ref.categoryAxis;\n    var options = ref.options;\n\n    var sourceValues = seriesValues();\n    if (!checkAllPositive(sourceValues, options.field)) {\n        return null;\n    }\n\n    var ref$1 = calculateSlope(sourceValues, valueGetter(options.field));\n    var slope = ref$1.slope;\n    var intercept = ref$1.intercept;\n    var count = ref$1.count;\n    if (count > 0) {\n        // Exponential trendline equation:\n        // y = a * e ^ (b * x)\n        var a = Math.exp(intercept);\n        var b = slope;\n\n        return getTrendlineData(function (x) { return a * Math.exp(b * x); }, categoryAxis);\n    }\n\n    return null;\n}\n\nfunction linearTrendline(context) {\n    var options = context.options;\n    var categoryAxis = context.categoryAxis;\n    var seriesValues = context.seriesValues;\n\n    var data = getData$1({ seriesValues: seriesValues, categoryAxis: categoryAxis, options: options });\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'line',\n            data: data,\n            categoryField: 'category',\n            field: 'value'});\n    }\n\n    return null;\n}\n\nvar valueGetter$1 = function (fieldName) { return function (ref) {\n        var categoryIx = ref.categoryIx;\n        var valueFields = ref.valueFields;\n\n        return ({ xValue: categoryIx + 1, yValue: valueFields[fieldName] });\n }    };\n\nfunction getData$1(ref) {\n    var seriesValues = ref.seriesValues;\n    var categoryAxis = ref.categoryAxis;\n    var options = ref.options;\n\n    var ref$1 = calculateSlope(seriesValues(), valueGetter$1(options.field));\n    var slope = ref$1.slope;\n    var intercept = ref$1.intercept;\n    var count = ref$1.count;\n\n    if (count > 0) {\n        return getTrendlineData(function (x) { return slope * x + intercept; }, categoryAxis);\n    }\n\n    return null;\n}\n\nfunction logarithmicTrendline(context) {\n    var options = context.options;\n    var categoryAxis = context.categoryAxis;\n    var seriesValues = context.seriesValues;\n\n    var data = getData$2({ seriesValues: seriesValues, categoryAxis: categoryAxis, options: options });\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'line',\n            data: data,\n            categoryField: 'category',\n            field: 'value'});\n    }\n\n    return null;\n}\n\nvar valueGetter$2 = function (fieldName) { return function (ref) {\n        var categoryIx = ref.categoryIx;\n        var valueFields = ref.valueFields;\n\n        return ({ xValue: Math.log(categoryIx + 1), yValue: valueFields[fieldName] });\n }    };\n\nfunction getData$2(ref) {\n    var seriesValues = ref.seriesValues;\n    var categoryAxis = ref.categoryAxis;\n    var options = ref.options;\n\n    var ref$1 = calculateSlope(seriesValues(), valueGetter$2(options.field));\n    var slope = ref$1.slope;\n    var intercept = ref$1.intercept;\n    var count = ref$1.count;\n    if (count > 0) {\n        // Logarithmic trendline equation:\n        // y = a * ln (x) + b\n        var a = slope;\n        var b = intercept;\n        return getTrendlineData(function (x) { return a * Math.log(x) + b; }, categoryAxis);\n    }\n\n    return null;\n}\n\nfunction calculateMovingAverage(sourceValues, valueGetter, period) {\n    var averagePoints = [];\n    var values = [];\n    var start = Math.max(MIN_MOVING_AVERAGE_PERIOD, period) - 1;\n\n    var end = 0;\n    var sum = 0;\n\n    for (var i = 0; i < sourceValues.length; i++) {\n        var value = sourceValues[i];\n        var ref = valueGetter(value);\n        var xValue = ref.xValue;\n        var yValue = ref.yValue;\n\n        if (isFinite(yValue) && yValue !== null) {\n            values.push(yValue);\n            sum += yValue;\n            end = Math.max(i, end);\n        } else {\n            values.push(null);\n        }\n\n        if (i >= start) {\n            var count = values.filter(function (value) { return value !== null; }).length;\n            var lastValue = values.shift() || 0;\n\n            if (count > 0) {\n                var average = sum / count;\n                averagePoints.push([xValue, average]);\n\n                sum -= lastValue;\n                continue;\n            }\n        }\n\n        averagePoints.push([xValue, null]);\n    }\n\n    return averagePoints.slice(0, end + 1);\n}\n\nfunction movingAverageTrendline(context) {\n    var options = context.options;\n\n    var data = getData$3(context);\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'line',\n            data: data,\n            categoryField: 'category',\n            field: 'value'});\n    }\n\n    return null;\n}\n\nvar valueGetter$3 = function (fieldName) { return function (ref) {\n        var categoryIx = ref.categoryIx;\n        var valueFields = ref.valueFields;\n\n        return ({ xValue: categoryIx, yValue: valueFields[fieldName] });\n }    };\n\nfunction calculatePoints(ref) {\n    var options = ref.options;\n    var categoryAxis = ref.categoryAxis;\n    var seriesValues = ref.seriesValues;\n\n    var period = (options.trendline || {}).period || MIN_MOVING_AVERAGE_PERIOD;\n    var totalRange = categoryAxis.totalRangeIndices();\n    var currentRange = categoryAxis.currentRangeIndices();\n    var range = {\n        min: Math.floor(Math.max(currentRange.min - period, totalRange.min)),\n        max: Math.ceil(Math.min(currentRange.max + period + 2, totalRange.max))\n    };\n\n    return calculateMovingAverage(seriesValues(range), valueGetter$3(options.field), period);\n}\n\nfunction getData$3(context) {\n    var categoryAxis = context.categoryAxis;\n    var points = calculatePoints(context);\n    var data = [];\n    points.forEach(function (ref) {\n        var categoryIx = ref[0];\n        var value = ref[1];\n\n        data[categoryIx] = {\n            category: categoryAxis.categoryAt(categoryIx, true),\n            value: value\n        };\n    });\n\n    if (data.length > 0) {\n        return data;\n    }\n\n    return null;\n}\n\nvar MIN_ORDER = 1;\nvar MAX_ORDER = 6;\n\nfunction calculatePolynomial(sourceValues, valueGetter, order) {\n    var k = Math.min(Math.max(order || MIN_ORDER, MIN_ORDER), MAX_ORDER) + 1;\n    var X$$1 = new dataviz.Matrix();\n    var Y$$1 = new dataviz.Matrix();\n    var count = 0;\n    var xMin = Number.MAX_VALUE;\n    var xMax = Number.MIN_VALUE;\n    var valueMapper = function (x) { return x; };\n    var coefficients = [];\n\n    for (var i = 0; i < sourceValues.length; i++) {\n        var value = sourceValues[i];\n        var ref = valueGetter(value);\n        var xValue = ref.xValue;\n        var yValue = ref.yValue;\n\n        if (isFinite(xValue) && xValue !== null && isFinite(yValue) && yValue !== null) {\n            xMin = Math.min(xValue, xMin);\n            xMax = Math.max(xValue, xMax);\n            count++;\n\n            // Set Y value in matrix\n            Y$$1.set(i, 0, yValue);\n\n            // Set indicator column to 1 for valid values\n            X$$1.set(i, 0, 1);\n            X$$1.set(i, 1, xValue);\n            for (var pow = 2; pow <= k; pow++) {\n                X$$1.set(i, pow, Math.pow(X$$1.get(i, 1), pow));\n            }\n        } else {\n            // Set indicator column to 0 for missing values\n            X$$1.set(i, 0, 0);\n        }\n    }\n\n    // Limit order to number of values.\n    X$$1.width = Math.min(k, count);\n\n    if (count > 0) {\n        // Polynomial trendline equation:\n        // y = aN * x^N + ... + a2 * x^2 + a1 * x + a0\n        coefficients = linearRegression(X$$1, Y$$1);\n        valueMapper = function (x) { return coefficients.reduce(function (y, a, n) { return y + a * Math.pow(x, n); }, 0); };\n    }\n\n    return {\n        coefficients: coefficients,\n        count: count,\n        valueMapper: valueMapper,\n        xMin: xMin,\n        xMax: xMax\n    };\n}\n\nfunction linearRegression(X$$1, Y$$1) {\n    var Xt = X$$1.transpose();\n    var B = Xt.multiply(X$$1).inverse().multiply(Xt).multiply(Y$$1); // the last square estimate of the coefficients\n\n    var coefficients = [];\n    for (var i = 0; i < B.height; i++) {\n        coefficients.push(B.get(i, 0));\n    }\n\n    // y_intercept and regression coefficients ('slopes')\n    return coefficients;\n\n    // It's possible to calculate statistics for the regression based on\n    // the LINEST function implementation in kendo-spreadsheet-common/src/calc.js\n    //\n    // * The standard errors (of coefficients and y-intercept)\n    // * The coefficient of determination (R^2)\n    // * The standard error for the y estimate\n    // * The F statistic\n    // * The degrees of freedom\n    // * The regression sum of squares (SSR)\n    // * The residual sum of squares (SSE)\n}\n\nfunction polynomialTrendline(context) {\n    var options = context.options;\n    var categoryAxis = context.categoryAxis;\n    var seriesValues = context.seriesValues;\n\n    var data = getData$4({ seriesValues: seriesValues, categoryAxis: categoryAxis, options: options });\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'line',\n            data: data,\n            categoryField: 'category',\n            field: 'value'});\n    }\n\n    return null;\n}\n\nvar valueGetter$4 = function (fieldName) { return function (ref) {\n        var categoryIx = ref.categoryIx;\n        var valueFields = ref.valueFields;\n\n        return ({ xValue: categoryIx + 1, yValue: valueFields[fieldName] });\n }    };\n\nfunction getData$4(ref) {\n    var seriesValues = ref.seriesValues;\n    var categoryAxis = ref.categoryAxis;\n    var options = ref.options;\n\n    var order = (options.trendline || {}).order;\n    var ref$1 = calculatePolynomial(seriesValues(), valueGetter$4(options.field), order);\n    var count = ref$1.count;\n    var valueMapper = ref$1.valueMapper;\n\n    if (count > 0) {\n        // Polynomial trendline equation:\n        // y = aN * x^N + ... + a2 * x^2 + a1 * x + a0\n\n        return getTrendlineData(function (x) { return valueMapper(x); }, categoryAxis);\n    }\n\n    return null;\n}\n\nfunction powerTrendline(context) {\n    var options = context.options;\n    var categoryAxis = context.categoryAxis;\n    var seriesValues = context.seriesValues;\n\n    var data = getData$5({ seriesValues: seriesValues, categoryAxis: categoryAxis, options: options });\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'line',\n            data: data,\n            categoryField: 'category',\n            field: 'value'});\n    }\n\n    return null;\n}\n\nvar valueGetter$5 = function (fieldName) { return function (ref) {\n        var categoryIx = ref.categoryIx;\n        var valueFields = ref.valueFields;\n\n        return ({ xValue: Math.log(categoryIx + 1), yValue: Math.log(valueFields[fieldName]) });\n }    };\n\nfunction getData$5(ref) {\n    var seriesValues = ref.seriesValues;\n    var categoryAxis = ref.categoryAxis;\n    var options = ref.options;\n\n    var sourceValues = seriesValues();\n    if (!checkAllPositive(sourceValues, options.field)) {\n        return null;\n    }\n\n    var ref$1 = calculateSlope(sourceValues, valueGetter$5(options.field));\n    var slope = ref$1.slope;\n    var intercept = ref$1.intercept;\n    var count = ref$1.count;\n    if (count > 0) {\n        // Power trendline equation:\n        // y = a * x ^ b\n        var a = Math.exp(intercept);\n        var b = slope;\n\n        return getTrendlineData(function (x) { return a * Math.pow(x, b); }, categoryAxis);\n    }\n\n    return null;\n}\n\nvar registry = {};\nregistry[TRENDLINE_EXPONENTIAL] = exponentialTrendline;\nregistry[TRENDLINE_LINEAR] = linearTrendline;\nregistry[TRENDLINE_LOGARITHMIC] = logarithmicTrendline;\nregistry[TRENDLINE_MOVING_AVERAGE] = movingAverageTrendline;\nregistry[TRENDLINE_POLYNOMIAL] = polynomialTrendline;\nregistry[TRENDLINE_POWER] = powerTrendline;\n\nvar AREA_SERIES = [ AREA, VERTICAL_AREA, RANGE_AREA, VERTICAL_RANGE_AREA ];\nvar OUT_OF_RANGE_SERIES = [ LINE, VERTICAL_LINE ].concat(AREA_SERIES);\n\nvar CategoricalPlotArea = PlotAreaBase.extend({\n    initFields: function(series) {\n        var this$1$1 = this;\n\n        this.namedCategoryAxes = {};\n        this.namedValueAxes = {};\n        this.valueAxisRangeTracker = new AxisGroupRangeTracker();\n        this._seriesPointsCache = {};\n        this._currentPointsCache = {};\n\n        if (series.length > 0) {\n            this.invertAxes = inArray(\n                series[0].type, [ BAR, BULLET, VERTICAL_LINE, VERTICAL_AREA, VERTICAL_RANGE_AREA,\n                    RANGE_BAR, HORIZONTAL_WATERFALL, VERTICAL_BOX_PLOT ]\n            );\n\n            for (var i = 0; i < series.length; i++) {\n                var stack = series[i].stack;\n                if (stack && stack.type === \"100%\") {\n                    this$1$1.stack100 = true;\n                    break;\n                }\n            }\n        }\n    },\n\n    render: function(panes) {\n        if (panes === void 0) { panes = this.panes; }\n\n        this.series = [].concat( this.originalSeries );\n        this.createCategoryAxes(panes);\n\n        this.aggregateCategories(panes);\n        this.createTrendlineSeries(panes);\n\n        this.createCategoryAxesLabels(panes);\n        this.createCharts(panes);\n        this.createValueAxes(panes);\n    },\n\n    removeAxis: function(axis) {\n        var axisName = axis.options.name;\n\n        PlotAreaBase.fn.removeAxis.call(this, axis);\n\n        if (axis instanceof CategoryAxis) {\n            delete this.namedCategoryAxes[axisName];\n        } else {\n            this.valueAxisRangeTracker.reset(axisName);\n            delete this.namedValueAxes[axisName];\n        }\n\n        if (axis === this.categoryAxis) {\n            delete this.categoryAxis;\n        }\n\n        if (axis === this.valueAxis) {\n            delete this.valueAxis;\n        }\n    },\n\n    trendlineFactory: function(options, series) {\n        var categoryAxis = this.seriesCategoryAxis(options);\n        var seriesValues = this.seriesValues.bind(this, series.index);\n\n        var trendline = trendlineFactory(registry, options.type, {\n            options: options,\n            categoryAxis: categoryAxis,\n            seriesValues: seriesValues\n        });\n\n        if (trendline) {\n            // Inherit settings\n            trendline.categoryAxis = series.categoryAxis;\n            trendline.valueAxis = series.valueAxis;\n\n            return this.filterSeries(trendline, categoryAxis);\n        }\n\n        return trendline;\n    },\n\n    trendlineAggregateForecast: function() {\n        return this.series\n            .map(function (series) { return (series.trendline || {}).forecast; })\n            .filter(function (forecast) { return forecast !== undefined; })\n            .reduce(function (result, forecast) { return ({\n                before: Math.max(result.before, forecast.before || 0),\n                after: Math.max(result.after, forecast.after || 0)\n            }); }, { before: 0, after: 0 });\n    },\n\n    seriesValues: function(seriesIx, range) {\n        var this$1$1 = this;\n\n        var result = [];\n\n        var series = this.srcSeries[seriesIx];\n        var categoryAxis = this.seriesCategoryAxis(series);\n        var dateAxis = equalsIgnoreCase(categoryAxis.options.type, DATE);\n        if (dateAxis) {\n            this._seriesPointsCache = {};\n            this._currentPointsCache = {};\n            categoryAxis.options.dataItems = [];\n            series = this.aggregateSeries(series, categoryAxis, categoryAxis.totalRangeIndices());\n        }\n\n        var min = range ? range.min : 0;\n        var max = range ? range.max : series.data.length;\n        for (var categoryIx = min; categoryIx < max; categoryIx++) {\n            var data = this$1$1.bindPoint(series, categoryIx);\n            result.push({ categoryIx: categoryIx, category: data.fields.category, valueFields: data.valueFields });\n        }\n\n        return result;\n    },\n\n    createCharts: function(panes) {\n        var this$1$1 = this;\n\n        var seriesByPane = this.groupSeriesByPane();\n\n        for (var i = 0; i < panes.length; i++) {\n            var pane = panes[i];\n            var paneSeries = seriesByPane[pane.options.name || \"default\"] || [];\n            this$1$1.addToLegend(paneSeries);\n\n            var visibleSeries = this$1$1.filterVisibleSeries(paneSeries);\n            if (!visibleSeries) {\n                continue;\n            }\n\n            var groups = this$1$1.groupSeriesByCategoryAxis(visibleSeries);\n            for (var groupIx = 0; groupIx < groups.length; groupIx++) {\n                this$1$1.createChartGroup(groups[groupIx], pane);\n            }\n        }\n    },\n\n    createChartGroup: function(series, pane) {\n        this.createAreaChart(\n            filterSeriesByType(series, [ AREA, VERTICAL_AREA ]), pane\n        );\n\n        this.createRangeAreaChart(\n            filterSeriesByType(series, [ RANGE_AREA, VERTICAL_RANGE_AREA ]), pane\n        );\n\n        this.createBarChart(\n            filterSeriesByType(series, [ COLUMN, BAR ]), pane\n        );\n\n        this.createRangeBarChart(\n            filterSeriesByType(series, [ RANGE_COLUMN, RANGE_BAR ]), pane\n        );\n\n        this.createBulletChart(\n            filterSeriesByType(series, [ BULLET, VERTICAL_BULLET ]), pane\n        );\n\n        this.createCandlestickChart(\n            filterSeriesByType(series, CANDLESTICK), pane\n        );\n\n        this.createBoxPlotChart(\n            filterSeriesByType(series, [ BOX_PLOT, VERTICAL_BOX_PLOT ]), pane\n        );\n\n        this.createOHLCChart(\n            filterSeriesByType(series, OHLC), pane\n        );\n\n        this.createWaterfallChart(\n            filterSeriesByType(series, [ WATERFALL, HORIZONTAL_WATERFALL ]), pane\n        );\n\n        this.createLineChart(\n            filterSeriesByType(series, [ LINE, VERTICAL_LINE ]), pane\n        );\n    },\n\n    aggregateCategories: function(panes) {\n        var this$1$1 = this;\n\n        var series = [].concat( this.series );\n        var processedSeries = [];\n        this._currentPointsCache = {};\n        this._seriesPointsCache = this._seriesPointsCache || {};\n\n        for (var i = 0; i < series.length; i++) {\n            var currentSeries = series[i];\n\n            if (!this$1$1.isTrendline(currentSeries)) {\n                var categoryAxis = this$1$1.seriesCategoryAxis(currentSeries);\n                var axisPane = this$1$1.findPane(categoryAxis.options.pane);\n                var dateAxis = equalsIgnoreCase(categoryAxis.options.type, DATE);\n\n                if ((dateAxis || currentSeries.categoryField) && inArray(axisPane, panes)) {\n                    currentSeries = this$1$1.aggregateSeries(currentSeries, categoryAxis, categoryAxis.currentRangeIndices());\n                } else {\n                    currentSeries = this$1$1.filterSeries(currentSeries, categoryAxis);\n                }\n            }\n\n            processedSeries.push(currentSeries);\n        }\n\n        this._seriesPointsCache = this._currentPointsCache;\n        this._currentPointsCache = null;\n\n        this.srcSeries = series;\n        this.series = processedSeries;\n    },\n\n    filterSeries: function(series, categoryAxis) {\n        var dataLength = (series.data || {}).length;\n        categoryAxis._seriesMax = Math.max(categoryAxis._seriesMax || 0, dataLength);\n\n        if (!(defined(categoryAxis.options.min) || defined(categoryAxis.options.max))) {\n            return series;\n        }\n\n        var range = categoryAxis.currentRangeIndices();\n        var outOfRangePoints = inArray(series.type, OUT_OF_RANGE_SERIES);\n        var currentSeries = deepExtend({}, series);\n\n        currentSeries.data = (currentSeries.data || []).slice(range.min, range.max + 1);\n\n        if (outOfRangePoints) {\n            createOutOfRangePoints(currentSeries, range, dataLength, function (idx) { return ({\n                item: series.data[idx],\n                category: categoryAxis.categoryAt(idx, true),\n                categoryIx: idx - range.min\n            }); }, function (idx) { return defined(series.data[idx]); });\n        }\n\n        return currentSeries;\n    },\n\n    clearSeriesPointsCache: function() {\n        this._seriesPointsCache = {};\n    },\n\n    seriesSourcePoints: function(series, categoryAxis) {\n        var this$1$1 = this;\n\n        var key = (series.index) + \";\" + (categoryAxis.categoriesHash());\n        if (this._seriesPointsCache && this._seriesPointsCache[key]) {\n            this._currentPointsCache[key] = this._seriesPointsCache[key];\n            return this._seriesPointsCache[key];\n        }\n\n        var axisOptions = categoryAxis.options;\n        var srcCategories = axisOptions.srcCategories;\n        var dateAxis = equalsIgnoreCase(axisOptions.type, DATE);\n        var srcData = series.data;\n        var result = [];\n        if (!dateAxis) {\n            categoryAxis.indexCategories();\n        }\n\n        for (var idx = 0; idx < srcData.length; idx++) {\n            var category = SeriesBinder.current.bindPoint(series, idx).fields.category;\n            if (dateAxis) {\n                category = parseDateCategory(category, srcData[idx], this$1$1.chartService.intl);\n            }\n\n            if (!defined(category)) {\n                category = srcCategories[idx];\n            }\n\n            if (defined(category) && category !== null) {\n                var categoryIx = categoryAxis.totalIndex(category);\n                result[categoryIx] = result[categoryIx] || { items: [], category: category };\n                result[categoryIx].items.push(idx);\n            }\n        }\n\n        this._currentPointsCache[key] = result;\n\n        return result;\n    },\n\n    aggregateSeries: function(series, categoryAxis, range) {\n        var srcData = series.data;\n        if (!srcData.length) {\n            return series;\n        }\n\n        var srcPoints = this.seriesSourcePoints(series, categoryAxis);\n        var result = deepExtend({}, series);\n        var aggregator = new SeriesAggregator(deepExtend({}, series), SeriesBinder.current, DefaultAggregates.current);\n        var data = result.data = [];\n\n        var dataItems = categoryAxis.options.dataItems || [];\n\n        var categoryItem = function (idx) {\n            var categoryIdx = idx - range.min;\n            var point = srcPoints[idx];\n            if (!point) {\n                point = srcPoints[idx] = {};\n            }\n\n            point.categoryIx = categoryIdx;\n\n            if (!point.item) {\n                var category = categoryAxis.categoryAt(idx, true);\n                point.category = category;\n                point.item = aggregator.aggregatePoints(point.items, category);\n            }\n\n            return point;\n        };\n\n        for (var idx = range.min; idx <= range.max; idx++) {\n            var point = categoryItem(idx);\n            data[point.categoryIx] = point.item;\n\n            if (point.items && point.items.length) {\n                dataItems[point.categoryIx] = point.item;\n            }\n        }\n\n        if (inArray(result.type, OUT_OF_RANGE_SERIES)) {\n            createOutOfRangePoints(result, range, categoryAxis.totalCount(), categoryItem, function (idx) { return srcPoints[idx]; });\n        }\n\n        categoryAxis.options.dataItems = dataItems;\n\n        return result;\n    },\n\n    appendChart: function(chart, pane) {\n        var series = chart.options.series;\n        var categoryAxis = this.seriesCategoryAxis(series[0]);\n        var categories = categoryAxis.options.categories;\n        var categoriesToAdd = Math.max(0, categoriesCount(series) - categories.length);\n\n        if (categoriesToAdd > 0) {//consider setting an option to axis instead of adding fake categories\n            categories = categoryAxis.options.categories = categoryAxis.options.categories.slice(0);\n            while (categoriesToAdd--) {\n                categories.push(\"\");\n            }\n        }\n\n        this.valueAxisRangeTracker.update(chart.valueAxisRanges);\n\n        PlotAreaBase.fn.appendChart.call(this, chart, pane);\n    },\n\n    seriesPaneName: function(series) {\n        var options = this.options;\n        var axisName = series.axis;\n        var axisOptions = [].concat(options.valueAxis);\n        var axis = grep(axisOptions, function(a) { return a.name === axisName; })[0];\n        var panes = options.panes || [ {} ];\n        var defaultPaneName = (panes[0] || {}).name || \"default\";\n        var paneName = (axis || {}).pane || defaultPaneName;\n\n        return paneName;\n    },\n\n    seriesCategoryAxis: function(series) {\n        var axisName = series.categoryAxis;\n        var axis = axisName ? this.namedCategoryAxes[axisName] : this.categoryAxis;\n\n        if (!axis) {\n            throw new Error(\"Unable to locate category axis with name \" + axisName);\n        }\n\n        return axis;\n    },\n\n    stackableChartOptions: function(series, pane) {\n        var anyStackedSeries = series.some(function (s) { return s.stack; });\n        var isStacked100 = series.some(function (s) { return s.stack && s.stack.type === \"100%\"; });\n        var clip = pane.options.clip;\n\n        return {\n            defaultStack: series[0].stack,\n            isStacked: anyStackedSeries,\n            isStacked100: isStacked100,\n            clip: clip\n        };\n    },\n\n    groupSeriesByCategoryAxis: function(series) {\n        var categoryAxes = [];\n        var unique = {};\n        for (var idx = 0; idx < series.length; idx++) {\n            var name = series[idx].categoryAxis || \"$$default$$\";\n            if (!dataviz.hasOwnProperty(unique, name)) {\n                unique[name] = true;\n                categoryAxes.push(name);\n            }\n        }\n\n        var groups = [];\n        for (var axisIx = 0; axisIx < categoryAxes.length; axisIx++) {\n            var axis = categoryAxes[axisIx];\n            var axisSeries = groupSeries(series, axis, axisIx);\n            if (axisSeries.length === 0) {\n                continue;\n            }\n\n            groups.push(axisSeries);\n        }\n\n        return groups;\n    },\n\n    createBarChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var firstSeries = series[0];\n        var barChart = new BarChart(this, $.extend({\n            series: series,\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            spacing: firstSeries.spacing\n        }, this.stackableChartOptions(series, pane)));\n\n        this.appendChart(barChart, pane);\n    },\n\n    createRangeBarChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var firstSeries = series[0];\n        var rangeColumnChart = new RangeBarChart(this, {\n            series: series,\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            spacing: firstSeries.spacing\n        });\n\n        this.appendChart(rangeColumnChart, pane);\n    },\n\n    createBulletChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var firstSeries = series[0];\n        var bulletChart = new BulletChart(this, {\n            series: series,\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            spacing: firstSeries.spacing,\n            clip: pane.options.clip\n        });\n\n        this.appendChart(bulletChart, pane);\n    },\n\n    createLineChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var lineChart = new LineChart(this, $.extend({\n            invertAxes: this.invertAxes,\n            series: series\n        }, this.stackableChartOptions(series, pane)));\n\n        this.appendChart(lineChart, pane);\n    },\n\n    createAreaChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var areaChart = new AreaChart(this, $.extend({\n            invertAxes: this.invertAxes,\n            series: series\n        }, this.stackableChartOptions(series, pane)));\n\n        this.appendChart(areaChart, pane);\n    },\n\n    createRangeAreaChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var rangeAreaChart = new RangeAreaChart(this, {\n            invertAxes: this.invertAxes,\n            series: series,\n            clip: pane.options.clip\n        });\n\n        this.appendChart(rangeAreaChart, pane);\n    },\n\n    createOHLCChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var firstSeries = series[0];\n        var chart = new OHLCChart(this, {\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            series: series,\n            spacing: firstSeries.spacing,\n            clip: pane.options.clip\n        });\n\n        this.appendChart(chart, pane);\n    },\n\n    createCandlestickChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var firstSeries = series[0];\n        var chart = new CandlestickChart(this, {\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            series: series,\n            spacing: firstSeries.spacing,\n            clip: pane.options.clip\n        });\n\n        this.appendChart(chart, pane);\n    },\n\n    createBoxPlotChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var firstSeries = series[0];\n        var chart = new BoxPlotChart(this, {\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            series: series,\n            spacing: firstSeries.spacing,\n            clip: pane.options.clip\n        });\n\n        this.appendChart(chart, pane);\n    },\n\n    createWaterfallChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var firstSeries = series[0];\n        var waterfallChart = new WaterfallChart(this, {\n            series: series,\n            invertAxes: this.invertAxes,\n            gap: firstSeries.gap,\n            spacing: firstSeries.spacing\n        });\n\n        this.appendChart(waterfallChart, pane);\n    },\n\n    axisRequiresRounding: function(categoryAxisName, categoryAxisIndex) {\n        var this$1$1 = this;\n\n        var centeredSeries = filterSeriesByType(this.series, EQUALLY_SPACED_SERIES);\n\n        for (var seriesIx = 0; seriesIx < this.series.length; seriesIx++) {\n            var currentSeries = this$1$1.series[seriesIx];\n            if (inArray(currentSeries.type, AREA_SERIES)) {\n                var line = currentSeries.line;\n                if (line && line.style === STEP) {\n                    centeredSeries.push(currentSeries);\n                }\n            }\n        }\n\n        for (var seriesIx$1 = 0; seriesIx$1 < centeredSeries.length; seriesIx$1++) {\n            var seriesAxis = centeredSeries[seriesIx$1].categoryAxis || \"\";\n            if (seriesAxis === categoryAxisName || (!seriesAxis && categoryAxisIndex === 0)) {\n                return true;\n            }\n        }\n    },\n\n    aggregatedAxis: function(categoryAxisName, categoryAxisIndex) {\n        var series = this.series;\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var seriesAxis = series[seriesIx].categoryAxis || \"\";\n            if ((seriesAxis === categoryAxisName || (!seriesAxis && categoryAxisIndex === 0)) && series[seriesIx].categoryField) {\n                return true;\n            }\n        }\n    },\n\n    createCategoryAxesLabels: function() {\n        var axes = this.axes;\n        for (var i = 0; i < axes.length; i++) {\n            if (axes[i] instanceof CategoryAxis) {\n                axes[i].createLabels();\n            }\n        }\n    },\n\n    createCategoryAxes: function(panes) {\n        var this$1$1 = this;\n\n        var invertAxes = this.invertAxes;\n        var definitions = [].concat(this.options.categoryAxis);\n        var axes = [];\n\n        for (var i = 0; i < definitions.length; i++) {\n            var axisOptions = definitions[i];\n            var axisPane = this$1$1.findPane(axisOptions.pane);\n\n            if (inArray(axisPane, panes)) {\n                var name = axisOptions.name;\n                var categories = axisOptions.categories; if (categories === void 0) { categories = []; }\n                axisOptions = deepExtend({\n                    vertical: invertAxes,\n                    reverse: !invertAxes && this$1$1.chartService.rtl,\n                    axisCrossingValue: invertAxes ? MAX_VALUE : 0\n                }, axisOptions);\n\n                if (!defined(axisOptions.justified)) {\n                    axisOptions.justified = this$1$1.isJustified();\n                }\n\n                if (this$1$1.axisRequiresRounding(name, i)) {\n                    axisOptions.justified = false;\n                }\n\n                var categoryAxis = (void 0);\n\n                if (isDateAxis(axisOptions, categories[0])) {\n                    axisOptions._forecast = this$1$1.trendlineAggregateForecast();\n                    categoryAxis = new dataviz.DateCategoryAxis(axisOptions, this$1$1.chartService);\n                } else {\n                    categoryAxis = new CategoryAxis(axisOptions, this$1$1.chartService);\n                }\n\n                definitions[i].categories = categoryAxis.options.srcCategories;\n\n                if (name) {\n                    if (this$1$1.namedCategoryAxes[name]) {\n                        throw new Error((\"Category axis with name \" + name + \" is already defined\"));\n                    }\n                    this$1$1.namedCategoryAxes[name] = categoryAxis;\n                }\n\n                categoryAxis.axisIndex = i;\n                axes.push(categoryAxis);\n                this$1$1.appendAxis(categoryAxis);\n            }\n        }\n\n        var primaryAxis = this.categoryAxis || axes[0];\n        this.categoryAxis = primaryAxis;\n\n        if (invertAxes) {\n            this.axisY = primaryAxis;\n        } else {\n            this.axisX = primaryAxis;\n        }\n    },\n\n    isJustified: function() {\n        var series = this.series;\n\n        for (var i = 0; i < series.length; i++) {\n            var currentSeries = series[i];\n            if (!inArray(currentSeries.type, AREA_SERIES)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    createValueAxes: function(panes) {\n        var this$1$1 = this;\n\n        var tracker = this.valueAxisRangeTracker;\n        var defaultRange = tracker.query();\n        var definitions = [].concat(this.options.valueAxis);\n        var invertAxes = this.invertAxes;\n        var baseOptions = { vertical: !invertAxes, reverse: invertAxes && this.chartService.rtl };\n        var axes = [];\n\n        if (this.stack100) {\n            baseOptions.roundToMajorUnit = false;\n            baseOptions.labels = { format: \"P0\" };\n        }\n\n        for (var i = 0; i < definitions.length; i++) {\n            var axisOptions = definitions[i];\n            var axisPane = this$1$1.findPane(axisOptions.pane);\n\n            if (inArray(axisPane, panes)) {\n                var name = axisOptions.name;\n                var defaultAxisRange = equalsIgnoreCase(axisOptions.type, LOGARITHMIC) ? { min: 0.1, max: 1 } : { min: 0, max: 1 };\n                var range = tracker.query(name) || defaultRange || defaultAxisRange;\n\n                if (i === 0 && range && defaultRange) {\n                    range.min = Math.min(range.min, defaultRange.min);\n                    range.max = Math.max(range.max, defaultRange.max);\n                }\n\n                var axisType = (void 0);\n                if (equalsIgnoreCase(axisOptions.type, LOGARITHMIC)) {\n                    axisType = dataviz.LogarithmicAxis;\n                } else {\n                    axisType = dataviz.NumericAxis;\n                }\n\n                var valueAxis = new axisType(range.min, range.max,\n                    deepExtend({}, baseOptions, axisOptions),\n                    this$1$1.chartService\n                );\n\n                if (name) {\n                    if (this$1$1.namedValueAxes[name]) {\n                        throw new Error((\"Value axis with name \" + name + \" is already defined\"));\n                    }\n                    this$1$1.namedValueAxes[name] = valueAxis;\n                }\n                valueAxis.axisIndex = i;\n\n                axes.push(valueAxis);\n                this$1$1.appendAxis(valueAxis);\n            }\n        }\n\n        var primaryAxis = this.valueAxis || axes[0];\n        this.valueAxis = primaryAxis;\n\n        if (invertAxes) {\n            this.axisX = primaryAxis;\n        } else {\n            this.axisY = primaryAxis;\n        }\n    },\n\n    _dispatchEvent: function(chart, e, eventType) {\n        var coords = chart._eventCoordinates(e);\n        var point = new Point(coords.x, coords.y);\n        var pane = this.pointPane(point);\n        var categories = [];\n        var values = [];\n\n        if (!pane) {\n            return;\n        }\n\n        var allAxes = pane.axes;\n        for (var i = 0; i < allAxes.length; i++) {\n            var axis = allAxes[i];\n            if (axis.getValue) {\n                appendIfNotNull(values, axis.getValue(point));\n            } else {\n                appendIfNotNull(categories, axis.getCategory(point));\n            }\n        }\n\n        if (categories.length === 0) {\n            appendIfNotNull(categories, this.categoryAxis.getCategory(point));\n        }\n\n        if (categories.length > 0 && values.length > 0) {\n            chart.trigger(eventType, {\n                element: eventElement(e),\n                originalEvent: e,\n                category: singleItemOrArray(categories),\n                value: singleItemOrArray(values)\n            });\n        }\n    },\n\n    pointPane: function(point) {\n        var panes = this.panes;\n\n        for (var i = 0; i < panes.length; i++) {\n            var currentPane = panes[i];\n            if (currentPane.contentBox.containsPoint(point)) {\n                return currentPane;\n            }\n        }\n    },\n\n    updateAxisOptions: function(axis, options) {\n        updateAxisOptions(this.options, axis, options);\n        updateAxisOptions(this.originalOptions, axis, options);\n    },\n\n    _pointsByVertical: function(basePoint, offset) {\n        if (offset === void 0) { offset = 0; }\n\n        if (this.invertAxes) {\n            return this._siblingsBySeriesIndex(basePoint.series.index, offset);\n        }\n\n        return this._siblingsByPointIndex(basePoint.getIndex());\n    },\n\n    _pointsByHorizontal: function(basePoint, offset) {\n        if (offset === void 0) { offset = 0; }\n\n        if (this.invertAxes) {\n            return this._siblingsByPointIndex(basePoint.getIndex());\n        }\n\n        var siblings = this._siblingsBySeriesIndex(basePoint.series.index, offset);\n\n        if (this.chartService.rtl) {\n            return siblings.reverse();\n        }\n\n        return siblings;\n    },\n\n    _siblingsByPointIndex: function(pointIndex) {\n        var this$1$1 = this;\n\n        var charts = this.charts;\n        var result = [];\n\n        for (var i = 0; i < charts.length; i++) {\n            var chart = charts[i];\n\n            if (chart.pane && chart.pane.options.name === \"_navigator\") {\n                continue;\n            }\n\n            var chartPoints = chart.points\n                .filter(function (point) { return point && point.visible !== false && point.getIndex() === pointIndex; }\n                );\n\n            result.push.apply(result, chartPoints.sort(this$1$1._getSeriesCompareFn(chartPoints[0])));\n        }\n\n        return result;\n    },\n\n    _siblingsBySeriesIndex: function(seriesIndex, offset) {\n        var index = cycleIndex(seriesIndex + offset, this.series.length);\n\n        return this.pointsBySeriesIndex(index);\n    },\n\n    _getSeriesCompareFn: function(point) {\n        var isStacked = this._isInStackedSeries(point);\n\n        if (isStacked && this.invertAxes || !isStacked && !this.invertAxes) {\n            return function (a, b) { return a.box.center().x - b.box.center().x; };\n        }\n\n        return function (a, b) { return a.box.center().y - b.box.center().y; };\n    },\n\n    _isInStackedSeries: function(point) {\n        var sortableSeries = inArray(point.series.type,\n            [ AREA, VERTICAL_AREA, RANGE_AREA, VERTICAL_RANGE_AREA, LINE, VERTICAL_LINE, RADAR_LINE, RADAR_AREA]);\n\n        var stackableSeries = inArray(point.series.type, [ COLUMN, BAR]);\n\n        return sortableSeries || stackableSeries && point.options.isStacked;\n    }\n});\n\nfunction updateAxisOptions(targetOptions, axis, options) {\n    var axesOptions = axis instanceof CategoryAxis ? [].concat(targetOptions.categoryAxis) : [].concat(targetOptions.valueAxis);\n    deepExtend(axesOptions[axis.axisIndex], options);\n}\n\nfunction groupSeries(series, axis, axisIx) {\n    return grep(series, function(s) {\n        return (axisIx === 0 && !s.categoryAxis) || (s.categoryAxis === axis);\n    });\n}\n\nsetDefaultOptions(CategoricalPlotArea, {\n    categoryAxis: {},\n    valueAxis: {}\n});\n\ndeepExtend(CategoricalPlotArea.prototype, PlotAreaEventsMixin);\n\nvar Highlight = Class.extend({\n    init: function() {\n\n        this._points = [];\n    },\n\n    destroy: function() {\n        this._points = [];\n    },\n\n    show: function(points, opacity) {\n        var this$1$1 = this;\n\n        var arrayPoints = [].concat(points);\n        this.hide();\n\n        for (var i = 0; i < arrayPoints.length; i++) {\n            var point = arrayPoints[i];\n            if (point && point.toggleHighlight && point.hasHighlight()) {\n                this$1$1.togglePointHighlight(point, true, opacity);\n                this$1$1._points.push(point);\n            }\n        }\n    },\n\n    togglePointHighlight: function(point, show, opacity) {\n        var toggleHandler = (point.options.highlight || {}).toggle;\n        if (toggleHandler) {\n            var eventArgs = {\n                category: point.category,\n                series: point.series,\n                dataItem: point.dataItem,\n                value: point.value,\n                stackValue: point.stackValue,\n                preventDefault: preventDefault,\n                visual: point.highlightVisual(),\n                show: show\n            };\n            toggleHandler(eventArgs);\n            if (!eventArgs._defaultPrevented) {\n                point.toggleHighlight(show, opacity);\n            }\n        } else {\n            point.toggleHighlight(show, opacity);\n        }\n    },\n\n    hide: function() {\n        var this$1$1 = this;\n\n        var points = this._points;\n        while (points.length) {\n            this$1$1.togglePointHighlight(points.pop(), false);\n        }\n    },\n\n    isHighlighted: function(element) {\n        var points = this._points;\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i];\n            if (element === point) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n});\n\nfunction preventDefault() {\n    this._defaultPrevented = true;\n}\n\nfunction acceptKey(e, mouseKey) {\n    var key = (mouseKey || \"\").toLowerCase();\n    var event = e.event;\n    var accept = (key === \"none\" && !(event.ctrlKey || event.shiftKey || event.altKey)) || event[key + \"Key\"];\n\n    return accept;\n}\n\nfunction toChartAxisRanges(axisRanges) {\n    var ranges = {};\n    for (var idx = 0; idx < axisRanges.length; idx++) {\n        var axisRange = axisRanges[idx];\n        if (axisRange.axis.options.name) {\n            ranges[axisRange.axis.options.name] = {\n                min: axisRange.range.min,\n                max: axisRange.range.max\n            };\n        }\n    }\n    return ranges;\n}\n\nvar Pannable = Class.extend({\n    init: function(plotArea, options) {\n\n        this.plotArea = plotArea;\n        this.options = deepExtend({}, this.options, options);\n    },\n\n    start: function(e) {\n        this._active = acceptKey(e, this.options.key);\n        return this._active;\n    },\n\n    move: function(e) {\n        if (this._active) {\n            var axisRanges = this.axisRanges = this._panAxes(e, X).concat(this._panAxes(e, Y));\n            if (axisRanges.length) {\n                this.axisRanges = axisRanges;\n                return toChartAxisRanges(axisRanges);\n            }\n        }\n    },\n\n    end: function() {\n        var active = this._active;\n        this._active = false;\n\n        return active;\n    },\n\n    pan: function() {\n        var ref = this;\n        var plotArea = ref.plotArea;\n        var axisRanges = ref.axisRanges;\n        if (axisRanges.length) {\n            for (var idx = 0; idx < axisRanges.length; idx++) {\n                var range = axisRanges[idx];\n                plotArea.updateAxisOptions(range.axis, range.range);\n            }\n            plotArea.redraw(plotArea.panes);\n        }\n    },\n\n    destroy: function() {\n        delete this.plotArea;\n    },\n\n    _panAxes: function(e, position) {\n        var plotArea = this.plotArea;\n        var delta = -e[position].delta;\n        var lock = (this.options.lock || \"\").toLowerCase();\n        var updatedAxes = [];\n\n        if (delta !== 0 && (lock || \"\").toLowerCase() !== position) {\n            var axes = plotArea.axes;\n            for (var idx = 0; idx < axes.length; idx++) {\n                var axis = axes[idx];\n\n                if (position === X && !axis.options.vertical || position === Y && axis.options.vertical) {\n                    var range = axis.pan(delta);\n\n                    if (range) {\n                        range.limitRange = true;\n                        updatedAxes.push({\n                            axis: axis,\n                            range: range\n                        });\n                    }\n                }\n            }\n        }\n\n        return updatedAxes;\n    }\n});\n\nPannable.prototype.options = {\n    key: \"none\",\n    lock: \"none\"\n};\n\nvar ZoomSelection = Class.extend({\n    init: function(chart, options) {\n\n        this.chart = chart;\n        this.options = deepExtend({}, this.options, options);\n        this.createElement();\n    },\n\n    createElement: function() {\n        var marquee = this._marquee = document.createElement(\"div\");\n        marquee.className = \"k-marquee\";\n        var marqueeColor = document.createElement(\"div\");\n        marqueeColor.className = \"k-marquee-color\";\n        marquee.appendChild(marqueeColor);\n    },\n\n    removeElement: function() {\n        if (this._marquee.parentNode) {\n            this._marquee.parentNode.removeChild(this._marquee);\n        }\n    },\n\n    setStyles: function(styles) {\n        elementStyles(this._marquee, styles);\n    },\n\n    start: function(e) {\n        if (acceptKey(e, this.options.key)) {\n            var chart = this.chart;\n            var point = chart._eventCoordinates(e);\n            var zoomPane = this._zoomPane = chart._plotArea.paneByPoint(point);\n            var clipBox = zoomPane ? zoomPane.chartsBox().clone() : null;\n\n            if (zoomPane && clipBox) {\n                var offset = this._elementOffset();\n\n                clipBox.translate(offset.left, offset.top);\n                this._zoomPaneClipBox = clipBox;\n\n                document.body.appendChild(this._marquee);\n                this.setStyles({\n                    left: e.pageX + 1,\n                    top: e.pageY + 1,\n                    width: 0,\n                    height: 0\n                });\n\n                return true;\n            }\n        }\n        return false;\n    },\n\n    _elementOffset: function() {\n        var chartElement = this.chart.element;\n        var ref = elementStyles(chartElement, [ \"paddingLeft\", \"paddingTop\" ]);\n        var paddingLeft = ref.paddingLeft;\n        var paddingTop = ref.paddingTop;\n        var offset = dataviz.elementOffset(chartElement);\n\n        return {\n            left: paddingLeft + offset.left,\n            top: paddingTop + offset.top\n        };\n    },\n\n    move: function(e) {\n        var zoomPane = this._zoomPane;\n        if (zoomPane) {\n            this.setStyles(this._selectionPosition(e));\n        }\n    },\n\n    end: function(e) {\n        var zoomPane = this._zoomPane;\n        if (zoomPane) {\n            var elementOffset$$1 = this._elementOffset();\n            var selectionPosition = this._selectionPosition(e);\n            selectionPosition.left -= elementOffset$$1.left;\n            selectionPosition.top -= elementOffset$$1.top;\n\n            var start = { x: selectionPosition.left, y: selectionPosition.top };\n            var end = { x: selectionPosition.left + selectionPosition.width, y: selectionPosition.top + selectionPosition.height };\n            this._updateAxisRanges(start, end);\n\n            this.removeElement();\n            delete this._zoomPane;\n\n            return toChartAxisRanges(this.axisRanges);\n        }\n    },\n\n    zoom: function() {\n        var axisRanges = this.axisRanges;\n        if (axisRanges && axisRanges.length) {\n            var plotArea = this.chart._plotArea;\n            for (var idx = 0; idx < axisRanges.length; idx++) {\n                var axisRange = axisRanges[idx];\n                plotArea.updateAxisOptions(axisRange.axis, axisRange.range);\n            }\n            plotArea.redraw(plotArea.panes);\n        }\n    },\n\n    destroy: function() {\n        this.removeElement();\n        delete this._marquee;\n        delete this.chart;\n    },\n\n    _updateAxisRanges: function(start, end) {\n        var lock = (this.options.lock || \"\").toLowerCase();\n        var axisRanges = [];\n\n        var axes = this._zoomPane.axes;\n        for (var idx = 0; idx < axes.length; idx++) {\n            var axis = axes[idx];\n            var vertical = axis.options.vertical;\n            if (!(lock === X && !vertical) && !(lock === Y && vertical) && defined(axis.axisIndex)) {\n                var range = axis.pointsRange(start, end);\n                if (range) {\n                    axisRanges.push({\n                        axis: axis,\n                        range: range\n                    });\n                }\n            }\n        }\n\n        this.axisRanges = axisRanges;\n    },\n\n    _selectionPosition: function(e) {\n        var clipBox = this._zoomPaneClipBox;\n        var startLocation = {\n            x: e.x.startLocation,\n            y: e.y.startLocation\n        };\n        var pageX = e.x.location;\n        var pageY = e.y.location;\n        var lock = (this.options.lock || \"\").toLowerCase();\n        var left = Math.min(startLocation.x, pageX);\n        var top = Math.min(startLocation.y, pageY);\n        var width = Math.abs(startLocation.x - pageX);\n        var height = Math.abs(startLocation.y - pageY);\n\n        if (lock === X) {\n            left = clipBox.x1;\n            width = clipBox.width();\n        }\n        if (lock === Y) {\n            top = clipBox.y1;\n            height = clipBox.height();\n        }\n\n        if (pageX > clipBox.x2) {\n            width = clipBox.x2 - startLocation.x;\n        }\n\n        if (pageX < clipBox.x1) {\n            width = startLocation.x - clipBox.x1;\n        }\n\n        if (pageY > clipBox.y2) {\n            height = clipBox.y2 - startLocation.y;\n        }\n\n        if (pageY < clipBox.y1) {\n            height = startLocation.y - clipBox.y1;\n        }\n\n        return {\n            left: Math.max(left, clipBox.x1),\n            top: Math.max(top, clipBox.y1),\n            width: width,\n            height: height\n        };\n    }\n});\n\nZoomSelection.prototype.options = {\n    key: \"shift\",\n    lock: \"none\"\n};\n\nvar ref = drawing.util;\nvar limitValue$1 = ref.limitValue;\nvar valueOrDefault$1 = ref.valueOrDefault;\n\n// Limit the zoom rate between 1% and 90% per mousewheel event.\n// At zoom rates close to 100% the axis range quickly becomes 0.\nvar MIN_RATE = 0.01;\nvar MAX_RATE = 0.9;\nvar DEFAULT_RATE = 0.3;\n\nvar MousewheelZoom = Class.extend({\n    init: function(chart, options) {\n\n        this.chart = chart;\n        this.options = deepExtend({\n            rate: DEFAULT_RATE\n        }, this.options, options);\n    },\n\n    updateRanges: function(delta, coords) {\n        var this$1$1 = this;\n\n        var lock = (this.options.lock || \"\").toLowerCase();\n        var axisRanges = [];\n        var axes = this.chart._plotArea.axes;\n\n        for (var idx = 0; idx < axes.length; idx++) {\n            var axis = axes[idx];\n            var vertical = axis.options.vertical;\n\n            if (!(lock === X && !vertical) && !(lock === Y && vertical) && axis.zoomRange) {\n                var rate = limitValue$1(this$1$1.options.rate, MIN_RATE, MAX_RATE);\n                var range = axis.zoomRange(-delta * rate, coords);\n\n                if (range) {\n                    axisRanges.push({\n                        axis: axis,\n                        range: range\n                    });\n                }\n            }\n        }\n\n        this.axisRanges = axisRanges;\n        return toChartAxisRanges(axisRanges);\n    },\n\n    zoom: function() {\n        var axisRanges = this.axisRanges;\n        var plotArea = this.chart._plotArea;\n\n        if (axisRanges && axisRanges.length && plotArea.updateAxisOptions) {\n            for (var idx = 0; idx < axisRanges.length; idx++) {\n                var axisRange = axisRanges[idx];\n                plotArea.updateAxisOptions(axisRange.axis, axisRange.range);\n            }\n            plotArea.redraw(plotArea.panes);\n        }\n    },\n\n    destroy: function() {\n        delete this.chart;\n    }\n});\n\nvar LegendLayout = ChartElement.extend({\n    init: function(options, chartService) {\n        ChartElement.fn.init.call(this, options);\n\n        this.chartService = chartService;\n    },\n\n    render: function() {\n        var ref = this;\n        var children = ref.children;\n        var options = ref.options;\n        var vertical = options.vertical;\n\n        this.visual = new drawing.Layout(null, {\n            spacing: vertical ? 0 : options.spacing,\n            lineSpacing: vertical ? options.spacing : 0,\n            orientation: vertical ? datavizConstants.VERTICAL : datavizConstants.HORIZONTAL,\n            reverse: options.rtl,\n            alignItems: vertical ? START : CENTER\n        });\n\n        for (var idx = 0; idx < children.length; idx++) {\n            var legendItem = children[idx];\n            legendItem.reflow(new Box());\n            legendItem.renderVisual();\n        }\n    },\n\n    reflow: function(box) {\n        this.visual.rect(box.toRect());\n        this.visual.reflow();\n        var bbox = this.visual.clippedBBox();\n\n        if (bbox) {\n            this.box = dataviz.rectToBox(bbox);\n        } else {\n            this.box = new Box();\n        }\n    },\n\n    renderVisual: function() {\n        this.addVisual();\n    },\n\n    createVisual: function() {}\n});\n\nvar DEFAULT_MARKER_SIZE = 10;\nvar DEFAULT_MARKER_BORDER_WIDTH = 2;\n\nvar LegendItemMarker = ShapeElement.extend({\n    visualStyle: function() {\n        var options = this.markerOptions();\n        var border = options.border;\n\n        return {\n            stroke: {\n                width: border.width,\n                color: border.color,\n                opacity: valueOrDefault$1(border.opacity, options.opacity),\n                dashType: border.dashType\n            },\n            fill: {\n                color: options.background,\n                opacity: options.opacity\n            },\n            cursor: options.cursor\n        };\n    },\n\n    markerOptions: function() {\n        return this.options;\n    },\n\n    markerHighlightOptions: function() {\n        var options = this.markerOptions();\n        var borderWidth = options.highlight.border.width;\n\n        return deepExtend(\n            {},\n            options,\n            { background: options.border.color },\n            options.highlight,\n            options.type === datavizConstants.CROSS ? {\n                background: options.highlight.border.color,\n                border: { color: options.highlight.background, width: borderWidth / 2 },\n                width: options.width,\n                height: options.height,\n                margin: { top: 0, left: 0 }\n            } : {}\n        );\n    },\n\n    createHighlight: function() {\n        var highlight = new ShapeElement(this.markerHighlightOptions());\n        var box = this.paddingBox.clone();\n        highlight.reflow(box.pad(highlight.options.border.width));\n        this.highlight = [ highlight.getElement() ];\n\n        return this.highlight;\n    }\n});\n\nsetDefaultOptions(LegendItemMarker, {\n    border: {\n        width: DEFAULT_MARKER_BORDER_WIDTH\n    },\n    width: DEFAULT_MARKER_SIZE - DEFAULT_MARKER_BORDER_WIDTH,\n    height: DEFAULT_MARKER_SIZE - DEFAULT_MARKER_BORDER_WIDTH,\n    background: WHITE,\n    margin: {\n        top: -1,\n        left: -1\n    },\n    vAlign: TOP,\n    align: LEFT,\n    highlight: {\n        width: DEFAULT_MARKER_SIZE,\n        height: DEFAULT_MARKER_SIZE,\n        border: {\n            color: WHITE,\n            width: DEFAULT_MARKER_BORDER_WIDTH\n        }\n    }\n});\n\nvar ChartElement$1 = Class.extend({\n    init: function(options) {\n\n        this.children = [];\n\n        this.options = deepExtend({}, this.options, this.initUserOptions(options));\n    },\n\n    initUserOptions: function(options) {\n        return options;\n    },\n\n    reflow: function(targetBox) {\n        var children = this.children;\n        var box;\n\n        for (var i = 0; i < children.length; i++) {\n            var currentChild = children[i];\n            currentChild.reflow(targetBox);\n\n            box = box ? box.wrap(currentChild.box) : currentChild.box.clone();\n        }\n\n        this.box = box || targetBox;\n    },\n\n    destroy: function() {\n        var children = this.children;\n\n        if (this.animation) {\n            this.animation.destroy();\n        }\n\n        for (var i = 0; i < children.length; i++) {\n            children[i].destroy();\n        }\n    },\n\n    getRoot: function() {\n        var parent = this.parent;\n\n        return parent ? parent.getRoot() : null;\n    },\n\n    getSender: function() {\n        var service = this.getService();\n        if (service) {\n            return service.sender;\n        }\n    },\n\n    getService: function() {\n        var element = this;\n        while (element) {\n            if (element.chartService) {\n                return element.chartService;\n            }\n            element = element.parent;\n        }\n    },\n\n    translateChildren: function(dx, dy) {\n        var children = this.children;\n        var childrenCount = children.length;\n\n        for (var i = 0; i < childrenCount; i++) {\n            children[i].box.translate(dx, dy);\n        }\n    },\n\n    append: function() {\n        var arguments$1 = arguments;\n        var this$1$1 = this;\n\n        for (var i = 0; i < arguments.length; i++) {\n            var item = arguments$1[i];\n            this$1$1.children.push(item);\n            item.parent = this$1$1;\n        }\n    },\n\n    renderVisual: function() {\n        if (this.options.visible === false) {\n            return;\n        }\n\n        this.createVisual();\n\n        this.addVisual();\n\n        this.renderChildren();\n\n        this.createAnimation();\n        this.renderComplete();\n    },\n\n    addVisual: function() {\n        if (this.visual) {\n            this.visual.chartElement = this;\n\n            if (this.parent) {\n                this.parent.appendVisual(this.visual);\n            }\n        }\n    },\n\n    renderChildren: function() {\n        var children = this.children;\n        var length = children.length;\n        for (var i = 0; i < length; i++) {\n            children[i].renderVisual();\n        }\n    },\n\n    createVisual: function() {\n        this.visual = new Group({\n            zIndex: this.options.zIndex,\n            visible: valueOrDefault(this.options.visible, true)\n        });\n    },\n\n    createAnimation: function() {\n        if (this.visual && this.options.animation) {\n            this.animation = Animation.create(\n                this.visual, this.options.animation\n            );\n        }\n    },\n\n    appendVisual: function(childVisual) {\n        if (!childVisual.chartElement) {\n            childVisual.chartElement = this;\n        }\n\n        if (childVisual.options.noclip) {\n            this.clipRoot().visual.append(childVisual);\n        } else if (defined(childVisual.options.zIndex)) {\n            this.stackRoot().stackVisual(childVisual);\n        } else if (this.isStackRoot) {\n            this.stackVisual(childVisual);\n        } else if (this.visual) {\n            this.visual.append(childVisual);\n        } else {\n            // Allow chart elements without visuals to\n            // pass through child visuals\n            this.parent.appendVisual(childVisual);\n        }\n    },\n\n    clipRoot: function() {\n        if (this.parent) {\n            return this.parent.clipRoot();\n        }\n\n        return this;\n    },\n\n    stackRoot: function() {\n        if (this.parent) {\n            return this.parent.stackRoot();\n        }\n\n        return this;\n    },\n\n    stackVisual: function(childVisual) {\n        var zIndex = childVisual.options.zIndex || 0;\n        var visuals = this.visual.children;\n        var length = visuals.length;\n        var pos;\n\n        for (pos = 0; pos < length; pos++) {\n            var sibling = visuals[pos];\n            var here = valueOrDefault(sibling.options.zIndex, 0);\n            if (here > zIndex) {\n                break;\n            }\n        }\n\n        this.visual.insert(pos, childVisual);\n    },\n\n    traverse: function(callback) {\n        var children = this.children;\n        var length = children.length;\n\n        for (var i = 0; i < length; i++) {\n            var child = children[i];\n\n            callback(child);\n            if (child.traverse) {\n                child.traverse(callback);\n            }\n        }\n    },\n\n    closest: function(match) {\n        var element = this;\n        var matched = false;\n\n        while (element && !matched) {\n            matched = match(element);\n\n            if (!matched) {\n                element = element.parent;\n            }\n        }\n\n        if (matched) {\n            return element;\n        }\n    },\n\n    renderComplete: function() {},\n\n    hasHighlight: function() {\n        var options = (this.options || {}).highlight;\n        return !(!this.createHighlight || (options && options.visible === false) || this.visible === false);\n    },\n\n    toggleHighlight: function(show, opacity) {\n        var this$1$1 = this;\n\n        var options = (this.options || {}).highlight || {};\n        var customVisual = options.visual;\n        var highlight = this._highlight;\n\n        if (!highlight) {\n            var highlightOptions = {\n                fill: {\n                    color: WHITE,\n                    opacity: opacity || 0.2\n                },\n                stroke: {\n                    color: WHITE,\n                    width: 1,\n                    opacity: opacity || 0.2\n                }\n            };\n\n            if (customVisual) {\n                highlight = this._highlight = customVisual(\n                    $.extend(this.highlightVisualArgs(), {\n                        createVisual: function () { return this$1$1.createHighlight(highlightOptions); },\n                        sender: this.getSender(),\n                        series: this.series,\n                        dataItem: this.dataItem,\n                        category: this.category,\n                        value: this.value,\n                        percentage: this.percentage,\n                        runningTotal: this.runningTotal,\n                        total: this.total\n                    })\n                );\n\n                if (!highlight) {\n                    return;\n                }\n            } else {\n                highlight = this._highlight = this.createHighlight(highlightOptions);\n            }\n\n            if (!defined(highlight.options.zIndex)) {\n                highlight.options.zIndex = valueOrDefault(options.zIndex, this.options.zIndex);\n            }\n\n            this.appendVisual(highlight);\n        }\n\n        highlight.visible(show);\n    },\n\n    toggleFocusHighlight: function(show) {\n        var options = ((this.options || {}).accessibility || {}).highlight || {};\n        var focusHighlight = this._focusHighlight;\n\n        if (!show && !focusHighlight) {\n            return;\n        }\n\n        if (!focusHighlight) {\n            var rootBackground = this.getRoot().options.background;\n            var highlightColor = autoTextColor(rootBackground);\n            var focusHighlightOptions = {\n                fill: {\n                    opacity: options.opacity,\n                    color: options.color\n                },\n                stroke: $.extend({}, {color: highlightColor}, options.border),\n                zIndex: options.zIndex\n            };\n\n            focusHighlight = this._focusHighlight = this.createFocusHighlight(focusHighlightOptions);\n\n            this.appendVisual(focusHighlight);\n        }\n\n        focusHighlight.visible(show);\n    },\n\n    createGradientOverlay: function(element, options, gradientOptions) {\n        var overlay = new Path($.extend({\n            stroke: {\n                color: \"none\"\n            },\n            fill: this.createGradient(gradientOptions),\n            closed: element.options.closed\n        }, options));\n\n        overlay.segments.elements(element.segments.elements());\n\n        return overlay;\n    },\n\n    createGradient: function(options) {\n        if (this.parent) {\n            return this.parent.createGradient(options);\n        }\n    },\n\n    supportsPointInactiveOpacity: function() {\n        return true;\n    }\n});\n\nChartElement$1.prototype.options = { };\n\nvar Point$1 = Class.extend({\n    init: function(x, y) {\n\n        this.x = x || 0;\n        this.y = y || 0;\n    },\n\n    clone: function() {\n        return new Point$1(this.x, this.y);\n    },\n\n    equals: function(point) {\n        return point && this.x === point.x && this.y === point.y;\n    },\n\n    rotate: function(center, degrees) {\n        var theta = rad(degrees);\n        var cosT = Math.cos(theta);\n        var sinT = Math.sin(theta);\n        var cx = center.x;\n        var cy = center.y;\n        var ref = this;\n        var x = ref.x;\n        var y = ref.y;\n\n        this.x = round(\n            cx + (x - cx) * cosT + (y - cy) * sinT,\n            COORD_PRECISION\n        );\n\n        this.y = round(\n            cy + (y - cy) * cosT - (x - cx) * sinT,\n            COORD_PRECISION\n        );\n\n        return this;\n    },\n\n    multiply: function(a) {\n\n        this.x *= a;\n        this.y *= a;\n\n        return this;\n    },\n\n    distanceTo: function(point) {\n        var dx = this.x - point.x;\n        var dy = this.y - point.y;\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n});\n\nPoint$1.onCircle = function(center, angle, radius) {\n    var radians = rad(angle);\n\n    return new Point$1(\n        center.x - radius * Math.cos(radians),\n        center.y - radius * Math.sin(radians)\n    );\n};\n\nvar Box$1 = Class.extend({\n    init: function(x1, y1, x2, y2) {\n\n        this.x1 = x1 || 0;\n        this.y1 = y1 || 0;\n        this.x2 = x2 || 0;\n        this.y2 = y2 || 0;\n    },\n\n    equals: function(box) {\n        return this.x1 === box.x1 && this.x2 === box.x2 &&\n            this.y1 === box.y1 && this.y2 === box.y2;\n    },\n\n    width: function() {\n        return this.x2 - this.x1;\n    },\n\n    height: function() {\n        return this.y2 - this.y1;\n    },\n\n    translate: function(dx, dy) {\n        this.x1 += dx;\n        this.x2 += dx;\n        this.y1 += dy;\n        this.y2 += dy;\n\n        return this;\n    },\n\n    move: function(x, y) {\n        var height = this.height();\n        var width = this.width();\n\n        if (defined(x)) {\n            this.x1 = x;\n            this.x2 = this.x1 + width;\n        }\n\n        if (defined(y)) {\n            this.y1 = y;\n            this.y2 = this.y1 + height;\n        }\n\n        return this;\n    },\n\n    wrap: function(targetBox) {\n        this.x1 = Math.min(this.x1, targetBox.x1);\n        this.y1 = Math.min(this.y1, targetBox.y1);\n        this.x2 = Math.max(this.x2, targetBox.x2);\n        this.y2 = Math.max(this.y2, targetBox.y2);\n\n        return this;\n    },\n\n    wrapPoint: function(point) {\n        var arrayPoint = isArray(point);\n        var x = arrayPoint ? point[0] : point.x;\n        var y = arrayPoint ? point[1] : point.y;\n        this.wrap(new Box$1(x, y, x, y));\n\n        return this;\n    },\n\n    snapTo: function(targetBox, axis) {\n\n        if (axis === X || !axis) {\n            this.x1 = targetBox.x1;\n            this.x2 = targetBox.x2;\n        }\n\n        if (axis === Y || !axis) {\n            this.y1 = targetBox.y1;\n            this.y2 = targetBox.y2;\n        }\n\n        return this;\n    },\n\n    alignTo: function(targetBox, anchor) {\n        var height = this.height();\n        var width = this.width();\n        var axis = anchor === TOP || anchor === BOTTOM ? Y : X;\n        var offset = axis === Y ? height : width;\n\n        if (anchor === CENTER) {\n            var targetCenter = targetBox.center();\n            var center = this.center();\n\n            this.x1 += targetCenter.x - center.x;\n            this.y1 += targetCenter.y - center.y;\n        } else if (anchor === TOP || anchor === LEFT) {\n            this[axis + 1] = targetBox[axis + 1] - offset;\n        } else {\n            this[axis + 1] = targetBox[axis + 2];\n        }\n\n        this.x2 = this.x1 + width;\n        this.y2 = this.y1 + height;\n\n        return this;\n    },\n\n    shrink: function(dw, dh) {\n\n        this.x2 -= dw;\n        this.y2 -= dh;\n\n        return this;\n    },\n\n    expand: function(dw, dh) {\n        this.shrink(-dw, -dh);\n        return this;\n    },\n\n    pad: function(padding) {\n        var spacing = getSpacing(padding);\n\n        this.x1 -= spacing.left;\n        this.x2 += spacing.right;\n        this.y1 -= spacing.top;\n        this.y2 += spacing.bottom;\n\n        return this;\n    },\n\n    unpad: function(padding) {\n        var spacing = getSpacing(padding);\n\n        spacing.left = -spacing.left;\n        spacing.top = -spacing.top;\n        spacing.right = -spacing.right;\n        spacing.bottom = -spacing.bottom;\n\n        return this.pad(spacing);\n    },\n\n    clone: function() {\n        return new Box$1(this.x1, this.y1, this.x2, this.y2);\n    },\n\n    center: function() {\n        return new Point$1(\n            this.x1 + this.width() / 2,\n            this.y1 + this.height() / 2\n        );\n    },\n\n    containsPoint: function(point) {\n\n        return point.x >= this.x1 && point.x <= this.x2 &&\n               point.y >= this.y1 && point.y <= this.y2;\n    },\n\n    points: function() {\n        return [\n            new Point$1(this.x1, this.y1),\n            new Point$1(this.x2, this.y1),\n            new Point$1(this.x2, this.y2),\n            new Point$1(this.x1, this.y2)\n        ];\n    },\n\n    getHash: function() {\n        return [ this.x1, this.y1, this.x2, this.y2 ].join(\",\");\n    },\n\n    overlaps: function(box) {\n        return !(box.y2 < this.y1 || this.y2 < box.y1 || box.x2 < this.x1 || this.x2 < box.x1);\n    },\n\n    rotate: function(rotation) {\n        var width = this.width();\n        var height = this.height();\n        var ref = this.center();\n        var cx = ref.x;\n        var cy = ref.y;\n\n        var r1 = rotatePoint(0, 0, cx, cy, rotation);\n        var r2 = rotatePoint(width, 0, cx, cy, rotation);\n        var r3 = rotatePoint(width, height, cx, cy, rotation);\n        var r4 = rotatePoint(0, height, cx, cy, rotation);\n\n        width = Math.max(r1.x, r2.x, r3.x, r4.x) - Math.min(r1.x, r2.x, r3.x, r4.x);\n        height = Math.max(r1.y, r2.y, r3.y, r4.y) - Math.min(r1.y, r2.y, r3.y, r4.y);\n\n        this.x2 = this.x1 + width;\n        this.y2 = this.y1 + height;\n\n        return this;\n    },\n\n    toRect: function() {\n        return new geometry.Rect([ this.x1, this.y1 ], [ this.width(), this.height() ]);\n    },\n\n    hasSize: function() {\n        return this.width() !== 0 && this.height() !== 0;\n    },\n\n    align: function(targetBox, axis, alignment) {\n        var c1 = axis + 1;\n        var c2 = axis + 2;\n        var sizeFunc = axis === X ? datavizConstants.WIDTH : datavizConstants.HEIGHT;\n        var size = this[sizeFunc]();\n\n        if (inArray(alignment, [ LEFT, TOP ])) {\n            this[c1] = targetBox[c1];\n            this[c2] = this[c1] + size;\n        } else if (inArray(alignment, [ RIGHT, BOTTOM ])) {\n            this[c2] = targetBox[c2];\n            this[c1] = this[c2] - size;\n        } else if (alignment === CENTER) {\n            this[c1] = targetBox[c1] + (targetBox[sizeFunc]() - size) / 2;\n            this[c2] = this[c1] + size;\n        }\n    }\n});\n\nfunction rotatePoint(x, y, cx, cy, angle) {\n    var theta = rad(angle);\n\n    return new Point$1(\n        cx + (x - cx) * Math.cos(theta) + (y - cy) * Math.sin(theta),\n        cy - (x - cx) * Math.sin(theta) + (y - cy) * Math.cos(theta)\n    );\n}\n\nvar BoxElement$1 = ChartElement$1.extend({\n    init: function(options) {\n        ChartElement$1.fn.init.call(this, options);\n\n        this.options.margin = getSpacing(this.options.margin);\n        this.options.padding = getSpacing(this.options.padding);\n    },\n\n    reflow: function(targetBox) {\n        var this$1$1 = this;\n\n        var options = this.options;\n        var width = options.width;\n        var height = options.height;\n        var shrinkToFit = options.shrinkToFit;\n        var hasSetSize = width && height;\n        var margin = options.margin;\n        var padding = options.padding;\n        var borderWidth = options.border.width;\n        var box;\n\n        var reflowPaddingBox = function () {\n            this$1$1.align(targetBox, X, options.align);\n            this$1$1.align(targetBox, Y, options.vAlign);\n            this$1$1.paddingBox = box.clone().unpad(margin).unpad(borderWidth);\n        };\n\n        var contentBox = targetBox.clone();\n        if (hasSetSize) {\n            contentBox.x2 = contentBox.x1 + width;\n            contentBox.y2 = contentBox.y1 + height;\n        }\n\n        if (shrinkToFit) {\n            contentBox.unpad(margin).unpad(borderWidth).unpad(padding);\n        }\n\n        ChartElement$1.fn.reflow.call(this, contentBox);\n\n        if (hasSetSize) {\n            box = this.box = new Box$1(0, 0, width, height);\n        } else {\n            box = this.box;\n        }\n\n        if (shrinkToFit && hasSetSize) {\n            reflowPaddingBox();\n            contentBox = this.contentBox = this.paddingBox.clone().unpad(padding);\n        } else {\n            contentBox = this.contentBox = box.clone();\n            box.pad(padding).pad(borderWidth).pad(margin);\n            reflowPaddingBox();\n        }\n\n        this.translateChildren(\n            box.x1 - contentBox.x1 + margin.left + borderWidth + padding.left,\n            box.y1 - contentBox.y1 + margin.top + borderWidth + padding.top\n        );\n\n        var children = this.children;\n        for (var i = 0; i < children.length; i++) {\n            var item = children[i];\n            item.reflow(item.box);\n        }\n    },\n\n    align: function(targetBox, axis, alignment) {\n        this.box.align(targetBox, axis, alignment);\n    },\n\n    hasBox: function() {\n        var options = this.options;\n        return options.border.width || options.background;\n    },\n\n    createVisual: function() {\n        ChartElement$1.fn.createVisual.call(this);\n\n        var options = this.options;\n        if (options.visible && this.hasBox()) {\n            this.visual.append(Path.fromRect(\n                this.paddingBox.toRect(),\n                this.visualStyle()\n            ));\n        }\n    },\n\n    visualStyle: function() {\n        var options = this.options;\n        var border = options.border || {};\n\n        return {\n            stroke: {\n                width: border.width,\n                color: border.color,\n                opacity: valueOrDefault(border.opacity, options.opacity),\n                dashType: border.dashType\n            },\n            fill: {\n                color: options.background,\n                opacity: options.opacity\n            },\n            cursor: options.cursor\n        };\n    }\n});\n\nsetDefaultOptions(BoxElement$1, {\n    align: LEFT,\n    vAlign: TOP,\n    margin: {},\n    padding: {},\n    border: {\n        color: BLACK,\n        width: 0\n    },\n    background: \"\",\n    shrinkToFit: false,\n    width: 0,\n    height: 0,\n    visible: true\n});\n\nvar ShapeElement$1 = BoxElement$1.extend({\n    init: function(options, pointData) {\n        BoxElement$1.fn.init.call(this, options);\n\n        this.pointData = pointData;\n    },\n\n    getElement: function() {\n        var ref = this;\n        var options = ref.options;\n        var box = ref.paddingBox;\n        var type = options.type;\n        var rotation = options.rotation;\n        var center = box.center();\n        var halfWidth = box.width() / 2;\n        var halfHeight = box.height() / 2;\n\n        if (!options.visible || !this.hasBox()) {\n            return null;\n        }\n\n        var style = this.visualStyle();\n        var element;\n\n        if (type === CIRCLE) {\n            element = new Circle(\n                new GeometryCircle([\n                    round(box.x1 + halfWidth, COORD_PRECISION),\n                    round(box.y1 + halfHeight, COORD_PRECISION)\n                ], Math.min(halfWidth, halfHeight)),\n                style\n            );\n        } else if (type === datavizConstants.TRIANGLE) {\n            element = Path.fromPoints([\n                [ box.x1 + halfWidth, box.y1 ],\n                [ box.x1, box.y2 ],\n                [ box.x2, box.y2 ]\n            ], style).close();\n        } else if (type === datavizConstants.CROSS) {\n            element = new MultiPath(style);\n\n            element.moveTo(box.x1, box.y1).lineTo(box.x2, box.y2);\n            element.moveTo(box.x1, box.y2).lineTo(box.x2, box.y1);\n        } else {\n            var rect = box.toRect();\n            if (type === datavizConstants.ROUNDED_RECT) {\n                var borderRadius = valueOrDefault$1(options.borderRadius, rect.width() / 5);\n                rect.setCornerRadius(borderRadius);\n            }\n\n            element = Path.fromRect(rect, style);\n        }\n\n        if (rotation) {\n            element.transform(transform()\n                .rotate(-rotation, [ center.x, center.y ])\n            );\n        }\n\n        element.options.zIndex = options.zIndex;\n\n        return element;\n    },\n\n    createElement: function() {\n        var this$1$1 = this;\n\n        var customVisual = this.options.visual;\n        var pointData = this.pointData || {};\n        var visual;\n\n        if (customVisual) {\n            visual = customVisual({\n                value: pointData.value,\n                dataItem: pointData.dataItem,\n                sender: this.getSender(),\n                series: pointData.series,\n                category: pointData.category,\n                rect: this.paddingBox.toRect(),\n                options: this.visualOptions(),\n                createVisual: function () { return this$1$1.getElement(); }\n            });\n        } else {\n            visual = this.getElement();\n        }\n\n        return visual;\n    },\n\n    visualOptions: function() {\n        var options = this.options;\n        return {\n            background: options.background,\n            border: options.border,\n            margin: options.margin,\n            padding: options.padding,\n            type: options.type,\n            size: options.width,\n            visible: options.visible\n        };\n    },\n\n    createVisual: function() {\n        this.visual = this.createElement();\n\n        addAccessibilityAttributesToVisual(this.visual, this.options.accessibilityOptions);\n    }\n});\n\nsetDefaultOptions(ShapeElement$1, {\n    type: CIRCLE,\n    align: CENTER,\n    vAlign: CENTER\n});\n\nvar MarkerLineArea = ShapeElement$1.extend({\n    getElement: function() {\n        var group = new Group();\n        var element = new MultiPath(this.visualStyle());\n        var ref = this;\n        var box = ref.paddingBox;\n        var halfHeight = box.height() / 2;\n\n        element\n            .moveTo(box.x1, box.y1 + halfHeight)\n            .lineTo(box.x1, box.y2)\n            .lineTo(box.x2, box.y2);\n\n        group.append(element);\n\n        return group;\n    }\n});\n\nsetDefaultOptions(MarkerLineArea, {\n    width: 15,\n    height: 15,\n    align: RIGHT,\n    vAlign: BOTTOM,\n    margin: {\n        right: -2,\n        bottom: 2\n    }\n});\n\nvar LegendItemLine = ShapeElement$1.extend({\n    getElement: function() {\n        var group = new Group();\n        var element = new MultiPath({\n            stroke: {\n                color: this.options.border.color,\n                opacity: this.options.opacity,\n                width: this.options.height,\n                dashType: this.options.dashType\n            }\n        });\n        var box = this.paddingBox;\n        var centerY = box.center().y;\n\n        element\n            .moveTo(box.x1, centerY)\n            .lineTo(box.x2, centerY);\n\n        group.append(element);\n\n        return group;\n    },\n\n    createHighlight: function() {\n        this.highlight = [ this.createHighlightLine(), this.createHighlightMarker() ];\n        return this.highlight;\n    },\n\n    createHighlightLine: function() {\n        var options = deepExtend({}, {\n            border: {\n                color: this.options.border.color,\n                opacity: this.options.border.opacity,\n                dashType: this.options.border.dashType\n            }\n        }, this.options.highlight);\n        var highlightLine = new MarkerLineArea(options);\n        highlightLine.reflow(this.parent.paddingBox.clone());\n\n        this.highlightLine = highlightLine.getElement();\n\n        return this.highlightLine;\n    },\n\n    createHighlightMarker: function() {\n        var options = deepExtend({}, {\n            background: this.options.background,\n        }, this.options.highlight.markers);\n        var highlightMarker = new ShapeElement$1(options);\n        var paddingBox = this.parent.paddingBox;\n        var borderWidth = options.border.width;\n        var box = this.parent.box.clone();\n\n        box.pad({\n            left: borderWidth - paddingBox.x1,\n            top: borderWidth - paddingBox.y1\n        });\n\n        highlightMarker.reflow(box);\n        this.highlightMarker = highlightMarker.getElement();\n\n        return this.highlightMarker;\n    }\n});\n\nsetDefaultOptions(LegendItemLine, {\n    border: {\n        width: 0\n    },\n    type: datavizConstants.RECT,\n    align: LEFT,\n    vAlign: CENTER,\n    highlight: {\n        border: {\n            width: DEFAULT_MARKER_BORDER_WIDTH\n        },\n        markers: {\n            type: CIRCLE,\n            width: DEFAULT_MARKER_SIZE,\n            height: DEFAULT_MARKER_SIZE,\n            border: {\n                width: DEFAULT_MARKER_BORDER_WIDTH,\n                color: WHITE\n            },\n            align: LEFT,\n            vAlign: TOP\n        }\n    }\n});\n\nvar LegendItemSquare = ShapeElement$1.extend({\n    createHighlight: function() {\n        var options = deepExtend({}, {\n            background: this.options.background,\n        }, this.options.highlight.markers);\n        var highlight = new ShapeElement$1(options);\n\n        var box = this.paddingBox.clone();\n        var targetBox = this.parent.box.clone();\n        box.align(targetBox, X, LEFT);\n        box.align(targetBox, Y, TOP);\n        highlight.reflow(box);\n\n        this.highlight = [ highlight.getElement() ];\n\n        return this.highlight;\n    }\n});\n\nsetDefaultOptions(LegendItemSquare, {\n    highlight: {\n        markers: {\n            type: CIRCLE,\n            width: DEFAULT_MARKER_SIZE,\n            height: DEFAULT_MARKER_SIZE,\n            border: {\n                width: DEFAULT_MARKER_BORDER_WIDTH,\n                color: WHITE\n            },\n            margin: {\n                top: -3,\n                left: -3\n            }\n        }\n    }\n});\n\nvar LegendItem = BoxElement.extend({\n    init: function(options) {\n        BoxElement.fn.init.call(this, options);\n\n        this.createContainer();\n        if (!options.rtl) {\n            this.createMarker();\n            this.createLabel();\n        } else {\n            this.createLabel();\n            this.createMarker();\n        }\n\n        this._id = guid();\n        this.options.accessibility.ariaChecked = options.active;\n    },\n\n    createContainer: function() {\n        this.container = new dataviz.FloatElement({ vertical: false, wrap: false, align: CENTER, spacing: this.options.spacing });\n        this.append(this.container);\n    },\n\n    createMarker: function() {\n        this.markerWrap = new BoxElement({ vertical: false, shrinkToFit: true, wrap: false, margin: 1, width: 22, height: 22 });\n        this.container.append(this.markerWrap);\n\n        this.createMarkerArea();\n\n        if (this.options.markers.visible) {\n            this._marker = this._createMarker();\n            this.markerWrap.append(this._marker);\n        }\n    },\n\n    createMarkerArea: function() {\n        var options = this.options;\n        var markerColor = options.markerColor;\n        var line = options.line; if (line === void 0) { line = {}; }\n        var lineOptions = {\n            border: {\n                color: line.color || markerColor,\n                opacity: line.opacity,\n                dashType: line.dashType\n            }\n        };\n        return this._createLine(lineOptions) ||\n            this._createMarkerLine(lineOptions, line) ||\n            this._createSquare();\n    },\n\n    markerOptions: function() {\n        var options = this.options;\n        var markers = options.markers; if (markers === void 0) { markers = {}; }\n        var markerColor = options.markerColor;\n        var border = markers.border; if (border === void 0) { border = {}; }\n        markers.zIndex = undefined;\n\n        return deepExtend({}, markers, {\n            border: { color: border.color || markerColor },\n            highlight: options.highlight.markers\n        });\n    },\n\n    _highlightOptions: function() {\n        var options = this.options;\n        return deepExtend(\n            { markers: { type: options.markers.type } },\n            options.highlight\n        );\n    },\n\n    _createLine: function(lineOptions) {\n        var options = this.options;\n        if (options.type === LINE && !options.markers.visible) {\n            this._line = new LegendItemLine(deepExtend({}, {\n                background: options.markerColor,\n                highlight: this._highlightOptions(),\n            }, lineOptions, options.line));\n\n            this.markerWrap.append(this._line);\n        }\n        return this._line;\n    },\n\n    _createMarkerLine: function(lineOptions, line) {\n        var options = this.options;\n        if (options.type === LINE) {\n            this._markerLineArea = new MarkerLineArea(deepExtend({}, {\n                border: {\n                    width: line.height\n                }\n            }, lineOptions));\n\n            this.markerWrap.append(this._markerLineArea);\n        }\n\n        return this._markerLineArea;\n    },\n\n    _createSquare: function() {\n        var options = this.options;\n        if (options.type === AREA) {\n            this._square = new LegendItemSquare($.extend({}, {border: options.border,\n                vAlign: options.markers.visible ? BOTTOM : CENTER,\n                highlight: this._highlightOptions(),\n                visual: options.visual},\n                options.area,\n                {background: options.area.background || options.markerColor}));\n            this.markerWrap.append(this._square);\n        }\n        return this._square;\n    },\n\n    _createMarker: function() {\n        return new LegendItemMarker(this.markerOptions());\n    },\n\n    _highlightMarkers: function() {\n        if (this.options.active) {\n            this._toggleHighlight(true);\n        }\n    },\n\n    _restoreMarkers: function() {\n        this._toggleHighlight(false);\n    },\n\n    _toggleHighlight: function(show) {\n        var this$1$1 = this;\n\n        if (!this.options.highlight.visible) {\n            return;\n        }\n\n        var element = this._marker || this._square || this._line;\n\n        if (element && element === this._line) {\n            this._line.visual.visible(!show);\n        }\n\n        if (element) {\n            var highlight = element.highlight;\n\n            if (!highlight) {\n                highlight = element.createHighlight();\n                highlight.forEach(function (h) { return h && this$1$1.markerWrap.appendVisual(h); });\n            }\n\n            highlight.forEach(function (h) { return h && h.visible(show); });\n        }\n    },\n\n    createLabel: function() {\n        var options = this.options;\n        var labelOptions = deepExtend({}, options.labels);\n\n        this.container.append(new TextBox(options.text, labelOptions));\n    },\n\n    getAriaLabelText: function() {\n        return this.options.text;\n    },\n\n    focusVisual: function() {\n        this.visual.options.set(\"id\", this._id);\n        this.toggleFocusHighlight(true);\n        this._highlightMarkers();\n    },\n\n    clearFocusFromVisual: function() {\n        this.visual.options.set(\"id\", \"\");\n        this.toggleFocusHighlight(false);\n        this._restoreMarkers();\n    },\n\n    renderComplete: function() {\n        BoxElement.fn.renderComplete.call(this);\n\n        var cursor = this.options.cursor || {};\n        var eventSink = this._itemOverlay = Path.fromRect(this.container.box.toRect(), {\n            fill: {\n                color: WHITE,\n                opacity: 0\n            },\n            stroke: null,\n            cursor: cursor.style || cursor\n        });\n\n        this.appendVisual(eventSink);\n    },\n\n    click: function(widget, e) {\n        var args = this.eventArgs(e);\n\n        if (!widget.trigger(LEGEND_ITEM_CLICK, args) && e && e.type === 'contextmenu') {\n            e.preventDefault();\n        }\n    },\n\n    over: function(widget, e) {\n        var args = this.eventArgs(e);\n\n        if (!widget.trigger(LEGEND_ITEM_HOVER, args)) {\n            widget._legendItemHover(args.seriesIndex, args.pointIndex);\n            this._highlightMarkers();\n        }\n\n        // Don't trigger point hover for legend items\n        return true;\n    },\n\n    out: function(widget, e) {\n        widget._unsetActivePoint();\n        this._restoreMarkers();\n\n        widget.trigger(LEGEND_ITEM_LEAVE, this.eventArgs(e));\n    },\n\n    eventArgs: function(e) {\n        var options = this.options;\n\n        return {\n            element: eventElement(e),\n            text: options.text,\n            series: options.series,\n            seriesIndex: options.series.index,\n            pointIndex: options.pointIndex\n        };\n    },\n\n    createVisual: function() {\n        BoxElement.fn.createVisual.call(this);\n        var options = this.options;\n\n        if (this.options.visible) {\n            var accessibilityOptions = deepExtend({\n                ariaLabel: options.text\n            }, options.accessibility);\n\n            addAccessibilityAttributesToVisual(this.visual, accessibilityOptions);\n        }\n    },\n\n    renderVisual: function() {\n        var this$1$1 = this;\n\n        var options = this.options;\n        var customVisual = options.visual;\n\n        if (customVisual) {\n            this.visual = customVisual({\n                active: options.active,\n                series: options.series,\n                sender: this.getSender(),\n                pointIndex: options.pointIndex,\n                options: {\n                    type: options.type,\n                    // Passing the markerColor as a background option for backwards compatibility.\n                    // Example in jq docs - https://docs.telerik.com/kendo-ui/api/javascript/dataviz/ui/chart/configuration/legend.item#legenditemvisual\n                    markers: deepExtend({ background: this.options.markerColor }, this.markerOptions()),\n                    labels: options.labels\n                },\n                createVisual: function () {\n                    this$1$1.createVisual();\n                    this$1$1.renderChildren();\n                    this$1$1.renderComplete();\n\n                    var defaultVisual = this$1$1.visual;\n\n                    delete this$1$1.visual;\n\n                    return defaultVisual;\n                }\n            });\n            this._marker = this._markerLineArea = this._square = this._line = null;\n            this.addVisual();\n        } else {\n            BoxElement.fn.renderVisual.call(this);\n        }\n    },\n\n    createFocusHighlight: function(style) {\n        var borderWidth = style.stroke.width;\n        return Path.fromRect(this.container.box.pad(borderWidth / 2).toRect(), style);\n    }\n});\n\nsetDefaultOptions(LegendItem, {\n    accessibility: {\n        role: LEGEND_ITEM_ROLE,\n        className: LEGEND_ITEM_CLASSNAME,\n        ariaRoleDescription: LEGEND_ITEM_ARIA_ROLE_DESCRIPTION\n    },\n    markers: {},\n    highlight: {\n        visible: true,\n        markers: {}\n    }\n});\n\nvar CUSTOM = \"custom\";\n\nvar Legend = ChartElement.extend({\n    init: function(options, chartService) {\n        if (chartService === void 0) { chartService = {}; }\n\n        ChartElement.fn.init.call(this, options);\n\n        this.chartService = chartService;\n\n        if (!inArray(this.options.position, [ TOP, RIGHT, BOTTOM, LEFT, CUSTOM ])) {\n            this.options.position = RIGHT;\n        }\n\n        this.createContainers();\n\n        this.createLegendTitle(options.title);\n\n        this.createItems();\n    },\n\n    createContainers: function() {\n        var options = this.options;\n        var position = options.position;\n        var userAlign = options.align;\n        var align = position;\n        var vAlign = CENTER;\n\n        if (position === CUSTOM) {\n            align = LEFT;\n        } else if (inArray(position, [ TOP, BOTTOM ])) {\n            if (userAlign === START) {\n                align = LEFT;\n            } else if (userAlign === END) {\n                align = RIGHT;\n            } else {\n                align = CENTER;\n            }\n            vAlign = position;\n        } else if (userAlign) {\n            if (userAlign === START) {\n                vAlign = TOP;\n            } else if (userAlign === END) {\n                vAlign = BOTTOM;\n            }\n        }\n\n        this.container = new BoxElement({\n            margin: options.margin,\n            padding: options.padding,\n            background: options.background,\n            border: options.border,\n            vAlign: vAlign,\n            align: align,\n            zIndex: options.zIndex,\n            shrinkToFit: true\n        });\n\n        if (this.hasTitle()) {\n            this.itemsContainer = new BoxElement({\n                vAlign: vAlign,\n                align: align,\n                zIndex: options.zIndex,\n                shrinkToFit: true\n            });\n        } else {\n            this.itemsContainer = this.container;\n        }\n\n        this.append(this.container);\n    },\n\n    createItems: function() {\n        var chartService = this.getService();\n        var options = this.options;\n        var vertical = this.isVertical();\n        var innerElement = new LegendLayout({\n            vertical: vertical,\n            spacing: options.spacing,\n            rtl: chartService.rtl\n        }, chartService);\n        var data = options.data;\n\n        if (options.reverse) {\n            data = data.slice(0).reverse();\n        }\n\n        var count = data.length;\n\n        for (var i = 0; i < count; i++) {\n            var dataItem = data[i];\n            var ref = dataItem.series || {};\n            var markers = ref.markers; if (markers === void 0) { markers = {}; }\n            var dashType = ref.dashType;\n            var legendItem = ref.legendItem;\n            var opacity = ref.opacity;\n            var markersOptions = deepExtend({ visible: markers.visible !== false, type: CIRCLE }, markers);\n            delete markersOptions.size;\n\n            var itemOptions = deepExtend({},\n                {\n                    markers: markersOptions,\n                    labels: options.labels,\n                    rtl: chartService.rtl,\n                    line: $.extend({}, {dashType: dashType},\n                        options.line),\n                    area: $.extend({}, {opacity: opacity},\n                        options.area),\n                    opacity: opacity,\n                    accessibility: options.accessibility\n                },\n                options.item,\n                legendItem,\n                dataItem,\n                { markers: options.markers }\n            );\n\n            innerElement.append(new LegendItem(itemOptions));\n        }\n\n        innerElement.render();\n        this.itemsContainer.append(innerElement);\n    },\n\n    isVertical: function() {\n        var ref = this.options;\n        var orientation = ref.orientation;\n        var position = ref.position;\n        var vertical = (position === CUSTOM && orientation !== datavizConstants.HORIZONTAL) ||\n               (defined(orientation) ? orientation !== datavizConstants.HORIZONTAL : inArray(position, [ LEFT, RIGHT ]));\n\n        return vertical;\n    },\n\n    hasItems: function() {\n        return this.container.children[0].children.length > 0;\n    },\n\n    getItems: function() {\n        return this.itemsContainer.children[0].children;\n    },\n\n    reflow: function(targetBox) {\n        var options = this.options;\n        var legendBox = targetBox.clone();\n\n        if (!this.hasItems()) {\n            this.box = legendBox;\n            return;\n        }\n\n        if (options.position === CUSTOM) {\n            this.containerCustomReflow(legendBox);\n            this.box = legendBox;\n        } else {\n            this.containerReflow(legendBox);\n        }\n\n        if (this.hasTitle()) {\n            this.title.reflow(new Box(this.container.box.x1, this.title.box.y1, this.container.box.x2, this.title.box.y2));\n        }\n    },\n\n    containerReflow: function(targetBox) {\n        var ref = this;\n        var options = ref.options;\n        var container = ref.container;\n        var position = options.position;\n        var width = options.width;\n        var height = options.height;\n        var pos = position === TOP || position === BOTTOM ? X : Y;\n        var vertical = this.isVertical();\n        var alignTarget = targetBox.clone();\n        var containerBox = targetBox.clone();\n\n        if (position === LEFT || position === RIGHT) {\n            containerBox.y1 = alignTarget.y1 = 0;\n        }\n\n        if (vertical && height) {\n            containerBox.y2 = containerBox.y1 + height;\n            containerBox.align(alignTarget, Y, container.options.vAlign);\n        } else if (!vertical && width) {\n            containerBox.x2 = containerBox.x1 + width;\n            containerBox.align(alignTarget, X, container.options.align);\n        }\n\n        container.reflow(containerBox);\n        containerBox = container.box;\n\n        var box = containerBox.clone();\n\n        if (options.offsetX || options.offsetY) {\n            containerBox.translate(options.offsetX, options.offsetY);\n            container.reflow(containerBox);\n        }\n\n        box[pos + 1] = targetBox[pos + 1];\n        box[pos + 2] = targetBox[pos + 2];\n\n        this.box = box;\n    },\n\n    containerCustomReflow: function(targetBox) {\n        var ref = this;\n        var options = ref.options;\n        var container = ref.container;\n        var offsetX = options.offsetX;\n        var offsetY = options.offsetY;\n        var width = options.width;\n        var height = options.height;\n        var vertical = this.isVertical();\n        var containerBox = targetBox.clone();\n\n        if (vertical && height) {\n            containerBox.y2 = containerBox.y1 + height;\n        } else if (!vertical && width) {\n            containerBox.x2 = containerBox.x1 + width;\n        }\n        container.reflow(containerBox);\n        containerBox = container.box;\n\n        container.reflow(new Box(\n            offsetX, offsetY,\n            offsetX + containerBox.width(), offsetY + containerBox.height()\n        ));\n    },\n\n    renderVisual: function() {\n        if (this.hasItems()) {\n            ChartElement.fn.renderVisual.call(this);\n        }\n    },\n\n    createLegendTitle: function(title) {\n        var titleOptions = deepExtend({}, {\n            color: BLACK,\n            position: TOP,\n            align: CENTER\n        }, title);\n        var text = titleOptions.text;\n\n        if (!title || title.visible === false || !title.text) {\n            return;\n        }\n\n        if (defined(titleOptions) && titleOptions.visible) {\n            var labelTemplate = getTemplate(titleOptions);\n            if (labelTemplate) {\n                text = labelTemplate({ text: text });\n            } else if (titleOptions.format) {\n                text = this.chartService.format.auto(titleOptions.format, text);\n            }\n        }\n\n        this.title = new TextBox(text, titleOptions);\n\n        this.createTitleLayout();\n\n        this.appendTitleLayoutContent();\n    },\n\n    createTitleLayout: function() {\n        this.layout = new dataviz.FloatElement({\n            vertical: true,\n            wrap: false\n        });\n\n        this.container.append(this.layout);\n    },\n\n    hasTitle: function() {\n        return Boolean(this.options.title && this.options.title.visible !== false && this.options.title.text);\n    },\n\n    appendTitleLayoutContent: function() {\n        var options = this.options;\n\n        if (options.title.position === BOTTOM) {\n            this.layout.append(this.itemsContainer);\n            this.layout.append(this.title);\n        } else {\n            this.layout.append(this.title);\n            this.layout.append(this.itemsContainer);\n        }\n    }\n});\n\nsetDefaultOptions(Legend, {\n    position: RIGHT,\n    data: [],\n    offsetX: 0,\n    offsetY: 0,\n    margin: getSpacing(2),\n    padding: getSpacing(5),\n    border: {\n        color: BLACK,\n        width: 0\n    },\n    item: {\n        cursor: datavizConstants.POINTER,\n        spacing: 6\n    },\n    spacing: 6,\n    background: \"\",\n    zIndex: 1,\n    markers: {},\n    line: {\n        width: 20,\n        height: 2,\n        cursor: datavizConstants.POINTER,\n        opacity: 1\n    },\n    area: {\n        type: datavizConstants.SQUARE,\n        align: RIGHT,\n        width: 15,\n        height: 15,\n    }\n});\n\nvar PlotAreaFactory = Class.extend({\n    init: function() {\n\n        this._registry = [];\n    },\n\n    register: function(type, seriesTypes) {\n        this._registry.push({\n            type: type,\n            seriesTypes: seriesTypes\n        });\n    },\n\n    create: function(srcSeries, options, chartService) {\n        var registry = this._registry;\n        var match = registry[0];\n        var series;\n\n        for (var idx = 0; idx < registry.length; idx++) {\n            var entry = registry[idx];\n            series = filterSeriesByType(srcSeries, entry.seriesTypes);\n            var trendlines = filterSeriesByType(srcSeries, TRENDLINE_SERIES);\n\n            if ((series.length - trendlines.length) > 0) {\n                match = entry;\n                break;\n            }\n        }\n\n        return new match.type(series, options, chartService);\n    }\n});\n\nPlotAreaFactory.current = new PlotAreaFactory();\n\nvar ZOOM_ACCELERATION = 3;\nvar SELECTOR_HEIGHT_ADJUST = 0.1;\n\nfunction createDiv(classNames) {\n    var element = document.createElement(\"div\");\n    if (classNames) {\n        element.className = classNames;\n    }\n\n    return element;\n}\n\nfunction closestHandle(element) {\n    var current = element;\n    while (current && !dataviz.hasClasses(current, \"k-handle\")) {\n        current = current.parentNode;\n    }\n\n    return current;\n}\n\nvar Selection = Class.extend({\n    init: function(chart, categoryAxis, options, observer) {\n\n        var chartElement = chart.element;\n\n        this.options = deepExtend({}, this.options, options);\n        this.chart = chart;\n        this.observer = observer;\n        this.chartElement = chartElement;\n        this.categoryAxis = categoryAxis;\n        this._dateAxis = this.categoryAxis instanceof dataviz.DateCategoryAxis;\n\n        this.initOptions();\n\n        this.visible = this.options.visible && chartElement.offsetHeight;\n\n        if (this.visible) {\n            this.createElements();\n\n            this.set(this._index(this.options.from), this._index(this.options.to));\n\n            this.bindEvents();\n        }\n    },\n\n    onPane: function(pane) {\n        return this.categoryAxis.pane === pane;\n    },\n\n    createElements: function() {\n        var options = this.options;\n        var wrapper = this.wrapper = createDiv(\"k-selector k-pointer-events-none\");\n        elementStyles(wrapper, {\n            top: options.offset.top,\n            left: options.offset.left,\n            width: options.width,\n            height: options.height,\n            direction: 'ltr'\n        });\n\n        var selection = this.selection = createDiv(\"k-selection k-pointer-events-none\");\n\n        this.leftMask = createDiv(\"k-mask k-pointer-events-none\");\n        this.rightMask = createDiv(\"k-mask k-pointer-events-none\");\n\n        wrapper.appendChild(this.leftMask);\n        wrapper.appendChild(this.rightMask);\n        wrapper.appendChild(selection);\n\n        var body = this.body = createDiv(\"k-selection-bg k-pointer-events-none\");\n        selection.appendChild(body);\n\n        var leftHandle = this.leftHandle = createDiv(\"k-handle k-left-handle k-pointer-events-auto\");\n        var rightHandle = this.rightHandle = createDiv(\"k-handle k-right-handle k-pointer-events-auto\");\n        leftHandle.appendChild(createDiv());\n        rightHandle.appendChild(createDiv());\n\n        selection.appendChild(leftHandle);\n        selection.appendChild(rightHandle);\n\n        this.chartElement.appendChild(wrapper);\n        var selectionStyles = elementStyles(selection, [ \"borderLeftWidth\", \"borderRightWidth\", \"height\" ]);\n        var leftHandleHeight = elementStyles(leftHandle, \"height\").height;\n        var rightHandleHeight = elementStyles(rightHandle, \"height\").height;\n\n        options.selection = {\n            border: {\n                left: selectionStyles.borderLeftWidth,\n                right: selectionStyles.borderRightWidth\n            }\n        };\n\n        elementStyles(leftHandle, {\n            top: (selectionStyles.height - leftHandleHeight) / 2\n        });\n\n        elementStyles(rightHandle, {\n            top: (selectionStyles.height - rightHandleHeight) / 2\n        });\n\n        /* eslint no-self-assign: \"off\" */\n        wrapper.style.cssText = wrapper.style.cssText;\n    },\n\n    bindEvents: function() {\n        if (this.options.mousewheel !== false) {\n            this._mousewheelHandler = this._mousewheel.bind(this);\n            var obj;\n            bindEvents(this.chartElement, ( obj = {}, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj ));\n        }\n\n        this._domEvents = services.DomEventsBuilder.create(this.chartElement, {\n            stopPropagation: true, // applicable for the jQuery UserEvents\n            start: this._start.bind(this),\n            move: this._move.bind(this),\n            end: this._end.bind(this),\n            tap: this._tap.bind(this),\n            press: this._press.bind(this),\n            gesturestart: this._gesturestart.bind(this),\n            gesturechange: this._gesturechange.bind(this),\n            gestureend: this._gestureend.bind(this)\n        });\n    },\n\n    initOptions: function() {\n        var ref = this;\n        var options = ref.options;\n        var categoryAxis = ref.categoryAxis;\n        var box = categoryAxis.pane.chartsBox();\n        var intlService = this.chart.chartService.intl;\n\n        if (this._dateAxis) {\n            deepExtend(options, {\n                min: parseDate(intlService, options.min),\n                max: parseDate(intlService, options.max),\n                from: parseDate(intlService, options.from),\n                to: parseDate(intlService, options.to)\n            });\n        }\n\n        var ref$1 = elementStyles(this.chartElement, [ \"paddingLeft\", \"paddingTop\" ]);\n        var paddingLeft = ref$1.paddingLeft;\n        var paddingTop = ref$1.paddingTop;\n\n        this.options = deepExtend({}, {\n            width: box.width(),\n            height: box.height() + SELECTOR_HEIGHT_ADJUST, //workaround for sub-pixel hover on the paths in chrome\n            padding: {\n                left: paddingLeft,\n                top: paddingTop\n            },\n            offset: {\n                left: box.x1 + paddingLeft,\n                top: box.y1 + paddingTop\n            },\n            from: options.min,\n            to: options.max\n        }, options);\n    },\n\n    destroy: function() {\n        if (this._domEvents) {\n            this._domEvents.destroy();\n            delete this._domEvents;\n        }\n\n        clearTimeout(this._mwTimeout);\n        this._state = null;\n\n        if (this.wrapper) {\n            if (this._mousewheelHandler) {\n                var obj;\n                unbindEvents(this.chartElement, ( obj = {}, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj ));\n                this._mousewheelHandler = null;\n            }\n\n            this.chartElement.removeChild(this.wrapper);\n            this.wrapper = null;\n        }\n    },\n\n    _rangeEventArgs: function(range) {\n\n        return {\n            axis: this.categoryAxis.options,\n            from: this._value(range.from),\n            to: this._value(range.to)\n        };\n    },\n\n    _pointInPane: function(x, y) {\n        var paneBox = this.categoryAxis.pane.box;\n        var modelCoords = this.chart._toModelCoordinates(x, y);\n        return paneBox.containsPoint(modelCoords);\n    },\n\n    _start: function(e) {\n        var options = this.options;\n        var target = eventElement(e);\n        if (this._state || !target) {\n            return;\n        }\n\n        var coords = dataviz.eventCoordinates(e);\n        var inPane = this._pointInPane(coords.x, coords.y);\n        if (!inPane) {\n            return;\n        }\n\n        var handle = closestHandle(target);\n        var bodyRect = this.body.getBoundingClientRect();\n        var inBody = !handle && coords.x >= bodyRect.x && coords.x <= bodyRect.x + bodyRect.width &&\n                       coords.y >= bodyRect.y && coords.y <= bodyRect.y + bodyRect.height;\n\n        this.chart._unsetActivePoint();\n        this._state = {\n            moveTarget: handle,\n            startLocation: e.x ? e.x.location : 0,\n            inBody: inBody,\n            range: {\n                from: this._index(options.from),\n                to: this._index(options.to)\n            }\n        };\n\n        var args = this._rangeEventArgs({\n            from: this._index(options.from),\n            to: this._index(options.to)\n        });\n\n        if (this.trigger(SELECT_START, args)) {\n            this._state = null;\n        }\n    },\n\n    _press: function(e) {\n        var handle;\n        if (this._state) {\n            handle = this._state.moveTarget;\n        } else {\n            handle = closestHandle(eventElement(e));\n        }\n        if (handle) {\n            dataviz.addClass(handle, \"k-handle-active\");\n        }\n    },\n\n    _move: function(e) {\n        if (!this._state) {\n            return;\n        }\n\n        var ref = this;\n        var state = ref._state;\n        var options = ref.options;\n        var categoryAxis = ref.categoryAxis;\n        var range = state.range;\n        var target = state.moveTarget;\n        var reverse = categoryAxis.options.reverse;\n        var from = this._index(options.from);\n        var to = this._index(options.to);\n        var min = this._index(options.min);\n        var max = this._index(options.max);\n        var delta = state.startLocation - e.x.location;\n        var oldRange = { from: range.from, to: range.to };\n        var span = range.to - range.from;\n        var scale = elementStyles(this.wrapper, \"width\").width / (categoryAxis.categoriesCount() - 1);\n        var offset = Math.round(delta / scale) * (reverse ? -1 : 1);\n\n        if (!target && !state.inBody) {\n            return;\n        }\n\n        var leftHandle = target && dataviz.hasClasses(target, \"k-left-handle\");\n        var rightHandle = target && dataviz.hasClasses(target, \"k-right-handle\");\n\n        if (state.inBody) {\n            range.from = Math.min(\n                Math.max(min, from - offset),\n                max - span\n            );\n            range.to = Math.min(\n                range.from + span,\n                max\n            );\n        } else if ((leftHandle && !reverse) || (rightHandle && reverse)) {\n            range.from = Math.min(\n                Math.max(min, from - offset),\n                max - 1\n            );\n            range.to = Math.max(range.from + 1, range.to);\n        } else if ((leftHandle && reverse) || (rightHandle && !reverse)) {\n            range.to = Math.min(\n                Math.max(min + 1, to - offset),\n                max\n            );\n            range.from = Math.min(range.to - 1, range.from);\n        }\n\n        if (range.from !== oldRange.from || range.to !== oldRange.to) {\n            this.move(range.from, range.to);\n            this.trigger(SELECT, this._rangeEventArgs(range));\n        }\n    },\n\n    _end: function() {\n        if (this._state) {\n            var moveTarget = this._state.moveTarget;\n            if (moveTarget) {\n                dataviz.removeClass(moveTarget, \"k-handle-active\");\n            }\n\n            var range = this._state.range;\n            this.set(range.from, range.to);\n            this.trigger(SELECT_END, this._rangeEventArgs(range));\n\n            delete this._state;\n        }\n    },\n\n    _tap: function(e) {\n        var ref = this;\n        var options = ref.options;\n        var categoryAxis = ref.categoryAxis;\n        var coords = this.chart._eventCoordinates(e);\n        var categoryIx = categoryAxis.pointCategoryIndex(new Point(coords.x, categoryAxis.box.y1));\n        var from = this._index(options.from);\n        var to = this._index(options.to);\n        var min = this._index(options.min);\n        var max = this._index(options.max);\n        var span = to - from;\n        var mid = from + span / 2;\n        var range = {};\n        var rightClick = e.event.which === 3;\n        var offset = Math.round(mid - categoryIx);\n\n        if (this._state || rightClick) {\n            return;\n        }\n\n        this.chart._unsetActivePoint();\n\n        if (!categoryAxis.options.justified) {\n            offset--;\n        }\n\n        range.from = Math.min(\n            Math.max(min, from - offset),\n            max - span\n        );\n\n        range.to = Math.min(range.from + span, max);\n\n        this._start(e);\n\n        if (this._state) {\n            this._state.range = range;\n            this.trigger(SELECT, this._rangeEventArgs(range));\n            this._end();\n        }\n    },\n\n    _mousewheel: function(e) {\n        var this$1$1 = this;\n\n        var delta = dataviz.mousewheelDelta(e);\n\n        this._start(e);\n\n        if (this._state) {\n            var range = this._state.range;\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (Math.abs(delta) > 1) {\n                delta *= ZOOM_ACCELERATION;\n            }\n\n            if (this.options.mousewheel.reverse) {\n                delta *= -1;\n            }\n\n            if (this.expand(delta)) {\n                this.trigger(SELECT, {\n                    axis: this.categoryAxis.options,\n                    delta: delta,\n                    originalEvent: e,\n                    from: this._value(range.from),\n                    to: this._value(range.to)\n                });\n            }\n\n            if (this._mwTimeout) {\n                clearTimeout(this._mwTimeout);\n            }\n\n            this._mwTimeout = setTimeout(function () {\n                this$1$1._end();\n            }, MOUSEWHEEL_DELAY);\n        }\n    },\n\n    _gesturestart: function(e) {\n        var options = this.options;\n        var touch = e.touches[0];\n        var inPane = this._pointInPane(touch.pageX, touch.pageY);\n\n        if (!inPane) {\n            return;\n        }\n\n        this._state = {\n            range: {\n                from: this._index(options.from),\n                to: this._index(options.to)\n            }\n        };\n        var args = this._rangeEventArgs(this._state.range);\n\n        if (this.trigger(SELECT_START, args)) {\n            this._state = null;\n        } else {\n            e.preventDefault();\n        }\n    },\n\n    _gestureend: function() {\n        if (this._state) {\n            this.trigger(SELECT_END, this._rangeEventArgs(this._state.range));\n            delete this._state;\n        }\n    },\n\n    _gesturechange: function(e) {\n        if (!this._state) {\n            return;\n        }\n\n        var ref = this;\n        var chart = ref.chart;\n        var state = ref._state;\n        var options = ref.options;\n        var categoryAxis = ref.categoryAxis;\n        var range = state.range;\n        var p0 = chart._toModelCoordinates(e.touches[0].x.location).x;\n        var p1 = chart._toModelCoordinates(e.touches[1].x.location).x;\n        var left = Math.min(p0, p1);\n        var right = Math.max(p0, p1);\n\n        e.preventDefault();\n\n        range.from = categoryAxis.pointCategoryIndex(new Point(left)) || options.min;\n\n        range.to = categoryAxis.pointCategoryIndex(new Point(right)) || options.max;\n\n        this.move(range.from, range.to);\n\n        this.trigger(SELECT, this._rangeEventArgs(range));\n    },\n\n    _index: function(value) {\n        var index = value;\n\n        if (value instanceof Date) {\n            index = this.categoryAxis.categoryIndex(value);\n        }\n\n        return index;\n    },\n\n    _value: function(index) {\n        var value = index;\n        if (this._dateAxis) {\n            value = this.categoryAxis.categoryAt(index);\n            if (value > this.options.max) {\n                value = this.options.max;\n            }\n        }\n\n        return value;\n    },\n\n    _slot: function(value) {\n        var categoryAxis = this.categoryAxis;\n        var index = this._index(value);\n\n        return categoryAxis.getSlot(index, index, true);\n    },\n\n    move: function(from, to) {\n        var options = this.options;\n        var reverse = this.categoryAxis.options.reverse;\n        var offset = options.offset;\n        var padding = options.padding;\n        var border = options.selection.border;\n        var left = reverse ? to : from;\n        var right = reverse ? from : to;\n        var edge = 'x' + (reverse ? 2 : 1);\n\n        var box = this._slot(left);\n        var leftMaskWidth = round(box[edge] - offset.left + padding.left);\n\n        elementStyles(this.leftMask, {\n            width: leftMaskWidth\n        });\n        elementStyles(this.selection, {\n            left: leftMaskWidth\n        });\n\n        box = this._slot(right);\n\n        var rightMaskWidth = round(options.width - (box[edge] - offset.left + padding.left));\n        elementStyles(this.rightMask, {\n            width: rightMaskWidth\n        });\n\n        var distance = options.width - rightMaskWidth;\n        if (distance !== options.width) {\n            distance += border.right;\n        }\n\n        elementStyles(this.rightMask, {\n            left: distance\n        });\n        elementStyles(this.selection, {\n            width: Math.max(options.width - (leftMaskWidth + rightMaskWidth) - border.right, 0)\n        });\n    },\n\n    set: function(from, to) {\n        var options = this.options;\n        var min = this._index(options.min);\n        var max = this._index(options.max);\n        var fromValue = limitValue(this._index(from), min, max);\n        var toValue = limitValue(this._index(to), fromValue + 1, max);\n\n        if (options.visible) {\n            this.move(fromValue, toValue);\n        }\n\n        options.from = this._value(fromValue);\n        options.to = this._value(toValue);\n    },\n\n    expand: function(delta) {\n        var options = this.options;\n        var min = this._index(options.min);\n        var max = this._index(options.max);\n        var zDir = options.mousewheel.zoom;\n        var from = this._index(options.from);\n        var to = this._index(options.to);\n        var range = { from: from, to: to };\n        var oldRange = deepExtend({}, range);\n\n        if (this._state) {\n            range = this._state.range;\n        }\n\n        if (zDir !== RIGHT) {\n            range.from = limitValue(\n                limitValue(from - delta, 0, to - 1),\n                min, max\n            );\n        }\n\n        if (zDir !== LEFT) {\n            range.to = limitValue(\n                limitValue(to + delta, range.from + 1, max),\n                min,\n                max\n            );\n        }\n\n        if (range.from !== oldRange.from || range.to !== oldRange.to) {\n            this.set(range.from, range.to);\n            return true;\n        }\n    },\n\n    zoom: function(delta, coords) {\n        var options = this.options;\n        var min = this._index(options.min);\n        var max = this._index(options.max);\n        var from = this._index(options.from);\n        var to = this._index(options.to);\n        var range = { from: from, to: to };\n        var oldRange = deepExtend({}, range);\n\n        var ref = this.categoryAxis.options;\n        var reverse = ref.reverse;\n        var origin = X + (reverse ? '2' : '1');\n        var lineBox = this.categoryAxis.lineBox();\n        var relative = Math.abs(lineBox[origin] - coords[X]);\n        var size = lineBox.width();\n        var position = round(relative / size, 2);\n        var minDelta = round(position * delta);\n        var maxDelta = round((1 - position) * delta);\n\n        if (this._state) {\n            range = this._state.range;\n        }\n\n        range.from = limitValue(\n            limitValue(from - minDelta, 0, to - 1),\n            min, max\n        );\n\n        range.to = limitValue(\n            limitValue(to + maxDelta, range.from + 1, max),\n            min,\n            max\n        );\n\n        if (range.from !== oldRange.from || range.to !== oldRange.to) {\n            this.set(range.from, range.to);\n            return true;\n        }\n    },\n\n    trigger: function(name, args) {\n        return (this.observer || this.chart).trigger(name, args);\n    }\n});\n\nsetDefaultOptions(Selection, {\n    visible: true,\n    mousewheel: {\n        zoom: \"both\"\n    },\n    min: MIN_VALUE,\n    max: MAX_VALUE\n});\n\nvar Tooltip = BaseTooltip.extend({\n    show: function(point) {\n        if (!point || !point.tooltipAnchor || (this._current && this._current === point)) {\n            return;\n        }\n\n        var options = deepExtend({}, this.options, point.options.tooltip);\n        var anchor = point.tooltipAnchor();\n\n        if (anchor) {\n            this._current = point;\n            BaseTooltip.fn.show.call(this, {\n                point: point,\n                anchor: anchor\n            }, options, point);\n        } else {\n            this.hide();\n        }\n    },\n\n    hide: function() {\n        delete this._current;\n        BaseTooltip.fn.hide.call(this);\n    }\n});\n\nvar SharedTooltip = BaseTooltip.extend({\n    init: function(plotArea, options) {\n        BaseTooltip.fn.init.call(this, plotArea.chartService, options);\n\n        this.plotArea = plotArea;\n        this.formatService = plotArea.chartService.format;\n    },\n\n    showAt: function(points, coords) {\n        var tooltipPoints = grep(points, function(point) {\n            var tooltip = point.series.tooltip;\n            var excluded = tooltip && tooltip.visible === false;\n\n            return !excluded;\n        });\n\n        if (tooltipPoints.length > 0) {\n            var point = tooltipPoints[0];\n            var slot = this.plotArea.categoryAxis.getSlot(point.categoryIx);\n\n            var anchor = coords ? this._slotAnchor(coords, slot) : this._defaultAnchor(point, slot);\n\n            this.show({\n                anchor: anchor,\n                shared: true,\n                points: points,\n                category: point.category,\n                categoryText: this.formatService.auto(this.options.categoryFormat, point.category),\n                series: this.plotArea.series\n            }, this.options);\n        }\n    },\n\n    _slotAnchor: function(point, slot) {\n        var axis = this.plotArea.categoryAxis;\n        var align = {\n            horizontal: \"left\",\n            vertical: \"center\"\n        };\n\n        if (!axis.options.vertical) {\n            point.x = slot.center().x;\n        }\n\n        return {\n            point: point,\n            align: align\n        };\n    },\n\n    _defaultAnchor: function(point, slot) {\n        var box = point.owner.pane.chartsBox();\n        var vertical = this.plotArea.categoryAxis.options.vertical;\n        var center = box.center();\n        var slotCenter = slot.center();\n        var align = {\n            horizontal: \"center\",\n            vertical: \"center\"\n        };\n\n        var centerPoint;\n        if (vertical) {\n            centerPoint = new Point(center.x, slotCenter.y);\n        } else {\n            centerPoint = new Point(slotCenter.x, center.y);\n        }\n\n        return {\n            point: centerPoint,\n            align: align\n        };\n    }\n});\n\nsetDefaultOptions(SharedTooltip, {\n    categoryFormat: '{0:d}'\n});\n\nvar BarChartAnimation = Animation.extend({\n    setup: function() {\n        var ref = this;\n        var element = ref.element;\n        var options = ref.options;\n        var bbox = element.bbox();\n\n        if (bbox) {\n            this.origin = options.origin;\n            var axis = options.vertical ? Y : X;\n\n            var fromScale = this.fromScale = new GeometryPoint(1, 1);\n            fromScale[axis] = START_SCALE;\n\n            element.transform(transform()\n                .scale(fromScale.x, fromScale.y)\n            );\n        } else {\n            this.abort();\n        }\n    },\n\n    step: function(pos) {\n        var scaleX = dataviz.interpolateValue(this.fromScale.x, 1, pos);\n        var scaleY = dataviz.interpolateValue(this.fromScale.y, 1, pos);\n\n        this.element.transform(transform()\n            .scale(scaleX, scaleY, this.origin)\n        );\n    },\n\n    abort: function() {\n        Animation.fn.abort.call(this);\n        this.element.transform(null);\n    }\n});\n\nsetDefaultOptions(BarChartAnimation, {\n    duration: INITIAL_ANIMATION_DURATION\n});\n\nAnimationFactory.current.register(BAR, BarChartAnimation);\n\nvar BubbleAnimation = Animation.extend({\n    setup: function() {\n        var center = this.center = this.element.bbox().center();\n        this.element.transform(transform()\n            .scale(START_SCALE, START_SCALE, center)\n        );\n    },\n\n    step: function(pos) {\n        this.element.transform(transform()\n            .scale(pos, pos, this.center)\n        );\n    }\n});\n\nsetDefaultOptions(BubbleAnimation, {\n    easing: \"easeOutElastic\"\n});\n\nAnimationFactory.current.register(BUBBLE, BubbleAnimation);\n\nvar FadeInAnimation = Animation.extend({\n    setup: function() {\n        this.fadeTo = this.element.opacity();\n        this.element.opacity(0);\n    },\n\n    step: function(pos) {\n        this.element.opacity(pos * this.fadeTo);\n    }\n});\n\nsetDefaultOptions(FadeInAnimation, {\n    duration: 200,\n    easing: \"linear\"\n});\n\nAnimationFactory.current.register(FADEIN, FadeInAnimation);\n\nvar PieAnimation = Animation.extend({\n    setup: function() {\n        this.element.transform(transform()\n            .scale(START_SCALE, START_SCALE, this.options.center)\n        );\n    },\n\n    step: function(pos) {\n        this.element.transform(transform()\n            .scale(pos, pos, this.options.center)\n        );\n    }\n});\n\nsetDefaultOptions(PieAnimation, {\n    easing: \"easeOutElastic\",\n    duration: INITIAL_ANIMATION_DURATION\n});\n\nAnimationFactory.current.register(PIE, PieAnimation);\n\nvar ScatterLineChart = ScatterChart.extend({\n    render: function() {\n        ScatterChart.fn.render.call(this);\n\n        this.renderSegments();\n    },\n\n    createSegment: function(linePoints, currentSeries, seriesIx) {\n        var style = currentSeries.style;\n        var pointType;\n\n        if (style === SMOOTH) {\n            pointType = SplineSegment;\n        } else {\n            pointType = LineSegment;\n        }\n\n        return new pointType(linePoints, currentSeries, seriesIx);\n    },\n\n    animationPoints: function() {\n        var points = ScatterChart.fn.animationPoints.call(this);\n        return points.concat(this._segments);\n    },\n\n    createMissingValue: function(value, missingValues) {\n        if (missingValues === ZERO) {\n            var missingValue = {\n                x: value.x,\n                y: value.y\n            };\n            if (!hasValue(missingValue.x)) {\n                missingValue.x = 0;\n            }\n            if (!hasValue(missingValue.y)) {\n                missingValue.y = 0;\n            }\n            return missingValue;\n        }\n    }\n});\n\ndeepExtend(ScatterLineChart.prototype, LineChartMixin);\n\nfunction autoMajorUnit(min, max) {\n    var diff = round(max - min, DEFAULT_PRECISION - 1);\n\n    if (diff === 0) {\n        if (max === 0) {\n            return 0.1;\n        }\n\n        diff = Math.abs(max);\n    }\n\n    var scale = Math.pow(10, Math.floor(Math.log(diff) / Math.log(10)));\n    var relativeValue = round((diff / scale), DEFAULT_PRECISION);\n    var scaleMultiplier = 1;\n\n    if (relativeValue < 1.904762) {\n        scaleMultiplier = 0.2;\n    } else if (relativeValue < 4.761904) {\n        scaleMultiplier = 0.5;\n    } else if (relativeValue < 9.523809) {\n        scaleMultiplier = 1;\n    } else {\n        scaleMultiplier = 2;\n    }\n\n    return round(scale * scaleMultiplier, DEFAULT_PRECISION);\n}\n\nfunction getScatterTrendlineData(valueMapper, range, options) {\n    var data = [];\n    var xMin = range.xMin;\n    var xMax = range.xMax;\n\n    var forecast = (options || {}).forecast;\n    if (forecast) {\n        if (forecast.before > 0) {\n            xMin -= forecast.before;\n        }\n\n        if (forecast.after > 0) {\n            xMax += forecast.after;\n        }\n    }\n\n    var samplingInterval = (options || {}).samplingInterval;\n    var delta = valueOrDefault(samplingInterval,  autoMajorUnit(xMin, xMax) / 10);\n    if (samplingInterval <= 0) {\n        delta = xMax - xMin;\n    }\n\n    for (var x = xMin; x <= xMax; x += delta) {\n        data.push([\n            x,\n            valueMapper(x)\n        ]);\n    }\n\n    return data;\n}\n\nfunction scatterExponentialTrendline(context) {\n    var options = context.options;\n    var seriesValues = context.seriesValues;\n\n    var data = getData$6({ seriesValues: seriesValues, options: options });\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'scatterLine',\n            data: data});\n    }\n\n    return null;\n}\n\nvar valueGetter$6 = function (fieldName) { return function (ref) {\n        var valueFields = ref.valueFields;\n\n        return ({ xValue: valueFields.x, yValue: Math.log(valueFields[fieldName]) });\n }    };\n\nfunction getData$6(ref) {\n    var seriesValues = ref.seriesValues;\n    var options = ref.options;\n\n    var sourceValues = seriesValues();\n    if (!checkAllPositive(sourceValues, options.field)) {\n        return null;\n    }\n\n    var ref$1 = calculateSlope(sourceValues, valueGetter$6(options.field));\n    var slope = ref$1.slope;\n    var intercept = ref$1.intercept;\n    var count = ref$1.count;\n    var xMin = ref$1.xMin;\n    var xMax = ref$1.xMax;\n    var range = { xMin: xMin, xMax: xMax };\n\n    if (count > 0) {\n        // Exponential trendline equation:\n        // y = a * e ^ (b * x)\n        var a = Math.exp(intercept);\n        var b = slope;\n\n        return getScatterTrendlineData(function (x) { return a * Math.exp(b * x); }, range, options.trendline);\n    }\n\n    return null;\n}\n\nvar scatterValueGetter = function (fieldName) { return function (ref) {\n        var valueFields = ref.valueFields;\n\n        return ({ xValue: valueFields.x, yValue: valueFields[fieldName] });\n }    };\n\nfunction scatterLinearTrendline(context) {\n    var options = context.options;\n    var seriesValues = context.seriesValues;\n\n    var data = getData$7({ seriesValues: seriesValues, options: options });\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'scatterLine',\n            data: data});\n    }\n\n    return null;\n}\n\nfunction getData$7(ref) {\n    var seriesValues = ref.seriesValues;\n    var options = ref.options;\n\n    var ref$1 = calculateSlope(seriesValues(), scatterValueGetter(options.field));\n    var slope = ref$1.slope;\n    var intercept = ref$1.intercept;\n    var count = ref$1.count;\n    var xMin = ref$1.xMin;\n    var xMax = ref$1.xMax;\n    var range = { xMin: xMin, xMax: xMax };\n\n    if (count > 0) {\n        return getScatterTrendlineData(function (x) { return slope * x + intercept; }, range, options.trendline);\n    }\n\n    return null;\n}\n\nfunction xValueLimits(sourceValues, valueGetter) {\n    var xMin = Number.MAX_VALUE;\n    var xMax = Number.MIN_VALUE;\n\n    for (var i = 0; i < sourceValues.length; i++) {\n        var value = sourceValues[i];\n        var ref = valueGetter(value);\n        var xValue = ref.xValue;\n        var yValue = ref.yValue;\n\n        if (isFinite(xValue) && xValue !== null && isFinite(yValue) && yValue !== null) {\n            xMin = Math.min(xValue, xMin);\n            xMax = Math.max(xValue, xMax);\n        }\n    }\n\n    return { xMin: xMin, xMax: xMax };\n}\n\nfunction scatterLogarithmicTrendline(context) {\n    var options = context.options;\n    var seriesValues = context.seriesValues;\n\n    var data = getData$8({ seriesValues: seriesValues, options: options });\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'scatterLine',\n            data: data});\n    }\n\n    return null;\n}\n\nvar valueGetter$7 = function (fieldName) { return function (ref) {\n        var valueFields = ref.valueFields;\n\n        return ({ xValue: valueFields.x, yValue: valueFields[fieldName] });\n }    };\n\nvar logValueGetter = function (fieldName) { return function (ref) {\n        var valueFields = ref.valueFields;\n\n        return ({ xValue: Math.log(valueFields.x), yValue: valueFields[fieldName] });\n }    };\n\nfunction getData$8(ref) {\n    var seriesValues = ref.seriesValues;\n    var options = ref.options;\n\n    var sourceValues = seriesValues();\n    if (!checkAllPositive(sourceValues, 'x')) {\n        return null;\n    }\n\n    var ref$1 = calculateSlope(sourceValues, logValueGetter(options.field));\n    var slope = ref$1.slope;\n    var intercept = ref$1.intercept;\n    var count = ref$1.count;\n    var range = xValueLimits(sourceValues, valueGetter$7(options.field));\n\n    if (count > 0) {\n        // Logarithmic trendline equation:\n        // y = a * ln (x) + b\n        var a = slope;\n        var b = intercept;\n\n        return getScatterTrendlineData(function (x) { return a * Math.log(x) + b; }, range, options.trendline);\n    }\n\n    return null;\n}\n\nfunction scatterMovingAverageTrendline(context) {\n    var options = context.options;\n\n    var data = getData$9(context);\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'scatterLine',\n            data: data});\n    }\n\n    return null;\n}\n\nfunction getData$9(ref) {\n    var options = ref.options;\n    var seriesValues = ref.seriesValues;\n\n    var period = (options.trendline || {}).period || MIN_MOVING_AVERAGE_PERIOD;\n    var range = { before: period, after: period };\n    var data = calculateMovingAverage(seriesValues(range), scatterValueGetter(options.field), period);\n\n    if (data.length > 0) {\n        return data;\n    }\n\n    return null;\n}\n\nfunction scatterPolynomialTrendline(context) {\n    var options = context.options;\n    var seriesValues = context.seriesValues;\n\n    var data = getData$10({ seriesValues: seriesValues, options: options });\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'scatterLine',\n            data: data});\n    }\n\n    return null;\n}\n\nfunction getData$10(ref) {\n    var seriesValues = ref.seriesValues;\n    var options = ref.options;\n\n    var order = (options.trendline || {}).order;\n    var valueGetter = scatterValueGetter(options.field);\n    var ref$1 = calculatePolynomial(seriesValues(), valueGetter, order);\n    var count = ref$1.count;\n    var valueMapper = ref$1.valueMapper;\n    var xMin = ref$1.xMin;\n    var xMax = ref$1.xMax;\n    var range = { xMin: xMin, xMax: xMax };\n\n    if (count > 0) {\n        // Polynomial trendline equation:\n        // y = aN * x^N + ... + a2 * x^2 + a1 * x + a0\n        return getScatterTrendlineData(valueMapper, range, options.trendline);\n    }\n\n    return null;\n}\n\nfunction scatterPowerTrendline(context) {\n    var options = context.options;\n    var seriesValues = context.seriesValues;\n\n    var data = getData$11({ seriesValues: seriesValues, options: options });\n    if (data) {\n        return $.extend({}, options,\n\n            {type: 'scatterLine',\n            data: data});\n    }\n\n    return null;\n}\n\nvar valueGetter$8 = function (fieldName) { return function (ref) {\n        var valueFields = ref.valueFields;\n\n        return ({ xValue: Math.log(valueFields.x), yValue: Math.log(valueFields[fieldName]) });\n }    };\n\nfunction getData$11(ref) {\n    var seriesValues = ref.seriesValues;\n    var options = ref.options;\n\n    var sourceValues = seriesValues();\n    if (!checkAllPositive(sourceValues, 'x')) {\n        return null;\n    }\n\n    var ref$1 = calculateSlope(sourceValues, valueGetter$8(options.field));\n    var slope = ref$1.slope;\n    var intercept = ref$1.intercept;\n    var count = ref$1.count;\n    var range = xValueLimits(sourceValues, scatterValueGetter(options.field));\n\n    if (count > 0) {\n        // Power trendline equation:\n        // y = a * x ^ b\n        var a = Math.exp(intercept);\n        var b = slope;\n        return getScatterTrendlineData(function (x) { return a * Math.pow(x, b); }, range, options.trendline);\n    }\n\n    return null;\n}\n\nvar scatterRegistry = {};\nscatterRegistry[TRENDLINE_EXPONENTIAL] = scatterExponentialTrendline;\nscatterRegistry[TRENDLINE_LINEAR] = scatterLinearTrendline;\nscatterRegistry[TRENDLINE_LOGARITHMIC] = scatterLogarithmicTrendline;\nscatterRegistry[TRENDLINE_MOVING_AVERAGE] = scatterMovingAverageTrendline;\nscatterRegistry[TRENDLINE_POLYNOMIAL] = scatterPolynomialTrendline;\nscatterRegistry[TRENDLINE_POWER] = scatterPowerTrendline;\n\nvar XYPlotArea = PlotAreaBase.extend({\n    initFields: function() {\n        this.namedXAxes = {};\n        this.namedYAxes = {};\n\n        this.xAxisRangeTracker = new AxisGroupRangeTracker();\n        this.yAxisRangeTracker = new AxisGroupRangeTracker();\n    },\n\n    render: function(panes) {\n        var this$1$1 = this;\n        if (panes === void 0) { panes = this.panes; }\n\n        this.series = [].concat( this.originalSeries );\n        this.createTrendlineSeries();\n\n        var seriesByPane = this.groupSeriesByPane();\n        for (var i = 0; i < panes.length; i++) {\n            var pane = panes[i];\n            var paneSeries = seriesByPane[pane.options.name || \"default\"] || [];\n            this$1$1.addToLegend(paneSeries);\n            var filteredSeries = this$1$1.filterVisibleSeries(paneSeries);\n\n            if (!filteredSeries) {\n                continue;\n            }\n\n            this$1$1.createScatterChart(\n                filterSeriesByType(filteredSeries, SCATTER),\n                pane\n            );\n\n            this$1$1.createScatterLineChart(\n                filterSeriesByType(filteredSeries, SCATTER_LINE),\n                pane\n            );\n\n            this$1$1.createBubbleChart(\n                filterSeriesByType(filteredSeries, BUBBLE),\n                pane\n            );\n        }\n\n        this.createAxes(panes);\n    },\n\n    appendChart: function(chart, pane) {\n        this.xAxisRangeTracker.update(chart.xAxisRanges);\n        this.yAxisRangeTracker.update(chart.yAxisRanges);\n\n        PlotAreaBase.fn.appendChart.call(this, chart, pane);\n    },\n\n    removeAxis: function(axis) {\n        var axisName = axis.options.name;\n\n        PlotAreaBase.fn.removeAxis.call(this, axis);\n\n        if (axis.options.vertical) {\n            this.yAxisRangeTracker.reset(axisName);\n            delete this.namedYAxes[axisName];\n        } else {\n            this.xAxisRangeTracker.reset(axisName);\n            delete this.namedXAxes[axisName];\n        }\n\n        if (axis === this.axisX) {\n            delete this.axisX;\n        }\n\n        if (axis === this.axisY) {\n            delete this.axisY;\n        }\n    },\n\n    seriesPaneName: function(series) {\n        var options = this.options;\n        var xAxisName = series.xAxis;\n        var xAxisOptions = [].concat(options.xAxis);\n        var xAxis = grep(xAxisOptions, function(a) { return a.name === xAxisName; })[0];\n        var yAxisName = series.yAxis;\n        var yAxisOptions = [].concat(options.yAxis);\n        var yAxis = grep(yAxisOptions, function(a) { return a.name === yAxisName; })[0];\n        var panes = options.panes || [ {} ];\n        var defaultPaneName = panes[0].name || \"default\";\n        var paneName = (xAxis || {}).pane || (yAxis || {}).pane || defaultPaneName;\n\n        return paneName;\n    },\n\n    createScatterChart: function(series, pane) {\n        if (series.length > 0) {\n            this.appendChart(\n                new ScatterChart(this, { series: series, clip: pane.options.clip }),\n                pane\n            );\n        }\n    },\n\n    createScatterLineChart: function(series, pane) {\n        if (series.length > 0) {\n            this.appendChart(\n                new ScatterLineChart(this, { series: series, clip: pane.options.clip }),\n                pane\n            );\n        }\n    },\n\n    createBubbleChart: function(series, pane) {\n        if (series.length > 0) {\n            this.appendChart(\n                new BubbleChart(this, { series: series, clip: pane.options.clip }),\n                pane\n            );\n        }\n    },\n\n    createXYAxis: function(options, vertical, axisIndex) {\n        var axisName = options.name;\n        var namedAxes = vertical ? this.namedYAxes : this.namedXAxes;\n        var tracker = vertical ? this.yAxisRangeTracker : this.xAxisRangeTracker;\n        var axisOptions = deepExtend({ reverse: !vertical && this.chartService.rtl }, options, { vertical: vertical });\n        var isLog = equalsIgnoreCase(axisOptions.type, LOGARITHMIC);\n        var defaultRange = tracker.query();\n        var defaultAxisRange = isLog ? { min: 0.1, max: 1 } : { min: 0, max: 1 };\n        var range = tracker.query(axisName) || defaultRange || defaultAxisRange;\n        var typeSamples = [ axisOptions.min, axisOptions.max ];\n        var series = this.series;\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var seriesAxisName = currentSeries[vertical ? \"yAxis\" : \"xAxis\"];\n            if ((seriesAxisName === axisOptions.name) || (axisIndex === 0 && !seriesAxisName)) {\n                var firstPointValue = SeriesBinder.current.bindPoint(currentSeries, 0).valueFields;\n                typeSamples.push(firstPointValue[vertical ? \"y\" : \"x\"]);\n\n                break;\n            }\n        }\n\n        if (axisIndex === 0 && defaultRange) {\n            range.min = Math.min(range.min, defaultRange.min);\n            range.max = Math.max(range.max, defaultRange.max);\n        }\n\n        var inferredDate;\n\n        for (var i = 0; i < typeSamples.length; i++) {\n            if (typeSamples[i] instanceof Date) {\n                inferredDate = true;\n                break;\n            }\n        }\n\n        var axisType;\n        if (equalsIgnoreCase(axisOptions.type, DATE) || (!axisOptions.type && inferredDate)) {\n            axisType = dataviz.DateValueAxis;\n        } else if (isLog) {\n            axisType = dataviz.LogarithmicAxis;\n        } else {\n            axisType = dataviz.NumericAxis;\n        }\n\n        var axis = new axisType(range.min, range.max, axisOptions, this.chartService);\n        axis.axisIndex = axisIndex;\n\n        if (axisName) {\n            if (namedAxes[axisName]) {\n                throw new Error(((vertical ? \"Y\" : \"X\") + \" axis with name \" + axisName + \" is already defined\"));\n            }\n            namedAxes[axisName] = axis;\n        }\n\n        this.appendAxis(axis);\n\n        return axis;\n    },\n\n    createAxes: function(panes) {\n        var this$1$1 = this;\n\n        var options = this.options;\n        var xAxesOptions = [].concat(options.xAxis);\n        var xAxes = [];\n        var yAxesOptions = [].concat(options.yAxis);\n        var yAxes = [];\n\n        for (var idx = 0; idx < xAxesOptions.length; idx++) {\n            var axisPane = this$1$1.findPane(xAxesOptions[idx].pane);\n            if (inArray(axisPane, panes)) {\n                xAxes.push(this$1$1.createXYAxis(xAxesOptions[idx], false, idx));\n            }\n        }\n\n        for (var idx$1 = 0; idx$1 < yAxesOptions.length; idx$1++) {\n            var axisPane$1 = this$1$1.findPane(yAxesOptions[idx$1].pane);\n            if (inArray(axisPane$1, panes)) {\n                yAxes.push(this$1$1.createXYAxis(yAxesOptions[idx$1], true, idx$1));\n            }\n        }\n\n        this.axisX = this.axisX || xAxes[0];\n        this.axisY = this.axisY || yAxes[0];\n    },\n\n    _dispatchEvent: function(chart, e, eventType) {\n        var coords = chart._eventCoordinates(e);\n        var point = new Point(coords.x, coords.y);\n        var allAxes = this.axes;\n        var length = allAxes.length;\n        var xValues = [];\n        var yValues = [];\n\n        for (var i = 0; i < length; i++) {\n            var axis = allAxes[i];\n            var values = axis.options.vertical ? yValues : xValues;\n            var currentValue = axis.getValue(point);\n            if (currentValue !== null) {\n                values.push(currentValue);\n            }\n        }\n\n        if (xValues.length > 0 && yValues.length > 0) {\n            chart.trigger(eventType, {\n                element: eventElement(e),\n                originalEvent: e,\n                x: singleItemOrArray(xValues),\n                y: singleItemOrArray(yValues)\n            });\n        }\n    },\n\n    updateAxisOptions: function(axis, options) {\n        var vertical = axis.options.vertical;\n        var axes = this.groupAxes(this.panes);\n        var index = (vertical ? axes.y : axes.x).indexOf(axis);\n\n        updateAxisOptions$1(this.options, index, vertical, options);\n        updateAxisOptions$1(this.originalOptions, index, vertical, options);\n    },\n\n    trendlineFactory: function(options, series) {\n        var seriesValues = this.seriesValues.bind(this, series.index);\n\n        var trendline = trendlineFactory(scatterRegistry, options.type, {\n            options: options,\n            seriesValues: seriesValues\n        });\n\n        if (trendline) {\n            // Inherit settings\n            trendline.xAxis = series.xAxis;\n            trendline.yAxis = series.yAxis;\n        }\n\n        return trendline;\n    },\n\n    seriesValues: function(seriesIx) {\n        var this$1$1 = this;\n\n        var result = [];\n        var currentSeries = this.series[seriesIx];\n\n        for (var pointIx = 0; pointIx < currentSeries.data.length; pointIx++) {\n            var data = this$1$1.bindPoint(currentSeries, pointIx);\n            result.push({ pointIx: pointIx, valueFields: data.valueFields });\n        }\n\n        return result;\n    }\n});\n\nfunction updateAxisOptions$1(targetOptions, axisIndex, vertical, options) {\n    var axisOptions = ([].concat(vertical ? targetOptions.yAxis : targetOptions.xAxis))[axisIndex];\n    deepExtend(axisOptions, options);\n}\n\nsetDefaultOptions(XYPlotArea, {\n    xAxis: {},\n    yAxis: {}\n});\n\ndeepExtend(XYPlotArea.prototype, PlotAreaEventsMixin);\n\nvar PieSegment = ChartElement.extend({\n    init: function(value, sector, options) {\n        ChartElement.fn.init.call(this, options);\n\n        this.value = value;\n        this.sector = sector;\n    },\n\n    render: function() {\n        if (this._rendered || this.visible === false) {\n            return;\n        }\n        this._rendered = true;\n\n        this.createLabel();\n    },\n\n    createLabel: function() {\n        var labels = this.options.labels;\n        var chartService = this.owner.chartService;\n        var labelText = this.getLabelText(labels);\n\n        if (labels.visible && (labelText || labelText === 0)) {\n            if (labels.position === CENTER || labels.position === INSIDE_END) {\n                if (!labels.color) {\n                    labels.color = autoTextColor(this.options.color);\n                }\n                if (!labels.background) {\n                    labels.background = this.options.color;\n                }\n            } else {\n                var themeLabels = chartService.theme.seriesDefaults.labels;\n                labels.color = labels.color || themeLabels.color;\n                labels.background = labels.background || themeLabels.background;\n            }\n\n            this.label = new TextBox(labelText, deepExtend({}, labels, {\n                align: CENTER,\n                vAlign: \"\",\n                animation: {\n                    type: FADEIN,\n                    delay: this.animationDelay\n                }\n            }), this.pointData());\n\n            this.append(this.label);\n        }\n    },\n\n    getLabelText: function(options) {\n        var labelTemplate = getTemplate(options);\n\n        if (labelTemplate) {\n            return labelTemplate(this.pointData());\n        }\n\n        return this.owner.chartService.format.auto(options.format, this.value);\n    },\n\n    reflow: function(targetBox) {\n        this.render();\n        this.box = targetBox;\n        this.reflowLabel();\n    },\n\n    reflowLabel: function() {\n        var ref = this;\n        var labelsOptions = ref.options.labels;\n        var label = ref.label;\n        var sector = this.sector.clone();\n        var labelsDistance = labelsOptions.distance;\n        var angle = sector.middle();\n\n        if (label) {\n            var labelHeight = label.box.height();\n            var labelWidth = label.box.width();\n            var lp;\n\n            if (labelsOptions.position === CENTER) {\n                sector.radius = Math.abs((sector.radius - labelHeight) / 2) + labelHeight;\n                lp = sector.point(angle);\n                label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));\n            } else if (labelsOptions.position === INSIDE_END) {\n                sector.radius = sector.radius - labelHeight / 2;\n                lp = sector.point(angle);\n                label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));\n            } else {\n                var x1;\n                lp = sector.clone().expand(labelsDistance).point(angle);\n                if (lp.x >= sector.center.x) {\n                    x1 = lp.x + labelWidth;\n                    label.orientation = RIGHT;\n                } else {\n                    x1 = lp.x - labelWidth;\n                    label.orientation = LEFT;\n                }\n                label.reflow(new Box(x1, lp.y - labelHeight, lp.x, lp.y));\n            }\n        }\n    },\n\n    createVisual: function() {\n        var this$1$1 = this;\n\n        var ref = this;\n        var sector = ref.sector;\n        var options = ref.options;\n\n        ChartElement.fn.createVisual.call(this);\n\n        this.addAccessibilityAttributesToVisual();\n\n        if (this.value) {\n            if (options.visual) {\n                var startAngle = (sector.startAngle + 180) % 360;\n                var visual = options.visual({\n                    category: this.category,\n                    dataItem: this.dataItem,\n                    value: this.value,\n                    series: this.series,\n                    percentage: this.percentage,\n                    center: new GeometryPoint(sector.center.x, sector.center.y),\n                    radius: sector.radius,\n                    innerRadius: sector.innerRadius,\n                    startAngle: startAngle,\n                    endAngle: startAngle + sector.angle,\n                    options: options,\n                    sender: this.getSender(),\n                    createVisual: function () {\n                        var group = new Group();\n                        this$1$1.createSegmentVisual(group);\n\n                        return group;\n                    }\n                });\n\n                if (visual) {\n                    this.visual.append(visual);\n                }\n            } else {\n                this.createSegmentVisual(this.visual);\n            }\n        }\n    },\n\n    createSegmentVisual: function(group) {\n        var ref = this;\n        var sector = ref.sector;\n        var options = ref.options;\n        var borderOptions = options.border || {};\n        var border = borderOptions.width > 0 ? {\n            stroke: {\n                color: borderOptions.color,\n                width: borderOptions.width,\n                opacity: borderOptions.opacity,\n                dashType: borderOptions.dashType\n            }\n        } : {};\n        var color = options.color;\n        var fill = {\n            color: color,\n            opacity: options.opacity\n        };\n        var visual = this.createSegment(sector, deepExtend({\n            fill: fill,\n            stroke: {\n                opacity: options.opacity\n            },\n            zIndex: options.zIndex\n        }, border));\n\n        group.append(visual);\n\n        if (hasGradientOverlay(options)) {\n            group.append(this.createGradientOverlay(visual, {\n                baseColor: color,\n                fallbackFill: fill\n            }, deepExtend({\n                center: [ sector.center.x, sector.center.y ],\n                innerRadius: sector.innerRadius,\n                radius: sector.radius,\n                userSpace: true\n            }, options.overlay)));\n        }\n    },\n\n    createSegment: function(sector, options) {\n        if (options.singleSegment) {\n            return new Circle(new GeometryCircle(new GeometryPoint(sector.center.x, sector.center.y), sector.radius), options);\n        }\n\n        return dataviz.ShapeBuilder.current.createRing(sector, options);\n    },\n\n    createAnimation: function() {\n        var ref = this;\n        var options = ref.options;\n        var center = ref.sector.center;\n\n        deepExtend(options, {\n            animation: {\n                center: [ center.x, center.y ],\n                delay: this.animationDelay\n            }\n        });\n\n        ChartElement.fn.createAnimation.call(this);\n    },\n\n    createHighlight: function(options) {\n        var highlight = this.options.highlight || {};\n        var border = highlight.border || {};\n\n        return this.createSegment(this.sector, deepExtend({}, options, {\n            fill: {\n                color: highlight.color,\n                opacity: highlight.opacity\n            },\n            stroke: {\n                opacity: border.opacity,\n                width: border.width,\n                color: border.color\n            }\n        }));\n    },\n\n    highlightVisual: function() {\n        return this.visual.children[0];\n    },\n\n    highlightVisualArgs: function() {\n        var sector = this.sector;\n\n        return {\n            options: this.options,\n            radius: sector.radius,\n            innerRadius: sector.innerRadius,\n            center: new GeometryPoint(sector.center.x, sector.center.y),\n            startAngle: sector.startAngle,\n            endAngle: sector.angle + sector.startAngle,\n            visual: this.visual\n        };\n    },\n\n    createFocusHighlight: function(style) {\n        var borderWidth = this.options.accessibility.highlight.border.width;\n        var result = this.createSegment(this.sector, deepExtend({}, style, {\n            stroke: {\n                width: borderWidth * 2\n            }\n        }));\n\n        var clipPath = new MultiPath();\n\n        clipPath.paths.push(Path.fromRect(result.bbox()));\n        clipPath.paths.push(this.createSegment(this.sector, {}));\n\n        result.clip(clipPath);\n\n        return result;\n    },\n\n    tooltipAnchor: function() {\n        var sector = this.sector.clone().expand(TOOLTIP_OFFSET);\n        var midAndle = sector.middle();\n        var midPoint = sector.point(midAndle);\n\n        return {\n            point: midPoint,\n            align: tooltipAlignment(midAndle + 180)\n        };\n    },\n\n    formatValue: function(format) {\n        return this.owner.formatPointValue(this, format);\n    },\n\n    pointData: function() {\n        return {\n            dataItem: this.dataItem,\n            category: this.category,\n            value: this.value,\n            series: this.series,\n            percentage: this.percentage\n        };\n    },\n\n    getIndex: function() {\n        return this.index;\n    }\n});\n\nvar RAD_30 = round(rad(30), DEFAULT_PRECISION);\nvar RAD_60 = round(rad(60), DEFAULT_PRECISION);\n\nfunction tooltipAlignment(angle) {\n    var radians = rad(angle);\n    var sine = round(Math.sin(radians), DEFAULT_PRECISION);\n    var cosine = round(Math.cos(radians), DEFAULT_PRECISION);\n\n    var horizontal;\n    if (Math.abs(sine) > RAD_60) {\n        horizontal = CENTER;\n    } else if (cosine < 0) {\n        horizontal = RIGHT;\n    } else {\n        horizontal = LEFT;\n    }\n\n    var vertical;\n    if (Math.abs(sine) < RAD_30) {\n        vertical = CENTER;\n    } else if (sine < 0) {\n        vertical = BOTTOM;\n    } else {\n        vertical = TOP;\n    }\n\n    return {\n        horizontal: horizontal,\n        vertical: vertical\n    };\n}\n\nsetDefaultOptions(PieSegment, {\n    color: WHITE,\n    overlay: {\n        gradient: \"roundedBevel\"\n    },\n    border: {\n        width: 0.5\n    },\n    labels: {\n        visible: false,\n        distance: 35,\n        font: datavizConstants.DEFAULT_FONT,\n        margin: getSpacing(0.5),\n        align: CIRCLE,\n        zIndex: 1,\n        position: OUTSIDE_END\n    },\n    animation: {\n        type: PIE\n    },\n    highlight: {\n        visible: true,\n        border: {\n            width: 1\n        }\n    },\n    visible: true,\n    accessibility: {\n        role: CHART_POINT_ROLE,\n        className: CHART_POINT_CLASSNAME,\n        ariaRoleDescription: CHART_POINT_ROLE_DESCRIPTION\n    }\n});\n\ndeepExtend(PieSegment.prototype, PointEventsMixin);\ndeepExtend(PieSegment.prototype, AccessibilityAttributesMixin);\n\nvar PieChartMixin = {\n    createLegendItem: function(value, point, options) {\n        var legendOptions = this.options.legend || {};\n        var labelsOptions = legendOptions.labels || {};\n        var inactiveItems = legendOptions.inactiveItems || {};\n        var inactiveItemsLabels = inactiveItems.labels || {};\n\n        if (options && options.visibleInLegend !== false) {\n            var pointVisible = options.visible !== false;\n            var labelTemplate = pointVisible ? getTemplate(labelsOptions) :\n                getTemplate(inactiveItemsLabels) || getTemplate(labelsOptions);\n            var text = options.category;\n\n            if (labelTemplate) {\n                text = labelTemplate({\n                    text: text,\n                    series: options.series,\n                    dataItem: options.dataItem,\n                    percentage: options.percentage,\n                    value: value\n                });\n            }\n\n            var itemLabelOptions, markerColor;\n            if (pointVisible) {\n                itemLabelOptions = {};\n                markerColor = point.color;\n            } else {\n                itemLabelOptions = {\n                    color: inactiveItemsLabels.color,\n                    font: inactiveItemsLabels.font\n                };\n                markerColor = (inactiveItems.markers || {}).color;\n            }\n\n            if (hasValue(text) && text !== \"\") {\n                this.legendItems.push({\n                    active: pointVisible,\n                    pointIndex: options.index,\n                    text: text,\n                    series: options.series,\n                    markerColor: markerColor,\n                    labels: itemLabelOptions\n                });\n            }\n        }\n    }\n};\n\nvar PIE_SECTOR_ANIM_DELAY = 70;\n\nvar PieChart = ChartElement.extend({\n    init: function(plotArea, options) {\n        ChartElement.fn.init.call(this, options);\n\n        this.plotArea = plotArea;\n        this.chartService = plotArea.chartService;\n        this.points = [];\n        this.legendItems = [];\n        this.render();\n    },\n\n    render: function() {\n        this.traverseDataPoints(this.addValue.bind(this));\n    },\n\n    traverseDataPoints: function(callback) {\n        var this$1$1 = this;\n\n        var ref = this;\n        var options = ref.options;\n        var seriesColors = ref.plotArea.options.seriesColors; if (seriesColors === void 0) { seriesColors = []; }\n        var colorsCount = seriesColors.length;\n        var series = options.series;\n        var seriesCount = series.length;\n\n        for (var seriesIx = 0; seriesIx < seriesCount; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var data = currentSeries.data;\n            var ref$1 = bindSegments(currentSeries);\n            var total = ref$1.total;\n            var points = ref$1.points;\n            var count = ref$1.count;\n            var anglePerValue = 360 / total;\n            var constantAngle = (void 0);\n            if (!isFinite(anglePerValue)) {\n                constantAngle = 360 / count;\n            }\n            var currentAngle = (void 0);\n\n            if (defined(currentSeries.startAngle)) {\n                currentAngle = currentSeries.startAngle;\n            } else {\n                currentAngle = options.startAngle;\n            }\n\n            if (seriesIx !== seriesCount - 1) {\n                if (currentSeries.labels.position === OUTSIDE_END) {\n                    currentSeries.labels.position = CENTER;\n                }\n            }\n\n            for (var i = 0; i < points.length; i++) {\n                var pointData = points[i];\n                if (!pointData) {\n                    continue;\n                }\n\n                var fields = pointData.fields;\n                var value = pointData.value;\n                var visible = pointData.visible;\n                var angle = value !== 0 ? (constantAngle || (value * anglePerValue)) : 0;\n                var explode = data.length !== 1 && Boolean(fields.explode);\n\n                if (!isFunction(currentSeries.color)) {\n                    currentSeries.color = fields.color || seriesColors[i % colorsCount];\n                }\n\n                callback(value, new dataviz.Ring(null, 0, 0, currentAngle, angle), {\n                    owner: this$1$1,\n                    category: defined(fields.category) ? fields.category : \"\",\n                    index: i,\n                    series: currentSeries,\n                    seriesIx: seriesIx,\n                    dataItem: data[i],\n                    percentage: total !== 0 ? value / total : 0,\n                    explode: explode,\n                    visibleInLegend: fields.visibleInLegend,\n                    visible: visible,\n                    zIndex: seriesCount - seriesIx,\n                    animationDelay: this$1$1.animationDelay(i, seriesIx, seriesCount)\n                });\n\n                if (visible !== false) {\n                    currentAngle += angle;\n                }\n            }\n        }\n    },\n\n    evalSegmentOptions: function(options, value, fields) {\n        var series = fields.series;\n\n        evalOptions(options, {\n            value: value,\n            series: series,\n            dataItem: fields.dataItem,\n            category: fields.category,\n            percentage: fields.percentage\n        }, { defaults: series._defaults, excluded: [\n            \"data\", \"content\", \"template\", \"visual\", \"toggle\",\n            \"ariaTemplate\", \"ariaContent\"\n        ] });\n    },\n\n    addValue: function(value, sector, fields) {\n        var segmentOptions = deepExtend({}, fields.series, { index: fields.index });\n        this.evalSegmentOptions(segmentOptions, value, fields);\n\n        this.createLegendItem(value, segmentOptions, fields);\n\n        if (fields.visible === false) {\n            return;\n        }\n\n        var segment = new PieSegment(value, sector, segmentOptions);\n        $.extend(segment, fields);\n        this.append(segment);\n        this.points.push(segment);\n    },\n\n    reflow: function(targetBox) {\n        var ref = this;\n        var options = ref.options;\n        var points = ref.points;\n        var seriesConfigs = ref.seriesConfigs; if (seriesConfigs === void 0) { seriesConfigs = []; }\n        var count = points.length;\n        var box = targetBox.clone();\n        var space = 5;\n        var minWidth = Math.min(box.width(), box.height());\n        var halfMinWidth = minWidth / 2;\n        var defaultPadding = minWidth - minWidth * 0.85;\n        var newBox = new Box(box.x1, box.y1, box.x1 + minWidth, box.y1 + minWidth);\n        var newBoxCenter = newBox.center();\n        var boxCenter = box.center();\n        var seriesCount = options.series.length;\n        var leftSideLabels = [];\n        var rightSideLabels = [];\n        var padding = valueOrDefault(options.padding, defaultPadding);\n\n        this.targetBox = targetBox;\n\n        padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;\n        newBox.translate(boxCenter.x - newBoxCenter.x, boxCenter.y - newBoxCenter.y);\n\n        var radius = halfMinWidth - padding;\n        var center = new Point(\n            radius + newBox.x1 + padding,\n            radius + newBox.y1 + padding\n        );\n\n        for (var i = 0; i < count; i++) {\n            var segment = points[i];\n            var sector = segment.sector;\n            var seriesIndex = segment.seriesIx;\n            sector.radius = radius;\n            sector.center = center;\n\n            if (seriesConfigs.length) {\n                var seriesConfig = seriesConfigs[seriesIndex];\n                sector.innerRadius = seriesConfig.innerRadius;\n                sector.radius = seriesConfig.radius;\n            }\n\n            if (seriesIndex === seriesCount - 1 && segment.explode) {\n                sector.center = sector.clone().setRadius(sector.radius * 0.15).point(sector.middle());\n            }\n\n            segment.reflow(newBox);\n\n            var label = segment.label;\n            if (label) {\n                if (label.options.position === OUTSIDE_END) {\n                    if (seriesIndex === seriesCount - 1) {\n                        if (label.orientation === RIGHT) {\n                            rightSideLabels.push(label);\n                        } else {\n                            leftSideLabels.push(label);\n                        }\n                    }\n                }\n            }\n        }\n\n        if (leftSideLabels.length > 0) {\n            leftSideLabels.sort(this.labelComparator(true));\n            this.leftLabelsReflow(leftSideLabels);\n        }\n\n        if (rightSideLabels.length > 0) {\n            rightSideLabels.sort(this.labelComparator(false));\n            this.rightLabelsReflow(rightSideLabels);\n        }\n\n        this.box = newBox;\n    },\n\n    leftLabelsReflow: function(labels) {\n        var distances = this.distanceBetweenLabels(labels);\n\n        this.distributeLabels(distances, labels);\n    },\n\n    rightLabelsReflow: function(labels) {\n        var distances = this.distanceBetweenLabels(labels);\n\n        this.distributeLabels(distances, labels);\n    },\n\n    distanceBetweenLabels: function(labels) {\n        var segment = last(this.points);\n        var sector = segment.sector;\n        var count = labels.length - 1;\n        var lr = sector.radius + segment.options.labels.distance;\n        var distances = [];\n        var firstBox = labels[0].box;\n        var distance = round(firstBox.y1 - (sector.center.y - lr - firstBox.height() - firstBox.height() / 2));\n\n        distances.push(distance);\n\n        for (var i = 0; i < count; i++) {\n            var secondBox = labels[i + 1].box;\n\n            firstBox = labels[i].box;\n            distance = round(secondBox.y1 - firstBox.y2);\n            distances.push(distance);\n        }\n        distance = round(sector.center.y + lr - labels[count].box.y2 - labels[count].box.height() / 2);\n        distances.push(distance);\n\n        return distances;\n    },\n\n    distributeLabels: function(distances, labels) {\n        var this$1$1 = this;\n\n        var count = distances.length;\n        var left, right, remaining;\n\n        for (var i = 0; i < count; i++) {\n            remaining = -distances[i];\n            left = right = i;\n\n            while (remaining > 0 && (left >= 0 || right < count)) {\n                remaining = this$1$1._takeDistance(distances, i, --left, remaining);\n                remaining = this$1$1._takeDistance(distances, i, ++right, remaining);\n            }\n        }\n\n        this.reflowLabels(distances, labels);\n    },\n\n    _takeDistance: function(distances, anchor, position, amount) {\n        var result = amount;\n        if (distances[position] > 0) {\n            var available = Math.min(distances[position], result);\n            result -= available;\n            distances[position] -= available;\n            distances[anchor] += available;\n        }\n\n        return result;\n    },\n\n    reflowLabels: function(distances, labels) {\n        var this$1$1 = this;\n\n        var segment = last(this.points);\n        var sector = segment.sector;\n        var labelOptions = segment.options.labels;\n        var labelsCount = labels.length;\n        var labelDistance = labelOptions.distance;\n        var boxY = sector.center.y - (sector.radius + labelDistance) - labels[0].box.height();\n        var boxX;\n\n        distances[0] += 2;\n        for (var i = 0; i < labelsCount; i++) {\n            var label = labels[i];\n            var box = label.box;\n\n            boxY += distances[i];\n            boxX = this$1$1.hAlignLabel(\n                box.x2,\n                sector.clone().expand(labelDistance),\n                boxY,\n                boxY + box.height(),\n                label.orientation === RIGHT);\n\n            if (label.orientation === RIGHT) {\n                if (labelOptions.align !== CIRCLE) {\n                    boxX = sector.radius + sector.center.x + labelDistance;\n                }\n                label.reflow(new Box(boxX + box.width(), boxY, boxX, boxY));\n            } else {\n                if (labelOptions.align !== CIRCLE) {\n                    boxX = sector.center.x - sector.radius - labelDistance;\n                }\n                label.reflow(new Box(boxX - box.width(), boxY, boxX, boxY));\n            }\n\n            boxY += box.height();\n        }\n    },\n\n    createVisual: function() {\n        var this$1$1 = this;\n\n        var ref = this;\n        var connectors = ref.options.connectors;\n        var points = ref.points;\n        var count = points.length;\n        var space = 4;\n\n        ChartElement.fn.createVisual.call(this);\n\n        this._connectorLines = [];\n\n        for (var i = 0; i < count; i++) {\n            var segment = points[i];\n            var sector = segment.sector;\n            var label = segment.label;\n            var angle = sector.middle();\n            var connectorsColor = (segment.options.connectors || {}).color || connectors.color;\n\n            if (label) {\n                var connectorLine = new Path({\n                    stroke: {\n                        color: connectorsColor,\n                        width: connectors.width\n                    },\n                    animation: {\n                        type: FADEIN,\n                        delay: segment.animationDelay\n                    }\n                });\n\n                if (label.options.position === OUTSIDE_END) {\n                    var box = label.box;\n                    var centerPoint = sector.center;\n                    var start = sector.point(angle);\n                    var middle = new Point(box.x1, box.center().y);\n                    var sr = (void 0), end = (void 0), crossing = (void 0);\n\n                    start = sector.clone().expand(connectors.padding).point(angle);\n                    connectorLine.moveTo(start.x, start.y);\n                    // TODO: Extract into a method to remove duplication\n                    if (label.orientation === RIGHT) {\n                        end = new Point(box.x1 - connectors.padding, box.center().y);\n                        crossing = intersection(centerPoint, start, middle, end);\n                        middle = new Point(end.x - space, end.y);\n                        crossing = crossing || middle;\n                        crossing.x = Math.min(crossing.x, middle.x);\n\n                        if (this$1$1.pointInCircle(crossing, sector.center, sector.radius + space) ||\n                            crossing.x < sector.center.x) {\n                            sr = sector.center.x + sector.radius + space;\n                            if (segment.options.labels.align !== COLUMN) {\n                                if (sr < middle.x) {\n                                    connectorLine.lineTo(sr, start.y);\n                                } else {\n                                    connectorLine.lineTo(start.x + space * 2, start.y);\n                                }\n                            } else {\n                                connectorLine.lineTo(sr, start.y);\n                            }\n                            connectorLine.lineTo(middle.x, end.y);\n                        } else {\n                            crossing.y = end.y;\n                            connectorLine.lineTo(crossing.x, crossing.y);\n                        }\n                    } else {\n                        end = new Point(box.x2 + connectors.padding, box.center().y);\n                        crossing = intersection(centerPoint, start, middle, end);\n                        middle = new Point(end.x + space, end.y);\n                        crossing = crossing || middle;\n                        crossing.x = Math.max(crossing.x, middle.x);\n\n                        if (this$1$1.pointInCircle(crossing, sector.center, sector.radius + space) ||\n                            crossing.x > sector.center.x) {\n                            sr = sector.center.x - sector.radius - space;\n                            if (segment.options.labels.align !== COLUMN) {\n                                if (sr > middle.x) {\n                                    connectorLine.lineTo(sr, start.y);\n                                } else {\n                                    connectorLine.lineTo(start.x - space * 2, start.y);\n                                }\n                            } else {\n                                connectorLine.lineTo(sr, start.y);\n                            }\n                            connectorLine.lineTo(middle.x, end.y);\n                        } else {\n                            crossing.y = end.y;\n                            connectorLine.lineTo(crossing.x, crossing.y);\n                        }\n                    }\n\n                    connectorLine.lineTo(end.x, end.y);\n\n                    this$1$1._connectorLines.push(connectorLine);\n                    this$1$1.visual.append(connectorLine);\n                }\n            }\n        }\n    },\n\n    renderVisual: function() {\n        ChartElement.fn.renderVisual.call(this);\n\n        if (dataviz.find(this.options.series, function (options) { return options.autoFit; })) {\n            var targetBox = this.targetBox;\n            var pieCenter = this.box.center();\n            var bbox = this.visual.bbox();\n            if (!bbox) {\n                return;\n            }\n\n            var bboxBottom = bbox.bottomRight();\n\n            var scale = Math.min(\n                (pieCenter.y - targetBox.y1) / (pieCenter.y - bbox.origin.y),\n                (targetBox.y2 - pieCenter.y) / (bboxBottom.y - pieCenter.y),\n                (pieCenter.x - targetBox.x1) / (pieCenter.x - bbox.origin.x),\n                (targetBox.x2 - pieCenter.x) / (bboxBottom.x - pieCenter.x)\n            );\n\n            if (scale < 1) {\n                this.visual.transform(transform().scale(scale, scale, [ pieCenter.x, pieCenter.y ]));\n            }\n        }\n    },\n\n    labelComparator: function(reverse) {\n        var reverseValue = reverse ? -1 : 1;\n\n        return function(a, b) {\n            var first = (a.parent.sector.middle() + 270) % 360;\n            var second = (b.parent.sector.middle() + 270) % 360;\n            return (first - second) * reverseValue;\n        };\n    },\n\n    hAlignLabel: function(originalX, sector, y1, y2, direction) {\n        var radius = sector.radius;\n        var sector_center = sector.center;\n        var cx = sector_center.x;\n        var cy = sector_center.y;\n        var t = Math.min(Math.abs(cy - y1), Math.abs(cy - y2));\n\n        if (t > radius) {\n            return originalX;\n        }\n\n        return cx + Math.sqrt((radius * radius) - (t * t)) * (direction ? 1 : -1);\n    },\n\n    pointInCircle: function(point, center, radius) {\n        return Math.pow(center.x - point.x, 2) + Math.pow(center.y - point.y, 2) < Math.pow(radius, 2);\n    },\n\n    formatPointValue: function(point, format) {\n        return this.chartService.format.auto(format, point.value);\n    },\n\n    animationDelay: function(categoryIndex) {\n        return categoryIndex * PIE_SECTOR_ANIM_DELAY;\n    },\n\n    stackRoot: function() {\n        return this;\n    }\n});\n\nfunction intersection(a1, a2, b1, b2) {\n    var uat = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    var ub = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n    var result;\n    if (ub !== 0) {\n        var ua = (uat / ub);\n\n        result = new Point(\n            a1.x + ua * (a2.x - a1.x),\n            a1.y + ua * (a2.y - a1.y)\n        );\n    }\n\n    return result;\n}\n\nsetDefaultOptions(PieChart, {\n    startAngle: 90,\n    connectors: {\n        width: 2,\n        color: \"#939393\",\n        padding: 8\n    },\n    inactiveItems: {\n        markers: {},\n        labels: {}\n    }\n});\n\ndeepExtend(PieChart.prototype, PieChartMixin);\n\nPieChart.prototype.isStackRoot = true;\n\nvar PiePlotArea = PlotAreaBase.extend({\n    render: function() {\n        this.createPieChart(this.series);\n    },\n\n    createPieChart: function(series) {\n        var firstSeries = series[0];\n        var pieChart = new PieChart(this, {\n            series: series,\n            padding: firstSeries.padding,\n            startAngle: firstSeries.startAngle,\n            connectors: firstSeries.connectors,\n            legend: this.options.legend\n        });\n\n        this.appendChart(pieChart);\n    },\n\n    appendChart: function(chart, pane) {\n        PlotAreaBase.fn.appendChart.call(this, chart, pane);\n        append(this.options.legend.data, chart.legendItems);\n    },\n\n    getPointBelow: function(point) {\n        return this.getPointToTheRight(point);\n    },\n\n    getPointAbove: function(point) {\n        return this.getPointToTheLeft(point);\n    }\n});\n\nvar DonutSegment = PieSegment.extend({\n    reflowLabel: function() {\n        var ref = this;\n        var labelsOptions = ref.options.labels;\n        var label = ref.label;\n        var sector = this.sector.clone();\n        var angle = sector.middle();\n\n        if (label) {\n            var labelHeight = label.box.height();\n            if (labelsOptions.position === CENTER) {\n                sector.radius -= (sector.radius - sector.innerRadius) / 2;\n\n                var lp = sector.point(angle);\n\n                label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));\n            } else {\n                PieSegment.fn.reflowLabel.call(this);\n            }\n        }\n    },\n\n    createSegment: function(sector, options) {\n        return dataviz.ShapeBuilder.current.createRing(sector, options);\n    }\n});\n\nsetDefaultOptions(DonutSegment, {\n    overlay: {\n        gradient: \"roundedGlass\"\n    },\n    labels: {\n        position: CENTER\n    },\n    animation: {\n        type: PIE\n    }\n});\n\ndeepExtend(DonutSegment.prototype, PointEventsMixin);\n\nvar DONUT_SECTOR_ANIM_DELAY = 50;\n\nvar DonutChart = PieChart.extend({\n    addValue: function(value, sector, fields) {\n        var segmentOptions = deepExtend({}, fields.series, { index: fields.index });\n        this.evalSegmentOptions(segmentOptions, value, fields);\n\n        this.createLegendItem(value, segmentOptions, fields);\n\n        if (fields.visible === false) {\n            return;\n        }\n\n        var segment = new DonutSegment(value, sector, segmentOptions);\n\n        $.extend(segment, fields);\n        this.append(segment);\n        this.points.push(segment);\n    },\n\n    reflow: function(targetBox) {\n        var this$1$1 = this;\n\n        var options = this.options;\n        var box = targetBox.clone();\n        var space = 5;\n        var minWidth = Math.min(box.width(), box.height());\n        var halfMinWidth = minWidth / 2;\n        var defaultPadding = minWidth - minWidth * 0.85;\n        var series = options.series;\n        var seriesCount = series.length;\n\n        var padding = valueOrDefault(options.padding, defaultPadding);\n        padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;\n\n        var totalSize = halfMinWidth - padding;\n        var seriesWithoutSize = 0;\n        var holeSize;\n\n        for (var i = 0; i < seriesCount; i++) {\n            var currentSeries = series[i];\n            if (i === 0) {\n                if (defined(currentSeries.holeSize)) {\n                    holeSize = currentSeries.holeSize;\n                    totalSize -= currentSeries.holeSize;\n                }\n            }\n\n            if (defined(currentSeries.size)) {\n                totalSize -= currentSeries.size;\n            } else {\n                seriesWithoutSize++;\n            }\n\n            if (defined(currentSeries.margin) && i !== seriesCount - 1) {\n                totalSize -= currentSeries.margin;\n            }\n        }\n\n        if (!defined(holeSize)) {\n            var currentSize = (halfMinWidth - padding) / (seriesCount + 0.75);\n            holeSize = currentSize * 0.75;\n            totalSize -= holeSize;\n        }\n\n        var innerRadius = holeSize;\n        var margin = 0;\n        var size, radius;\n\n        this.seriesConfigs = [];\n\n        for (var i$1 = 0; i$1 < seriesCount; i$1++) {\n            var currentSeries$1 = series[i$1];\n            size = valueOrDefault(currentSeries$1.size, totalSize / seriesWithoutSize);\n            innerRadius += margin;\n            radius = innerRadius + size;\n            this$1$1.seriesConfigs.push({ innerRadius: innerRadius, radius: radius });\n            margin = currentSeries$1.margin || 0;\n            innerRadius = radius;\n        }\n\n        PieChart.fn.reflow.call(this, targetBox);\n    },\n\n    animationDelay: function(categoryIndex, seriesIndex, seriesCount) {\n        return categoryIndex * DONUT_SECTOR_ANIM_DELAY +\n            (INITIAL_ANIMATION_DURATION * (seriesIndex + 1) / (seriesCount + 1));\n    }\n});\n\nsetDefaultOptions(DonutChart, {\n    startAngle: 90,\n    connectors: {\n        width: 2,\n        color: \"#939393\",\n        padding: 8\n    }\n});\n\nvar DonutPlotArea = PiePlotArea.extend({\n    render: function() {\n        this.createDonutChart(this.series);\n    },\n\n    createDonutChart: function(series) {\n        var firstSeries = series[0];\n        var donutChart = new DonutChart(this, {\n            series: series,\n            padding: firstSeries.padding,\n            connectors: firstSeries.connectors,\n            legend: this.options.legend\n        });\n\n        this.appendChart(donutChart);\n    },\n\n    getPointBelow: function(point) {\n        return this._getNextPoint(point, this._pointsByVertical, -1);\n    },\n\n    getPointAbove: function(point) {\n        return this._getNextPoint(point, this._pointsByVertical, 1);\n    }\n});\n\nvar DEFAULT_PADDING = 0.15;\n\nvar PolarPlotAreaBase = PlotAreaBase.extend({\n    initFields: function() {\n        this.valueAxisRangeTracker = new AxisGroupRangeTracker();\n    },\n\n    render: function() {\n        this.addToLegend(this.series);\n        this.createPolarAxis();\n        this.createCharts();\n        this.createValueAxis();\n    },\n\n    alignAxes: function() {\n        var axis = this.valueAxis;\n        var range = axis.range();\n        var crossingValue = axis.options.reverse ? range.max : range.min;\n        var slot = axis.getSlot(crossingValue);\n        var center = this.polarAxis.getSlot(0).center;\n        var axisBox = axis.box.translate(\n            center.x - slot.x1,\n            center.y - slot.y1\n        );\n\n        axis.reflow(axisBox);\n    },\n\n    createValueAxis: function() {\n        var tracker = this.valueAxisRangeTracker;\n        var defaultRange = tracker.query();\n        var axisOptions = this.valueAxisOptions({\n            roundToMajorUnit: false,\n            zIndex: -1\n        });\n        var axisType, axisDefaultRange;\n\n        if (axisOptions.type === LOGARITHMIC) {\n            axisType = dataviz.RadarLogarithmicAxis;\n            axisDefaultRange = { min: 0.1, max: 1 };\n        } else {\n            axisType = dataviz.RadarNumericAxis;\n            axisDefaultRange = { min: 0, max: 1 };\n        }\n\n        var range = tracker.query(name) || defaultRange || axisDefaultRange;\n\n        if (range && defaultRange) {\n            range.min = Math.min(range.min, defaultRange.min);\n            range.max = Math.max(range.max, defaultRange.max);\n        }\n\n        var valueAxis = new axisType(\n            range.min, range.max,\n            axisOptions,\n            this.chartService\n        );\n\n        this.valueAxis = valueAxis;\n        this.appendAxis(valueAxis);\n    },\n\n    reflowAxes: function() {\n        var ref = this;\n        var options = ref.options.plotArea;\n        var valueAxis = ref.valueAxis;\n        var polarAxis = ref.polarAxis;\n        var box = ref.box;\n        var defaultPadding = Math.min(box.width(), box.height()) * DEFAULT_PADDING;\n        var padding = getSpacing(options.padding || {}, defaultPadding);\n        var paddingBox = box.clone().unpad(padding);\n        var axisBox = paddingBox.clone();\n\n        axisBox.y2 = axisBox.y1 + Math.min(axisBox.width(), axisBox.height());\n        axisBox.align(paddingBox, Y, CENTER);\n\n        var valueAxisBox = axisBox.clone().shrink(0, axisBox.height() / 2);\n\n        polarAxis.reflow(axisBox);\n        valueAxis.reflow(valueAxisBox);\n        var heightDiff = valueAxis.lineBox().height() - valueAxis.box.height();\n        valueAxis.reflow(valueAxis.box.unpad({ top: heightDiff }));\n\n        this.axisBox = axisBox;\n        this.alignAxes(axisBox);\n    },\n\n    backgroundBox: function() {\n        return this.box;\n    },\n\n    detachLabels: function() {}\n});\n\nvar PolarScatterChart = ScatterChart.extend({\n    pointSlot: function(slotX, slotY) {\n        var valueRadius = slotX.center.y - slotY.y1;\n        var slot = Point.onCircle(slotX.center, slotX.startAngle, valueRadius);\n\n        return new Box(slot.x, slot.y, slot.x, slot.y);\n    }\n});\n\nsetDefaultOptions(PolarScatterChart, {\n    clip: false\n});\n\nvar PolarLineChart = ScatterLineChart.extend({\n\n});\n\nPolarLineChart.prototype.pointSlot = PolarScatterChart.prototype.pointSlot;\n\nsetDefaultOptions(PolarLineChart, {\n    clip: false\n});\n\nvar SplinePolarAreaSegment = SplineAreaSegment.extend({\n    fillToAxes: function(fillPath) {\n        var center = this._polarAxisCenter();\n        fillPath.lineTo(center.x, center.y);\n    },\n\n    _polarAxisCenter: function() {\n        var polarAxis = this.parent.plotArea.polarAxis;\n        var center = polarAxis.box.center();\n        return center;\n    },\n\n    strokeSegments: function() {\n        var segments = this._strokeSegments;\n\n        if (!segments) {\n            var center = this._polarAxisCenter();\n            var curveProcessor = new CurveProcessor(false);\n            var linePoints = this.points();\n\n            linePoints.push(center);\n            segments = this._strokeSegments = curveProcessor.process(linePoints);\n            segments.pop();\n        }\n\n        return segments;\n    }\n});\n\nvar PolarAreaSegment = AreaSegment.extend({\n    fillToAxes: function(fillPath) {\n        var polarAxis = this.parent.plotArea.polarAxis;\n        var center = polarAxis.box.center();\n        var centerSegment = new geometry.Segment([ center.x, center.y ]);\n\n        fillPath.segments.unshift(centerSegment);\n        fillPath.segments.push(centerSegment);\n    }\n});\n\nvar PolarAreaChart = PolarLineChart.extend({\n    createSegment: function(linePoints, currentSeries, seriesIx) {\n        var style = (currentSeries.line || {}).style;\n        var segment;\n\n        if (style === SMOOTH) {\n            segment = new SplinePolarAreaSegment(linePoints, currentSeries, seriesIx);\n        } else {\n            segment = new PolarAreaSegment(linePoints, currentSeries, seriesIx);\n        }\n        return segment;\n    },\n\n    createMissingValue: function(value, missingValues) {\n        var missingValue;\n\n        if (hasValue(value.x) && missingValues !== INTERPOLATE) {\n            missingValue = {\n                x: value.x,\n                y: value.y\n            };\n            if (missingValues === ZERO) {\n                missingValue.y = 0;\n            }\n        }\n\n        return missingValue;\n    },\n\n    seriesMissingValues: function(series) {\n        return series.missingValues || ZERO;\n    },\n\n    _hasMissingValuesGap: function() {\n        var this$1$1 = this;\n\n        var series = this.options.series;\n\n        for (var idx = 0; idx < series.length; idx++) {\n            if (this$1$1.seriesMissingValues(series[idx]) === GAP) {\n                return true;\n            }\n        }\n    },\n\n    sortPoints: function(points) {\n        var this$1$1 = this;\n\n        points.sort(xComparer);\n\n        if (this._hasMissingValuesGap()) {\n            for (var idx = 0; idx < points.length; idx++) {\n                var point = points[idx];\n                if (point) {\n                    var value = point.value;\n                    if (!hasValue(value.y) && this$1$1.seriesMissingValues(point.series) === GAP) {\n                        delete points[idx];\n                    }\n                }\n            }\n        }\n\n        return points;\n    }\n});\n\nfunction xComparer(a, b) {\n    return a.value.x - b.value.x;\n}\n\nvar PolarPlotArea = PolarPlotAreaBase.extend({\n    createPolarAxis: function() {\n        var polarAxis = new dataviz.PolarAxis(this.options.xAxis, this.chartService);\n\n        this.polarAxis = polarAxis;\n        this.axisX = polarAxis;\n        this.appendAxis(polarAxis);\n    },\n\n    render: function() {\n        this.series = [].concat( this.originalSeries );\n        this.createTrendlineSeries();\n\n        PolarPlotAreaBase.fn.render.call(this);\n    },\n\n    valueAxisOptions: function(defaults) {\n        return deepExtend(defaults, {\n            majorGridLines: { type: ARC },\n            minorGridLines: { type: ARC }\n        }, this.options.yAxis);\n    },\n\n    createValueAxis: function() {\n        PolarPlotAreaBase.fn.createValueAxis.call(this);\n        this.axisY = this.valueAxis;\n    },\n\n    trendlineFactory: function(options, series) {\n        var trendline = XYPlotArea.prototype.trendlineFactory.call(this, options, series);\n        if (trendline) {\n            trendline.type = POLAR_LINE;\n        }\n\n        return trendline;\n    },\n\n    appendChart: function(chart, pane) {\n        this.valueAxisRangeTracker.update(chart.yAxisRanges);\n\n        PlotAreaBase.prototype.appendChart.call(this, chart, pane);\n    },\n\n    createCharts: function() {\n        var series = this.filterVisibleSeries(this.series);\n        var pane = this.panes[0];\n\n        this.createLineChart(\n            filterSeriesByType(series, [ POLAR_LINE ]),\n            pane\n        );\n\n        this.createScatterChart(\n            filterSeriesByType(series, [ POLAR_SCATTER ]),\n            pane\n        );\n\n        this.createAreaChart(\n            filterSeriesByType(series, [ POLAR_AREA ]),\n            pane\n        );\n    },\n\n    createLineChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var lineChart = new PolarLineChart(this, { series: series });\n\n        this.appendChart(lineChart, pane);\n    },\n\n    createScatterChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var scatterChart = new PolarScatterChart(this, { series: series });\n\n        this.appendChart(scatterChart, pane);\n    },\n\n    createAreaChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var areaChart = new PolarAreaChart(this, { series: series });\n\n        this.appendChart(areaChart, pane);\n    },\n\n    _dispatchEvent: function(chart, e, eventType) {\n        var coords = chart._eventCoordinates(e);\n        var point = new Point(coords.x, coords.y);\n        var xValue = this.axisX.getValue(point);\n        var yValue = this.axisY.getValue(point);\n\n        if (xValue !== null && yValue !== null) {\n            chart.trigger(eventType, {\n                element: eventElement(e),\n                x: xValue,\n                y: yValue\n            });\n        }\n    },\n\n    createCrosshairs: function() {}\n});\n\nsetDefaultOptions(PolarPlotArea, {\n    xAxis: {},\n    yAxis: {}\n});\n\ndeepExtend(PolarPlotArea.prototype, PlotAreaEventsMixin, {\n    seriesValues: XYPlotArea.prototype.seriesValues\n});\n\nfunction groupBySeriesIx(segments) {\n    var seriesSegments = [];\n    for (var idx = 0; idx < segments.length; idx++) {\n        var segment = segments[idx];\n        seriesSegments[segment.seriesIx] = seriesSegments[segment.seriesIx] || [];\n        seriesSegments[segment.seriesIx].push(segment);\n    }\n\n    return seriesSegments;\n}\n\nvar RadarLineChart = LineChart.extend({\n    pointSlot: function(categorySlot, valueSlot) {\n        var valueRadius = categorySlot.center.y - valueSlot.y1;\n        var slot = Point.onCircle(categorySlot.center, categorySlot.middle(), valueRadius);\n\n        return new Box(slot.x, slot.y, slot.x, slot.y);\n    },\n\n    renderSegments: function() {\n        LineChart.fn.renderSegments.call(this);\n\n        if (this._segments && this._segments.length > 1) {\n            var seriesSegments = groupBySeriesIx(this._segments);\n\n            for (var idx = 0; idx < seriesSegments.length; idx++) {\n                var segments = seriesSegments[idx];\n                if (segments && segments.length > 1) {\n                    var firstPoint = segments[0].linePoints[0];\n                    var lastSegment = last(segments);\n                    var lastPoint = last(lastSegment.linePoints);\n                    var isFirstDataPoint = firstPoint.categoryIx === 0;\n                    var isLastDataPoint = lastPoint.categoryIx === lastPoint.categoriesCount - 1;\n                    if (isFirstDataPoint && isLastDataPoint) {\n                        last(segments).linePoints.push(firstPoint);\n                    }\n                }\n            }\n        }\n    },\n\n    createSegment: function(linePoints, currentSeries, seriesIx) {\n        var style = currentSeries.style;\n        var pointType;\n\n        if (style === SMOOTH) {\n            pointType = SplineSegment;\n        } else {\n            pointType = LineSegment;\n        }\n\n        var segment = new pointType(linePoints, currentSeries, seriesIx);\n        var missingValues = this.seriesMissingValues(currentSeries);\n\n        if (linePoints.length === currentSeries.data.length || missingValues === INTERPOLATE) {\n            segment.options.closed = true;\n        }\n\n        return segment;\n    }\n});\n\nsetDefaultOptions(RadarLineChart, {\n    clip: false,\n    limitPoints: false\n});\n\nvar SplineRadarAreaSegment = SplineAreaSegment.extend({\n    fillToAxes: function() {}\n});\n\nvar RadarAreaSegment = AreaSegment.extend({\n    fillToAxes: function() {}\n});\n\nvar RadarAreaChart = RadarLineChart.extend({\n    createSegment: function(linePoints, currentSeries, seriesIx, prevSegment) {\n        var isStacked = this.options.isStacked;\n        var style = (currentSeries.line || {}).style;\n        var previousSegment;\n        var stackPoints;\n        var segment;\n\n        if (isStacked && seriesIx > 0 && prevSegment) {\n            stackPoints = prevSegment.linePoints.slice(0);\n            previousSegment = prevSegment;\n        }\n\n        if (style === SMOOTH) {\n            segment = new SplineRadarAreaSegment(linePoints, currentSeries, seriesIx, previousSegment, stackPoints);\n            segment.options.closed = true;\n        } else {\n            linePoints.push(linePoints[0]);\n            segment = new RadarAreaSegment(linePoints, currentSeries, seriesIx, previousSegment, stackPoints);\n        }\n\n        return segment;\n    },\n\n    seriesMissingValues: function(series) {\n        return series.missingValues || ZERO;\n    }\n});\n\nvar RadarSegment = DonutSegment.extend({\n    init: function(value, options) {\n        DonutSegment.fn.init.call(this, value, null, options);\n    },\n\n    getIndex: function() {\n        return this.categoryIx;\n    }\n});\n\nsetDefaultOptions(RadarSegment, {\n    overlay: {\n        gradient: \"none\"\n    },\n    labels: {\n        distance: 10\n    }\n});\n\nvar RadarClusterLayout = ChartElement.extend({\n    init: function(options) {\n        ChartElement.fn.init.call(this, options);\n\n        this.forEach = options.rtl ? forEachReverse : forEach;\n    },\n\n    reflow: function(sector) {\n        var ref = this;\n        var options = ref.options;\n        var children = ref.children;\n        var gap = options.gap;\n        var spacing = options.spacing;\n        var count = children.length;\n        var slots = count + gap + (spacing * (count - 1));\n        var slotAngle = sector.angle / slots;\n        var angle = sector.startAngle + slotAngle * (gap / 2);\n\n        this.forEach(children, function (child) {\n            var slotSector = sector.clone();\n            slotSector.startAngle = angle;\n            slotSector.angle = slotAngle;\n\n            if (child.sector) {\n                slotSector.radius = child.sector.radius;\n            }\n\n            child.reflow(slotSector);\n            child.sector = slotSector;\n\n            angle += slotAngle + (slotAngle * spacing);\n        });\n    }\n});\n\nsetDefaultOptions(RadarClusterLayout, {\n    gap: 1,\n    spacing: 0\n});\n\nvar RadarStackLayout = ChartElement.extend({\n    reflow: function(sector) {\n        var ref = this;\n        var reverse = ref.options.reverse;\n        var children = ref.children;\n        var childrenCount = children.length;\n        var first = reverse ? childrenCount - 1 : 0;\n        var step = reverse ? -1 : 1;\n\n        this.box = new Box();\n\n        for (var i = first; i >= 0 && i < childrenCount; i += step) {\n            var childSector = children[i].sector;\n            childSector.startAngle = sector.startAngle;\n            childSector.angle = sector.angle;\n        }\n    }\n});\n\nvar RadarBarChart = BarChart.extend({\n    pointType: function() {\n        return RadarSegment;\n    },\n\n    clusterType: function() {\n        return RadarClusterLayout;\n    },\n\n    stackType: function() {\n        return RadarStackLayout;\n    },\n\n    categorySlot: function(categoryAxis, categoryIx) {\n        return categoryAxis.getSlot(categoryIx);\n    },\n\n    pointSlot: function(categorySlot, valueSlot) {\n        var slot = categorySlot.clone();\n        var y = categorySlot.center.y;\n\n        slot.radius = y - valueSlot.y1;\n        slot.innerRadius = y - valueSlot.y2;\n\n        return slot;\n    },\n\n    reflowPoint: function(point, pointSlot) {\n        point.sector = pointSlot;\n        point.reflow();\n    },\n\n    createAnimation: function() {\n        this.options.animation.center = this.box.toRect().center();\n        BarChart.fn.createAnimation.call(this);\n    }\n});\n\nRadarBarChart.prototype.reflow = CategoricalChart.prototype.reflow;\n\nsetDefaultOptions(RadarBarChart, {\n    clip: false,\n    limitPoints: false,\n    animation: {\n        type: \"pie\"\n    }\n});\n\nvar RadarPlotArea = PolarPlotAreaBase.extend({\n    createPolarAxis: function() {\n        var categoryAxis = new dataviz.RadarCategoryAxis(this.options.categoryAxis, this.chartService);\n\n        this.polarAxis = categoryAxis;\n        this.categoryAxis = categoryAxis;\n        this.appendAxis(categoryAxis);\n        this.aggregateCategories();\n        this.createTrendlineSeries();\n        this.createCategoryAxesLabels();\n    },\n\n    valueAxisOptions: function(defaults) {\n        if (this._hasBarCharts) {\n            deepExtend(defaults, {\n                majorGridLines: { type: ARC },\n                minorGridLines: { type: ARC }\n            });\n        }\n\n        if (this._isStacked100) {\n            deepExtend(defaults, {\n                roundToMajorUnit: false,\n                labels: { format: \"P0\" }\n            });\n        }\n\n        return deepExtend(defaults, this.options.valueAxis);\n    },\n\n    aggregateCategories: function() {\n        // No separate panes in radar charts\n        CategoricalPlotArea.prototype.aggregateCategories.call(this, this.panes);\n    },\n\n    createCategoryAxesLabels: function() {\n        CategoricalPlotArea.prototype.createCategoryAxesLabels.call(this, this.panes);\n    },\n\n    filterSeries: function(currentSeries) {\n        // Not supported for radar charts\n        return currentSeries;\n    },\n\n    trendlineFactory: function(options, series) {\n        var trendline = CategoricalPlotArea.prototype.trendlineFactory.call(this, options, series);\n        if (trendline) {\n            trendline.type = RADAR_LINE;\n        }\n\n        return trendline;\n    },\n\n    createCharts: function() {\n        var series = this.filterVisibleSeries(this.series);\n        var pane = this.panes[0];\n\n        this.createAreaChart(\n            filterSeriesByType(series, [ RADAR_AREA ]),\n            pane\n        );\n\n        this.createLineChart(\n            filterSeriesByType(series, [ RADAR_LINE ]),\n            pane\n        );\n\n        this.createBarChart(\n            filterSeriesByType(series, [ RADAR_COLUMN ]),\n            pane\n        );\n    },\n\n    chartOptions: function(series) {\n        var options = { series: series };\n        var firstSeries = series[0];\n        if (firstSeries) {\n            var filteredSeries = this.filterVisibleSeries(series);\n            var stack = firstSeries.stack;\n            options.isStacked = stack && filteredSeries.length > 1;\n            options.isStacked100 = stack && stack.type === \"100%\" && filteredSeries.length > 1;\n\n            if (options.isStacked100) {\n                this._isStacked100 = true;\n            }\n        }\n\n        return options;\n    },\n\n    createAreaChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var areaChart = new RadarAreaChart(this, this.chartOptions(series));\n        this.appendChart(areaChart, pane);\n    },\n\n    createLineChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var lineChart = new RadarLineChart(this, this.chartOptions(series));\n        this.appendChart(lineChart, pane);\n    },\n\n    createBarChart: function(series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var firstSeries = series[0];\n        var options = this.chartOptions(series);\n        var filteredSeries = this.filterVisibleSeries(series);\n        var anyStackedSeries = filteredSeries.some(function (s) { return s.stack; });\n        var isStacked100 = filteredSeries.some(function (s) { return s.stack && s.stack.type === \"100%\"; });\n        options.gap = firstSeries.gap;\n        options.spacing = firstSeries.spacing;\n        options.defaultStack = firstSeries.stack && filteredSeries.length > 1;\n        options.isStacked = anyStackedSeries && filteredSeries.length > 1;\n        options.isStacked100 = isStacked100 && filteredSeries.length > 1;\n\n        var barChart = new RadarBarChart(this, options);\n        this.appendChart(barChart, pane);\n\n        this._hasBarCharts = true;\n    },\n\n    seriesCategoryAxis: function() {\n        return this.categoryAxis;\n    },\n\n    _dispatchEvent: function(chart, e, eventType) {\n        var coords = chart._eventCoordinates(e);\n        var point = new Point(coords.x, coords.y);\n        var category = this.categoryAxis.getCategory(point);\n        var value = this.valueAxis.getValue(point);\n\n        if (category !== null && value !== null) {\n            chart.trigger(eventType, {\n                element: eventElement(e),\n                category: category,\n                value: value\n            });\n        }\n    },\n\n    createCrosshairs: function() {},\n\n    _pointsByVertical: function(basePoint) {\n        return PolarPlotAreaBase.fn._pointsByVertical.call(this, basePoint).sort(this._getSeriesCompareFn());\n    },\n\n    _getSeriesCompareFn: function() {\n        return function (a, b) { return b.value - a.value; };\n    }\n});\n\ndeepExtend(RadarPlotArea.prototype, PlotAreaEventsMixin, {\n    appendChart: CategoricalPlotArea.prototype.appendChart,\n    aggregateSeries: CategoricalPlotArea.prototype.aggregateSeries,\n    seriesSourcePoints: CategoricalPlotArea.prototype.seriesSourcePoints,\n    seriesValues: CategoricalPlotArea.prototype.seriesValues\n});\n\nsetDefaultOptions(RadarPlotArea, {\n    categoryAxis: {\n        categories: []\n    },\n    valueAxis: {}\n});\n\nvar FunnelSegment = ChartElement.extend({\n    init: function(value, options, segmentOptions) {\n        ChartElement.fn.init.call(this, options);\n\n        this.value = value;\n        this.options.index = segmentOptions.index;\n    },\n\n    getLabelText: function(options) {\n        var labelTemplate = getTemplate(options);\n\n        if (labelTemplate) {\n            return labelTemplate(this.pointData());\n        } else if (options.format) {\n            return this.formatValue(options.format);\n        }\n\n        return this.value;\n    },\n\n    reflow: function(chartBox) {\n        var points = this.points;\n        var label = this.children[0];\n        var x1 = Math.min(points[0].x, points[3].x);\n        var x2 = Math.max(points[1].x, points[2].x);\n\n        this.box = new Box(x1, points[0].y, x2, points[2].y);\n\n        if (label) {\n            label.reflow(new Box(chartBox.x1, points[0].y, chartBox.x2, points[2].y));\n        }\n    },\n\n    createVisual: function() {\n        var this$1$1 = this;\n\n        var options = this.options;\n        var visual;\n\n        ChartElement.fn.createVisual.call(this);\n\n        this.addAccessibilityAttributesToVisual();\n\n        if (options.visual) {\n            visual = options.visual({\n                category: this.category,\n                dataItem: this.dataItem,\n                value: this.value,\n                series: this.series,\n                percentage: this.percentage,\n                points: this.points,\n                options: options,\n                sender: this.getSender(),\n                createVisual: function () { return this$1$1.createPath(); }\n            });\n        } else {\n            visual = this.createPath();\n        }\n\n        if (visual) {\n            this.visual.append(visual);\n        }\n    },\n\n    createPath: function() {\n        var options = this.options;\n        var border = options.border;\n        var path = Path.fromPoints(this.points, {\n            fill: {\n                color: options.color,\n                opacity: options.opacity\n            },\n            stroke: {\n                color: border.color,\n                opacity: border.opacity,\n                width: border.width\n            }\n        }).close();\n\n        return path;\n    },\n\n    createHighlight: function(style) {\n        return Path.fromPoints(this.points, style);\n    },\n\n    highlightVisual: function() {\n        return this.visual.children[0];\n    },\n\n    highlightVisualArgs: function() {\n        var path = Path.fromPoints(this.points).close();\n\n        return {\n            options: this.options,\n            path: path\n        };\n    },\n\n    createFocusHighlight: function(style) {\n        var borderWidth = this.options.accessibility.highlight.border.width;\n        var result = Path.fromPoints(this.points, deepExtend({}, style, {\n            stroke: {\n                width: borderWidth * 2\n            }\n        })).close();\n\n        var clipPath = new MultiPath();\n\n        clipPath.paths.push(Path.fromRect(this.box.clone().pad(borderWidth).toRect()));\n        clipPath.paths.push(Path.fromPoints(this.points));\n\n        result.clip(clipPath);\n\n        return result;\n    },\n\n    tooltipAnchor: function() {\n        var box = this.box;\n        return {\n            point: new Point(box.center().x, box.y1),\n            align: {\n                horizontal: \"center\",\n                vertical: \"top\"\n            }\n        };\n    },\n\n    formatValue: function(format) {\n        var point = this;\n        return point.owner.formatPointValue(point, format);\n    },\n\n    pointData: function() {\n        return {\n            dataItem: this.dataItem,\n            category: this.category,\n            value: this.value,\n            series: this.series,\n            percentage: this.percentage\n        };\n    },\n\n    getIndex: function() {\n        return this.index;\n    }\n});\n\nsetDefaultOptions(FunnelSegment, {\n    color: WHITE,\n    border: {\n        width: 1\n    },\n    labels: {\n        format: \"\"\n    },\n    accessibility: {\n        role: CHART_POINT_ROLE,\n        className: CHART_POINT_CLASSNAME,\n        ariaRoleDescription: CHART_POINT_ROLE_DESCRIPTION\n    }\n});\n\ndeepExtend(FunnelSegment.prototype, PointEventsMixin);\ndeepExtend(FunnelSegment.prototype, AccessibilityAttributesMixin);\n\nvar FunnelChart = ChartElement.extend({\n    init: function(plotArea, options) {\n        ChartElement.fn.init.call(this, options);\n\n        this.plotArea = plotArea;\n        this.chartService = plotArea.chartService;\n        this.points = [];\n        this.labels = [];\n        this.legendItems = [];\n        this.render();\n    },\n\n    formatPointValue: function(point, format) {\n        return this.plotArea.chartService.format.auto(format,point.value);\n    },\n\n    render: function() {\n        var this$1$1 = this;\n\n        var seriesIx = 0;\n        var ref = this;\n        var options = ref.options;\n        var seriesColors = ref.plotArea.options.seriesColors; if (seriesColors === void 0) { seriesColors = []; }\n        var series = options.series[seriesIx];\n        var data = series.data;\n\n        if (!data) {\n            return;\n        }\n\n        var ref$1 = bindSegments(series);\n        var total = ref$1.total;\n        var points = ref$1.points;\n\n        for (var i = 0; i < points.length; i++) {\n            var pointData = points[i];\n\n            if (!pointData) {\n                continue;\n            }\n\n            var fields = pointData.fields;\n\n            if (!isFunction(series.color)) {\n                series.color = fields.color || seriesColors[i % seriesColors.length];\n            }\n\n            fields = deepExtend({\n                index: i,\n                owner: this$1$1,\n                series: series,\n                seriesIx: seriesIx,\n                dataItem: data[i],\n                percentage: pointData.value / total\n            }, fields, { visible: pointData.visible });\n\n            var value = pointData.valueFields.value;\n            var segment = this$1$1.createSegment(value, fields);\n            var label = this$1$1.createLabel(value, fields);\n\n            if (segment && label) {\n                segment.append(label);\n            }\n        }\n    },\n\n    evalSegmentOptions: function(options, value, fields) {\n        var series = fields.series;\n\n        evalOptions(options, {\n            value: value,\n            series: series,\n            dataItem: fields.dataItem,\n            index: fields.index\n        }, { defaults: series._defaults, excluded: [\n            \"data\", \"content\", \"template\", \"toggle\", \"visual\",\n            \"ariaTemplate\", \"ariaContent\"\n        ] });\n    },\n\n    createSegment: function(value, fields) {\n        var seriesOptions = deepExtend({}, fields.series);\n        this.evalSegmentOptions(seriesOptions, value, fields);\n\n        this.createLegendItem(value, seriesOptions, fields);\n\n        if (fields.visible !== false) {\n\n            var segment = new FunnelSegment(value, seriesOptions, fields);\n            $.extend(segment, fields);\n\n            this.append(segment);\n            this.points.push(segment);\n\n            return segment;\n        }\n    },\n\n    createLabel: function(value, fields) {\n        var series = fields.series;\n        var dataItem = fields.dataItem;\n        var labels = deepExtend({}, this.options.labels, series.labels);\n        var text = value;\n\n        if (labels.visible) {\n            var labelTemplate = getTemplate(labels);\n            var data = {\n                dataItem: dataItem,\n                value: value,\n                percentage: fields.percentage,\n                category: fields.category,\n                series: series\n            };\n            if (labelTemplate) {\n                text = labelTemplate(data);\n            } else if (labels.format) {\n                text = this.chartService.format.auto(labels.format, text);\n            }\n\n            if (!labels.color) {\n                labels.color = autoTextColor(series.color);\n                if (!labels.background) {\n                    labels.background = series.color;\n                }\n            }\n\n            this.evalSegmentOptions(labels, value, fields);\n            var textBox = new TextBox(text, deepExtend({\n                vAlign: labels.position\n            }, labels), data);\n\n            this.labels.push(textBox);\n\n            return textBox;\n        }\n    },\n\n    labelPadding: function() {\n        var labels = this.labels;\n        var padding = { left: 0, right: 0 };\n\n        for (var i = 0; i < labels.length; i++) {\n            var label = labels[i];\n            var align = label.options.align;\n            if (align !== CENTER) {\n                var width = labels[i].box.width();\n\n                if (align === LEFT) {\n                    padding.left = Math.max(padding.left, width);\n                } else {\n                    padding.right = Math.max(padding.right, width);\n                }\n            }\n        }\n\n        return padding;\n    },\n\n    dynamicSlopeReflow: function(box, width, totalHeight) {\n        var ref = this;\n        var options = ref.options;\n        var segments = ref.points;\n        var count = segments.length;\n        var firstSegment = segments[0];\n        var maxSegment = firstSegment;\n\n        for (var idx = 0; idx < segments.length; idx++) {\n            if (segments[idx].percentage > maxSegment.percentage) {\n                maxSegment = segments[idx];\n            }\n        }\n\n        var lastUpperSide = (firstSegment.percentage / maxSegment.percentage) * width;\n        var previousOffset = (width - lastUpperSide) / 2;\n        var previousHeight = 0;\n\n        for (var idx$1 = 0; idx$1 < count; idx$1++) {\n            var percentage = segments[idx$1].percentage;\n            var nextSegment = segments[idx$1 + 1];\n            var nextPercentage = (nextSegment ? nextSegment.percentage : percentage);\n            var points = segments[idx$1].points = [];\n            var height = (options.dynamicHeight) ? (totalHeight * percentage) : (totalHeight / count);\n            var offset = (void 0);\n\n            if (!percentage) {\n                offset = nextPercentage ? 0 : width / 2;\n            } else {\n                offset = (width - lastUpperSide * (nextPercentage / percentage)) / 2;\n            }\n\n            offset = limitValue(offset, 0, width);\n\n            points.push(new GeometryPoint(box.x1 + previousOffset, box.y1 + previousHeight));\n            points.push(new GeometryPoint(box.x1 + width - previousOffset, box.y1 + previousHeight));\n            points.push(new GeometryPoint(box.x1 + width - offset, box.y1 + height + previousHeight));\n            points.push(new GeometryPoint(box.x1 + offset, box.y1 + height + previousHeight));\n\n            previousOffset = offset;\n            previousHeight += height + options.segmentSpacing;\n            lastUpperSide = limitValue(width - 2 * offset, 0, width);\n        }\n    },\n\n    constantSlopeReflow: function(box, width, totalHeight) {\n        var ref = this;\n        var options = ref.options;\n        var segments = ref.points;\n        var count = segments.length;\n        var decreasingWidth = options.neckRatio <= 1;\n        var neckRatio = decreasingWidth ? options.neckRatio * width : width;\n        var previousOffset = decreasingWidth ? 0 : (width - width / options.neckRatio) / 2;\n        var topMostWidth = decreasingWidth ? width : width - previousOffset * 2;\n        var finalNarrow = (topMostWidth - neckRatio) / 2;\n        var previousHeight = 0;\n\n        for (var idx = 0; idx < count; idx++) {\n            var points = segments[idx].points = [];\n            var percentage = segments[idx].percentage;\n            var offset = (options.dynamicHeight) ? (finalNarrow * percentage) : (finalNarrow / count);\n            var height = (options.dynamicHeight) ? (totalHeight * percentage) : (totalHeight / count);\n\n            points.push(new GeometryPoint(box.x1 + previousOffset, box.y1 + previousHeight));\n            points.push(new GeometryPoint(box.x1 + width - previousOffset, box.y1 + previousHeight));\n            points.push(new GeometryPoint(box.x1 + width - previousOffset - offset, box.y1 + height + previousHeight));\n            points.push(new GeometryPoint(box.x1 + previousOffset + offset,box.y1 + height + previousHeight));\n            previousOffset += offset;\n            previousHeight += height + options.segmentSpacing;\n        }\n    },\n\n    reflow: function(chartBox) {\n        var points = this.points;\n        var count = points.length;\n\n        if (!count) {\n            return;\n        }\n\n        var options = this.options;\n        var box = chartBox.clone().unpad(this.labelPadding());\n        var totalHeight = box.height() - options.segmentSpacing * (count - 1);\n        var width = box.width();\n\n        if (options.dynamicSlope) {\n            this.dynamicSlopeReflow(box, width, totalHeight);\n        } else {\n            this.constantSlopeReflow(box, width, totalHeight);\n        }\n\n        for (var idx = 0; idx < count; idx++) {\n            points[idx].reflow(chartBox);\n        }\n    }\n});\n\nsetDefaultOptions(FunnelChart, {\n    neckRatio: 0.3,\n    width: 300,\n    dynamicSlope: false,\n    dynamicHeight: true,\n    segmentSpacing: 0,\n    labels: {\n        visible: false,\n        align: CENTER,\n        position: CENTER,\n        zIndex: 1\n    }\n});\n\ndeepExtend(FunnelChart.prototype, PieChartMixin);\n\nvar MAX_NECK_RATIO = 1e6;\n\nvar PyramidChart = FunnelChart.extend({\n    init: function(plotArea, options) {\n        options.dynamicSlope = false;\n        options.neckRatio = MAX_NECK_RATIO;\n\n        FunnelChart.fn.init.call(this, plotArea, options);\n    }\n});\n\nvar FunnelPlotArea = PlotAreaBase.extend({\n    render: function() {\n        this.createChart(FunnelChart, filterSeriesByType(this.series, [ FUNNEL ]));\n        this.createChart(PyramidChart, filterSeriesByType(this.series, [ PYRAMID ]));\n    },\n\n    createChart: function(chartType, series) {\n        var firstSeries = series[0];\n        if (!firstSeries) {\n            return;\n        }\n\n        var chart = new chartType(this, {\n            series: series,\n            legend: this.options.legend,\n            neckRatio: firstSeries.neckRatio,\n            dynamicHeight: firstSeries.dynamicHeight,\n            dynamicSlope: firstSeries.dynamicSlope,\n            segmentSpacing: firstSeries.segmentSpacing,\n            highlight: firstSeries.highlight\n        });\n\n        this.appendChart(chart);\n    },\n\n    appendChart: function(chart, pane) {\n        PlotAreaBase.fn.appendChart.call(this, chart, pane);\n        append(this.options.legend.data, chart.legendItems);\n    },\n\n    _pointsByVertical: function(basePoint) {\n        return this.pointsBySeriesIndex(basePoint.series.index);\n    },\n\n    getPointToTheRight: function(point) {\n        return this.getPointBelow(point);\n    },\n\n    getPointToTheLeft: function(point) {\n        return this.getPointAbove(point);\n    }\n});\n\n// Linear color scale from the given color to white minus minimum lightness offset.\nvar colorScale = function (color, minLightnessOffset) {\n    if (minLightnessOffset === void 0) { minLightnessOffset = 0.05; }\n\n    var baseColor = kendo.parseColor(color);\n    var offset = 1 - minLightnessOffset;\n\n    return function (value) {\n        var hsl = baseColor.toHSL();\n        var range = 100 - hsl.l;\n        var point = offset - value;\n        hsl.l += Math.min(point * range, range);\n\n        return hsl.toCss();\n    };\n};\n\nvar HeatmapPoint = ChartElement.extend({\n    init: function(value, options) {\n        ChartElement.fn.init.call(this);\n\n        this.options = options;\n        this.color = options.color || WHITE;\n        this.value = value;\n    },\n\n    render: function() {\n        if (this._rendered) {\n            return;\n        }\n\n        this._rendered = true;\n\n        this.createMarker();\n        this.createLabel();\n        this.createNote();\n    },\n\n    createLabel: function() {\n        var options = this.options;\n        var labels = options.labels;\n\n        if (labels.visible) {\n            this.label = this.createLabelElement(labels);\n            this.append(this.label);\n        }\n    },\n\n    createLabelElement: function(options) {\n        var labelColor = options.color;\n\n        if (!labelColor) {\n            labelColor = autoTextColor(this.color);\n        }\n\n        return new TextBox(this.getLabelText(options),\n            deepExtend({\n                align: CENTER,\n                vAlign: CENTER,\n                margin: {\n                    left: 5,\n                    right: 5\n                },\n                zIndex: valueOrDefault(options.zIndex, this.series.zIndex)\n            },\n            options, {\n                color: labelColor\n            }),\n            this.pointData()\n        );\n    },\n\n    getLabelText: function(options) {\n        var labelTemplate = getTemplate(options);\n\n        if (labelTemplate) {\n            return labelTemplate(this.pointData());\n        }\n\n        return this.formatValue(options.format);\n    },\n\n    formatValue: function(format) {\n        return this.owner.formatPointValue(this, format);\n    },\n\n    reflow: function(targetBox) {\n        this.render();\n\n        var label = this.label;\n\n        this.box = targetBox;\n\n        if (label) {\n            label.reflow(this.markerBox());\n        }\n\n        if (this.note) {\n            this.note.reflow(targetBox);\n        }\n\n        this.marker.reflow(this.markerBox());\n    },\n\n    createVisual: function() {\n        ChartElement.fn.createVisual.call(this);\n\n        this.addAccessibilityAttributesToVisual();\n    },\n\n    markerBox: function() {\n        var options = this.options;\n        var markers = options.markers;\n        var border = markers.border;\n        var rect = this.box.toRect();\n        var type = valueOrDefault(markers.type, 'rect');\n        var isRoundRect = type === datavizConstants.ROUNDED_RECT;\n        var borderWidth = valueOrDefault(border.width, isRoundRect ? 1 : 0);\n        var halfBorderWidth = Math.round(borderWidth / 2);\n\n        if (markers.size) {\n            var center = rect.center();\n            rect.size.width = rect.size.height = markers.size;\n            rect.origin.x = Math.round(center.x - rect.size.width / 2);\n            rect.origin.y = Math.round(center.y - rect.size.height / 2);\n        }\n\n        rect.size.width -= borderWidth;\n        rect.size.height -= borderWidth;\n        rect.origin.y += halfBorderWidth + 0.5;\n        rect.origin.x += halfBorderWidth + 0.5;\n\n        return dataviz.rectToBox(rect);\n    },\n\n    markerBorder: function() {\n        var options = this.options;\n        var markers = options.markers;\n        var border = markers.border;\n        var opacity = valueOrDefault(border.opacity, options.opacity);\n\n        return {\n            color: border.color || this.color,\n            width: border.width,\n            opacity: opacity,\n            dashType: border.dashType\n        };\n    },\n\n    createMarker: function() {\n        var options = this.options;\n        var markerOptions = options.markers;\n        var marker = new ShapeElement({\n            type: valueOrDefault(markerOptions.type, 'rect'),\n            width: markerOptions.size,\n            height: markerOptions.size,\n            rotation: markerOptions.rotation,\n            background: this.color,\n            border: this.markerBorder(),\n            borderRadius: markerOptions.borderRadius,\n            opacity: this.series.opacity || options.opacity,\n            zIndex: valueOrDefault(options.zIndex, this.series.zIndex),\n            animation: options.animation,\n            visual: options.visual\n        }, {\n            dataItem: this.dataItem,\n            value: this.value,\n            series: this.series,\n            category: this.category\n        });\n\n        this.marker = marker;\n        this.append(marker);\n    },\n\n    createHighlight: function(style) {\n        var options = this.options;\n        var markerOptions = this.options.highlight.markers || this.options.markers;\n\n        var highlight = new ShapeElement({\n            type: valueOrDefault(markerOptions.type, 'rect'),\n            width: markerOptions.size,\n            height: markerOptions.size,\n            rotation: markerOptions.rotation,\n            background: markerOptions.color || this.color,\n            border: this.markerBorder(),\n            borderRadius: markerOptions.borderRadius,\n            opacity: this.series.opacity || options.opacity,\n            zIndex: valueOrDefault(options.zIndex, this.series.zIndex)\n        });\n\n        highlight.reflow(this.markerBox());\n        var visual = highlight.getElement();\n\n        visual.options.fill = style.fill;\n        visual.options.stroke = style.stroke;\n\n        return visual;\n    },\n\n    highlightVisual: function() {\n        return this.rectVisual;\n    },\n\n    highlightVisualArgs: function() {\n        return {\n            options: this.options,\n            rect: this.box.toRect(),\n            visual: this.rectVisual\n        };\n    },\n\n    createFocusHighlight: function() {\n        var markerOptions = this.options.markers;\n        var highlightOptions = this.options.accessibility.highlight;\n\n        var highlight = new ShapeElement({\n            type: valueOrDefault(markerOptions.type, 'rect'),\n            width: markerOptions.size,\n            height: markerOptions.size,\n            rotation: markerOptions.rotation,\n            background: highlightOptions.color,\n            border: highlightOptions.border,\n            borderRadius: markerOptions.borderRadius,\n            padding: highlightOptions.border.width / 2,\n            zIndex: highlightOptions.zIndex\n        });\n\n        highlight.reflow(this.markerBox());\n\n        return highlight.getElement();\n    },\n\n    tooltipAnchor: function() {\n        var left = this.box.center().x;\n        var top = this.box.y1 - TOOLTIP_OFFSET;\n\n        return {\n            point: new Point(left, top),\n            align: {\n                horizontal: CENTER,\n                vertical: BOTTOM\n            }\n        };\n    },\n\n    overlapsBox: function(box) {\n        return this.box.overlaps(box);\n    },\n\n    unclipElements: function() {\n        /* noop, clip labels */\n    },\n\n    pointData: function() {\n        return {\n            x: this.value.x,\n            y: this.value.y,\n            value: this.value.value,\n            dataItem: this.dataItem,\n            series: this.series\n        };\n    }\n});\n\ndeepExtend(HeatmapPoint.prototype, PointEventsMixin);\ndeepExtend(HeatmapPoint.prototype, NoteMixin);\ndeepExtend(HeatmapPoint.prototype, AccessibilityAttributesMixin);\n\nHeatmapPoint.prototype.defaults = {\n    markers: {\n        type: 'rect',\n        borderRadius: 4,\n        border: {\n            color: 'transparent'\n        }\n    },\n    padding: { top: 1 },\n    labels: {\n        visible: false,\n        padding: 3\n    },\n    opacity: 1,\n    notes: {\n        label: {}\n    },\n    accessibility: {\n        role: CHART_POINT_ROLE,\n        className: CHART_POINT_CLASSNAME,\n        ariaRoleDescription: CHART_POINT_ROLE_DESCRIPTION\n    }\n};\n\nvar HeatmapChart = ChartElement.extend({\n    init: function(plotArea, options) {\n        ChartElement.fn.init.call(this, options);\n\n        this.plotArea = plotArea;\n        this.chartService = plotArea.chartService;\n        this._initFields();\n\n        this.render();\n    },\n\n    _initFields: function() {\n        this.points = [];\n        this.seriesOptions = [];\n        this.valueRange = { min: MAX_VALUE, max: MIN_VALUE };\n        this._evalSeries = [];\n    },\n\n    render: function() {\n        this.setRange();\n        this.traverseDataPoints(this.addValue.bind(this));\n    },\n\n    setRange: function() {\n        var this$1$1 = this;\n\n        var ref = this;\n        var series = ref.options.series;\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n\n            for (var pointIx = 0; pointIx < currentSeries.data.length; pointIx++) {\n                var ref$1 = this$1$1.plotArea.bindPoint(currentSeries, pointIx);\n                var valueFields = ref$1.valueFields;\n                if (defined(valueFields.value) && valueFields.value !== null) {\n                    this$1$1.valueRange.min = Math.min(this$1$1.valueRange.min, valueFields.value);\n                    this$1$1.valueRange.max = Math.max(this$1$1.valueRange.max, valueFields.value);\n                }\n            }\n        }\n    },\n\n    addValue: function(value, fields) {\n        var point;\n        if (value && defined(value.value) && value.value !== null) {\n            point = this.createPoint(value, fields);\n            if (point) {\n                $.extend(point, fields);\n            }\n        }\n\n        this.points.push(point);\n    },\n\n    evalPointOptions: function(options, value, fields) {\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var state = {\n            defaults: series._defaults,\n            excluded: [\n                \"data\", \"tooltip\", \"content\", \"template\",\n                \"visual\", \"toggle\", \"drilldownSeriesFactory\",\n                \"ariaTemplate\", \"ariaContent\"\n            ]\n        };\n\n        var doEval = this._evalSeries[seriesIx];\n        if (!defined(doEval)) {\n            this._evalSeries[seriesIx] = doEval = evalOptions(options, {}, state, true);\n        }\n\n        var pointOptions = options;\n        if (doEval) {\n            pointOptions = deepExtend({}, options);\n            evalOptions(pointOptions, {\n                value: value,\n                series: series,\n                dataItem: fields.dataItem,\n                min: this.valueRange.min,\n                max: this.valueRange.max\n            }, state);\n        }\n\n        return pointOptions;\n    },\n\n    pointType: function() {\n        return HeatmapPoint;\n    },\n\n    pointOptions: function(series, seriesIx) {\n        var options = this.seriesOptions[seriesIx];\n        if (!options) {\n            var defaults = this.pointType().prototype.defaults;\n            this.seriesOptions[seriesIx] = options = deepExtend({}, defaults, {\n                markers: {\n                    opacity: series.opacity\n                },\n                tooltip: {\n                    format: this.options.tooltip.format\n                },\n                labels: {\n                    format: this.options.labels.format\n                }\n            }, series);\n        }\n\n        return options;\n    },\n\n    createPoint: function(value, fields) {\n        var series = fields.series;\n        var pointOptions = this.pointOptions(series, fields.seriesIx);\n        var color = fields.color || series.color;\n\n        pointOptions = this.evalPointOptions(pointOptions, value, fields);\n\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        } else if (this.valueRange.max !== 0) {\n            var scale = colorScale(color);\n            color = scale(value.value / this.valueRange.max);\n        }\n\n        var point = new HeatmapPoint(value, pointOptions);\n        point.color = color;\n\n        this.append(point);\n\n        return point;\n    },\n\n    seriesAxes: function(series) {\n        var xAxisName = series.xAxis;\n        var yAxisName = series.yAxis;\n        var plotArea = this.plotArea;\n        var xAxis = xAxisName ? plotArea.namedXAxes[xAxisName] : plotArea.axisX;\n        var yAxis = yAxisName ? plotArea.namedYAxes[yAxisName] : plotArea.axisY;\n\n        if (!xAxis) {\n            throw new Error(\"Unable to locate X axis with name \" + xAxisName);\n        }\n\n        if (!yAxis) {\n            throw new Error(\"Unable to locate Y axis with name \" + yAxisName);\n        }\n\n        return { xAxis: xAxis, yAxis: yAxis };\n    },\n\n    reflow: function(targetBox) {\n        var this$1$1 = this;\n\n        var chartPoints = this.points;\n        var limit = !this.options.clip;\n        var pointIx = 0;\n\n        this.traverseDataPoints(function (value, fields) {\n            var point = chartPoints[pointIx++];\n            var ref = this$1$1.seriesAxes(fields.series);\n            var xAxis = ref.xAxis;\n            var yAxis = ref.yAxis;\n            var indexX = xAxis.categoryIndex(value.x);\n            var indexY = yAxis.categoryIndex(value.y);\n            var slotX = xAxis.getSlot(indexX, indexX, limit);\n            var slotY = yAxis.getSlot(indexY, indexY, limit);\n\n            if (point) {\n                if (slotX && slotY) {\n                    var pointSlot = this$1$1.pointSlot(slotX, slotY);\n                    point.reflow(pointSlot);\n                } else {\n                    point.visible = false;\n                }\n            }\n        });\n\n        this.box = targetBox;\n    },\n\n    pointSlot: function(slotX, slotY) {\n        return new Box(slotX.x1, slotY.y1, slotX.x2, slotY.y2);\n    },\n\n    traverseDataPoints: function(callback) {\n        var this$1$1 = this;\n\n        var ref = this;\n        var series = ref.options.series;\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var ref$1 = this$1$1.seriesAxes(currentSeries);\n            var xAxis = ref$1.xAxis;\n            var yAxis = ref$1.yAxis;\n            var xRange = xAxis.currentRangeIndices();\n            var yRange = yAxis.currentRangeIndices();\n\n            for (var pointIx = 0; pointIx < currentSeries.data.length; pointIx++) {\n                var ref$2 = this$1$1.plotArea.bindPoint(currentSeries, pointIx);\n                var value = ref$2.valueFields;\n                var fields = ref$2.fields;\n                var xIndex = xAxis.totalIndex(value.x);\n                var yIndex = yAxis.totalIndex(value.y);\n                var xIn = xRange.min <= xIndex && xIndex <= xRange.max;\n                var yIn = yRange.min <= yIndex && yIndex <= yRange.max;\n\n                if (xIn && yIn) {\n                    callback(value, deepExtend({\n                        pointIx: pointIx,\n                        series: currentSeries,\n                        seriesIx: seriesIx,\n                        dataItem: currentSeries.data[pointIx],\n                        owner: this$1$1\n                    }, fields));\n                }\n            }\n        }\n    },\n\n    formatPointValue: function(point, format) {\n        var value = point.value;\n        return this.chartService.format.auto(format, value.x, value.y, value.value);\n    },\n\n    animationPoints: function() {\n        var points = this.points;\n        var result = [];\n        for (var idx = 0; idx < points.length; idx++) {\n            result.push((points[idx] || {}).marker);\n        }\n        return result;\n    }\n});\nsetDefaultOptions(HeatmapChart, {\n    series: [],\n    tooltip: {\n        format: \"{0}, {1}: {2}\"\n    },\n    labels: {\n        format: \"{2}\"\n    },\n    clip: true\n});\n\nvar HeatmapPlotArea = PlotAreaBase.extend({\n    initFields: function() {\n        this.namedXAxes = {};\n        this.namedYAxes = {};\n    },\n\n    render: function(panes) {\n        if (panes === void 0) { panes = this.panes; }\n\n        this.bindCategories();\n        this.createAxes(panes);\n        this.createCharts(panes);\n        this.createAxisLabels();\n    },\n\n    bindCategories: function() {\n        var this$1$1 = this;\n\n        var series = this.srcSeries || this.series;\n\n        for (var i = 0; i < series.length; i++) {\n            var currentSeries = series[i];\n            var data = currentSeries.data || [];\n            var ref = this$1$1.seriesAxes(currentSeries);\n            var xAxis = ref.xAxis;\n            var yAxis = ref.yAxis;\n\n            var xCategories = dataviz.createHashSet(xAxis.categories || []);\n            var yCategories = dataviz.createHashSet(yAxis.categories || []);\n\n            for (var pointIndex = 0; pointIndex < data.length; pointIndex++) {\n                var ref$1 = SeriesBinder.current.bindPoint(currentSeries, pointIndex).valueFields;\n                var x = ref$1.x;\n                var y = ref$1.y;\n\n                if (!xCategories.has(x)) {\n                    xCategories.add(x);\n                }\n\n                if (!yCategories.has(y)) {\n                    yCategories.add(y);\n                }\n            }\n\n            xAxis.categories = xCategories.values();\n            yAxis.categories = yCategories.values();\n        }\n    },\n\n    createCharts: function(panes) {\n        var this$1$1 = this;\n\n        var seriesByPane = this.groupSeriesByPane();\n\n        for (var i = 0; i < panes.length; i++) {\n            var pane = panes[i];\n            var paneSeries = seriesByPane[pane.options.name || \"default\"] || [];\n            this$1$1.addToLegend(paneSeries);\n            var filteredSeries = this$1$1.filterVisibleSeries(paneSeries);\n\n            if (!filteredSeries) {\n                continue;\n            }\n\n            this$1$1.createHeatmapChart(\n                filterSeriesByType(filteredSeries, [ HEATMAP ]),\n                pane\n            );\n        }\n    },\n\n    createHeatmapChart: function(series, pane) {\n        var chart = new HeatmapChart(this, {\n            series: series\n        });\n\n        this.appendChart(chart, pane);\n    },\n\n    seriesPaneName: function(series) {\n        var options = this.options;\n        var xAxisName = series.xAxis;\n        var xAxisOptions = [].concat(options.xAxis);\n        var xAxis = grep(xAxisOptions, function(a) { return a.name === xAxisName; })[0];\n        var yAxisName = series.yAxis;\n        var yAxisOptions = [].concat(options.yAxis);\n        var yAxis = grep(yAxisOptions, function(a) { return a.name === yAxisName; })[0];\n        var panes = options.panes || [ {} ];\n        var defaultPaneName = panes[0].name || \"default\";\n        var paneName = (xAxis || {}).pane || (yAxis || {}).pane || defaultPaneName;\n\n        return paneName;\n    },\n\n    seriesAxes: function(series) {\n        var xAxis;\n        var yAxis;\n\n        var options = this.options;\n\n        var xAxisOptions = [].concat(options.xAxis);\n        var xAxisName = series.xAxis;\n        if (xAxisName) {\n            xAxis = xAxisOptions.find(function (axis) { return axis.name === xAxisName; });\n        } else {\n            xAxis = xAxisOptions[0];\n        }\n\n        var yAxisOptions = [].concat(options.yAxis);\n        var yAxisName = series.yAxis;\n        if (yAxisName) {\n            yAxis = yAxisOptions.find(function (axis) { return axis.name === yAxisName; });\n        } else {\n            yAxis = yAxisOptions[0];\n        }\n\n        if (!xAxis) {\n            throw new Error(\"Unable to locate X axis with name \" + xAxisName);\n        }\n\n        if (!yAxis) {\n            throw new Error(\"Unable to locate Y axis with name \" + yAxisName);\n        }\n\n        return { xAxis: xAxis, yAxis: yAxis };\n    },\n\n    createAxisLabels: function() {\n        var axes = this.axes;\n        for (var i = 0; i < axes.length; i++) {\n            axes[i].createLabels();\n        }\n    },\n\n    createXYAxis: function(options, vertical, axisIndex) {\n        var axisName = options.name;\n        var namedAxes = vertical ? this.namedYAxes : this.namedXAxes;\n        var axisOptions = $.extend({\n            axisCrossingValue: 0\n        }, options, {\n            vertical: vertical,\n            reverse: (vertical || this.chartService.rtl) ? !options.reverse : options.reverse,\n            justified: false\n        });\n        var firstCategory = axisOptions.categories ? axisOptions.categories[0] : null;\n        var typeSamples = [ axisOptions.min, axisOptions.max, firstCategory ];\n        var series = this.series;\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var seriesAxisName = currentSeries[vertical ? \"yAxis\" : \"xAxis\"];\n            if ((seriesAxisName === axisOptions.name) || (axisIndex === 0 && !seriesAxisName)) {\n                var firstPointValue = SeriesBinder.current.bindPoint(currentSeries, 0).valueFields;\n                typeSamples.push(firstPointValue[vertical ? \"y\" : \"x\"]);\n\n                break;\n            }\n        }\n\n        var inferredDate;\n\n        for (var i = 0; i < typeSamples.length; i++) {\n            if (typeSamples[i] instanceof Date) {\n                inferredDate = true;\n                break;\n            }\n        }\n\n        var axisType;\n        if (equalsIgnoreCase(axisOptions.type, DATE) || (!axisOptions.type && inferredDate)) {\n            axisType = dataviz.DateCategoryAxis;\n        } else {\n            axisType = CategoryAxis;\n        }\n\n        var axis = new axisType(axisOptions, this.chartService);\n        axis.axisIndex = axisIndex;\n\n        if (axisName) {\n            if (namedAxes[axisName]) {\n                throw new Error(((vertical ? \"Y\" : \"X\") + \" axis with name \" + axisName + \" is already defined\"));\n            }\n            namedAxes[axisName] = axis;\n        }\n\n        this.appendAxis(axis);\n        axis.indexCategories();\n\n        return axis;\n    },\n\n    createAxes: function(panes) {\n        var this$1$1 = this;\n\n        var options = this.options;\n        var xAxesOptions = [].concat(options.xAxis);\n        var xAxes = [];\n        var yAxesOptions = [].concat(options.yAxis);\n        var yAxes = [];\n\n        for (var idx = 0; idx < xAxesOptions.length; idx++) {\n            var axisPane = this$1$1.findPane(xAxesOptions[idx].pane);\n            if (inArray(axisPane, panes)) {\n                xAxes.push(this$1$1.createXYAxis(xAxesOptions[idx], false, idx));\n            }\n        }\n\n        for (var idx$1 = 0; idx$1 < yAxesOptions.length; idx$1++) {\n            var axisPane$1 = this$1$1.findPane(yAxesOptions[idx$1].pane);\n            if (inArray(axisPane$1, panes)) {\n                yAxes.push(this$1$1.createXYAxis(yAxesOptions[idx$1], true, idx$1));\n            }\n        }\n\n        this.axisX = this.axisX || xAxes[0];\n        this.axisY = this.axisY || yAxes[0];\n    },\n\n    removeAxis: function(axis) {\n        var axisName = axis.options.name;\n\n        PlotAreaBase.fn.removeAxis.call(this, axis);\n\n        if (axis.options.vertical) {\n            delete this.namedYAxes[axisName];\n        } else {\n            delete this.namedXAxes[axisName];\n        }\n\n        if (axis === this.axisX) {\n            delete this.axisX;\n        }\n\n        if (axis === this.axisY) {\n            delete this.axisY;\n        }\n    },\n\n    _dispatchEvent: function(chart, e, eventType) {\n        var coords = chart._eventCoordinates(e);\n        var point = new Point(coords.x, coords.y);\n        var allAxes = this.axes;\n        var length = allAxes.length;\n        var xValues = [];\n        var yValues = [];\n\n        for (var i = 0; i < length; i++) {\n            var axis = allAxes[i];\n            var values = axis.options.vertical ? yValues : xValues;\n            appendIfNotNull(values, axis.getCategory(point));\n        }\n\n        if (xValues.length > 0 && yValues.length > 0) {\n            chart.trigger(eventType, {\n                element: eventElement(e),\n                originalEvent: e,\n                x: singleItemOrArray(xValues),\n                y: singleItemOrArray(yValues)\n            });\n        }\n    },\n\n    updateAxisOptions: function(axis, options) {\n        var vertical = axis.options.vertical;\n        var axes = this.groupAxes(this.panes);\n        var index = (vertical ? axes.y : axes.x).indexOf(axis);\n\n        updateAxisOptions$2(this.options, index, vertical, options);\n        updateAxisOptions$2(this.originalOptions, index, vertical, options);\n    },\n\n    crosshairOptions: function(axis) {\n        // Stack the crosshair above the series points.\n        return $.extend({}, axis.options.crosshair, { zIndex: 0 });\n    },\n\n    _pointsByVertical: function(basePoint, offset) {\n        var this$1$1 = this;\n        if (offset === void 0) { offset = 0; }\n\n        var normalizedOffset = this.axisX.options.reverse ? offset * -1 : offset;\n        var axisXItems = this.axisX.children;\n        var xIndex = this._getPointAxisXIndex(basePoint) + normalizedOffset;\n\n        xIndex = cycleIndex(xIndex, axisXItems.length);\n        var targetXValue = axisXItems[xIndex].value;\n\n        var points = this\n            .filterPoints(function (point) { return compareValues(point.pointData().x, targetXValue); })\n            .sort(function (a, b) { return this$1$1._getPointAxisYIndex(a) - this$1$1._getPointAxisYIndex(b); });\n\n        if (this.axisY.options.reverse) {\n            return points.reverse();\n        }\n\n        return points;\n    },\n\n    _pointsByHorizontal: function(basePoint, offset) {\n        var this$1$1 = this;\n        if (offset === void 0) { offset = 0; }\n\n        var normalizedOffset = this.axisY.options.reverse ? offset * -1 : offset;\n        var axisYItems = this.axisY.children;\n        var yIndex = this._getPointAxisYIndex(basePoint) + normalizedOffset;\n\n        yIndex = cycleIndex(yIndex, axisYItems.length);\n        var targetYValue = axisYItems[yIndex].value;\n\n        var points = this\n            .filterPoints(function (point) { return compareValues(point.pointData().y, targetYValue); })\n            .sort(function (a, b) { return this$1$1._getPointAxisXIndex(a) - this$1$1._getPointAxisXIndex(b); });\n\n        if (this.axisX.options.reverse) {\n            return points.reverse();\n        }\n\n        return points;\n    },\n\n    _getPointAxisXIndex: function(point) {\n        return this._getPointAxisIndex(this.axisX, point.pointData().x);\n    },\n\n    _getPointAxisYIndex: function(point) {\n        return this._getPointAxisIndex(this.axisY, point.pointData().y);\n    },\n\n    _getPointAxisIndex: function(axis, pointValue) {\n        return axis.children.findIndex(function (axisItem) { return compareValues(pointValue, axisItem.value); });\n    }\n});\n\nfunction compareValues(a, b) {\n    if (a instanceof Date && b instanceof Date) {\n        return dataviz.dateEquals(a, b);\n    }\n\n    return a === b;\n}\n\nfunction updateAxisOptions$2(targetOptions, axisIndex, vertical, options) {\n    var axisOptions = ([].concat(vertical ? targetOptions.yAxis : targetOptions.xAxis))[axisIndex];\n    deepExtend(axisOptions, options);\n}\n\nsetDefaultOptions(HeatmapPlotArea, {\n    xAxis: {},\n    yAxis: {}\n});\n\ndeepExtend(HeatmapPlotArea.prototype, PlotAreaEventsMixin);\n\nvar COLOR = \"color\";\nvar FIRST = \"first\";\nvar FROM = \"from\";\nvar MAX = \"max\";\nvar MIN = \"min\";\nvar NOTE_TEXT = \"noteText\";\nvar SUMMARY_FIELD = \"summary\";\nvar TO = \"to\";\n\nPlotAreaFactory.current.register(CategoricalPlotArea, [\n    BAR, COLUMN, LINE, VERTICAL_LINE, AREA, VERTICAL_AREA,\n    CANDLESTICK, OHLC, BULLET, VERTICAL_BULLET, BOX_PLOT, VERTICAL_BOX_PLOT,\n    RANGE_COLUMN, RANGE_BAR, WATERFALL, HORIZONTAL_WATERFALL, RANGE_AREA, VERTICAL_RANGE_AREA ].concat( TRENDLINE_SERIES\n));\n\nPlotAreaFactory.current.register(XYPlotArea, [\n    SCATTER, SCATTER_LINE, BUBBLE ].concat( TRENDLINE_SERIES\n));\n\nPlotAreaFactory.current.register(PiePlotArea, [ PIE ]);\nPlotAreaFactory.current.register(DonutPlotArea, [ DONUT ]);\nPlotAreaFactory.current.register(FunnelPlotArea, [ FUNNEL, PYRAMID ]);\n\nPlotAreaFactory.current.register(PolarPlotArea, [\n    POLAR_AREA, POLAR_LINE, POLAR_SCATTER ].concat( TRENDLINE_SERIES\n));\n\nPlotAreaFactory.current.register(RadarPlotArea, [\n    RADAR_AREA, RADAR_COLUMN, RADAR_LINE ].concat( TRENDLINE_SERIES\n));\n\nPlotAreaFactory.current.register(HeatmapPlotArea, [ HEATMAP ]);\n\nSeriesBinder.current.register(\n    [ BAR, COLUMN, LINE, VERTICAL_LINE, AREA, VERTICAL_AREA ],\n    [ VALUE ], [ CATEGORY, COLOR, NOTE_TEXT, ERROR_LOW_FIELD, ERROR_HIGH_FIELD, DRILLDOWN_FIELD ]\n);\n\nSeriesBinder.current.register(\n    [ RANGE_COLUMN, RANGE_BAR, RANGE_AREA, VERTICAL_RANGE_AREA ],\n    [ FROM, TO ], [ CATEGORY, COLOR, NOTE_TEXT, DRILLDOWN_FIELD ]\n);\n\nSeriesBinder.current.register(\n    [ WATERFALL, HORIZONTAL_WATERFALL ],\n    [ VALUE ], [ CATEGORY, COLOR, NOTE_TEXT, SUMMARY_FIELD, DRILLDOWN_FIELD ]\n);\n\nSeriesBinder.current.register([ POLAR_AREA, POLAR_LINE, POLAR_SCATTER ], [ X, Y ], [ COLOR, DRILLDOWN_FIELD ]);\nSeriesBinder.current.register([ RADAR_AREA, RADAR_COLUMN, RADAR_LINE ], [ VALUE ], [ CATEGORY, COLOR, DRILLDOWN_FIELD ]);\n\nSeriesBinder.current.register(\n    [ FUNNEL, PYRAMID ],\n    [ VALUE ], [ CATEGORY, COLOR, \"visibleInLegend\", \"visible\", DRILLDOWN_FIELD ]\n);\n\nDefaultAggregates.current.register(\n    [ BAR, COLUMN, LINE, VERTICAL_LINE, AREA, VERTICAL_AREA, WATERFALL, HORIZONTAL_WATERFALL ],\n    { value: MAX, color: FIRST, noteText: FIRST, errorLow: MIN, errorHigh: MAX }\n);\n\nDefaultAggregates.current.register(\n    [ RANGE_COLUMN, RANGE_BAR, RANGE_AREA, VERTICAL_RANGE_AREA ],\n    { from: MIN, to: MAX, color: FIRST, noteText: FIRST }\n);\n\nDefaultAggregates.current.register(\n    [ RADAR_AREA, RADAR_COLUMN, RADAR_LINE ],\n    { value: MAX, color: FIRST }\n);\n\nSeriesBinder.current.register(\n    [ SCATTER, SCATTER_LINE, BUBBLE ],\n    [ X, Y ], [ COLOR, NOTE_TEXT, X_ERROR_LOW_FIELD, X_ERROR_HIGH_FIELD, Y_ERROR_LOW_FIELD, Y_ERROR_HIGH_FIELD ]\n);\n\nSeriesBinder.current.register(\n    [ BUBBLE ], [ X, Y, \"size\" ], [ COLOR, CATEGORY, NOTE_TEXT ]\n);\n\nSeriesBinder.current.register(\n    [ HEATMAP ],\n    [ X, Y, VALUE ], [ COLOR, NOTE_TEXT ]\n);\n\nSeriesBinder.current.register(\n    [ CANDLESTICK, OHLC ],\n    [ \"open\", \"high\", \"low\", \"close\" ], [ CATEGORY, COLOR, \"downColor\", NOTE_TEXT ]\n);\n\nDefaultAggregates.current.register(\n    [ CANDLESTICK, OHLC ],\n    { open: MAX, high: MAX, low: MIN, close: MAX,\n        color: FIRST, downColor: FIRST, noteText: FIRST }\n);\n\nSeriesBinder.current.register(\n    [ BOX_PLOT, VERTICAL_BOX_PLOT ],\n    [ \"lower\", \"q1\", \"median\", \"q3\", \"upper\", \"mean\", \"outliers\" ], [ CATEGORY, COLOR, NOTE_TEXT, DRILLDOWN_FIELD ]\n);\n\nDefaultAggregates.current.register(\n    [ BOX_PLOT, VERTICAL_BOX_PLOT ],\n    { lower: MAX, q1: MAX, median: MAX, q3: MAX, upper: MAX, mean: MAX, outliers: FIRST,\n        color: FIRST, noteText: FIRST }\n);\n\nSeriesBinder.current.register(\n    [ BULLET, VERTICAL_BULLET ],\n    [ \"current\", \"target\" ], [ CATEGORY, COLOR, \"visibleInLegend\", NOTE_TEXT, DRILLDOWN_FIELD ]\n);\n\nDefaultAggregates.current.register(\n    [ BULLET, VERTICAL_BULLET ],\n    { current: MAX, target: MAX, color: FIRST, noteText: FIRST }\n);\n\nSeriesBinder.current.register(\n    [ PIE, DONUT ],\n    [ VALUE ], [ CATEGORY, COLOR, \"explode\", \"visibleInLegend\", \"visible\", DRILLDOWN_FIELD ]\n);\n\nvar AXIS_NAMES = [ CATEGORY, VALUE, X, Y ];\n\nvar MOUSEDOWN = \"mousedown\";\nvar MOUSEMOVE = \"mousemove\";\nvar CONTEXTMENU = \"contextmenu\";\nvar MOUSELEAVE = \"mouseleave\";\nvar KEYDOWN = \"keydown\";\nvar FOCUS = \"focus\";\nvar BLUR = \"blur\";\nvar MOUSEMOVE_DELAY = 20;\n\nvar Chart = Class.extend({\n    init: function(element, userOptions, themeOptions, context) {\n        var this$1$1 = this;\n        if (context === void 0) { context = {}; }\n\n        this.observers = [];\n        this.addObserver(context.observer);\n        this.chartService = new services.ChartService(this, context);\n        this.chartService.theme = themeOptions;\n\n        this._initElement(element);\n\n        var options = deepExtend({}, this.options, userOptions);\n        this._originalOptions = deepExtend({}, options);\n        this._theme = themeOptions;\n        this._initTheme(options, themeOptions);\n        this._focusState = {};\n\n        this._initHandlers();\n        this._initSurface();\n\n        this.bindCategories();\n        dataviz.FontLoader.preloadFonts(userOptions, function () {\n            this$1$1.fontLoaded = true;\n            if (!this$1$1._destroyed) {\n                this$1$1.trigger('init');\n                this$1$1._redraw();\n                this$1$1._attachEvents();\n            }\n        });\n    },\n\n    _initElement: function(element) {\n        this._setElementClass(element);\n        element.style.position = \"relative\";\n        element.tabIndex = element.getAttribute(\"tabindex\") ? element.getAttribute(\"tabindex\") : 0;\n        // To support user agents and assistive technologies based on the ARIA 1.0 specification, authors may wish to include the document role as a fallback value, in the form role=\"graphics-document document\".\n        element.setAttribute(\"role\", \"graphics-document document\");\n        while (element.firstChild) {\n            element.removeChild(element.firstChild);\n        }\n        this.element = element;\n    },\n\n    _setElementClass: function(element) {\n        dataviz.addClass(element, \"k-chart\");\n    },\n\n    _initTheme: function(options, themeOptions) {\n        var seriesCopies = [];\n        var series = options.series || [];\n\n        for (var i = 0; i < series.length; i++) {\n            seriesCopies.push($.extend({}, series[i]));\n        }\n        options.series = seriesCopies;\n\n        resolveAxisAliases(options);\n        this.applyDefaults(options, themeOptions);\n\n        // Clean up default if not overriden by data attributes\n        if (options.seriesColors === null) {\n            delete options.seriesColors;\n        }\n\n        if (isString(options.title)) {\n            options.title = { text: options.title };\n        }\n\n        this.options = deepExtend({}, themeOptions, options);\n        this.applySeriesColors();\n    },\n\n    getSize: function() {\n        var chartArea = this.options.chartArea || {};\n        var width = chartArea.width ? parseInt(chartArea.width, 10) : Math.floor(this.element.offsetWidth);\n        var height = chartArea.height ? parseInt(chartArea.height, 10) : Math.floor(this.element.offsetHeight);\n\n        return {\n            width: width,\n            height: height\n        };\n    },\n\n    resize: function(force) {\n        var size = this.getSize();\n        var currentSize = this._size;\n        var hasSize = size.width > 0 || size.height > 0;\n\n        if (force || hasSize && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {\n            this._size = size;\n            this._resize(size, force);\n            this.trigger(\"resize\", size);\n        } else if (hasSize && this._selections && dataviz.find(this._selections, function (s) { return !s.visible; })) {\n            this._destroySelections();\n            this._setupSelection();\n        }\n    },\n\n    _resize: function() {\n        this._noTransitionsRedraw();\n    },\n\n    redraw: function(paneName) {\n        this.applyDefaults(this.options);\n        this.applySeriesColors();\n\n        if (paneName) {\n            var plotArea = this._model._plotArea;\n            var pane = plotArea.findPane(paneName);\n            plotArea.redraw(pane);\n        } else {\n            this._redraw();\n        }\n    },\n\n    getAxis: function(name) {\n        return findAxisByName(name, this._plotArea.axes);\n    },\n\n    findAxisByName: function(name) {\n        return this.getAxis(name);\n    },\n\n    findPaneByName: function(name) {\n        var panes = this._plotArea.panes;\n\n        for (var idx = 0; idx < panes.length; idx++) {\n            if (panes[idx].options.name === name) {\n                return new ChartPane(panes[idx]);\n            }\n        }\n    },\n\n    findPaneByIndex: function(idx) {\n        var panes = this._plotArea.panes;\n        if (panes[idx]) {\n            return new ChartPane(panes[idx]);\n        }\n    },\n\n    plotArea: function() {\n        return new ChartPlotArea(this._plotArea);\n    },\n\n    toggleHighlight: function(show, filter) {\n        var plotArea = this._plotArea;\n        var firstSeries = (plotArea.srcSeries || plotArea.series || [])[0];\n        var points;\n\n        if (isFunction(filter)) {\n            points = plotArea.filterPoints(filter);\n        } else {\n            var seriesName, categoryName;\n            if (isObject(filter)) {\n                seriesName = filter.series;\n                categoryName = filter.category;\n            } else {\n                seriesName = categoryName = filter;\n            }\n\n            if (firstSeries.type === DONUT) {\n                points = pointByCategoryName(plotArea.pointsBySeriesName(seriesName), categoryName);\n            } else if (inArray(firstSeries.type, [ PIE, FUNNEL, PYRAMID ])) {\n                points = pointByCategoryName((plotArea.charts[0] || {}).points, categoryName);\n            } else {\n                points = plotArea.pointsBySeriesName(seriesName);\n            }\n        }\n\n        if (points) {\n            this.togglePointsHighlight(show, points);\n        }\n    },\n\n    togglePointsHighlight: function(show, points) {\n        var highlight = this._highlight;\n        for (var idx = 0; idx < points.length; idx++) {\n            highlight.togglePointHighlight(points[idx], show);\n        }\n    },\n\n    showTooltip: function(filter) {\n        var shared = this._sharedTooltip();\n        var ref = this;\n        var tooltip = ref._tooltip;\n        var plotArea = ref._plotArea;\n        var point, categoryIndex;\n\n        if (isFunction(filter)) {\n            point = plotArea.findPoint(filter);\n            if (point && shared) {\n                categoryIndex = point.categoryIx;\n            }\n        } else if (shared && defined(filter)) {\n            categoryIndex = plotArea.categoryAxis.categoryIndex(filter);\n        }\n\n        if (shared) {\n            if (categoryIndex >= 0) {\n                var points = this._plotArea.pointsByCategoryIndex(categoryIndex);\n                tooltip.showAt(points);\n            }\n        } else if (point) {\n            tooltip.show(point);\n        }\n    },\n\n    hideTooltip: function() {\n        this._tooltip.hide();\n    },\n\n    _initSurface: function() {\n        var surface = this.surface;\n        var wrap = this._surfaceWrap();\n\n        var chartArea = this.options.chartArea || {};\n        if (chartArea.width) {\n            dataviz.elementSize(wrap, { width: chartArea.width });\n        }\n        if (chartArea.height) {\n            dataviz.elementSize(wrap, { height: chartArea.height });\n        }\n\n        if (!surface || surface.options.type !== this.options.renderAs) {\n            this._destroySurface();\n\n            this.surface = drawing.Surface.create(wrap, {\n                type: this.options.renderAs\n            });\n\n            this.surface.bind(\"mouseenter\", this._surfaceMouseenterHandler);\n            this.surface.bind(\"mouseleave\", this._surfaceMouseleaveHandler);\n\n        } else {\n            this.surface.clear();\n            this.surface.resize();\n        }\n    },\n\n    _surfaceWrap: function() {\n        return this.element;\n    },\n\n    _redraw: function() {\n        var model = this._getModel();\n        this._size = {\n            width: model.options.width,\n            height: model.options.height\n        };\n\n        this._destroyView();\n\n        this._setElementAccessibilityAttributes();\n\n        this._model = model;\n        this._plotArea = model._plotArea;\n        this._legend = model._legend;\n\n        model.renderVisual();\n\n        if (this.options.transitions !== false) {\n            model.traverse(function(element) {\n                if (element.animation) {\n                    element.animation.setup();\n                }\n            });\n        }\n\n        this._initSurface();\n        this.surface.draw(model.visual);\n\n        if (this.options.transitions !== false) {\n            model.traverse(function(element) {\n                if (element.animation) {\n                    element.animation.play();\n                }\n            });\n        }\n\n        this._tooltip = this._createTooltip();\n        this._highlight = new Highlight();\n        this._setupSelection();\n        this._createPannable();\n        this._createZoomSelection();\n        this._createMousewheelZoom();\n\n        this.trigger(RENDER);\n        triggerPaneRender(this._plotArea.panes);\n\n        if (!this._navState) {\n            this._cancelDomEvents();\n        }\n\n        this._redrawFocusHighlight();\n    },\n\n    _redrawFocusHighlight: function() {\n        var ref = this;\n        var ref_focusState = ref._focusState;\n        var legendInFocus = ref_focusState.legendInFocus;\n        var preserveHighlight = ref_focusState.preserveHighlight;\n\n        if (legendInFocus && preserveHighlight) {\n            this._focusElement(this._getFocusedLegendItem(), false);\n            this._focusState.preserveHighlight = false;\n        }\n    },\n\n    _setElementAccessibilityAttributes: function() {\n        var titleOptions = this.options.title;\n        var title = isString(titleOptions) ? titleOptions : (titleOptions.description || titleOptions.text);\n\n        if (title) {\n            this.element.setAttribute(\"aria-roledescription\", title);\n        }\n    },\n\n    exportVisual: function(exportOptions) {\n        var visual;\n        if (exportOptions && (exportOptions.width || exportOptions.height || exportOptions.options)) {\n            var currentOptions = this.options;\n            var options = deepExtend({}, exportOptions.options, {\n                chartArea: {\n                    width: exportOptions.width,\n                    height: exportOptions.height\n                }\n            });\n\n            clearMissingValues(this._originalOptions, options);\n            this.options = deepExtend({}, this._originalOptions, options);\n            this._initTheme(this.options, this._theme);\n            this.bindCategories();\n\n            var model = this._getModel();\n\n            model.renderVisual();\n            triggerPaneRender(model._plotArea.panes);\n\n            visual = model.visual;\n\n            this.options = currentOptions;\n        } else {\n            visual = this.surface.exportVisual();\n        }\n\n        return visual;\n    },\n\n    _sharedTooltip: function() {\n        return this._plotArea instanceof CategoricalPlotArea && this.options.tooltip && this.options.tooltip.shared;\n    },\n\n    _createPannable: function() {\n        var options = this.options;\n        if (options.pannable !== false) {\n            this._pannable = new Pannable(this._plotArea, options.pannable);\n        }\n    },\n\n    _createZoomSelection: function() {\n        var zoomable = this.options.zoomable;\n        var selection = (zoomable || {}).selection;\n        if (zoomable !== false && selection !== false) {\n            this._zoomSelection = new ZoomSelection(this, selection);\n        }\n    },\n\n    _createMousewheelZoom: function() {\n        var zoomable = this.options.zoomable;\n        var mousewheel = (zoomable || {}).mousewheel;\n        if (zoomable !== false && mousewheel !== false) {\n            this._mousewheelZoom = new MousewheelZoom(this, mousewheel);\n        }\n    },\n\n    _toggleDragZoomEvents: function() {\n        var pannable = this.options.pannable;\n        var zoomable = this.options.zoomable;\n        var selection = (zoomable || {}).selection;\n        var mousewheel = (zoomable || {}).mousewheel;\n        var allowDrag = !pannable && (zoomable === false || selection === false) && !this.requiresHandlers([ DRAG_START, DRAG, DRAG_END ]);\n        var allowZoom = (zoomable === false || mousewheel === false) && !this.requiresHandlers([ ZOOM_START, ZOOM, ZOOM_END ]);\n        var element = this.element;\n\n        if (this._dragZoomEnabled && allowDrag && allowZoom) {\n            element.style.touchAction = this._touchAction || '';\n            this._dragZoomEnabled = false;\n        } else if (!this._dragZoomEnabled && !(allowDrag && allowZoom)) {\n            element.style.touchAction = \"none\";\n\n            this._dragZoomEnabled = true;\n        }\n\n        this._toggleDomEvents(!allowDrag, !allowZoom);\n    },\n\n    _toggleDomEvents: function(drag, zoom) {\n        var domEvents = this.domEvents;\n        if (!domEvents) {\n            return;\n        }\n\n        if (domEvents.toggleDrag) {\n            domEvents.toggleDrag(drag);\n        }\n\n        if (domEvents.toggleZoom) {\n            domEvents.toggleZoom(zoom);\n        }\n    },\n\n    _createTooltip: function() {\n        var ref = this;\n        var tooltipOptions = ref.options.tooltip;\n        var tooltip;\n\n        if (this._sharedTooltip()) {\n            tooltip = this._createSharedTooltip(tooltipOptions);\n        } else {\n            tooltip = new Tooltip(this.chartService, tooltipOptions);\n        }\n\n        return tooltip;\n    },\n\n    _createSharedTooltip: function(options) {\n        return new SharedTooltip(this._plotArea, options);\n    },\n\n    applyDefaults: function(options, themeOptions) {\n        applyAxisDefaults(options, themeOptions);\n        applySeriesDefaults(options, themeOptions);\n    },\n\n    applySeriesColors: function() {\n        var options = this.options;\n        var series = options.series;\n        var colors = options.seriesColors || [];\n\n        for (var i = 0; i < series.length; i++) {\n            var currentSeries = series[i];\n            var seriesColor = colors[i % colors.length];\n            var defaults = currentSeries._defaults;\n\n            currentSeries.color = currentSeries.color || seriesColor;\n            if (defaults) {\n                defaults.color = defaults.color || seriesColor;\n            }\n        }\n    },\n\n    _getModel: function() {\n        var options = this.options;\n        var plotArea = this._createPlotArea();\n        var model = new dataviz.RootElement(this._modelOptions());\n        model.chart = this;\n        model._plotArea = plotArea;\n\n        var title = Title.buildTitle(options.title);\n        var subtitle = Title.buildTitle(options.subtitle, {\n            align: options.title.align,\n            position: options.title.position\n        });\n        model.append.apply(model, Title.orderTitles([title, subtitle]));\n\n        if (options.legend && options.legend.visible) {\n            var legend = new Legend(plotArea.options.legend, this.chartService);\n            model.append(legend);\n            model._legend = legend;\n        }\n        model.append(plotArea);\n        model.reflow();\n\n        return model;\n    },\n\n    _modelOptions: function() {\n        var options = this.options;\n        var size = this.getSize();\n\n        return deepExtend({\n            transitions: options.transitions,\n            width: size.width || datavizConstants.DEFAULT_WIDTH,\n            height: size.height || datavizConstants.DEFAULT_HEIGHT\n        }, options.chartArea);\n    },\n\n    _createPlotArea: function(skipSeries) {\n        var options = this.options;\n\n        var plotArea = PlotAreaFactory.current.create(skipSeries ? [] : options.series, options, this.chartService);\n\n        return plotArea;\n    },\n\n    _setupSelection: function() {\n        var this$1$1 = this;\n\n        var ref = this;\n        var axes = ref._plotArea.axes;\n        var selections = this._selections = [];\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i];\n            var options = axis.options;\n            if (axis instanceof CategoryAxis && options.select && !options.vertical) {\n                var range = axis.range();\n\n                var selection = new Selection(this$1$1, axis,\n                    deepExtend({ min: range.min, max: range.max }, options.select)\n                );\n\n                selections.push(selection);\n            }\n        }\n    },\n\n    _selectStart: function(e) {\n        return this.trigger(SELECT_START, e);\n    },\n\n    _select: function(e) {\n        return this.trigger(SELECT, e);\n    },\n\n    _selectEnd: function(e) {\n        return this.trigger(SELECT_END, e);\n    },\n\n    _initHandlers: function() {\n        this._clickHandler = this._click.bind(this);\n        this._keydownHandler = this._keydown.bind(this);\n        this._focusHandler = this._focus.bind(this);\n        this._blurHandler = this._blur.bind(this);\n        this._mousedownHandler = this._mousedown.bind(this);\n        this._mousewheelHandler = this._mousewheel.bind(this);\n        this._mouseleaveHandler = this._mouseleave.bind(this);\n        this._surfaceMouseenterHandler = this._mouseover.bind(this);\n        this._surfaceMouseleaveHandler = this._mouseout.bind(this);\n\n        this._mousemove = kendo.throttle(\n            this._mousemove.bind(this),\n            MOUSEMOVE_DELAY\n        );\n    },\n\n    addObserver: function(observer) {\n        if (observer) {\n            this.observers.push(observer);\n        }\n    },\n\n    removeObserver: function(observer) {\n        var index = this.observers.indexOf(observer);\n        if (index >= 0) {\n            this.observers.splice(index, 1);\n        }\n    },\n\n    requiresHandlers: function(eventNames) {\n        var observers = this.observers;\n        for (var idx = 0; idx < observers.length; idx++) {\n            if (observers[idx].requiresHandlers(eventNames)) {\n                return true;\n            }\n        }\n    },\n\n    trigger: function(name, args) {\n        if (args === void 0) { args = {}; }\n\n        args.sender = this;\n\n        if (name === SHOW_TOOLTIP) {\n            args.anchor.point = this._toDocumentCoordinates(args.anchor.point);\n        } else if (name === SERIES_OVER) {\n            this._updateDrilldownPoint(args.point);\n        } else if (name === SERIES_LEAVE) {\n            this._resetDrilldownPoint();\n        } else if (name === SERIES_CLICK) {\n            this._focusPoint(args.point);\n            this._startDrilldown(args.point);\n        } else if (name === LEGEND_ITEM_CLICK) {\n            this._focusLegendItem(args);\n        }\n\n        var observers = this.observers;\n        var isDefaultPrevented = false;\n        for (var idx = 0; idx < observers.length; idx++) {\n            if (observers[idx].trigger(name, args)) {\n                isDefaultPrevented = true;\n            }\n        }\n\n        return isDefaultPrevented;\n    },\n\n    _attachEvents: function() {\n        var element = this.element;\n\n        this._touchAction = element.style.touchAction;\n\n        var obj;\n        bindEvents(element, ( obj = {}, obj[ CONTEXTMENU ] = this._clickHandler, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj[ MOUSELEAVE ] = this._mouseleaveHandler, obj[ KEYDOWN ] = this._keydownHandler, obj[ MOUSEDOWN ] = this._mousedownHandler, obj[ FOCUS ] = this._focusHandler, obj[ BLUR] = this._blurHandler, obj ));\n\n        if (this._shouldAttachMouseMove()) {\n            var obj$1;\n            bindEvents(element, ( obj$1 = {}, obj$1[ MOUSEMOVE ] = this._mousemove, obj$1 ));\n        }\n\n        this.domEvents = services.DomEventsBuilder.create(this.element, {\n            start: this._start.bind(this),\n            move: this._move.bind(this),\n            end: this._end.bind(this),\n            tap: this._tap.bind(this),\n            gesturestart: this._gesturestart.bind(this),\n            gesturechange: this._gesturechange.bind(this),\n            gestureend: this._gestureend.bind(this)\n        });\n\n        this._toggleDragZoomEvents();\n    },\n\n    _mouseleave: function(e) {\n        if (this._hoveredPoint) {\n            this._hoveredPoint.out(this, e);\n            this._hoveredPoint = null;\n        }\n\n        if (this._plotAreaHovered) {\n            this._plotAreaHovered = false;\n            this.trigger(PLOT_AREA_LEAVE);\n        }\n\n        if (this._hasInactiveOpacity() && this._activeChartInstance) {\n            this._applySeriesOpacity(this._activeChartInstance.children, null, true);\n            this._updateSeriesOpacity(null, true);\n        }\n    },\n\n    _cancelDomEvents: function() {\n        if (this.domEvents && this.domEvents.cancel) {\n            this.domEvents.cancel();\n        }\n    },\n\n    _gesturestart: function(e) {\n        if (this._mousewheelZoom && !this._stopChartHandlers(e)) {\n            this._gestureDistance = e.distance;\n            this._unsetActivePoint();\n            this._clearFocusedElement();\n            this.surface.suspendTracking();\n        }\n    },\n\n    _gestureend: function(e) {\n        if (this._zooming && !this._stopChartHandlers(e)) {\n            if (this.surface) {\n                this.surface.resumeTracking();\n            }\n            this._zooming = false;\n            this.trigger(ZOOM_END, {});\n        }\n    },\n\n    _gesturechange: function(e) {\n        var mousewheelZoom = this._mousewheelZoom;\n\n        if (mousewheelZoom && !this._stopChartHandlers(e)) {\n            e.preventDefault();\n            var previousGestureDistance = this._gestureDistance;\n            var scaleDelta = -e.distance / previousGestureDistance + 1;\n\n            if (Math.abs(scaleDelta) >= 0.1) {\n                scaleDelta = Math.round(scaleDelta * 10);\n\n                this._gestureDistance = e.distance;\n                var args = { delta: scaleDelta, axisRanges: axisRanges(this._plotArea.axes), originalEvent: e };\n                if (this._zooming || !this.trigger(ZOOM_START, args)) {\n                    var coords = this._eventCoordinates(e);\n\n                    if (!this._zooming) {\n                        this._zooming = true;\n                    }\n\n                    var ranges = args.axisRanges = mousewheelZoom.updateRanges(scaleDelta, coords);\n                    if (ranges && !this.trigger(ZOOM, args)) {\n                        mousewheelZoom.zoom();\n                    }\n                }\n            }\n        }\n    },\n\n    _mouseout: function(e) {\n        if (e.element) {\n            var element = this._drawingChartElement(e.element, e);\n\n            if (element && element.leave) {\n                element.leave(this, e.originalEvent);\n            }\n        }\n    },\n\n    _start: function(e) {\n        var coords = this._eventCoordinates(e);\n\n        if (this._stopChartHandlers(e) || !this._plotArea.backgroundContainsPoint(coords)) {\n            return;\n        }\n\n        if (this.requiresHandlers([ DRAG_START, DRAG, DRAG_END ])) {\n            this._startNavigation(e, coords, DRAG_START);\n        }\n\n        if (this._pannable && this._pannable.start(e)) {\n            this.surface.suspendTracking();\n            this._unsetActivePoint();\n            this._clearFocusedElement();\n            this._suppressHover = true;\n            this.chartService.panning = true;\n        }\n\n        if (this._zoomSelection) {\n            if (this._zoomSelection.start(e)) {\n                this.trigger(ZOOM_START, { axisRanges: axisRanges(this._plotArea.axes), originalEvent: e });\n            }\n        }\n    },\n\n    _move: function(e) {\n        var ref = this;\n        var state = ref._navState;\n        var pannable = ref._pannable;\n\n        if (this._stopChartHandlers(e)) {\n            return;\n        }\n\n        if (pannable) {\n            var ranges = pannable.move(e);\n\n            if (ranges && !this.trigger(DRAG, { axisRanges: ranges, originalEvent: e })) {\n                pannable.pan();\n            }\n        } else if (state) {\n            var ranges$1 = {};\n            var axes = state.axes;\n\n            for (var i = 0; i < axes.length; i++) {\n                var currentAxis = axes[i];\n                var axisName = currentAxis.options.name;\n                if (axisName) {\n                    var axis = currentAxis.options.vertical ? e.y : e.x;\n                    var delta = axis.startLocation - axis.location;\n\n                    if (delta !== 0) {\n                        ranges$1[currentAxis.options.name] = currentAxis.translateRange(delta);\n                    }\n                }\n            }\n\n            state.axisRanges = ranges$1;\n            this.trigger(DRAG, {\n                axisRanges: ranges$1,\n                originalEvent: e\n            });\n        }\n\n        if (this._zoomSelection) {\n            this._zoomSelection.move(e);\n        }\n    },\n\n    _end: function(e) {\n        if (this._stopChartHandlers(e)) {\n            return;\n        }\n\n        var pannable = this._pannable;\n        if (pannable && pannable.end(e)) {\n            this.surface.resumeTracking();\n            this.trigger(DRAG_END, {\n                axisRanges: axisRanges(this._plotArea.axes),\n                originalEvent: e\n            });\n            this._suppressHover = false;\n            this.chartService.panning = false;\n        } else {\n            this._endNavigation(e, DRAG_END);\n        }\n\n        if (this._zoomSelection) {\n            var ranges = this._zoomSelection.end(e);\n            if (ranges && !this.trigger(ZOOM, { axisRanges: ranges, originalEvent: e })) {\n                this._zoomSelection.zoom();\n                this.trigger(ZOOM_END, { axisRanges: ranges, originalEvent: e });\n            }\n        }\n    },\n\n    _stopChartHandlers: function(e) {\n        var selections = this._selections || [];\n        if (!selections.length) {\n            return false;\n        }\n\n        var coords = this._eventCoordinates(e);\n        var pane = this._plotArea.paneByPoint(coords);\n        if (pane) {\n            for (var idx = 0; idx < selections.length; idx++) {\n                if (selections[idx].onPane(pane)) {\n                    return true;\n                }\n            }\n        }\n    },\n\n    _mousewheelZoomRate: function() {\n        var zoomable = this.options.zoomable;\n        var mousewheel = (zoomable || {}).mousewheel || {};\n        return valueOrDefault(mousewheel.rate, MOUSEWHEEL_ZOOM_RATE);\n    },\n\n    _mousewheel: function(e) {\n        var this$1$1 = this;\n\n        var delta = dataviz.mousewheelDelta(e);\n        var mousewheelZoom = this._mousewheelZoom;\n        var coords = this._eventCoordinates(e);\n\n        if (this._stopChartHandlers(e) || !this._plotArea.backgroundContainsPoint(coords)) {\n            return;\n        }\n\n        if (mousewheelZoom) {\n            var args = { delta: delta, axisRanges: axisRanges(this._plotArea.axes), originalEvent: e };\n            if (this._zooming || !this.trigger(ZOOM_START, args)) {\n                e.preventDefault();\n\n                if (!this._zooming) {\n                    this._unsetActivePoint();\n                    this._clearFocusedElement();\n                    this.surface.suspendTracking();\n                    this._zooming = true;\n                }\n\n                if (this._mwTimeout) {\n                    clearTimeout(this._mwTimeout);\n                }\n\n                args.axisRanges = mousewheelZoom.updateRanges(delta, coords);\n                if (args.axisRanges && !this.trigger(ZOOM, args)) {\n                    mousewheelZoom.zoom();\n                }\n\n                this._mwTimeout = setTimeout(function () {\n                    this$1$1.trigger(ZOOM_END, args);\n                    this$1$1._zooming = false;\n                    if (this$1$1.surface) {\n                        this$1$1.surface.resumeTracking();\n                    }\n                }, MOUSEWHEEL_DELAY);\n            }\n        } else {\n            var state = this._navState;\n            if (!state) {\n                var prevented = this._startNavigation(e, coords, ZOOM_START);\n                if (!prevented) {\n                    state = this._navState;\n                }\n            }\n\n            if (state) {\n                var totalDelta = state.totalDelta || delta;\n                state.totalDelta = totalDelta + delta;\n\n                var axes = this._navState.axes;\n                var ranges = {};\n\n                for (var i = 0; i < axes.length; i++) {\n                    var currentAxis = axes[i];\n                    var axisName = currentAxis.options.name;\n                    if (axisName) {\n                        ranges[axisName] = currentAxis.scaleRange(-totalDelta * this$1$1._mousewheelZoomRate(), coords);\n                    }\n                }\n\n                this.trigger(ZOOM, {\n                    delta: delta,\n                    axisRanges: ranges,\n                    originalEvent: e\n                });\n\n                if (this._mwTimeout) {\n                    clearTimeout(this._mwTimeout);\n                }\n\n                this._mwTimeout = setTimeout(function () {\n                    this$1$1._endNavigation(e, ZOOM_END);\n                }, MOUSEWHEEL_DELAY);\n            }\n        }\n    },\n\n    _startNavigation: function(e, coords, chartEvent) {\n        var plotArea = this._model._plotArea;\n        var pane = plotArea.findPointPane(coords);\n        var axes = plotArea.axes.slice(0);\n\n        if (!pane) {\n            return;\n        }\n\n        var ranges = axisRanges(axes);\n\n        var prevented = this.trigger(chartEvent, {\n            axisRanges: ranges,\n            originalEvent: e\n        });\n\n        if (prevented) {\n            this._cancelDomEvents();\n        } else {\n            this._suppressHover = true;\n            this._unsetActivePoint();\n            this._clearFocusedElement();\n            this._navState = {\n                axisRanges: ranges,\n                pane: pane,\n                axes: axes\n            };\n        }\n    },\n\n    _endNavigation: function(e, chartEvent) {\n        if (this._navState) {\n            this.trigger(chartEvent, {\n                axisRanges: this._navState.axisRanges,\n                originalEvent: e\n            });\n            this._suppressHover = false;\n            this._navState = null;\n        }\n    },\n\n    _getChartElement: function(e, match) {\n        var element = this.surface.eventTarget(e);\n        if (element) {\n            return this._drawingChartElement(element, e, match);\n        }\n    },\n\n    _drawingChartElement: function(element, e, match) {\n        var current = element;\n        var chartElement;\n        while (current && !chartElement) {\n            chartElement = current.chartElement;\n            current = current.parent;\n        }\n\n        if (chartElement) {\n            if (chartElement.aliasFor) {\n                chartElement = chartElement.aliasFor(e, this._eventCoordinates(e));\n            }\n\n            if (match) {\n                chartElement = chartElement.closest(match);\n                if (chartElement && chartElement.aliasFor) {\n                    chartElement = chartElement.aliasFor();\n                }\n            }\n\n            return chartElement;\n        }\n    },\n\n    _eventCoordinates: function(e) {\n        var coordinates = dataviz.eventCoordinates(e);\n        return this._toModelCoordinates(coordinates.x, coordinates.y);\n    },\n\n    _elementPadding: function() {\n        if (!this._padding) {\n            var ref = elementStyles(this.element, [ \"paddingLeft\", \"paddingTop\" ]);\n            var paddingLeft = ref.paddingLeft;\n            var paddingTop = ref.paddingTop;\n            this._padding = {\n                top: paddingTop,\n                left: paddingLeft\n            };\n        }\n\n        return this._padding;\n    },\n\n    _toDocumentCoordinates: function(point) {\n        var padding = this._elementPadding();\n        var offset = dataviz.elementOffset(this.element);\n\n        return {\n            left: round(point.x + padding.left + offset.left),\n            top: round(point.y + padding.top + offset.top)\n        };\n    },\n\n    _toModelCoordinates: function(clientX, clientY) {\n        var element = this.element;\n        var offset = dataviz.elementOffset(element);\n        var padding = this._elementPadding();\n        var inverseTransform = dataviz.elementScale(element).invert();\n        var point = new GeometryPoint(\n            clientX - offset.left - padding.left,\n            clientY - offset.top - padding.top\n        ).transform(inverseTransform);\n\n        return new Point(point.x, point.y);\n    },\n\n    _tap: function(e) {\n        var this$1$1 = this;\n\n        var drawingElement = this.surface.eventTarget(e);\n        var element = this._drawingChartElement(drawingElement, e);\n        var sharedTooltip = this._sharedTooltip();\n\n        if (!this._startHover(drawingElement, e) && !sharedTooltip) {\n            this._unsetActivePoint();\n        }\n\n        if (sharedTooltip) {\n            this._trackSharedTooltip(this._eventCoordinates(e), e, true);\n        }\n\n        this._propagateClick(element, e);\n\n        //part of fix for hover issue on windows touch\n        this.handlingTap = true;\n        setTimeout(function () {\n            this$1$1.handlingTap = false;\n        }, 0);\n    },\n\n    _click: function(e) {\n        var element = this._getChartElement(e);\n        this._propagateClick(element, e);\n    },\n\n    _propagateClick: function(element, e) {\n        var this$1$1 = this;\n\n        var current = element;\n        while (current) {\n            if (current.click) {\n                current.click(this$1$1, e);\n            }\n\n            current = current.parent;\n        }\n    },\n\n    _isLegendBeforeChart: function() {\n        var ref = this;\n        var legendPosition = ref.options.legend.position;\n        var legend = ref._legend;\n\n        return legend && legend.hasItems() && (legendPosition === TOP || legendPosition === LEFT);\n    },\n\n    _focus: function() {\n        if (!this._preventInitialPointFocus) {\n            if (this._isLegendBeforeChart()) {\n                this._focusFirstLegendItem();\n            } else {\n                this._focusFirstPoint();\n            }\n        }\n\n        this._preventInitialPointFocus = false;\n    },\n\n    _keydown: function(e) {\n        var ref = this;\n        var ref_focusState = ref._focusState;\n        var legendInFocus = ref_focusState.legendInFocus;\n        var focusedElement = ref_focusState.focusedElement;\n        var legend = ref._legend;\n\n        if (e.key === datavizConstants.TAB) {\n            this._clearFocusedElement();\n            var isLegendBeforeChart = this._isLegendBeforeChart();\n\n            if (legendInFocus && isLegendBeforeChart !== e.shiftKey) {\n                this._navigatePoints(e);\n            } else if (!legendInFocus && isLegendBeforeChart === e.shiftKey && legend.hasItems()) {\n                this._navigateLegend(e);\n            }\n        } else if (e.key === datavizConstants.ESCAPE) {\n            if (focusedElement) {\n                e.stopPropagation();\n            }\n\n            if (this._tooltip && this._tooltip.visible) {\n                this._hideTooltip();\n            } else {\n                this._blur();\n            }\n        } else if (e.key === datavizConstants.ENTER) {\n            if (focusedElement) {\n                this._focusState.preserveHighlight = true;\n                this._propagateClick(focusedElement, e);\n                this._focusElement(focusedElement);\n            }\n        } else if (!legendInFocus) {\n            this._navigatePoints(e);\n        } else {\n            this._navigateLegend(e);\n        }\n    },\n\n    _navigatePoints: function(e) {\n        var this$1$1 = this;\n\n        var ref = this;\n        var focusState = ref._focusState;\n        var plotArea = ref._plotArea;\n\n        focusState.legendInFocus = false;\n\n        if (!focusState.focusedElement) {\n            this._focusFirstPoint();\n            e.preventDefault();\n            return;\n        }\n\n        var moveFocus = function (point) {\n            focusState.focusedPoint = point;\n\n            this$1$1._focusElement(focusState.focusedPoint);\n            this$1$1._displayTooltip(point);\n            e.preventDefault();\n        };\n\n        switch (e.key) {\n            case datavizConstants.ARROW_RIGHT:\n                moveFocus(plotArea.getPointToTheRight(focusState.focusedPoint));\n                break;\n            case datavizConstants.ARROW_LEFT:\n                moveFocus(plotArea.getPointToTheLeft(focusState.focusedPoint));\n                break;\n            case datavizConstants.ARROW_DOWN:\n                moveFocus(plotArea.getPointBelow(focusState.focusedPoint));\n                break;\n            case datavizConstants.ARROW_UP:\n                moveFocus(plotArea.getPointAbove(focusState.focusedPoint));\n                break;\n            default:\n                break;\n        }\n    },\n\n    _navigateLegend: function(e) {\n        var this$1$1 = this;\n\n        var ref = this;\n        var focusState = ref._focusState;\n        var legend = ref._legend;\n        var rtl = ref.chartService.rtl;\n\n        focusState.legendInFocus = true;\n\n        if (!focusState.focusedElement) {\n            this._focusFirstLegendItem();\n            e.preventDefault();\n            return;\n        }\n\n        var itemsLength = legend.getItems().length;\n        var moveFocus = function (cycleFunc) {\n            focusState.focusedLegendItemIndex = cycleFunc(\n                focusState.focusedLegendItemIndex,\n                itemsLength\n            );\n            this$1$1._focusElement(this$1$1._getFocusedLegendItem());\n            e.preventDefault();\n        };\n\n        switch (e.key) {\n            case datavizConstants.ARROW_UP:\n            case datavizConstants.ARROW_LEFT:\n                moveFocus(rtl ? dataviz.cycleUp : dataviz.cycleDown);\n                break;\n            case datavizConstants.ARROW_DOWN:\n            case datavizConstants.ARROW_RIGHT:\n                moveFocus(rtl ? dataviz.cycleDown : dataviz.cycleUp);\n                break;\n            default:\n                break;\n        }\n    },\n\n    _focusFirstPoint: function() {\n        var point = this._focusState.focusedPoint = this._plotArea.getFirstPoint();\n\n        if (point) {\n            this._focusElement(point);\n            this._displayTooltip(point);\n        }\n    },\n\n    _hasFocus: function() {\n        return this.element.ownerDocument.activeElement === this.element;\n    },\n\n    _mousedown: function() {\n        if (!this._hasFocus()) {\n            this._preventInitialPointFocus = true;\n        }\n    },\n\n    _focusChart: function() {\n        if (!this._hasFocus()) {\n            this._preventInitialPointFocus = true;\n            this.element.focus();\n        }\n    },\n\n    _focusPoint: function(point) {\n        this._focusState.focusedPoint = point;\n\n        this._focusChart();\n\n        this._focusElement(point, true);\n    },\n\n    _focusFirstLegendItem: function() {\n        var ref = this;\n        var focusState = ref._focusState;\n\n        focusState.focusedLegendItemIndex = 0;\n        this._focusElement(this._getFocusedLegendItem());\n        focusState.legendInFocus = true;\n\n        this._hideTooltip();\n    },\n\n    _focusLegendItem: function(args) {\n        var ref = this;\n        var focusState = ref._focusState;\n\n        focusState.focusedLegendItemIndex = this._legend\n            .getItems()\n            .findIndex(function (x) { return x.options.series.index === args.seriesIndex\n                && x.options.pointIndex === args.pointIndex; });\n\n        focusState.legendInFocus = true;\n\n        this._focusChart();\n\n        this._focusElement(this._getFocusedLegendItem(), true);\n    },\n\n    _getFocusedLegendItem: function() {\n        var ref = this;\n        var focusState = ref._focusState;\n        var legend = ref._legend;\n\n        return legend.getItems()[focusState.focusedLegendItemIndex];\n    },\n\n    _focusElement: function(element, omitHighlight) {\n        var ref = this;\n        var focusState = ref._focusState;\n\n        this._clearFocusedElement();\n\n        if (!element) {\n            return;\n        }\n\n        focusState.focusedElement = element;\n\n        this._setElementActiveDescendant(element);\n\n        if (!omitHighlight) {\n            element.focusVisual();\n\n            if (focusState.legendInFocus) {\n                var options = element.options;\n\n                this._showSeriesInactiveOpacity(options.series.index, options.pointIndex);\n            } else {\n                this._showInactiveOpacity(element);\n            }\n        }\n    },\n\n    _clearFocusedElement: function() {\n        var ref = this;\n        var focusState = ref._focusState;\n\n        if (!focusState) {\n            return;\n        }\n\n        if (focusState.focusedElement) {\n            focusState.focusedElement.clearFocusFromVisual();\n            this._clearElementActiveDescendant();\n        }\n\n        focusState.focusedElement = null;\n    },\n\n    _setElementActiveDescendant: function(element) {\n        if (this.options.renderAs === \"canvas\") {\n            this._pseudoFocusedElement = this._createPseudoFocusedElement(element);\n            this.element.append(this._pseudoFocusedElement);\n        }\n\n        this.element.setAttribute(datavizConstants.ARIA_ACTIVE_DESCENDANT, element._id);\n    },\n\n    _clearElementActiveDescendant: function() {\n        if (this._pseudoFocusedElement) {\n            this._pseudoFocusedElement.remove();\n            this._pseudoFocusedElement = null;\n        }\n\n        this.element.removeAttribute(datavizConstants.ARIA_ACTIVE_DESCENDANT);\n    },\n\n    _createPseudoFocusedElement: function(element) {\n        var pseudoElement = document.createElement(\"div\");\n        var accessibilityOptions = element.options.accessibility;\n\n        pseudoElement.id = element._id;\n        pseudoElement.setAttribute(\"aria-label\", element.getAriaLabelText());\n        pseudoElement.setAttribute(\"role\", accessibilityOptions.role);\n        pseudoElement.setAttribute(\"aria-roledescription\", accessibilityOptions.ariaRoleDescription);\n\n        var checked = accessibilityOptions.ariaChecked;\n        if (defined(checked)) {\n            pseudoElement.setAttribute(\"aria-checked\", checked);\n        }\n\n        return pseudoElement;\n    },\n\n    _blur: function() {\n        this._focusState.legendInFocus = false;\n        this._clearFocusedElement();\n        this._hideInactiveOpacity();\n    },\n\n    _startHover: function(element, e) {\n        if (this._suppressHover) {\n            return false;\n        }\n\n        var point = this._drawingChartElement(element, e, function(element) {\n            return (element.hover || element.over) && !(element instanceof PlotAreaBase);\n        });\n\n        var activePoint = this._activePoint;\n\n        this._updateHoveredPoint(point, e);\n\n        if (point && activePoint !== point && point.hover) {\n            this._activePoint = point;\n\n            if (!this._sharedTooltip() && !point.hover(this, e)) {\n                this._displayTooltip(point);\n\n                this._showInactiveOpacity(point);\n            }\n        }\n\n        return point;\n    },\n\n    _displayTooltip: function(point) {\n        var tooltipOptions = deepExtend({}, this.options.tooltip, point.options.tooltip);\n        if (tooltipOptions.visible) {\n            this._tooltip.show(point);\n        }\n    },\n\n    _hideTooltip: function() {\n        if (this._tooltip) {\n            this._tooltip.hide();\n        }\n    },\n\n    _displayInactiveOpacity: function(activePoint, multipleSeries, highlightPoints) {\n        var chartInstance = this._activeChartInstance = this._chartInstanceFromPoint(activePoint);\n        if (!chartInstance) {\n            return;\n        }\n\n        if (multipleSeries) {\n            this._updateSeriesOpacity(activePoint);\n            this._applySeriesOpacity(chartInstance.children, null, true);\n            this._applySeriesOpacity(chartInstance.children, activePoint.series);\n            this._highlight.show(highlightPoints || activePoint);\n        } else {\n            var inactivePoints;\n\n            if (!chartInstance.supportsPointInactiveOpacity()) {\n                this._highlight.show(activePoint);\n                return;\n            }\n\n            inactivePoints = this._getInactivePoints(activePoint, chartInstance);\n\n            if (inactivePoints && inactivePoints.length) {\n                this._highlight.show(inactivePoints, 1 - this._getInactiveOpacityForSeries(activePoint.series));\n            }\n        }\n    },\n\n    _getInactivePoints: function(activePoint, chartInstance) {\n        var allPoints = this._getAllPointsOfType(chartInstance, activePoint.constructor);\n\n        return allPoints.filter(function (point) { return point !== activePoint; });\n    },\n\n    _getAllPointsOfType: function(container, type) {\n        var this$1$1 = this;\n\n        var points = [];\n\n        for (var i = 0; i < container.children.length; i++) {\n            var element = container.children[i];\n\n            if (element.constructor === type) {\n                points.push(element);\n            } else if (element.children && element.children.length) {\n                points = points.concat(this$1$1._getAllPointsOfType(element, type));\n            }\n        }\n\n        return points;\n    },\n\n    _updateHoveredPoint: function(point, e) {\n        var hoveredPoint = this._hoveredPoint;\n\n        if (hoveredPoint && hoveredPoint !== point) {\n            hoveredPoint.out(this, e);\n            this._hoveredPoint = null;\n        }\n\n        if (point && hoveredPoint !== point && point.over) {\n            this._hoveredPoint = point;\n            point.over(this, e);\n        }\n    },\n\n    _updateDrilldownPoint: function(point) {\n        if (!point || !point.series) {\n            return;\n        }\n\n        var ref = SeriesBinder.current.bindPoint(point.series, null, point.dataItem);\n        var fields = ref.fields;\n        if (fields.drilldown) {\n            this._drilldownState = { cursor: this.element.style.cursor };\n            this.element.style.cursor = 'pointer';\n        }\n    },\n\n    _resetDrilldownPoint: function() {\n        if (this._drilldownState) {\n            this.element.style.cursor = this._drilldownState.cursor;\n            this._drilldownState = null;\n        }\n    },\n\n    _startDrilldown: function(point) {\n        if (!point || !point.series) {\n            return;\n        }\n\n        var series = point.series;\n        var ref = SeriesBinder.current.bindPoint(series, null, point.dataItem);\n        var fields = ref.fields;\n        var value = fields.drilldown;\n        if (value) {\n            var args = { series: series, point: point, value: value, sender: this };\n            this.trigger(DRILLDOWN, args);\n        }\n    },\n\n    _updateSeriesOpacity: function(point, resetOpacity) {\n        var this$1$1 = this;\n\n        var plotArea = this._plotArea;\n        var length = plotArea.series.length;\n\n        for (var i = 0; i < length; i++) {\n            var currSeries = plotArea.series[i];\n            var defaultOpacity = this$1$1._getDefaultOpacityForSeries(currSeries);\n            var inactiveOpacity = this$1$1._getInactiveOpacityForSeries(currSeries);\n\n            if (!resetOpacity && currSeries !== point.series) {\n                currSeries.defaultOpacity = defaultOpacity;\n                currSeries.opacity = inactiveOpacity;\n\n                if (currSeries.line) {\n                    currSeries.line.opacity = inactiveOpacity;\n                }\n            } else {\n                currSeries.opacity = defaultOpacity;\n\n                if (currSeries.line) {\n                    currSeries.line.opacity = defaultOpacity;\n                }\n            }\n        }\n    },\n\n    _applySeriesOpacity: function(elements, activeSeries, reset, series) {\n        var this$1$1 = this;\n\n        for (var i = 0; i < elements.length; i++) {\n            var element = elements[i];\n            var currSeries = element.series || series;\n            var shouldHighlight = currSeries && (currSeries.highlight || {}).visible;\n\n            if (shouldHighlight && element.visual) {\n                var opacity = series ? series.opacity : element.series.opacity;\n                if (currSeries !== activeSeries || reset) {\n                    element.visual.opacity(reset ? 1 : opacity);\n                }\n            }\n\n            if (element.children && element.children.length) {\n                this$1$1._applySeriesOpacity(element.children, activeSeries, reset, element.series);\n            }\n        }\n    },\n\n    _chartInstanceFromPoint: function(point) {\n        var chartInstance = point.parent;\n\n        while (chartInstance && !chartInstance.plotArea) {\n            chartInstance = chartInstance.parent;\n        }\n\n        return chartInstance;\n    },\n\n    _showInactiveOpacity: function(point) {\n        var multipleSeries = this._plotArea.series.length > 1;\n        var hasInactiveOpacity = this._hasInactiveOpacity();\n\n        if (hasInactiveOpacity) {\n            this._displayInactiveOpacity(point, multipleSeries);\n        } else {\n            this._highlight.show(point);\n        }\n    },\n\n    _hideInactiveOpacity: function(point) {\n        var multipleSeries = this._plotArea.series.length > 1;\n        var hasInactiveOpacity = this._hasInactiveOpacity();\n        if (hasInactiveOpacity) {\n            if (multipleSeries && this._activeChartInstance) {\n                this._updateSeriesOpacity(point, true);\n                this._applySeriesOpacity(this._activeChartInstance.children, null, true);\n                this._activeChartInstance = null;\n            }\n            this._highlight && this._highlight.hide();\n            this._activePoint = null;\n        }\n    },\n\n    _hasInactiveOpacity: function() {\n        var hasDefaultInactiveOpacity = this.options.seriesDefaults.highlight.inactiveOpacity !== undefined;\n        var hasInactiveOpacity = this.options.series.filter(function (s) { return s.highlight.inactiveOpacity !== undefined; } ).length > 0;\n        return hasDefaultInactiveOpacity || hasInactiveOpacity;\n    },\n\n    _getInactiveOpacityForSeries: function(series) {\n        var defaultInactiveOpacity = this.options.seriesDefaults.highlight.inactiveOpacity;\n        var seriesInactiveOpacity = series.highlight.inactiveOpacity;\n        return seriesInactiveOpacity || defaultInactiveOpacity || series.opacity || datavizConstants.DEFAULT_SERIES_OPACITY;\n    },\n\n    _getDefaultOpacityForSeries: function(series) {\n        return series.defaultOpacity || series.opacity || datavizConstants.DEFAULT_SERIES_OPACITY;\n    },\n\n    _mouseover: function(e) {\n        var point = this._startHover(e.element, e.originalEvent);\n\n        if (point && point.tooltipTracking && !this._mouseMoveTrackHandler && !this._sharedTooltip()) {\n            this._mouseMoveTrackHandler = this._mouseMoveTracking.bind(this);\n            var obj;\n            bindEvents(document, ( obj = {}, obj[ MOUSEMOVE ] = this._mouseMoveTrackHandler, obj ));\n        }\n    },\n\n    _mouseMoveTracking: function(e) {\n        var ref = this;\n        var options = ref.options;\n        var tooltip = ref._tooltip;\n        var highlight = ref._highlight;\n        var point = ref._activePoint;\n        var coords = this._eventCoordinates(e);\n\n        if (this._plotArea.box.containsPoint(coords)) {\n            if (point && point.tooltipTracking && point.series && point.parent.getNearestPoint) {\n                var seriesPoint = point.parent.getNearestPoint(coords.x, coords.y, point.seriesIx);\n                if (seriesPoint && seriesPoint !== point) {\n                    this._activePoint = seriesPoint;\n\n                    if (!seriesPoint.hover(this, e)) {\n                        var tooltipOptions = deepExtend({}, options.tooltip, seriesPoint.options.tooltip);\n                        if (tooltipOptions.visible) {\n                            tooltip.show(seriesPoint);\n                        }\n\n                        highlight.show(seriesPoint);\n                    }\n                }\n            }\n        } else {\n            var obj;\n            unbindEvents(document, ( obj = {}, obj[ MOUSEMOVE ] = this._mouseMoveTrackHandler, obj ));\n            this._unsetActivePoint();\n            this._clearFocusedElement();\n            this._mouseMoveTrackHandler = null;\n\n            this._hideInactiveOpacity(point);\n        }\n    },\n\n    _mousemove: function(e) {\n        var coords = this._eventCoordinates(e);\n        var plotArea = this._plotArea;\n\n        this._trackCrosshairs(coords);\n\n        if (plotArea.hover) {\n            var overPlotArea = plotArea.backgroundContainsPoint(coords);\n            if (overPlotArea) {\n                this._plotAreaHovered = true;\n                this._plotArea.hover(this, e);\n            } else if (this._plotAreaHovered && !overPlotArea) {\n                this._plotAreaHovered = false;\n                this.trigger(PLOT_AREA_LEAVE);\n            }\n        }\n\n        if (this._sharedTooltip()) {\n            this._trackSharedTooltip(coords, e);\n        }\n    },\n\n    _trackCrosshairs: function(coords) {\n        var crosshairs = this._plotArea.crosshairs;\n\n        for (var i = 0; i < crosshairs.length; i++) {\n            var current = crosshairs[i];\n\n            if (current.box.containsPoint(coords)) {\n                current.showAt(coords);\n            } else {\n                current.hide();\n            }\n        }\n    },\n\n    _trackSharedTooltip: function(coords, e, toggle) {\n        if (this._suppressHover) {\n            return;\n        }\n\n        var ref = this;\n        var tooltipOptions = ref.options.tooltip;\n        var plotArea = ref._plotArea;\n        var categoryAxis = ref._plotArea.categoryAxis;\n        var tooltip = ref._tooltip;\n        var highlight = ref._highlight;\n\n        if (plotArea.backgroundContainsPoint(coords)) {\n            var index = categoryAxis.pointCategoryIndex(coords);\n            if (index !== this._tooltipCategoryIx || (!this._sharedHighlight && toggle)) {\n                var points = plotArea.pointsByCategoryIndex(index);\n                var pointArgs = points.map(function(point) {\n                    return point.eventArgs(e);\n                });\n                var hoverArgs = pointArgs[0] || {};\n                hoverArgs.categoryPoints = pointArgs;\n\n                if (points.length > 0 && !this.trigger(SERIES_HOVER, hoverArgs)) {\n                    if (tooltipOptions.visible) {\n                        tooltip.showAt(points, coords);\n                    }\n\n                    highlight.show(points);\n\n                    this._sharedHighlight = true;\n                } else {\n                    tooltip.hide();\n                }\n\n                this._tooltipCategoryIx = index;\n            } else if (toggle && this._sharedHighlight) {\n                highlight.hide();\n                tooltip.hide();\n                this._sharedHighlight = false;\n            }\n        } else if (this._sharedHighlight) {\n            highlight.hide();\n            tooltip.hide();\n            this._tooltipCategoryIx = null;\n            this._sharedHighlight = false;\n        }\n    },\n\n    hideElements: function(options) {\n        var plotArea = this._plotArea;\n        this._mousemove.cancel();\n\n        plotArea.hideCrosshairs();\n\n        this._unsetActivePoint(options);\n    },\n\n    _unsetActivePoint: function(options) {\n        var ref = this;\n        var highlight = ref._highlight;\n\n        this._activePoint = null;\n        this._hoveredPoint = null;\n\n        if (!options || !options.keepTooltipOpen) {\n            this._hideTooltip();\n        }\n\n        this._tooltipCategoryIx = null;\n        this._sharedHighlight = false;\n\n        if (highlight) {\n            highlight.hide();\n        }\n    },\n\n    _deferRedraw: function() {\n        this._redraw();\n    },\n\n    _clearRedrawTimeout: function() {\n        if (this._redrawTimeout) {\n            clearInterval(this._redrawTimeout);\n            this._redrawTimeout = null;\n        }\n    },\n\n    bindCategories: function() {\n        var this$1$1 = this;\n\n        var options = this.options;\n        var definitions = [].concat(options.categoryAxis);\n\n        for (var axisIx = 0; axisIx < definitions.length; axisIx++) {\n            var axis = definitions[axisIx];\n            if (axis.autoBind !== false) {\n                this$1$1.bindCategoryAxisFromSeries(axis, axisIx);\n            }\n        }\n    },\n\n    bindCategoryAxisFromSeries: function(axis, axisIx) {\n        var this$1$1 = this;\n\n        var uniqueCategories = new Set();\n        var seriesOnAxis = this.options.series.filter(function (series) { return series.categoryAxis === axis.name || (!series.categoryAxis && axisIx === 0); });\n        var hasCategoryBinding = seriesOnAxis.some(function (series) { return Boolean(series.categoryField); });\n        var seriesWithData = seriesOnAxis.filter(function (series) { return series.data && series.data.length > 0; });\n        var categorySamples = seriesWithData.map(function (series) { return SeriesBinder.current.bindPoint(series, 0).fields.category; });\n        var dateAxis = categorySamples.reduce(function (result, firstCategory) { return result || isDateAxis(axis, firstCategory); }, false);\n        var seriesWithBinding = seriesWithData.filter(function (series, seriesIx) { return series.categoryField || defined(categorySamples[seriesIx]); });\n\n        seriesWithBinding.forEach(function (series) { return series.data.forEach(function (row, index) {\n            var category = SeriesBinder.current.bindPoint(series, index).fields.category;\n            if (dateAxis) {\n                var date = parseDateCategory(category, row, this$1$1.chartService.intl);\n                category = date ? date.getTime() : undefined;\n            }\n\n            uniqueCategories.add(category);\n        }); });\n\n        if (uniqueCategories.size > 0) {\n            var categories = Array.from(uniqueCategories.values());\n            if (dateAxis) {\n                categories = categories.sort().map(function (time) { return time && new Date(time); });\n            }\n\n            axis.categories = categories;\n        } else if (hasCategoryBinding) {\n            axis.categories = [];\n        }\n    },\n\n    _isBindable: function(series) {\n        var valueFields = SeriesBinder.current.valueFields(series);\n        var result = true;\n\n        for (var i = 0; i < valueFields.length; i++) {\n            var field = valueFields[i];\n            if (field === VALUE) {\n                field = \"field\";\n            } else {\n                field = field + \"Field\";\n            }\n\n            if (!defined(series[field])) {\n                result = false;\n                break;\n            }\n        }\n\n        return result;\n    },\n\n    _noTransitionsRedraw: function() {\n        var options = this.options;\n        var transitionsState;\n\n        if (options.transitions !== false) {\n            options.transitions = false;\n            transitionsState = true;\n        }\n\n        this._redraw();\n\n        if (transitionsState) {\n            options.transitions = true;\n        }\n    },\n\n    _legendItemHover: function(seriesIndex, pointIndex) {\n        this._showSeriesInactiveOpacity(seriesIndex, pointIndex);\n    },\n\n    _showSeriesInactiveOpacity: function(seriesIndex, pointIndex) {\n        var ref = this;\n        var plotArea = ref._plotArea;\n        var highlight = ref._highlight;\n        var currentSeries = (plotArea.srcSeries || plotArea.series)[seriesIndex];\n        var items;\n\n        if (inArray(currentSeries.type, [ PIE, DONUT, FUNNEL, PYRAMID ])) {\n            items = plotArea.findPoint(function(point) {\n                return point.series.index === seriesIndex && point.index === pointIndex;\n            });\n        } else {\n            items = plotArea.pointsBySeriesIndex(seriesIndex);\n        }\n\n        if (this._hasInactiveOpacity() && currentSeries.visible && items) {\n            var multipleSeries = plotArea.series.length > 1;\n            var point = items.length ? items[0] : items;\n\n            this._displayInactiveOpacity(point, multipleSeries, items);\n        } else {\n            highlight.show(items);\n        }\n    },\n\n    _shouldAttachMouseMove: function() {\n        return this._plotArea.crosshairs.length || (this._tooltip && this._sharedTooltip()) || this.requiresHandlers([ PLOT_AREA_HOVER, PLOT_AREA_LEAVE ]);\n    },\n\n    updateMouseMoveHandler: function() {\n        var obj;\n        unbindEvents(this.element, ( obj = {}, obj[ MOUSEMOVE ] = this._mousemove, obj ));\n\n        if (this._shouldAttachMouseMove()) {\n            var obj$1;\n            bindEvents(this.element, ( obj$1 = {}, obj$1[ MOUSEMOVE ] = this._mousemove, obj$1 ));\n        }\n    },\n\n    applyOptions: function(options, theme) {\n        clearMissingValues(this._originalOptions, options);\n        this._originalOptions = deepExtend(this._originalOptions, options);\n        this.options = deepExtend({}, this._originalOptions);\n\n        if (theme) {\n            this._theme = theme;\n            this.chartService.theme = theme;\n        }\n        this._initTheme(this.options, this._theme);\n\n        this._toggleDragZoomEvents();\n    },\n\n    setOptions: function(options, theme) {\n        this.applyOptions(options, theme);\n        this.bindCategories();\n        this.redraw();\n        this.updateMouseMoveHandler();\n    },\n\n    setDirection: function(rtl) {\n        this.chartService.rtl = Boolean(rtl);\n        if (this.surface && this.surface.type === 'svg') {\n            this._destroySurface();\n        }\n    },\n\n    setIntlService: function(intl) {\n        this.chartService.intl = intl;\n    },\n\n    noTransitionsRedraw: function() {\n        this._noTransitionsRedraw();\n    },\n\n    destroy: function() {\n        this._destroyed = true;\n\n        var obj;\n        unbindEvents(this.element, ( obj = {}, obj[ CONTEXTMENU ] = this._clickHandler, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj[ MOUSEMOVE ] = this._mousemove, obj[ MOUSELEAVE ] = this._mouseleaveHandler, obj[ KEYDOWN ] = this._keydownHandler, obj[ FOCUS ] = this._focusHandler, obj[ BLUR] = this._blurHandler, obj ));\n\n        if (this.domEvents) {\n            this.domEvents.destroy();\n            delete this.domEvents;\n        }\n\n        if (this._mouseMoveTrackHandler) {\n            var obj$1;\n            unbindEvents(document, ( obj$1 = {}, obj$1[ MOUSEMOVE ] = this._mouseMoveTrackHandler, obj$1 ));\n        }\n\n        this._focusState = null;\n\n        this._destroyView();\n\n        this._destroySurface();\n\n        this._clearRedrawTimeout();\n    },\n\n    _destroySurface: function() {\n        var surface = this.surface;\n        if (surface) {\n            surface.unbind(\"mouseenter\", this._surfaceMouseenterHandler);\n            surface.unbind(\"mouseleave\", this._surfaceMouseleaveHandler);\n            surface.destroy();\n\n            this.surface = null;\n        }\n    },\n\n    _destroySelections: function() {\n        var selections = this._selections;\n\n        if (selections) {\n            while (selections.length > 0) {\n                selections.shift().destroy();\n            }\n        }\n    },\n\n    _destroyView: function() {\n        var model = this._model;\n\n        if (model) {\n            model.destroy();\n            this._model = null;\n        }\n\n        this._unsetActivePoint();\n        this._clearFocusedElement();\n        this._resetDrilldownPoint();\n        this._destroySelections();\n\n        if (this._tooltip) {\n            this._tooltip.destroy();\n        }\n\n        if (this._highlight) {\n            this._highlight.destroy();\n        }\n\n        if (this._zoomSelection) {\n            this._zoomSelection.destroy();\n            delete this._zoomSelection;\n        }\n\n        if (this._pannable) {\n            this._pannable.destroy();\n            delete this._pannable;\n        }\n\n        if (this._mousewheelZoom) {\n            this._mousewheelZoom.destroy();\n            delete this._mousewheelZoom;\n        }\n    }\n});\n\nfunction resolveAxisAliases(options) {\n    var aliases = AXIS_NAMES;\n\n    for (var idx = 0; idx < aliases.length; idx++) {\n        var alias = aliases[idx] + \"Axes\";\n        if (options[alias]) {\n            options[aliases[idx] + \"Axis\"] = options[alias];\n            delete options[alias];\n        }\n    }\n}\n\nfunction pointByCategoryName(points, name) {\n    if (points) {\n        for (var idx = 0; idx < points.length; idx++) {\n            if (points[idx].category === name) {\n                return [ points[idx] ];\n            }\n        }\n    }\n}\n\nfunction applyAxisDefaults(options, themeOptions) {\n    var themeAxisDefaults = ((themeOptions || {}).axisDefaults) || {};\n    var axisName, axisDefaults, axes;\n\n    function mapAxisOptions(axisOptions) {\n        var axisColor = (axisOptions || {}).color || axisDefaults.color;\n        var result = deepExtend({},\n            themeAxisDefaults,\n            themeAxisDefaults[axisName],\n            axisDefaults,\n            axisDefaults[axisName], {\n                line: { color: axisColor },\n                labels: { color: axisColor },\n                title: { color: axisColor }\n            },\n            axisOptions\n        );\n\n        delete result[axisName];\n\n        return result;\n    }\n\n    for (var idx = 0; idx < AXIS_NAMES.length; idx++) {\n        axisName = AXIS_NAMES[idx] + \"Axis\";\n        axisDefaults = options.axisDefaults || {};\n        axes = [].concat(options[axisName]);\n\n        axes = axes.map(mapAxisOptions);\n\n        options[axisName] = axes.length > 1 ? axes : axes[0];\n    }\n}\n\nfunction applySeriesDefaults(options, themeOptions) {\n    var series = options.series;\n    var seriesLength = series.length;\n    var seriesDefaults = options.seriesDefaults;\n    var commonDefaults = deepExtend({}, options.seriesDefaults);\n    var themeSeriesDefaults = themeOptions ? deepExtend({}, themeOptions.seriesDefaults) : {};\n    var commonThemeDefaults = deepExtend({}, themeSeriesDefaults);\n\n    cleanupNestedSeriesDefaults(commonDefaults);\n    cleanupNestedSeriesDefaults(commonThemeDefaults);\n\n    for (var i = 0; i < seriesLength; i++) {\n        var seriesType = series[i].type || options.seriesDefaults.type;\n\n        var baseOptions = deepExtend(\n            { data: [] },\n            commonThemeDefaults,\n            themeSeriesDefaults[seriesType],\n            { tooltip: options.tooltip },\n            commonDefaults,\n            seriesDefaults[seriesType]\n        );\n\n        series[i]._defaults = baseOptions;\n        series[i] = deepExtend({}, baseOptions, series[i]);\n        series[i].data = series[i].data || [];\n    }\n}\n\nfunction cleanupNestedSeriesDefaults(seriesDefaults) {\n    delete seriesDefaults.bar;\n    delete seriesDefaults.column;\n    delete seriesDefaults.rangeColumn;\n    delete seriesDefaults.line;\n    delete seriesDefaults.verticalLine;\n    delete seriesDefaults.pie;\n    delete seriesDefaults.donut;\n    delete seriesDefaults.area;\n    delete seriesDefaults.verticalArea;\n    delete seriesDefaults.scatter;\n    delete seriesDefaults.scatterLine;\n    delete seriesDefaults.bubble;\n    delete seriesDefaults.candlestick;\n    delete seriesDefaults.ohlc;\n    delete seriesDefaults.boxPlot;\n    delete seriesDefaults.bullet;\n    delete seriesDefaults.verticalBullet;\n    delete seriesDefaults.polarArea;\n    delete seriesDefaults.polarLine;\n    delete seriesDefaults.radarArea;\n    delete seriesDefaults.radarLine;\n    delete seriesDefaults.waterfall;\n}\n\nfunction axisRanges(axes) {\n    var ranges = {};\n\n    for (var i = 0; i < axes.length; i++) {\n        var axis = axes[i];\n        var axisName = axis.options.name;\n        if (axisName) {\n            ranges[axisName] = axis.range();\n        }\n    }\n\n    return ranges;\n}\n\nvar DATA_FIELDS = [ 'data', 'categories' ];\n\nfunction clearMissingValues(originalOptions, options) {\n    for (var field in options) {\n        if (!inArray(field, DATA_FIELDS) && dataviz.hasOwnProperty(options, field)) {\n            var fieldValue = options[field];\n            var originalValue = originalOptions[field];\n            if (defined(originalValue)) {\n                var nullValue = fieldValue === null;\n                if ((nullValue || !defined(fieldValue))) {\n                    delete originalOptions[field];\n                    if (nullValue) {\n                        delete options[field];\n                    }\n                } else if (originalValue && isObject(fieldValue)) {\n                    if (isObject(originalValue)) {\n                        clearMissingValues(originalValue, fieldValue);\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction triggerPaneRender(panes) {\n    for (var idx = 0; idx < panes.length; idx++) {\n        panes[idx].notifyRender();\n    }\n}\n\nsetDefaultOptions(Chart, {\n    renderAs: \"\",\n    chartArea: {},\n    legend: {\n        visible: true,\n        labels: {},\n        accessibility: {\n            highlight: {\n                border: {\n                    opacity: 1,\n                    color: BLACK,\n                    width: 2\n                }\n            }\n        }\n    },\n    categoryAxis: {},\n    seriesDefaults: {\n        type: COLUMN,\n        data: [],\n        highlight: {\n            visible: true\n        },\n        labels: {},\n        negativeValues: {\n            visible: false\n        },\n        accessibility: {\n            highlight: {\n                border: {\n                    opacity: 1,\n                    width: 2\n                },\n                zIndex: 200\n            }\n        }\n    },\n    series: [],\n    seriesColors: null,\n    tooltip: {\n        visible: false\n    },\n    transitions: true,\n    valueAxis: {},\n    plotArea: {},\n    title: {},\n    xAxis: {},\n    yAxis: {},\n    panes: [ {} ],\n    pannable: false,\n    zoomable: false\n});\n\nkendo.deepExtend(kendo.dataviz, {\n    constants: constants,\n    Aggregates: Aggregates,\n    AreaChart: AreaChart,\n    AreaSegment: AreaSegment,\n    AxisGroupRangeTracker: AxisGroupRangeTracker,\n    Bar: Bar,\n    BarChart: BarChart,\n    BarLabel: BarLabel,\n    BoxPlotChart: BoxPlotChart,\n    BoxPlot: BoxPlot,\n    BubbleChart: BubbleChart,\n    Bullet: Bullet,\n    BulletChart: BulletChart,\n    CandlestickChart: CandlestickChart,\n    Candlestick: Candlestick,\n    CategoricalChart: CategoricalChart,\n    CategoricalErrorBar: CategoricalErrorBar,\n    CategoricalPlotArea: CategoricalPlotArea,\n    Chart: Chart,\n    ChartContainer: ChartContainer,\n    ClipAnimation: ClipAnimation,\n    ClusterLayout: ClusterLayout,\n    Crosshair: Crosshair,\n    CrosshairTooltip: CrosshairTooltip,\n    DefaultAggregates: DefaultAggregates,\n    DonutChart: DonutChart,\n    DonutPlotArea: DonutPlotArea,\n    DonutSegment: DonutSegment,\n    ErrorBarBase: ErrorBarBase,\n    ErrorRangeCalculator: ErrorRangeCalculator,\n    Highlight: Highlight,\n    SharedTooltip: SharedTooltip,\n    Legend: Legend,\n    LegendItem: LegendItem,\n    LegendLayout: LegendLayout,\n    LineChart: LineChart,\n    LinePoint: LinePoint,\n    LineSegment: LineSegment,\n    Pane: Pane,\n    PieAnimation: PieAnimation,\n    PieChart: PieChart,\n    PieChartMixin: PieChartMixin,\n    PiePlotArea: PiePlotArea,\n    PieSegment: PieSegment,\n    PlotAreaBase: PlotAreaBase,\n    PlotAreaEventsMixin: PlotAreaEventsMixin,\n    PlotAreaFactory: PlotAreaFactory,\n    PointEventsMixin: PointEventsMixin,\n    RangeBar: RangeBar,\n    RangeBarChart: RangeBarChart,\n    RangeAreaPoint: RangeAreaPoint,\n    RangeAreaChart: RangeAreaChart,\n    ScatterChart: ScatterChart,\n    ScatterErrorBar: ScatterErrorBar,\n    ScatterLineChart: ScatterLineChart,\n    Selection: Selection,\n    SeriesAggregator: SeriesAggregator,\n    SeriesBinder: SeriesBinder,\n    SplineSegment: SplineSegment,\n    SplineAreaSegment: SplineAreaSegment,\n    StackWrap: StackWrap,\n    Tooltip: Tooltip,\n    OHLCChart: OHLCChart,\n    OHLCPoint: OHLCPoint,\n    WaterfallChart: WaterfallChart,\n    WaterfallSegment: WaterfallSegment,\n    XYPlotArea: XYPlotArea,\n    MousewheelZoom: MousewheelZoom,\n    ZoomSelection: ZoomSelection,\n    Pannable: Pannable,\n    ChartAxis: ChartAxis,\n    ChartPane: ChartPane,\n    ChartPlotArea: ChartPlotArea,\n    findAxisByName: findAxisByName,\n    anyHasZIndex: anyHasZIndex,\n    appendIfNotNull: appendIfNotNull,\n    areNumbers: areNumbers,\n    bindSegments: bindSegments,\n    categoriesCount: categoriesCount,\n    countNumbers: countNumbers,\n    equalsIgnoreCase: equalsIgnoreCase,\n    evalOptions: evalOptions,\n    filterSeriesByType: filterSeriesByType,\n    parseDateCategory: parseDateCategory,\n    getField: getField,\n    hasGradientOverlay: hasGradientOverlay,\n    hasValue: hasValue,\n    isDateAxis: isDateAxis,\n    segmentVisible: segmentVisible,\n    singleItemOrArray: singleItemOrArray,\n    createOutOfRangePoints: createOutOfRangePoints\n});\n\n})(window.kendo.jQuery);\n\n(function($, undefined$1) {\n\n    const kendo = window.kendo;\n    const dataviz = kendo.dataviz;\n    const Widget = kendo.ui.Widget;\n\n    const ChartBreadcrumb = Widget.extend({\n        init: function(element, options) {\n            Widget.fn.init.call(this, element, options);\n\n            if (!options.chart) {\n                throw new Error('ChartBreadcrumb: No Chart instance supplied as `options.chart`');\n            }\n\n            this._attachChartEvents();\n            this._renderBreadcrumb();\n\n            kendo.notify(this, dataviz.ui);\n        },\n\n        events: [],\n\n        options: {\n            name: \"ChartBreadcrumb\",\n            rootItem: {\n                type: 'rootitem',\n                icon: 'home',\n                text: 'Home',\n                showIcon: true\n            }\n        },\n\n        destroy: function() {\n            if (this.breadcrumb) {\n                this.breadcrumb.destroy();\n                this.breadcrumb = null;\n            }\n\n            if (this.chart) {\n                this.chart.unbind('drilldown', this._onChartDrilldown);\n                this.chart.unbind('drilldownLevelChange', this._onChartDrilldownLevelChange);\n                this.chart = null;\n            }\n\n            Widget.fn.destroy.call(this);\n        },\n\n        _attachChartEvents(deferred) {\n            const options = this.options;\n\n            if (typeof options.chart.resetDrilldownLevel === 'function') {\n                this.chart = options.chart;\n            } else if (typeof options.chart === 'string') {\n                this.chart = $(options.chart).getKendoChart() || $('#' + options.chart).getKendoChart();\n\n                if (!this.chart && !deferred) {\n                    setTimeout(() => this._attachChartEvents(true));\n                    return;\n                }\n            } else {\n                throw new Error('ChartBreadcrumb: `options.chart` must be a Chart instance, element ID or a selector');\n            }\n\n            this._onChartDrilldown = this._onChartDrilldown.bind(this);\n            this.chart.bind('drilldown', this._onChartDrilldown);\n\n            this._onChartDrilldownLevelChange = this._onChartDrilldownLevelChange.bind(this);\n            this.chart.bind('drilldownLevelChange', this._onChartDrilldownLevelChange);\n        },\n\n        _renderBreadcrumb: function() {\n            const breadcrumbElement = $('<nav />');\n            this.element.append(breadcrumbElement);\n            this.breadcrumb = new kendo.ui.Breadcrumb(breadcrumbElement, {\n                items: [this.options.rootItem]\n            });\n\n            this.breadcrumb.bind('click', e => this._onBreadcrumbClick(e));\n        },\n\n        _onBreadcrumbClick: function(e) {\n            if (!this.breadcrumb || !this.chart) {\n                return;\n            }\n\n            let items = this.breadcrumb.items();\n            const level = items.findIndex((item) => item === e.item);\n\n            const chart = this.chart;\n            chart.resetDrilldownLevel(level);\n        },\n\n        _onChartDrilldown: function(e) {\n            if (!this.breadcrumb || e.isDefaultPrevented()) {\n                return;\n            }\n\n            this.breadcrumb.items([\n                ...this.breadcrumb.items(),\n                { type: 'item', text: e.point.category }\n            ]);\n        },\n\n        _onChartDrilldownLevelChange: function(e) {\n            if (!this.breadcrumb) {\n                return;\n            }\n\n            let items = this.breadcrumb.items();\n            items = items.slice(0, e.level + 1);\n            this.breadcrumb.items(items);\n        }\n    });\n\n    dataviz.ui.plugin(ChartBreadcrumb);\n\n})(window.kendo.jQuery);\n\n(function($, undefined$1) {\n\n    var NS = \".kendoChart\";\n    var kendo = window.kendo;\n    var Class = kendo.Class;\n    var outerWidth = kendo._outerWidth;\n    var outerHeight = kendo._outerHeight;\n    var dataviz = kendo.dataviz;\n    var constants = dataviz.constants;\n    var KendoChart = dataviz.Chart;\n    var SeriesBinder = dataviz.SeriesBinder;\n    var Widget = kendo.ui.Widget;\n    var DataSource = kendo.data.DataSource;\n    var deepExtend = kendo.deepExtend;\n    var defined = dataviz.defined;\n    var getField = dataviz.getField;\n    var InstanceObserver = dataviz.InstanceObserver;\n    var inArray = dataviz.inArray;\n    var services = dataviz.services;\n    var isArray = Array.isArray;\n    var extend = $.extend;\n    var template = kendo.template;\n    var encode = kendo.htmlEncode;\n\n    var MOUSELEAVE_NS = \"mouseleave\" + NS;\n    var AXIS_LABEL_CLICK = constants.AXIS_LABEL_CLICK;\n    var LEGEND_ITEM_CLICK = constants.LEGEND_ITEM_CLICK;\n    var LEGEND_ITEM_HOVER = constants.LEGEND_ITEM_HOVER;\n    var LEGEND_ITEM_LEAVE = constants.LEGEND_ITEM_LEAVE;\n    var SERIES_CLICK = constants.SERIES_CLICK;\n    var SERIES_HOVER = constants.SERIES_HOVER;\n    var SERIES_OVER = constants.SERIES_OVER;\n    var SERIES_LEAVE = constants.SERIES_LEAVE;\n    var PANE_RENDER = constants.PANE_RENDER;\n    var PLOT_AREA_CLICK = constants.PLOT_AREA_CLICK;\n    var PLOT_AREA_HOVER = constants.PLOT_AREA_HOVER;\n    var PLOT_AREA_LEAVE = constants.PLOT_AREA_LEAVE;\n    var DRAG = constants.DRAG;\n    var DRAG_END = constants.DRAG_END;\n    var DRAG_START = constants.DRAG_START;\n    var DRILLDOWN = constants.DRILLDOWN;\n    var DRILLDOWN_LEVEL_CHANGE = \"drilldownLevelChange\";\n    var ZOOM_START = constants.ZOOM_START;\n    var ZOOM = constants.ZOOM;\n    var ZOOM_END = constants.ZOOM_END;\n    var SELECT_START = constants.SELECT_START;\n    var SELECT = constants.SELECT;\n    var SELECT_END = constants.SELECT_END;\n    var RENDER = constants.RENDER;\n    var NOTE_CLICK = constants.NOTE_CLICK;\n    var NOTE_HOVER = constants.NOTE_HOVER;\n    var NOTE_LEAVE = constants.NOTE_LEAVE;\n    var DOCUMENT_ELEMENT = $(document.documentElement);\n\n    var CHANGE = \"change\";\n    var DATABOUND = \"dataBound\";\n    var LEAVE = \"leave\";\n    var MOUSEDOWN = \"down\";\n\n    var VALUE = constants.VALUE;\n    var PIE = constants.PIE;\n    var DONUT = constants.DONUT;\n    var FUNNEL = constants.FUNNEL;\n\n    var Observable = kendo.Observable;\n    var TOOLTIP_ANIMATION_DURATION = 150;\n    var TOOLTIP_SHOW_DELAY = 100;\n    var TOOLTIP_INVERSE = \"k-chart-tooltip-inverse\";\n    var SHARED_TOOLTIP_CLASS = \"k-chart-shared-tooltip\";\n    var RTL = \"rtl\";\n\n    services.DomEventsBuilder.register({\n        create: function(element, events) {\n             return new kendo.UserEvents(element, deepExtend({\n                 global: true,\n                 multiTouch: true,\n                 fastTap: true\n             }, events));\n        }\n    });\n\n    var ChartInstanceObserver = InstanceObserver.extend({\n        handlerMap: {\n            showTooltip: '_showTooltip',\n            hideTooltip: '_hideTooltip',\n            legendItemClick: '_onLegendItemClick',\n            render: '_onRender',\n            init: '_onInit',\n            drilldown: '_onDrilldown'\n        }\n    });\n\n    var Chart = Widget.extend({\n        init: function(element, userOptions) {\n            var dataSource;\n\n            kendo.destroy(element);\n\n            Widget.fn.init.call(this, element);\n\n            if (userOptions) {\n                dataSource = userOptions.dataSource;\n                delete userOptions.dataSource;\n            }\n\n            this.options = deepExtend({}, this.options, userOptions);\n\n            this.wrapper = this.element;\n            this._attachEvents();\n\n            if (userOptions) {\n                userOptions.dataSource = dataSource;\n            }\n\n            this._seriesVisibility = new SeriesVisibilityState();\n\n            this.bind(this.events, this.options);\n            this._initDataSource(userOptions);\n\n            this._drilldownState = [];\n\n            kendo.notify(this, dataviz.ui);\n\n            if (this._showWatermarkOverlay) {\n                this._showWatermarkOverlay(this.wrapper[0]);\n            }\n        },\n\n        events: [\n            DATABOUND,\n            DRILLDOWN,\n            DRILLDOWN_LEVEL_CHANGE,\n            SERIES_CLICK,\n            SERIES_HOVER,\n            SERIES_OVER,\n            SERIES_LEAVE,\n            AXIS_LABEL_CLICK,\n            LEGEND_ITEM_CLICK,\n            LEGEND_ITEM_HOVER,\n            LEGEND_ITEM_LEAVE,\n            PANE_RENDER,\n            PLOT_AREA_CLICK,\n            PLOT_AREA_HOVER,\n            PLOT_AREA_LEAVE,\n            DRAG_START,\n            DRAG,\n            DRAG_END,\n            ZOOM_START,\n            ZOOM,\n            ZOOM_END,\n            SELECT_START,\n            SELECT,\n            SELECT_END,\n            NOTE_CLICK,\n            NOTE_HOVER,\n            NOTE_LEAVE,\n            RENDER\n        ],\n\n        options: {\n            name: \"Chart\",\n            renderAs: \"\",\n            theme: \"sass\",\n            axisDefaults: {},\n            chartArea: {},\n            legend: {},\n            categoryAxis: {},\n            autoBind: true,\n            seriesDefaults: {},\n            series: [],\n            seriesColors: null,\n            tooltip: {},\n            transitions: true,\n            valueAxis: {},\n            plotArea: {},\n            title: {},\n            xAxis: {},\n            yAxis: {},\n            panes: [{}],\n            pannable: false,\n            zoomable: false\n        },\n\n        items: function() {\n            return $();\n        },\n\n        refresh: function() {\n            var chart = this;\n            var instance = chart._instance;\n            instance.applyDefaults(chart.options);\n            instance.applySeriesColors();\n\n            chart._bindSeries();\n            chart._bindCategories();\n\n            chart.trigger(DATABOUND);\n            chart._redraw();\n        },\n\n        getSize: function() {\n            return kendo.dimensions(this.element);\n        },\n\n        redraw: function(paneName) {\n            this._size = null;\n            this._instance.redraw(paneName);\n        },\n\n        setOptions: function(options) {\n            var chart = this,\n                dataSource = options.dataSource;\n\n            delete options.dataSource;\n\n            Widget.fn._setEvents.call(chart, options);\n\n            this._instance.applyOptions(options, this._getThemeOptions(options));\n            this.options = this._instance.options;\n            this._tooltip.setOptions(this.options.tooltip);\n            this._seriesVisibility.setOptions(this.options);\n            this._sourceSeries = null;\n\n            if (dataSource) {\n                chart.setDataSource(dataSource);\n            }\n\n            if (chart._hasDataSource) {\n                chart._onDataChanged();\n            } else {\n                chart._bindCategories();\n                chart.redraw();\n            }\n\n            chart._instance.updateMouseMoveHandler();\n\n        },\n\n        setDataSource: function(dataSource) {\n            var chart = this;\n\n            chart.dataSource.unbind(CHANGE, chart._dataChangeHandler);\n            chart.dataSource = dataSource = DataSource.create(dataSource);\n            chart._hasDataSource = true;\n            chart._hasData = false;\n\n            dataSource.bind(CHANGE, chart._dataChangeHandler);\n\n            if (chart.options.autoBind) {\n                dataSource.fetch();\n            }\n        },\n\n        destroy: function() {\n            var chart = this,\n                dataSource = chart.dataSource;\n\n            chart.element.off(NS);\n\n            if (dataSource) {\n                dataSource.unbind(CHANGE, chart._dataChangeHandler);\n            }\n\n            if (chart._instance) {\n                chart._instance.destroy();\n                delete this._instance;\n            }\n\n            if (this._tooltip) {\n                this._tooltip.destroy();\n                delete this._tooltip;\n            }\n\n            this._destroyCrosshairTooltips();\n\n            Widget.fn.destroy.call(chart);\n        },\n\n        findPaneByName: function(name) {\n            var panes = this._plotArea.panes;\n\n            for (var idx = 0; idx < panes.length; idx++) {\n                if (panes[idx].options.name === name) {\n                    return new ChartPane(this, panes[idx]);\n                }\n            }\n        },\n\n        findPaneByIndex: function(idx) {\n            var panes = this._plotArea.panes;\n            if (panes[idx]) {\n                return new ChartPane(this, panes[idx]);\n            }\n        },\n\n        findSeries: function(callback) {\n            var plotArea = this._plotArea;\n            var series = plotArea.srcSeries || plotArea.series;\n            for (var idx = 0; idx < series.length; idx++) {\n                if (callback(series[idx])) {\n                    return new ChartSeries(this, series[idx]);\n                }\n            }\n        },\n\n        findSeriesByName: function(name) {\n            return this._createSeries({ name: name });\n        },\n\n        findSeriesByIndex: function(index) {\n            return this._createSeries({ index: index });\n        },\n\n        exportVisual: function(options) {\n            var instance = this._instance;\n            if (!instance) {\n                return;\n            }\n\n            var visual;\n\n            //TO DO: support for setting any options. already available in kendo-charts\n            if (options && (options.width || options.height)) {\n                var chartArea = instance.options.chartArea;\n                var originalChartArea = instance._originalOptions.chartArea;\n\n                deepExtend(chartArea, options);\n\n                var model = instance._getModel();\n\n                chartArea.width = originalChartArea.width;\n                chartArea.height = originalChartArea.height;\n\n                model.renderVisual();\n\n                triggerPaneRender(model._plotArea.panes);\n\n                visual = model.visual;\n            } else {\n                visual = instance.exportVisual();\n            }\n\n            return visual;\n        },\n\n        resetDrilldownLevel(level) {\n            level = level || 0;\n            const state = this._drilldownState;\n            if (!state || level < 0 || level > state.length - 1) {\n                return;\n            }\n\n            const args = {\n                level,\n                sender: this\n            };\n            this.trigger(DRILLDOWN_LEVEL_CHANGE, args);\n\n            this.options.series = this._drilldownState[level];\n            this._drilldownState = this._drilldownState.slice(0, level);\n\n            this._bindCategories();\n            this._redraw();\n        },\n\n        _createSeries: function(options) {\n            var seriesOptions = this._seriesOptions(options);\n            if (seriesOptions) {\n                return new ChartSeries(this, seriesOptions);\n            }\n        },\n\n        _seriesOptions: function(options) {\n            var plotArea = this._plotArea;\n            var series = plotArea.srcSeries || plotArea.series;\n            var seriesOptions;\n\n            if (defined(options.index)) {\n                seriesOptions = series[options.index];\n            } else if (defined(options.name)) {\n                for (var idx = 0; idx < series.length; idx++) {\n                    if (series[idx].name === options.name) {\n                        seriesOptions = series[idx];\n                        break;\n                    }\n                }\n            }\n\n            return seriesOptions;\n        },\n\n        _attachEvents: function() {\n             this.element.on(MOUSELEAVE_NS, this._mouseleave.bind(this));\n        },\n\n        _mouseleave: function(e) {\n            var instance = this._instance;\n            var tooltip = this._tooltip;\n            var target = e.relatedTarget;\n\n            if (!(target && $(target).closest(tooltip.element).length) && instance && !instance.handlingTap) {\n                instance.hideElements({\n                    keepTooltipOpen: !tooltip.options.autoHide\n                });\n            }\n        },\n\n        _getThemeOptions: function(userOptions) {\n            var themeName = (userOptions || {}).theme;\n\n            if (themeName && dataviz.SASS_THEMES.indexOf(themeName.toLowerCase()) !== -1) {\n                return dataviz.autoTheme().chart;\n            }\n\n            if (defined(themeName)) {\n                var themes = dataviz.ui.themes || {};\n                var theme = themes[themeName] || themes[themeName.toLowerCase()] || {};\n                return theme.chart || {};\n            }\n        },\n\n        _initChart: function() {\n            this._createChart(this.options, this._getThemeOptions(this.options));\n            this.options = this._instance.options;\n            this._seriesVisibility.setOptions(this.options);\n        },\n\n        _createChart: function(options, themeOptions) {\n            this._instance = new KendoChart(this.element[0], options, themeOptions, {\n                observer: new ChartInstanceObserver(this),\n                sender: this,\n                rtl: this._isRtl()\n            });\n        },\n\n        _onInit: function(e) {\n            this._instance = e.sender;\n        },\n\n        _initDataSource: function(userOptions) {\n            var chart = this,\n                dataSource = (userOptions || {}).dataSource;\n\n            chart._dataChangeHandler = chart._onDataChanged.bind(chart);\n\n            chart.dataSource = DataSource\n                .create(dataSource)\n                .bind(\"change\", chart._dataChangeHandler);\n\n            chart._bindCategories();\n\n            if (dataSource) {\n                chart._hasDataSource = true;\n            }\n\n            this._initChart();\n            this._initTooltip();\n\n            if (dataSource) {\n                if (chart.options.autoBind) {\n                    chart.dataSource.fetch();\n                }\n            }\n        },\n\n        _destroyCrosshairTooltips: function() {\n            var tooltips = this._crosshairTooltips;\n            if (tooltips) {\n                for (var key in tooltips) {\n                    tooltips[key].destroy();\n                }\n            }\n            this._crosshairTooltips = {};\n        },\n\n        _getCrosshairTooltip: function(name, index) {\n            var tooltips = this._crosshairTooltips = this._crosshairTooltips || {};\n            var key = name + index;\n            var tooltip = tooltips[key];\n            if (!tooltip) {\n                tooltip = tooltips[key] = new CrosshairTooltip(this.element);\n            }\n            return tooltip;\n        },\n\n        _showTooltip: function(e) {\n            if (e.crosshair) {\n                var tooltip = this._getCrosshairTooltip(e.axisName, e.axisIndex);\n                tooltip.show(e);\n            } else if (this._tooltip) {\n                this._tooltip.show(e);\n            }\n        },\n\n        _hideTooltip: function(e) {\n            if (e.crosshair) {\n                 var tooltip = this._getCrosshairTooltip(e.axisName, e.axisIndex);\n                 tooltip.hide();\n            } else if (this._tooltip) {\n                this._tooltip.hide();\n            }\n        },\n\n        _onRender: function(e) {\n            this._destroyCrosshairTooltips();\n            this._copyMembers(e.sender);\n            if (!this._hasDataSource || this._hasData || !this.options.autoBind) {\n                this.trigger(RENDER);\n            }\n        },\n\n        _copyMembers: function(instance) {\n            this.options = instance.options;\n            this._originalOptions = instance._originalOptions;\n            this.surface = instance.surface;\n            this._plotArea = instance._plotArea;\n            this._model = instance._model;\n            this._highlight = instance._highlight;\n            this._selections = instance._selections;\n            this._pannable = instance._pannable;\n            this._zoomSelection = instance._zoomSelection;\n            this._mousewheelZoom = instance._mousewheelZoom;\n        },\n\n        requiresHandlers: function(names) {\n           var events = this._events;\n           for (var idx = 0; idx < names.length; idx++) {\n               if (defined(events[names[idx]])) {\n                   return true;\n               }\n           }\n        },\n\n        _initTooltip: function() {\n            this._tooltip = this._createTooltip();\n\n            this._tooltip.bind(LEAVE, this._tooltipleave.bind(this));\n        },\n\n        _onLegendItemClick: function(e) {\n            if (!this.trigger(LEGEND_ITEM_CLICK, e)) {\n                this._legendItemClick(e.seriesIndex, e.pointIndex);\n            }\n        },\n\n        _legendItemClick: function(seriesIndex, pointIndex) {\n            var chart = this._instance,\n                plotArea = chart._plotArea,\n                currentSeries = (plotArea.srcSeries || plotArea.series)[seriesIndex];\n\n            if (chart._hasInactiveOpacity() && chart._activeChartInstance) {\n                chart._updateSeriesOpacity(null, true);\n                chart._applySeriesOpacity(chart._activeChartInstance.children, null, true);\n                chart._activeChartInstance = null;\n            }\n\n            if ($.inArray(currentSeries.type, [PIE, DONUT, FUNNEL]) >= 0) {\n                var point = currentSeries.data[pointIndex];\n                if (point && defined(point.visible)) {\n                    point.visible = !point.visible;\n                } else {\n                    var pointVisibility = currentSeries.pointVisibility = currentSeries.pointVisibility || {};\n                    var visible = pointVisibility[pointIndex];\n                    pointVisibility[pointIndex] = defined(visible) ? !visible : false;\n                }\n            } else {\n                currentSeries.visible = !currentSeries.visible;\n                this._seriesVisibility.save(currentSeries);\n            }\n\n            chart._noTransitionsRedraw();\n        },\n\n        _createTooltip: function() {\n            return new Tooltip(this.element, extend({}, this.options.tooltip, {\n                rtl: this._isRtl()\n            }));\n        },\n\n        _tooltipleave: function() {\n            if (this._instance) {\n                this._instance.hideElements();\n            }\n        },\n\n        _onDrilldown: function(e) {\n            const { series, value } = e;\n\n            if (series.drilldownSeriesFactory) {\n                const result = series.drilldownSeriesFactory(value);\n\n                if (!result) {\n                    return;\n                } else if (result instanceof Promise) {\n                    result.then((resolved) => this._onDrilldownData(e, resolved));\n                } else {\n                    this._onDrilldownData(e, result);\n                }\n            } else if (typeof value === 'object') {\n                this._onDrilldownData(e, value);\n            }\n        },\n\n        _onDrilldownData: function(e, data) {\n            const drilldownSeries = Object.assign({}, e.series, data);\n            const args = {\n                point: e.point,\n                series: e.series,\n                drilldownSeries,\n                sender: this\n            };\n\n            const prevented = this.trigger(DRILLDOWN, args);\n            if (!prevented) {\n                this._drilldownState.push(this.options.series);\n\n                this.options.series = [drilldownSeries];\n                this._bindCategories();\n                this._redraw();\n            }\n        },\n\n        _bindData: function(e) {\n            var chart = this,\n                options = chart.options,\n                series = chart._sourceSeries || options.series,\n                seriesIx,\n                seriesLength = series.length,\n                data = chart.dataSource.view(),\n                grouped = (chart.dataSource.group() || []).length > 0,\n                processedSeries = [],\n                seriesVisibility = this._seriesVisibility,\n                currentSeries,\n                groupedSeries;\n\n            seriesVisibility.read();\n\n            for (seriesIx = 0; seriesIx < seriesLength; seriesIx++) {\n                currentSeries = series[seriesIx];\n\n                if (chart._isBindable(currentSeries) && grouped) {\n                    groupedSeries = groupSeries(currentSeries, data);\n                    processedSeries = processedSeries.concat(groupedSeries);\n\n                    seriesVisibility.applyByGroup(groupedSeries, e);\n                } else {\n                    currentSeries = extend({}, currentSeries);\n                    processedSeries.push(currentSeries);\n\n                    seriesVisibility.applyByIndex(currentSeries, e);\n                }\n            }\n\n            chart._sourceSeries = series;\n            options.series = processedSeries;\n            this._instance.applySeriesColors();\n\n            chart._bindSeries();\n            chart._bindCategories();\n\n            this._hasData = true;\n        },\n\n        _onDataChanged: function(e) {\n            this._bindData(e);\n\n            this.trigger(DATABOUND);\n            if (this._instance && this._instance.fontLoaded) {\n                this._redraw();\n            }\n        },\n\n        _bindSeries: function() {\n            var chart = this,\n                data = chart.dataSource.view(),\n                series = chart.options.series,\n                seriesIx,\n                seriesLength = series.length,\n                currentSeries,\n                groupIx,\n                seriesData;\n\n            for (seriesIx = 0; seriesIx < seriesLength; seriesIx++) {\n                currentSeries = series[seriesIx];\n\n                if (chart._isBindable(currentSeries)) {\n                    groupIx = currentSeries._groupIx;\n                    seriesData = defined(groupIx) ? (data[groupIx] || {}).items : data;\n\n                    if (currentSeries.autoBind !== false) {\n                        currentSeries.data = seriesData;\n                    }\n                }\n            }\n        },\n\n        _bindCategories: function() {\n            var chart = this,\n                data = chart.dataSource.view() || [],\n                grouped = (chart.dataSource.group() || []).length > 0,\n                categoriesData = data,\n                options = chart.options,\n                definitions = [].concat(options.categoryAxis),\n                axisIx,\n                axis;\n\n            if (grouped) {\n                if (data.length) {\n                    categoriesData = data[0].items;\n                }\n            }\n\n            for (axisIx = 0; axisIx < definitions.length; axisIx++) {\n                axis = definitions[axisIx];\n                if (axis.autoBind !== false) {\n                    chart._bindCategoryAxis(axis, categoriesData, axisIx);\n                }\n            }\n        },\n\n        _bindCategoryAxis: function(axis, data, axisIx) {\n            var count = (data || []).length,\n                categoryIx,\n                category,\n                row;\n\n            if (axis.field) {\n                axis.categories = [];\n                for (categoryIx = 0; categoryIx < count; categoryIx++) {\n                    row = data[categoryIx];\n\n                    category = getField(axis.field, row);\n                    if (categoryIx === 0) {\n                        axis.categories = [category];\n                        axis.dataItems = [row];\n                    } else {\n                        axis.categories.push(category);\n                        axis.dataItems.push(row);\n                    }\n                }\n            } else if (this._instance) {\n                this._instance.bindCategoryAxisFromSeries(axis, axisIx);\n            }\n        },\n\n        _isBindable: function(series) {\n            var valueFields = SeriesBinder.current.valueFields(series),\n                result = true,\n                field, i;\n\n            for (i = 0; i < valueFields.length; i++) {\n                field = valueFields[i];\n                if (field === VALUE) {\n                    field = \"field\";\n                } else {\n                    field = field + \"Field\";\n                }\n\n                if (!defined(series[field])) {\n                    result = false;\n                    break;\n                }\n            }\n\n            return result;\n        },\n\n        _isRtl: function() {\n            return kendo.support.isRtl(this.element) && this.element.css(\"direction\") === RTL;\n        }\n    });\n\n    var proxyMembers = [\"getAxis\", \"findAxisByName\", \"plotArea\", \"toggleHighlight\", \"showTooltip\",\n        \"hideTooltip\", \"_resize\", \"_redraw\", \"_noTransitionsRedraw\", \"_legendItemHover\", \"_eventCoordinates\"];\n\n    function createProxyMember(name) {\n        Chart.fn[name] = function() {\n            var instance = this._instance;\n            if (instance) {\n                return instance[name].apply(instance, arguments);\n            }\n        };\n    }\n\n    for (var idx = 0; idx < proxyMembers.length; idx++) {\n        createProxyMember(proxyMembers[idx]);\n    }\n\n    function groupSeries(series, data) {\n        var result = [],\n            nameTemplate,\n            legacyTemplate = series.groupNameTemplate,\n            groupIx,\n            dataLength = data.length,\n            seriesClone,\n            defaultNameTemplate = ({ group }) => `${defined(series.name) ? group.value + \": \" + series.name : group.value}`;\n\n        if (dataLength === 0) {\n            seriesClone = deepExtend({}, series);\n            seriesClone.visibleInLegend = false;\n            return [seriesClone];\n        }\n\n        if (defined(legacyTemplate)) {\n            kendo.logToConsole(\n                \"'groupNameTemplate' is obsolete and will be removed in future versions. \" +\n                \"Specify the group name template as 'series.name'\"\n            );\n\n            if (legacyTemplate) {\n                nameTemplate = template(legacyTemplate);\n            }\n        } else {\n            nameTemplate = template(series.name || defaultNameTemplate);\n        }\n\n        for (groupIx = 0; groupIx < dataLength; groupIx++) {\n            seriesClone = deepExtend({}, series);\n\n            if (!kendo.isFunction(seriesClone.color)) {\n                seriesClone.color = undefined$1;\n            }\n\n            seriesClone._groupIx = groupIx;\n            seriesClone._groupValue = data[groupIx].value;\n            result.push(seriesClone);\n\n            if (nameTemplate) {\n                seriesClone.name = nameTemplate({\n                    series: seriesClone, group: data[groupIx]\n                });\n            }\n        }\n\n        return result;\n    }\n\n    dataviz.ExportMixin.extend(Chart.fn);\n\n    if (kendo.PDFMixin) {\n        kendo.PDFMixin.extend(Chart.fn);\n    }\n\n    dataviz.ui.plugin(Chart);\n\n    var SeriesVisibilityState = Class.extend({\n        init: function() {\n            this.groups = {};\n            this.index = {};\n            this.options = {};\n        },\n\n        applyByGroup: function(series, e) {\n            if ((e && e.action) || this.options.persistSeriesVisibility) {\n                for (var idx = 0; idx < series.length; idx++) {\n                    if (this.groups[series[idx]._groupValue] === false) {\n                        series[idx].visible = false;\n                    }\n                }\n            } else {\n                this.groups = {};\n            }\n        },\n\n        applyByIndex: function(series, e) {\n            if ((e && e.action) || this.options.persistSeriesVisibility) {\n                if (this.index[series.index] === false) {\n                    series.visible = false;\n                }\n            } else {\n                this.index = {};\n            }\n        },\n\n        save: function(series) {\n            if (!series) {\n                return;\n            }\n\n            if (this.options.persistSeriesVisibility) {\n                this.options.series[series.index].visible = series.visible;\n            } else {\n                this.saveState(series);\n            }\n        },\n\n        setOptions: function(options) {\n            this.options = options;\n            this.groups = {};\n            this.index = {};\n        },\n\n        read: function() {\n            var options = this.options;\n            if (options.persistSeriesVisibility) {\n                var series = options.series;\n                for (var idx = 0; idx < series.length; idx++) {\n                    this.saveState(series[idx]);\n                }\n            }\n        },\n\n        saveState: function(series) {\n            if (defined(series._groupValue)) {\n                this.groups[series._groupValue] = series.visible;\n            } else {\n                this.index[series.index] = series.visible;\n            }\n        }\n    });\n\n    var geom = kendo.geometry;\n\n    function normalizeStyle(style) {\n        for (var field in style) {\n            if (style[field] === undefined$1) {\n                style[field] = '';\n            }\n        }\n\n        return style;\n    }\n\n    var Tooltip = Observable.extend({\n        init: function(chartElement, options) {\n            var tooltip = this;\n\n            Observable.fn.init.call(tooltip);\n\n            this.setOptions(options);\n\n            tooltip.chartElement = chartElement;\n\n            tooltip.template = Tooltip.template;\n            if (!tooltip.template) {\n                tooltip.template = Tooltip.template = ({ autoHide, rtl, font, border, opacity }) =>\n                    `<div class='k-tooltip ${autoHide ? \"k-tooltip-closable\" : \"\"} k-chart-tooltip ${rtl ? \"k-rtl\" : \"\"}' ` +\n                    `${kendo.attr(\"style-display\")}=\"none\" ${kendo.attr(\"style-position\")}=\"absolute\" ` +\n                    `${kendo.attr(\"style-font\")}=\"${font}\" ${kendo.attr(\"style-opacity\")}=\"${opacity}\" ` +\n                    `${border ? `${kendo.attr(\"style-border\")}=\"${border.width}px solid\" ` : \"\"}` +\n                    `>` +\n                    '<div class=\"k-tooltip-content\"></div>' +\n                    `${autoHide ? '' : '<div class=\"k-tooltip-button\">' + kendo.ui.icon($('<a href=\"#\" title=\"Close\"></a>'), { icon: \"x\" }) + '</div>'}` +\n                    \"</div>\";\n            }\n\n            tooltip.element = $(tooltip.template(tooltip.options));\n            kendo.applyStylesFromKendoAttributes(tooltip.element, [\"display\", \"position\", \"font\", \"border\", \"opacity\"]);\n\n            tooltip.move = tooltip.move.bind(tooltip);\n            tooltip._mouseleave = tooltip._mouseleave.bind(tooltip);\n\n            var mobileScrollerSelector = kendo.format(\"[{0}='content'],[{0}='scroller']\", kendo.attr(\"role\"));\n            tooltip._mobileScroller = chartElement.closest(mobileScrollerSelector).data(\"kendoMobileScroller\");\n            tooltip.downEvent = kendo.applyEventMap(MOUSEDOWN, kendo.guid());\n            tooltip._closeTooltipHandler = tooltip._closeTooltip.bind(tooltip);\n        },\n\n        destroy: function() {\n            var tooltip = this;\n\n            this._clearShowTimeout();\n            DOCUMENT_ELEMENT.off(tooltip.downEvent, tooltip._closeTooltipHandler);\n            if (this.element) {\n                this.element.off(MOUSELEAVE_NS).remove();\n                this.element = null;\n            }\n        },\n\n        setOptions: function(options) {\n            this.options = deepExtend({}, this.options, options);\n        },\n\n        options: {\n            opacity: 1,\n            animation: {\n                duration: TOOLTIP_ANIMATION_DURATION\n            },\n            sharedTemplate: ({ colspan, categoryText, points, content, colorMarker, nameColumn }) =>\n                \"<table>\" +\n                `<th colspan='${colspan}'>${categoryText}</th>` +\n                    sharedTemplateIterator(points, colorMarker, nameColumn, content) +\n                \"</table>\",\n            categoryFormat: \"{0:d}\",\n            autoHide: true\n        },\n\n        move: function() {\n            var tooltip = this,\n                options = tooltip.options,\n                element = tooltip.element,\n                offset;\n\n            if (!tooltip.anchor || !tooltip.element) {\n                return;\n            }\n\n            offset = tooltip._offset();\n            if (!tooltip.visible) {\n                element.css({ top: offset.top, left: offset.left });\n            }\n\n            tooltip.visible = true;\n            tooltip._ensureElement(document.body);\n            element\n                .stop(true, true)\n                .show()\n                .animate({\n                    left: offset.left,\n                    top: offset.top\n                }, options.animation.duration);\n        },\n\n        _clearShowTimeout: function() {\n            if (this.showTimeout) {\n                clearTimeout(this.showTimeout);\n                this.showTimeout = null;\n            }\n        },\n\n        getAnchor: function(size) {\n            var anchor = this.anchor;\n            var point = anchor.point;\n            var align = anchor.align;\n            var x = point.left;\n            var y = point.top;\n            if (align.horizontal === \"center\") {\n                x -= size.width / 2;\n            } else if (align.horizontal === \"right\") {\n                x -= size.width;\n            }\n\n            if (align.vertical === \"center\") {\n                y -= size.height / 2;\n            } else if (align.vertical === \"bottom\") {\n                y -= size.height;\n            }\n\n            return {\n                x: x,\n                y: y\n            };\n        },\n\n        _offset: function() {\n            var tooltip = this,\n                size = tooltip._measure(),\n                anchor = tooltip.getAnchor(size),\n                top = anchor.y,\n                left = anchor.x,\n                zoomLevel = kendo.support.zoomLevel(),\n                viewport = $(window),\n                scrollTop = window.pageYOffset || document.documentElement.scrollTop || 0,\n                scrollLeft = window.pageXOffset || document.documentElement.scrollLeft || 0,\n                movable = (this._mobileScroller || {}).movable;\n\n            if (!movable || movable.scale === 1) {\n                top += tooltip._fit(top - scrollTop, size.height, outerHeight(viewport) / zoomLevel);\n                left += tooltip._fit(left - scrollLeft, size.width, outerWidth(viewport) / zoomLevel);\n            } else {\n                var transform = geom.transform().scale(movable.scale, movable.scale, [movable.x, movable.y]);\n                var point = new geom.Point(left, top).transform(transform);\n                left = point.x;\n                top = point.y;\n            }\n\n            return {\n                top: top,\n                left: left\n            };\n        },\n\n        show: function(e) {\n            var tooltip = this;\n            var fakeContainer = $(\"<div></div>\");\n            this.anchor = e.anchor;\n            this.element.css(normalizeStyle(e.style));\n            this.element.toggleClass(TOOLTIP_INVERSE, !!e.className);\n            this.element.toggleClass(SHARED_TOOLTIP_CLASS, !!e.shared);\n\n            var content = e.shared ? this._sharedContent(e) : this._pointContent(e.point);\n            fakeContainer.html(content);\n            kendo.applyStylesFromKendoAttributes(fakeContainer, [\"background-color\"]);\n            this.element.find('.k-tooltip-content').empty().append(fakeContainer);\n\n            if (!tooltip.options.autoHide) {\n                tooltip.element.off(\"click\" + NS).on(\"click\" + NS, \".k-tooltip-button\", tooltip._closeTooltipHandler);\n                DOCUMENT_ELEMENT.off(tooltip.downEvent, tooltip._closeTooltipHandler)\n                    .on(tooltip.downEvent, tooltip._closeTooltipHandler);\n            }\n\n            this._clearShowTimeout();\n            this.showTimeout = setTimeout(this.move, TOOLTIP_SHOW_DELAY);\n        },\n\n        hide: function(forceHide) {\n            var tooltip = this;\n\n            if (!tooltip.options.autoHide && !forceHide) {\n                return;\n            }\n\n            clearTimeout(tooltip.showTimeout);\n            tooltip._hideElement();\n\n            if (tooltip.visible) {\n                tooltip.point = null;\n                tooltip.visible = false;\n                tooltip.index = null;\n                DOCUMENT_ELEMENT.off(tooltip.downEvent, tooltip._closeTooltipHandler);\n            }\n        },\n\n        _closeTooltip: function(e) {\n            var target = $(e.target);\n\n            if (!target.is(\".k-chart-tooltip, .k-tooltip-content\")) {\n                e.preventDefault();\n                this.chartElement.data(\"kendoChart\")._instance.hideElements();\n                this.hide(true);\n            }\n        },\n\n        _sharedContent: function(e) {\n            var points = e.points;\n            var that = this;\n\n            var nameColumn = dataviz.grep(points, function(point) {\n                return defined(point.series.name);\n            }).length;\n\n            var colorMarker = e.series.length > 1;\n            var colspan = 1;\n            if (nameColumn) {\n                colspan++;\n            }\n            if (colorMarker) {\n                colspan++;\n            }\n\n            var template = kendo.template(this.options.sharedTemplate);\n            var content = template({\n                points: points,\n                category: e.category,\n                categoryText: e.categoryText,\n                content: this._pointContent.bind(that),\n                colorMarker: colorMarker,\n                nameColumn: nameColumn,\n                colspan: colspan\n            });\n\n            return content;\n        },\n\n        _measure: function() {\n            this._ensureElement();\n\n            var size = {\n                width: outerWidth(this.element),\n                height: outerHeight(this.element)\n            };\n\n            return size;\n        },\n\n        _ensureElement: function() {\n            if (this.element) {\n                this.element\n                    .appendTo(document.body)\n                    .on(MOUSELEAVE_NS, this._mouseleave);\n            }\n        },\n\n        _mouseleave: function(e) {\n            var target = e.relatedTarget;\n            var chart = this.chartElement[0];\n            if (target && target !== chart && !$.contains(chart, target)) {\n                this.trigger(LEAVE);\n            }\n        },\n\n        _hideElement: function() {\n            var tooltip = this;\n            var element = this.element;\n            if (element) {\n                element.fadeOut({\n                    always: function() {\n                        if (!tooltip.visible) {\n                            element.off(MOUSELEAVE_NS).remove();\n                        }\n                    }\n                });\n            }\n        },\n\n        _pointContent: function(point) {\n            var tooltip = this,\n                options = deepExtend({}, tooltip.options, point.options.tooltip),\n                content, tooltipTemplate;\n\n            if (defined(point.value)) {\n                content = point.value.toString();\n            }\n\n            if (options.template) {\n                tooltipTemplate = template(options.template);\n                content = tooltipTemplate({\n                    value: point.value,\n                    category: point.category,\n                    series: point.series,\n                    dataItem: point.dataItem,\n                    percentage: point.percentage,\n                    runningTotal: point.runningTotal,\n                    total: point.total,\n                    low: point.low,\n                    high: point.high,\n                    xLow: point.xLow,\n                    xHigh: point.xHigh,\n                    yLow: point.yLow,\n                    yHigh: point.yHigh\n                });\n            } else if (options.format) {\n                content = point.formatValue(options.format);\n            }\n\n            return content;\n        },\n\n        _fit: function(offset, size, viewPortSize) {\n            var output = 0;\n\n            if (offset + size > viewPortSize) {\n                output = viewPortSize - (offset + size);\n            }\n\n            if (offset < 0) {\n                output = -offset;\n            }\n\n            return output;\n        }\n    });\n\n    var CrosshairTooltip = Tooltip.extend({\n        init: function(chartElement, options) {\n            Tooltip.fn.init.call(this, chartElement, options);\n            this.element.addClass(\"k-chart-crosshair-tooltip\");\n        },\n\n        show: function(e) {\n            var element = this.element;\n\n            if (element) {\n                this.anchor = e.anchor;\n                this.element.css(e.style);\n                this.element.html(this.content(e));\n\n                this.move();\n            }\n        },\n\n        move: function() {\n            var tooltip = this,\n                element = tooltip.element,\n                offset = tooltip._offset();\n\n            tooltip._ensureElement();\n            element.css({ top: offset.top, left: offset.left }).show();\n        },\n\n        content: function(e) {\n            var content = e.value,\n                options = e.crosshair.options.tooltip;\n\n            if (options.template) {\n                content = template(options.template)({\n                    value: content\n                });\n            }\n\n            return content;\n        },\n\n        hide: function() {\n            this.element.hide();\n        }\n    });\n\n    var ChartPane = Class.extend({\n        init: function(chart, pane) {\n            this._chart = chart;\n            this._pane = pane;\n            this.visual = pane.visual;\n            this.chartsVisual = pane.chartContainer.visual;\n            this.name = pane.options.name;\n        },\n\n        series: function() {\n            var chart = this._chart;\n            var seriesByPane = chart._plotArea.groupSeriesByPane();\n            var series = seriesByPane[this.name || \"default\"];\n\n            var result = [];\n            if (series) {\n                for (var idx = 0; idx < series.length; idx++) {\n                    result.push(new ChartSeries(chart, series[idx]));\n                }\n            }\n\n            return result;\n        }\n    });\n\n    var ChartSeries = Class.extend({\n        init: function(chart, options) {\n            this._chart = chart;\n            this._options = options;\n        },\n\n        points: function(filter) {\n            var points = this._points;\n            if (!points) {\n                var series = this._seriesOptions();\n                var plotArea = this._chart._plotArea;\n                this._points = points = plotArea.pointsBySeriesIndex(series.index);\n            }\n            if (kendo.isFunction(filter)) {\n                points = this._filterPoints(points, filter);\n            }\n\n\n            return points;\n        },\n\n        data: function(data) {\n            var series = this._seriesOptions();\n            if (data) {\n                var chart = this._chart;\n                var plotArea = chart._plotArea;\n\n                series.data = data;\n\n                if (series.categoryField) {\n                    var axis = plotArea.seriesCategoryAxis(series);\n                    var options = [].concat(chart.options.categoryAxis);\n\n                    chart._instance.bindCategoryAxisFromSeries(options[axis.axisIndex], axis.axisIndex);\n                }\n\n                chart._noTransitionsRedraw();\n                this._clearFields();\n            }\n\n            return series.data;\n        },\n\n        findPoint: function(filter) {\n            var points = this.points();\n            for (var idx = 0; idx < points.length; idx++) {\n                if (filter(points[idx])) {\n                    return points[idx];\n                }\n            }\n        },\n\n        toggleHighlight: function(show, elements) {\n            if (!elements) {\n                elements = this.points();\n            } else if (kendo.isFunction(elements)) {\n                elements = this.points(elements);\n            } else {\n                elements = isArray(elements) ? elements : [elements];\n            }\n\n            this._chart._instance.togglePointsHighlight(show, elements);\n        },\n\n        toggleVisibility: function(visible, filter) {\n            var chart = this._chart;\n            var seriesOptions = this._seriesOptions();\n            var hasFilter = kendo.isFunction(filter);\n            if (!hasFilter) {\n                seriesOptions.visible = visible;\n                chart._seriesVisibility.save(seriesOptions);\n            } else {\n                if (inArray(seriesOptions.type, [PIE, DONUT, FUNNEL])) {\n                    var data = this._filterData(filter);\n                    for (var idx = 0; idx < data.length; idx++) {\n                        data[idx].visible = visible;\n                    }\n                } else {\n                    seriesOptions.visible = function(data) {\n                        return filter(data.dataItem) ? visible : true;\n                    };\n                }\n            }\n\n            chart._noTransitionsRedraw();\n\n            this._clearFields();\n        },\n\n        _filterData: function(filter) {\n            var data = this._seriesOptions().data;\n            var length = data.length;\n            var result = [];\n\n            for (var idx = 0; idx < length; idx++) {\n                if (filter(data[idx])) {\n                    result.push(data[idx]);\n                }\n            }\n            return result;\n        },\n\n        _filterPoints: function(points, filter) {\n            var result = [];\n            var length = points.length;\n            for (var idx = 0; idx < length; idx++) {\n                if (filter(points[idx])) {\n                    result.push(points[idx]);\n                }\n            }\n            return result;\n        },\n\n        _seriesOptions: function() {\n            var series = this._series;\n            if (!series) {\n                series = this._series = this._chart._seriesOptions(this._options);\n            }\n            return series;\n        },\n\n        _clearFields: function() {\n            delete this._points;\n            delete this._series;\n        }\n    });\n\n    function triggerPaneRender(panes) {\n        for (var idx = 0; idx < panes.length; idx++) {\n            panes[idx].notifyRender();\n        }\n    }\n\n    function sharedTemplateIterator(points, colorMarker, nameColumn, content) {\n        var result = \"\";\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i];\n            result += \"<tr>\";\n\n            if (colorMarker) {\n                result += `<td><span class='k-chart-shared-tooltip-marker' ${kendo.attr(\"style-background-color\")}=\"${encode(point.series.color)}\"></span></td>`;\n            }\n\n            if (nameColumn) {\n                result += `<td> ${point.series.name ? point.series.name + \":\" : \"&nbsp;\"}</td>`;\n            }\n\n            result += `<td>${content(point)}</td>`;\n            result += \"</tr>\";\n        }\n\n        return result;\n    }\n\n    dataviz.Tooltip = Tooltip;\n    dataviz.CrosshairTooltip = CrosshairTooltip;\n    dataviz.ChartInstanceObserver = ChartInstanceObserver;\n    dataviz.ChartPane = ChartPane;\n    dataviz.ChartSeries = ChartSeries;\n\n})(window.kendo.jQuery);\n\nvar __meta__ = {\n    id: \"dataviz.chart\",\n    name: \"Chart\",\n    category: \"dataviz\",\n    description: \"The Chart widget uses modern browser technologies to render high-quality data visualizations in the browser.\",\n    depends: [ \"data\", \"userevents\", \"drawing\", \"dataviz.core\", \"dataviz.themes\" ],\n    features: [{\n        id: \"dataviz.chart-pdf-export\",\n        name: \"PDF export\",\n        description: \"Export Chart as PDF\",\n        depends: [ \"pdf\" ]\n    }]\n};\n\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}