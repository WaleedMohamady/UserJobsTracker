{"version":3,"sources":["raw-mjs/kendo.scheduler.timelineview.js"],"names":["__meta__","id","name","category","description","depends","hidden","$","undefined$1","kendo","window","ui","setTime","date","SchedulerView","outerWidth","_outerWidth","outerHeight","_outerHeight","extend","encode","htmlEncode","getDate","getMilliseconds","MS_PER_DAY","MS_PER_MINUTE","CURRENT_TIME_MARKER_CLASS","CURRENT_TIME_MARKER_ARROW_CLASS","SCHEDULER_HEADER_WRAP_CLASS","INVERSE_COLOR_CLASS","BORDER_SIZE_COEFF","DOT","NS","EVENT_TEMPLATE","template","title","start","end","format","DATA_HEADER_TEMPLATE","EVENT_WRAPPER_TEMPLATE","task","ariaLabel","ns","uid","resources","attr","color","tail","icon","isException","isRecurring","showDelete","messages","destroy","head","resizable","toInvariantTime","staticDate","Date","setColspan","columnLevel","count","columns","i","length","colspan","TimelineGroupedView","Class","init","view","this","_view","_getTimeSlotByPosition","x","y","groupIndex","groups","timeSlotByPosition","_hideHeaders","timesHeader","find","last","hide","datesHeader","_setColspan","timeColumn","_createRowsLayout","rows","groupHeaderTemplate","_createVerticalColumnsLayout","_createColumnsLayout","_getRowCount","_groupCount","_getGroupsCount","_addContent","dates","columnCount","groupsCount","rowCount","slotTemplate","isVerticalGrouped","html","options","appendRow","tmplDate","content","classes","isToday","idx","workDayStart","workDayEnd","_isWorkDay","rowIdx","groupIdx","_resourceBySlot","_forTimeRange","_addTimeSlotsCollections","groupCount","datesCount","tableRows","interval","isVerticallyGrouped","Math","floor","time","rowMultiplier","group","cellMultiplier","cells","children","cellsPerGroup","cellsPerDay","dateIndex","cellOffset","startTime","cellIndex","_addTimeSlotToCollection","_getVerticalGroupCount","_getVerticalRowCount","eventGroups","maxRowCount","_isVerticallyGrouped","_renderEvent","eventGroup","event","adjustedEvent","range","container","element","_createEventElement","occurrence","appendTo","css","top","height","eventHeight","eventObject","_startTime","_endTime","slotRange","rowIndex","offsetTop","events","_inverseEventColor","addContinuousEvent","isAllDay","_arrangeRows","_verticalCountForLevel","level","_rowCountForLevel","_horizontalCountForLevel","_columnCountForLevel","_updateCurrentVerticalTimeMarker","ranges","currentTime","elementHtml","headerWrap","left","round","innerRect","getTime","timesTableMarker","prependTo","addClass","_adjustLeftPosition","prev","position","width","scrollHeight","_changeGroup","_prevGroupSlot","slot","isDay","_collection","_nextGroupSlot","first","_verticalSlots","selection","reverse","_verticalMethod","_normalizeVerticalSelection","_horizontalSlots","method","startSlot","endSlot","multiple","result","_isHorizontallyGrouped","_changeVerticalViewPeriod","_changeHorizontalViewPeriod","slots","shift","_changeViewPeriod","_updateDirection","_createMoveHint","hint","rect","snap","right","offsetHeight","inverseColor","_appendMoveHint","_isRtl","scrollWidth","clientWidth","TimelineGroupedByDateView","times","eq","_createDateLayout","subColumns","isMajorTickColumn","isMiddleColumn","isLastSlotColumn","minorTickColumns","workDateIndex","tempStart","minorTickCount","msInterval","majorTick","_dates","startIndex","endIndex","eventObjects","index","currentSlot","_timeSlotCollections","_slots","dateRange","timeSlotRanges","push","firstTimesCell","lastTimesCell","markerTopPosition","timesTableMarkerCss","previous","_changeDate","collections","_getCollections","tempSlot","startEnd","slotIdx","collection","offsetLeft","offsetWidth","scheduler","TimelineView","that","zeroWidthEvent","document","body","fn","call","_zeroWidthEventOffset","remove","_groupedView","_getGroupedView","_workDays","workDays","dayIndex","workWeekStart","workWeekEnd","abs","getWorkDays","_templates","_editable","calculateDateRange","_groups","_currentTime","_isVirtualized","_isGroupedByDate","_getNextEventIndexBySlot","sortedEvents","tempIndex","startDate","_getSelectedSlot","pad","_getSortedEvents","uniqueAllEvents","sort","second","isDaySlot","_currentTimeMarkerUpdater","_updateCurrentTimeMarker","_scrollTo","elementOffset","elementOffsetDir","containerScroll","scrollLeft","containerOffsetDir","rightDistance","_isInDateSlot","currentTimeMarker","useLocalTimezone","timezone","dataSource","schema","timezoneOffset","offset","convert","getTimezoneOffset","orientation","currentGroup","utcCurrentTime","toUtcTime","slotByStartDate","setUpdateTimer","markerOptions","updateInterval","_currentTimeUpdateTimer","setInterval","bind","editable","_isMobile","_touchEditable","_mouseEditable","on","e","trigger","closest","preventDefault","create","_slotByPosition","pageX","pageY","resourceInfo","eventInfo","endDate","update","threshold","support","mobileOS","android","_addUserEvents","UserEvents","useClickAsTap","browser","edge","filter","tap","_scrolling","location","_editUserEvents","eventElement","target","touch","initialTouch","is","hasClass","mozilla","webkit","version","msie","scrollTop","ceil","selectedDateFormat","selectedShortDateFormat","selectedMobileDateFormat","today","endTime","showWorkHours","eventMinWidth","columnWidth","text","majorTimeHeaderTemplate","toString","eventTemplate","dateHeaderTemplate","footer","command","ongoingEvents","cssClass","enabled","defaultRowText","showFullDay","showWorkDay","settings","Template","templateSettings","_render","_startDate","_endDate","_calculateSlotRanges","createLayout","_layout","_content","_footer","_setContentWidth","refreshLayout","th","currentTarget","contentWidth","contentTable","minWidth","calculatedWidth","add","slotStartTime","slotEndTime","slotRanges","rangeStart","rangeEnd","_slotRanges","min","max","action","verticalByDate","msMin","msMax","msMajorInterval","majorTickDivider","timeColumns","groupedView","minorTickSlots","minorTickIndex","className","minorTicks","middleColumn","lastSlotColumn","minorSlotsCount","slice","groupedResources","_groupOrientation","_footerItems","items","_defaultTools","todayMobile","fulldayMobile","fulldayDesktop","toggleFullDay","isWorkDay","columnLevels","rowLevel","rowLevels","day","getDay","append","_addResourceView","addTimeSlotCollection","addDays","_timeSlotGroups","_timeSlotInterval","cell","getTimeSlotCollection","currentDate","UTC","getFullYear","getMonth","addTimeSlot","visibleEndDate","nextDate","nextDay","previousDate","previousDay","render","_headerColumnCount","data","Query","field","dir","toArray","eventsByResource","_eventsByResource","_renderEvents","_setRowsHeight","_positionEvents","_ongoingEvents","eventsForGroup","eventUid","Array","isArray","eventIndex","_positionEvent","eventBottomOffset","_getBottomRowOffset","verticalGroupCount","rowsCount","rowHeight","timesRow","row","_refreshSlots","minOffset","maxOffset","slotsCollection","lastSlot","offsetRight","refresh","parentValue","resource","item","itemParentValue","getter","dataParentValueField","itemIdx","value","_resourceValue","eventsFilteredByResource","operator","groupEqFilter","_isInTimeSlot","slotIndex","_adjustEvent","eventStartTime","_time","eventEndTime","adjustedStartDate","adjustedEndDate","clone","isMultiDayEvent","duration","_continuousEvents","isMobile","resize","eventStartDate","eventEndDate","eventResources","apply","singleDay","_formatEventAriaLabel","applyStylesFromKendoAttributes","rectRight","collidingEvents","addEvent","slotIndexEnd","zeroWidthEventOffset","rectLeft","createRows","rowEvents","j","eventLength","_updateEventForSelection","_eventOptionsForMove","_updateEventForResize","set","_updateMoveHint","distance","clonedEvent","eventDuraton","_removeMoveHint","rangeIndex","_moveHint","_updateResizeHint","_removeResizeHint","startRect","_createResizeHint","_resizeHint","toLocalDate","selectionByElement","vertical","collectionIndex","backward","prevGroupSlot","nextGroupSlot","newStart","newEnd","_isInRange","move","key","handled","keys","DOWN","UP","LEFT","RIGHT","off","clearInterval","groupOptions","passedChildren","numberOfChildren","resourceIndex","levels","groupLevel","groupLevelMember","_setResourceValue","TimelineWeekView","selectedDate","dayOfWeek","calendarInfo","firstDay","TimelineWorkWeekView","weekStart","map","indexOf","TimelineMonthView","firstDayOfMonth","lastDayOfMonth","jQuery","kendo$1"],"mappings":"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","file":"kendo.scheduler.timelineview.js","sourcesContent":["import './kendo.scheduler.view.js';\nimport './kendo.icons.js';\n\nvar __meta__ = {\n    id: \"scheduler.timelineview\",\n    name: \"Scheduler Timeline View\",\n    category: \"web\",\n    description: \"The Scheduler Timeline View\",\n    depends: [ \"scheduler.view\", \"icons\" ],\n    hidden: true\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        setTime = kendo.date.setTime,\n        SchedulerView = ui.SchedulerView,\n        outerWidth = kendo._outerWidth,\n        outerHeight = kendo._outerHeight,\n        extend = $.extend,\n        encode = kendo.htmlEncode,\n        getDate = kendo.date.getDate,\n        getMilliseconds = kendo.date.getMilliseconds,\n        MS_PER_DAY = kendo.date.MS_PER_DAY,\n        MS_PER_MINUTE = kendo.date.MS_PER_MINUTE,\n        CURRENT_TIME_MARKER_CLASS = \"k-current-time\",\n        CURRENT_TIME_MARKER_ARROW_CLASS = \"k-current-time-arrow\",\n        SCHEDULER_HEADER_WRAP_CLASS = \"k-scheduler-header-wrap\",\n        INVERSE_COLOR_CLASS = \"k-event-inverse\",\n        BORDER_SIZE_COEFF = 0.8666,\n        DOT = \".\",\n        NS = \".kendoTimelineView\";\n\n    var EVENT_TEMPLATE = kendo.template(({ title, start, end }) =>'<div>' +\n        `<div class=\"k-event-template k-event-time\">${encode(kendo.format(\"{0:t} - {1:t}\", start, end))}</div>` +\n        `<div class=\"k-event-template\">${title}</div></div>`),\n        DATA_HEADER_TEMPLATE = kendo.template(({ date }) => `<span class='k-link k-nav-day'>${kendo.format('{0:m}', date)}</span>`),\n        EVENT_WRAPPER_TEMPLATE = (task) =>\n            `<div role=\"button\" aria-label=\"${encode(task.ariaLabel)}\" data-${task.ns}uid=\"${task.uid}\" ` +\n            `${task.resources[0] ? `${kendo.attr(\"style-background-color\")}=\"${task.resources[0].color}\" ${kendo.attr(\"style-border-color\")}=\"${task.resources[0].color}\" class=\"k-event\">` : 'class=\"k-event\">'}` +\n                '<span class=\"k-event-actions\">' +\n                    `${task.tail ? kendo.ui.icon(\"caret-alt-left\") : ''}` +\n                    `${task.isException() ? kendo.ui.icon(\"arrows-no-repeat\") :\n                        (task.isRecurring() ? kendo.ui.icon(\"arrow-rotate-cw\") : '')}` +\n                '</span>' +\n                `${kendo.template(task.template)(task)}` +\n                '<span class=\"k-event-actions\">' +\n                    `${task.showDelete ? `<a href=\"#\" class=\"k-link k-event-delete\" title=\"${task.messages.destroy}\" aria-label=\"${task.messages.destroy}\">${kendo.ui.icon(\"x\")}</a>` : ''}` +\n                    `${task.head ? kendo.ui.icon(\"caret-alt-right\") : ''}` +\n                '</span>' +\n                `${task.resizable && !task.tail ? '<span class=\"k-resize-handle k-resize-w\"></span>' : ''}` +\n                `${task.resizable && !task.head ? '<span class=\"k-resize-handle k-resize-e\"></span>' : ''}` +\n            '</div>';\n\n    function toInvariantTime(date) {\n        var staticDate = new Date(1980, 1, 1, 0, 0, 0);\n        setTime(staticDate, getMilliseconds(date));\n        return staticDate;\n    }\n\n    function createZeroWidthEvent() {\n        return $(\"<div class='k-event'></div>\").appendTo(document.body);\n    }\n\n    function getWorkDays(options) {\n        if (options.workDays && options.workDays.length) {\n            return options.workDays;\n        }\n\n        var workDays = [];\n        var dayIndex = options.workWeekStart % 7;\n        var workWeekEnd = Math.abs(options.workWeekEnd % 7);\n\n        workDays.push(dayIndex);\n\n        while (workWeekEnd != dayIndex) {\n            if (dayIndex > 6 ) {\n                dayIndex -= 7;\n            } else {\n                dayIndex++;\n            }\n            workDays.push(dayIndex);\n        }\n        return workDays;\n    }\n\n    function setColspan(columnLevel) {\n        var count = 0;\n        if (columnLevel.columns) {\n            for (var i = 0; i < columnLevel.columns.length; i++) {\n                count += setColspan(columnLevel.columns[i]);\n            }\n            columnLevel.colspan = count;\n            return count;\n        } else {\n            columnLevel.colspan = 1;\n            return 1;\n        }\n    }\n\n    var TimelineGroupedView = kendo.Class.extend({\n        init: function(view) {\n            this._view = view;\n        },\n\n        _getTimeSlotByPosition: function(x, y, groupIndex) {\n            var group = this._view.groups[groupIndex];\n\n            return group.timeSlotByPosition(x, y);\n        },\n\n        _hideHeaders: function() {\n            var view = this._view;\n\n            view.timesHeader.find(\"table tr\").last().hide(); /*Chrome fix, use CSS selector*/\n            view.datesHeader.find(\"table tr\").last().hide();\n        },\n\n        _setColspan: function(timeColumn) {\n            setColspan(timeColumn);\n        },\n\n        _createRowsLayout: function(resources, rows, groupHeaderTemplate) {\n            var view = this._view;\n\n            return view._createRowsLayout(resources, rows, groupHeaderTemplate);\n        },\n\n        _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate, columns) {\n\n            return columns;\n        },\n\n        _createColumnsLayout: function(resources, columns, groupHeaderTemplate) {\n            var view = this._view;\n\n            return view._createColumnsLayout(resources, columns, groupHeaderTemplate);\n        },\n\n        _getRowCount: function() {\n            var view = this._view;\n\n            return view._groupCount();\n        },\n\n        _getGroupsCount: function() {\n            return 1;\n        },\n\n        _addContent: function(dates, columnCount, groupsCount, rowCount, start, end, slotTemplate, isVerticalGrouped) {\n            var view = this._view;\n            var html = '';\n            var options = view.options;\n\n            var appendRow = function(date) {\n                var content = \"\";\n                var classes = \"\";\n                var tmplDate;\n\n                var resources = function(groupIndex) {\n                    return function() {\n                        return view._resourceBySlot({ groupIndex: groupIndex });\n                    };\n                };\n\n                if (kendo.date.isToday(dates[idx])) {\n                    classes += \"k-today\";\n                }\n\n                if (kendo.date.getMilliseconds(date) < kendo.date.getMilliseconds(options.workDayStart) ||\n                    kendo.date.getMilliseconds(date) >= kendo.date.getMilliseconds(options.workDayEnd) ||\n                    !view._isWorkDay(dates[idx])) {\n                    classes += \" k-nonwork-hour\";\n                }\n\n                content += '<td' + (classes !== \"\" ? ' class=\"' + classes + '\"' : \"\") + \">\";\n                tmplDate = kendo.date.getDate(dates[idx]);\n                kendo.date.setTime(tmplDate, kendo.date.getMilliseconds(date));\n\n                content += slotTemplate({ date: tmplDate, resources: resources(isVerticalGrouped ? rowIdx : groupIdx) });\n                content += \"</td>\";\n\n                return content;\n            };\n\n            for (var rowIdx = 0; rowIdx < rowCount; rowIdx++) {\n                html += '<tr>';\n                for (var groupIdx = 0; groupIdx < groupsCount; groupIdx++) {\n                    for (var idx = 0, length = columnCount; idx < length; idx++) {\n                        html += view._forTimeRange(start, end, appendRow);\n                    }\n                }\n                html += \"</tr>\";\n            }\n            return html;\n        },\n\n        _addTimeSlotsCollections: function(groupCount, datesCount, tableRows, interval, isVerticallyGrouped) {\n            var view = this._view;\n            var rowCount = tableRows.length;\n\n            if (isVerticallyGrouped) {\n                rowCount = Math.floor(rowCount / groupCount);\n            }\n\n            for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {\n                var rowMultiplier = 0;\n                var group = view.groups[groupIndex];\n                var time;\n\n                if (isVerticallyGrouped) {\n                    rowMultiplier = groupIndex;\n                }\n\n                var rowIndex = rowMultiplier * rowCount;\n                var cellMultiplier = 0;\n\n                if (!isVerticallyGrouped) {\n                    cellMultiplier = groupIndex;\n                }\n\n                var cells = tableRows[rowIndex].children;\n                var cellsPerGroup = cells.length / (!isVerticallyGrouped ? groupCount : 1);\n                var cellsPerDay = cellsPerGroup / datesCount;\n\n                for (var dateIndex = 0; dateIndex < datesCount; dateIndex++) {\n                    var cellOffset = dateIndex * cellsPerDay + (cellsPerGroup * cellMultiplier);\n                    time = getMilliseconds(new Date(+view.startTime()));\n\n                    for (var cellIndex = 0; cellIndex < cellsPerDay; cellIndex++) {\n\n                        view._addTimeSlotToCollection(group, cells, cellIndex, cellOffset, dateIndex, time, interval);\n                        time += interval;\n                    }\n                }\n            }\n        },\n\n        _getVerticalGroupCount: function(groupsCount) {\n\n            return groupsCount;\n        },\n\n        _getVerticalRowCount: function(eventGroups, groupIndex, maxRowCount) {\n            var view = this._view;\n\n            return view._isVerticallyGrouped() ? eventGroups[groupIndex].maxRowCount : maxRowCount;\n        },\n\n        _renderEvent: function(eventGroup, event, adjustedEvent, group, range, container) {\n            var view = this._view;\n            var element;\n\n            element = view._createEventElement(adjustedEvent.occurrence, event, range.head || adjustedEvent.head, range.tail || adjustedEvent.tail);\n            element.appendTo(container).css({ top: 0, height: view.options.eventHeight });\n\n            var eventObject = {\n                start: adjustedEvent.occurrence._startTime || adjustedEvent.occurrence.start,\n                end: adjustedEvent.occurrence._endTime || adjustedEvent.occurrence.end,\n                element: element,\n                uid: event.uid,\n                slotRange: range,\n                rowIndex: 0,\n                offsetTop: 0\n            };\n\n            eventGroup.events[event.uid] = eventObject;\n\n            view._inverseEventColor(element);\n            view.addContinuousEvent(group, range, element, event.isAllDay);\n            view._arrangeRows(eventObject, range, eventGroup);\n        },\n\n        _verticalCountForLevel: function(level) {\n            var view = this._view;\n\n            return view._rowCountForLevel(level);\n        },\n\n        _horizontalCountForLevel: function(level) {\n            var view = this._view;\n\n            return view._columnCountForLevel(level);\n        },\n\n        _updateCurrentVerticalTimeMarker: function(ranges, currentTime) {\n            var view = this._view;\n            var elementHtml = \"<div class='\" + CURRENT_TIME_MARKER_CLASS + \"'></div>\";\n            var headerWrap = view.datesHeader.find(DOT + SCHEDULER_HEADER_WRAP_CLASS);\n            var left = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).left);\n            var timesTableMarker = $(elementHtml)\n                    .prependTo(headerWrap)\n                    .addClass(CURRENT_TIME_MARKER_ARROW_CLASS + \"-down\");\n\n            timesTableMarker.css({\n                left: view._adjustLeftPosition(left - (outerWidth(timesTableMarker) * BORDER_SIZE_COEFF / 2)),\n                top: headerWrap.find(\"tr\").last().prev().position().top\n            });\n\n            $(elementHtml).prependTo(view.content).css({\n                left: view._adjustLeftPosition(left),\n                width: \"1px\",\n                height: view.content[0].scrollHeight - 1,\n                top: 0\n            });\n        },\n\n        _changeGroup: function() {\n            return undefined$1;\n        },\n\n        _prevGroupSlot: function(slot, group, isDay) {\n            var view = this._view;\n\n            if (view._isVerticallyGrouped()) {\n                return slot;\n            } else {\n                var collection = group._collection(0, isDay);\n                return collection.last();\n            }\n        },\n\n        _nextGroupSlot: function(slot, group, isDay) {\n            var view = this._view;\n\n            if (view._isVerticallyGrouped()) {\n                return slot;\n            } else {\n                var collection = group._collection(0, isDay);\n                return collection.first();\n            }\n        },\n\n        _verticalSlots: function(selection, reverse) {\n             var view = this._view;\n\n             return view._changeGroup(selection, reverse);\n        },\n\n         _verticalMethod: function(reverse) {\n\n              return reverse ? \"leftSlot\" : \"rightSlot\";\n         },\n\n         _normalizeVerticalSelection: function() {\n             return undefined$1;\n         },\n\n         _horizontalSlots: function(selection, group, method, startSlot, endSlot, multiple, reverse) {\n            var view = this._view;\n            var result = {};\n\n            result.startSlot = group[method](startSlot);\n            result.endSlot = group[method](endSlot);\n\n            if (!multiple && view._isHorizontallyGrouped() && (!result.startSlot || !result.endSlot)) {\n                result.startSlot = result.endSlot = view._changeGroup(selection, reverse);\n            }\n\n            return result;\n        },\n\n        _changeVerticalViewPeriod: function() {\n            return false;\n        },\n\n        _changeHorizontalViewPeriod: function(slots, shift, selection, reverse) {\n            var view = this._view;\n\n            if ((!slots.startSlot || !slots.endSlot ) && !shift && view._changeViewPeriod(selection, reverse, false)) {\n                return true;\n            }\n            return false;\n        },\n\n        _updateDirection: function(selection, ranges, shift, reverse) {\n            var view = this._view;\n\n            view._updateDirection(selection, ranges, shift, reverse, true);\n        },\n\n         _createMoveHint: function(range, adjustedEvent) {\n                var view = this._view;\n                var startSlot = range.start;\n\n                var hint = view._createEventElement(adjustedEvent.occurrence ,adjustedEvent.occurrence, false, false);\n\n                hint.addClass(\"k-event-drag-hint\");\n\n                var rect = range.innerRect(adjustedEvent.occurrence.start, adjustedEvent.occurrence.end, view.options.snap);\n                var width = rect.right - rect.left;\n\n                if (width < 0) {\n                    width = 0;\n                }\n\n                var left = view._adjustLeftPosition(rect.left);\n\n                var css = {\n                    left: left,\n                    top: startSlot.offsetTop,\n                    height: startSlot.offsetHeight,\n                    width: width\n                };\n\n                hint.css(css);\n\n                if (adjustedEvent.occurrence.inverseColor) {\n                    hint.addClass(INVERSE_COLOR_CLASS);\n                }\n\n                view._appendMoveHint(hint);\n         },\n\n         _adjustLeftPosition: function(left) {\n            var view = this._view;\n\n            if (view._isRtl) {\n                left -= (view.content[0].scrollWidth - view.content[0].clientWidth);\n            }\n\n            return left;\n         }\n    });\n\n    var TimelineGroupedByDateView = kendo.Class.extend({\n        init: function(view) {\n            this._view = view;\n        },\n\n        _getTimeSlotByPosition: function(x, y, groupIndex) {\n            var group = this._view.groups[groupIndex];\n\n            return group.timeSlotByPosition(x, y, true);\n        },\n\n        _hideHeaders: function() {\n            var view = this._view;\n\n            if (!view._isVerticallyGrouped()) {\n                view.timesHeader.find(\"table tr\").eq(2).hide();\n                view.datesHeader.find(\"table tr\").eq(2).hide();\n            } else {\n                        view.times.find(\".k-last\").hide();\n            }\n        },\n        _setColspan: function() {},\n\n        _createRowsLayout: function(resources, rows, groupHeaderTemplate, columns) {\n            var view = this._view;\n\n            return view._createDateLayout(columns, null, true);\n        },\n\n        _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate) {\n            var view = this._view;\n\n            return view._createColumnsLayout(resources, null, groupHeaderTemplate);\n        },\n\n        _createColumnsLayout: function(resources, columns, groupHeaderTemplate, subColumns) {\n            var view = this._view;\n\n            return view._createColumnsLayout(resources, columns, groupHeaderTemplate, subColumns, true);\n        },\n\n        _getRowCount: function(level) {\n            var view = this._view;\n\n            return view._rowCountForLevel(level);\n        },\n\n        _getGroupsCount: function() {\n            var view = this._view;\n\n            return view._groupCount();\n        },\n\n        _addContent: function(dates, columnCount, groupsCount, rowCount, start, end, slotTemplate, isVerticalGrouped) {\n            var view = this._view;\n            var html = '';\n            var options = view.options;\n\n            var appendRow = function(date, isMajorTickColumn, isMiddleColumn, isLastSlotColumn, minorTickColumns, groupIdx) {\n                var content = \"\";\n                var classes = \"\";\n                var tmplDate;\n                var workDateIndex = view._isVerticallyGrouped() ? dateIndex : idx;\n\n                var resources = function(groupIndex) {\n                    return function() {\n                        return view._resourceBySlot({ groupIndex: groupIndex });\n                    };\n                };\n\n                if (kendo.date.isToday(dates[idx])) {\n                    classes += \"k-today\";\n                }\n\n                if (kendo.date.getMilliseconds(date) < kendo.date.getMilliseconds(options.workDayStart) ||\n                    kendo.date.getMilliseconds(date) >= kendo.date.getMilliseconds(options.workDayEnd) ||\n                    !view._isWorkDay(dates[workDateIndex])) {\n                    classes += \" k-nonwork-hour\";\n                }\n\n                content += '<td' + (classes !== \"\" ? ' class=\"' + classes + '\"' : \"\") + \">\";\n                tmplDate = kendo.date.getDate(dates[idx]);\n                kendo.date.setTime(tmplDate, kendo.date.getMilliseconds(date));\n\n                content += slotTemplate({ date: tmplDate, resources: resources(groupIdx) });\n                content += \"</td>\";\n\n                return content;\n            };\n\n            var tempStart = new Date(start),\n                minorTickCount = view.options.minorTickCount,\n                msMajorInterval = view.options.majorTick * MS_PER_MINUTE,\n                msInterval = msMajorInterval / minorTickCount || 1,\n                dateIndex;\n\n            for (var rowIdx = 0; rowIdx < rowCount; rowIdx++) {\n                html += '<tr>';\n\n                 if ((rowIdx % (rowCount / view._dates.length)) === 0) {\n                   dateIndex = (rowIdx / (rowCount / view._dates.length));\n                   tempStart = new Date(view._dates[dateIndex]);\n                   kendo.date.setTime(tempStart, kendo.date.getMilliseconds(start));\n                  }\n\n                for (var idx = 0, length = columnCount; idx < length; idx++) {\n\n                    html += view._forTimeRange(tempStart, end, appendRow, isVerticalGrouped, groupsCount);\n\n                    if (isVerticalGrouped) {\n                    setTime(tempStart, msInterval, false);\n                        break;\n                    }\n                }\n               html += \"</tr>\";\n            }\n\n            return html;\n        },\n\n        _addTimeSlotsCollections: function(groupCount, datesCount, tableRows, interval, isVerticallyGrouped) {\n            var view = this._view;\n            var rowCount = tableRows.length;\n\n             if (isVerticallyGrouped) {\n                rowCount = rowCount / datesCount;\n             }\n\n            for (var dateIndex = 0; dateIndex < datesCount; dateIndex++) {\n                var rowMultiplier = 0;\n                var time;\n\n                if (isVerticallyGrouped) {\n                    rowMultiplier = dateIndex;\n                }\n\n                var rowIndex = rowMultiplier * rowCount;\n                var cellMultiplier = 0;\n                var cells = tableRows[rowIndex].children;\n                var cellsPerGroup = isVerticallyGrouped ? rowCount : cells.length / (datesCount * groupCount);\n                var cellsPerDay = cells.length / datesCount;\n                var cellOffset;\n\n                time = getMilliseconds(new Date(+view.startTime()));\n\n                for (var cellIndex = 0; cellIndex < cellsPerGroup; cellIndex++) {\n                    if (!isVerticallyGrouped) {\n                        cellOffset = (dateIndex * cellsPerDay) + (groupCount * cellIndex);\n                        cellMultiplier++;\n                    } else {\n                        cellOffset = 0;\n                        cells = tableRows[cellIndex + (cellsPerGroup * dateIndex)].children;\n                    }\n\n                    for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {\n                        var group = view.groups[groupIndex];\n\n                        view._addTimeSlotToCollection(group, cells, groupIndex, cellOffset, dateIndex, time, interval);\n                    }\n                    time += interval;\n                }\n             }\n        },\n\n        _getVerticalGroupCount: function() {\n            var view = this._view;\n\n            return view.content.find(\"tr\").length;\n        },\n\n        _getVerticalRowCount: function(eventGroups, groupIndex, maxRowCount) {\n\n            return maxRowCount;\n        },\n\n        _renderEvent: function(eventGroup, event, adjustedEvent, group, range, container, startIndex, endIndex) {\n            var view = this._view;\n            var element;\n            var eventObjects = [];\n\n            for (var i = range.start.index; i <= range.end.index; i++) {\n                element = view._createEventElement(adjustedEvent.occurrence, event, i !== endIndex, i !== startIndex);\n                element.appendTo(container).css({ top: 0, height: view.options.eventHeight });\n                var currentSlot = group._timeSlotCollections[0]._slots[i];\n                var dateRange = group.timeSlotRanges(currentSlot.start, currentSlot.end, false)[0];\n\n                    var eventObject = {\n                    start: i === startIndex ? adjustedEvent.occurrence._startTime || adjustedEvent.occurrence.start : currentSlot.start,\n                    end: i === endIndex ? adjustedEvent.occurrence._endTime || adjustedEvent.occurrence.end : currentSlot.end,\n                    element: element,\n                    uid: event.uid,\n                    slotRange: dateRange,\n                    rowIndex: 0,\n                    offsetTop: 0\n                };\n\n                eventGroup.events[event.uid] = eventObject;\n                eventObjects.push(eventObject);\n\n                view.addContinuousEvent(group, dateRange, element, event.isAllDay);\n                view._arrangeRows(eventObject, dateRange, eventGroup);\n            }\n            eventGroup.events[event.uid] = eventObjects;\n        },\n\n        _verticalCountForLevel: function(level) {\n            var view = this._view;\n\n            return view._columnCountForLevel(level);\n        },\n\n        _horizontalCountForLevel: function(level, columnLevel) {\n            var view = this._view;\n\n            return view._columnCountForLevel(columnLevel) / view._columnCountForLevel(2);\n        },\n\n        _updateCurrentVerticalTimeMarker: function(ranges,currentTime) {\n            var view = this._view;\n            var firstTimesCell = view.times.find(\"tr\").first().find(\"th\").first();\n            var lastTimesCell = view.times.find(\"tr\").first().find(\"th\").last();\n            var elementHtml = \"<div class='\" + CURRENT_TIME_MARKER_CLASS + \"'></div>\";\n            var timesTableMarker = $(elementHtml).prependTo(view.times);\n            var markerTopPosition = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).top);\n            var timesTableMarkerCss = {};\n\n            if (this._isRtl) {\n                timesTableMarkerCss.right = firstTimesCell.position().left + outerHeight(firstTimesCell) - outerHeight(lastTimesCell);\n                timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + \"-left\");\n            } else {\n                timesTableMarkerCss.left = lastTimesCell.position().left;\n                timesTableMarker.addClass(CURRENT_TIME_MARKER_ARROW_CLASS + \"-right\");\n            }\n\n            timesTableMarkerCss.top = markerTopPosition - (outerWidth(timesTableMarker) * BORDER_SIZE_COEFF / 2);\n\n            timesTableMarker.css(timesTableMarkerCss);\n\n            $(elementHtml).prependTo(view.content).css({\n                top: markerTopPosition,\n                height: \"1px\",\n                right: \"1px\",\n                width: view.content[0].scrollWidth,\n                left: 0\n            });\n        },\n\n        _changeGroup: function(selection, previous, slot) {\n             var view = this._view;\n\n             if (!slot) {\n                selection.groupIndex = previous ? view.groups.length - 1 : 0;\n             }\n        },\n\n         _prevGroupSlot: function(slot) {\n              return slot;\n        },\n\n        _nextGroupSlot: function(slot) {\n              return slot;\n        },\n\n        _changeDate: function(selection, reverse, slot) {\n            var view = this._view;\n            var group = view.groups[selection.groupIndex];\n            var collections, index;\n\n            if (reverse) {\n                  collections = group._getCollections(false);\n                  index = slot.index - 1;\n\n                  if (index >= 0) {\n                      return collections[0]._slots[index];\n                  }\n              } else {\n                  collections = group._getCollections(false);\n                  index = slot.index + 1;\n\n                  if (collections[0] && collections[0]._slots[index]) {\n                      return collections[0]._slots[index];\n                  }\n               }\n        },\n\n        _verticalSlots: function(selection, reverse, slot) {\n            return this._changeDate(selection, reverse, slot);\n        },\n\n        _verticalMethod: function(reverse, multiple) {\n            if (multiple) {\n               return reverse ? \"upSlot\" : \"downSlot\";\n            } else {\n               return reverse ? \"leftSlot\" : \"rightSlot\";\n            }\n        },\n\n        _normalizeVerticalSelection: function(selection, ranges, reverse, multiple) {\n            var view = this._view;\n\n            if (!multiple) {\n                return view._normalizeVerticalSelection(selection, ranges, reverse);\n            }\n\n            return undefined$1;\n        },\n\n        _horizontalSlots: function(selection, group, method, startSlot, endSlot, multiple, reverse) {\n             var view = this._view;\n             var tempSlot = view._changeGroup(selection, reverse);\n             var result = {};\n\n            if (!tempSlot) {\n                if (!view._isVerticallyGrouped()) {\n                    result.startSlot = group[method](startSlot);\n                    result.endSlot = group[method](endSlot);\n                }\n\n            } else {\n                result.startSlot = result.endSlot = tempSlot;\n            }\n\n            return result;\n        },\n\n        _changeVerticalViewPeriod: function(slots, shift, selection, reverse) {\n            var view = this._view;\n\n            if ((!slots.startSlot || !slots.endSlot) && !shift &&\n                view._changeViewPeriod(selection, reverse, view._isVerticallyGrouped())) {\n                return true;\n            }\n            return false;\n        },\n\n        _changeHorizontalViewPeriod: function(slots, shift, selection, reverse) {\n           var view = this._view;\n\n           if ( view._isVerticallyGrouped()) {\n               return false;\n           }\n\n           if ((!slots.startSlot || !slots.endSlot ) && !shift && view._changeViewPeriod(selection, reverse, false)) {\n                return true;\n            }\n            return false;\n        },\n\n        _updateDirection: function(selection, ranges, shift, reverse) {\n            var view = this._view;\n\n            view._updateDirection(selection, ranges, shift, reverse, !view._isVerticallyGrouped());\n        },\n\n         _createMoveHint: function(range, adjustedEvent) {\n                var view = this._view;\n                var startSlot = range.start;\n                var startEnd = range.end;\n\n                for (var slotIdx = startSlot.index; slotIdx <= startEnd.index; slotIdx++) {\n                    var slot = range.collection._slots[slotIdx];\n                    var hint = view._createEventElement(adjustedEvent.occurrence ,adjustedEvent.occurrence, false, false);\n\n                    hint.addClass(\"k-event-drag-hint\");\n\n                    var css = {\n                        left: slot.offsetLeft + 2,\n                        top: slot.offsetTop,\n                        height: view.options.eventHeight,\n                        width: slot.offsetWidth\n                    };\n\n                    hint.css(css);\n\n                    if (adjustedEvent.occurrence.inverseColor) {\n                        hint.addClass(INVERSE_COLOR_CLASS);\n                    }\n\n                    view._appendMoveHint(hint);\n                }\n         },\n\n         _adjustLeftPosition: function(left) {\n             var view = this._view;\n\n            if (view._isRtl && !view._isVerticallyGrouped()) {\n                left -= (view.content[0].scrollWidth - view.content[0].offsetWidth);\n            }\n\n            return left;\n         }\n });\n\n    kendo.ui.scheduler.TimelineGroupedView = TimelineGroupedView;\n    kendo.ui.scheduler.TimelineGroupedByDateView = TimelineGroupedByDateView;\n\n    var TimelineView = SchedulerView.extend({\n        init: function(element, options) {\n            var that = this,\n            zeroWidthEvent = createZeroWidthEvent();\n\n            SchedulerView.fn.init.call(that, element, options);\n\n            that._zeroWidthEventOffset = zeroWidthEvent.outerWidth();\n            zeroWidthEvent.remove();\n\n            that._groupedView = that._getGroupedView();\n\n            that.title = that.options.title || that.options.name;\n\n            that._workDays = getWorkDays(that.options);\n\n            that._templates();\n\n            that._editable();\n\n            that.calculateDateRange();\n\n            that._groups();\n\n            that._currentTime(true);\n        },\n        name: \"timeline\",\n\n        _isVirtualized: function() {\n            return false;\n        },\n\n        _getGroupedView: function() {\n\n            if (this._isGroupedByDate()) {\n                   return new kendo.ui.scheduler.TimelineGroupedByDateView(this);\n            } else {\n                   return new kendo.ui.scheduler.TimelineGroupedView(this);\n            }\n        },\n\n        _getNextEventIndexBySlot: function(slot, sortedEvents, groupIndex) {\n           if (this._isVerticallyGrouped()) {\n               return kendo.ui.SchedulerView.fn._getNextEventIndexBySlot.call(this, slot, sortedEvents, groupIndex);\n           }\n\n            var tempIndex = 0;\n\n            for (var i = 0; i < sortedEvents.length; i++) {\n                if (slot.startDate() > sortedEvents[i].start.startDate()) {\n                    tempIndex++;\n                    continue;\n                }\n\n                if (slot.startDate().getTime() === sortedEvents[i].start.startDate().getTime() &&\n                 groupIndex > sortedEvents[i].start.groupIndex) {\n                      tempIndex++;\n                      continue;\n                }\n\n                 break;\n\n            }\n            return tempIndex;\n        },\n\n        _getSelectedSlot: function(slot, sortedEvents, event, idx, pad, prev) {\n            if (this._isVerticallyGrouped()) {\n               return kendo.ui.SchedulerView.fn._getSelectedSlot.call(this, slot, sortedEvents, event, idx, pad, prev);\n            }\n\n            return slot;\n        },\n\n        _getSortedEvents: function(uniqueAllEvents) {\n            if (this._isVerticallyGrouped()) {\n               return kendo.ui.SchedulerView.fn._getSortedEvents.call(this, uniqueAllEvents);\n            }\n\n            return uniqueAllEvents.sort(function(first, second) {\n                var result = first.start.startDate().getTime() - second.start.startDate().getTime();\n\n                if (result === 0) {\n                    if (first.start.isDaySlot && !second.start.isDaySlot) {\n                            result = -1;\n                    }\n\n                    if (!first.start.isDaySlot && second.start.isDaySlot) {\n                            result = 1;\n                    }\n                }\n\n                if (result === 0) {\n                    result = first.start.groupIndex - second.start.groupIndex;\n                }\n\n                if (result === 0) {\n                    result = $(first.element).index() - $(second.element).index();\n                }\n\n                return result;\n            });\n        },\n\n        _currentTimeMarkerUpdater: function() {\n            this._updateCurrentTimeMarker(new Date());\n        },\n\n        _scrollTo: function(element, container) {\n            SchedulerView.fn._scrollTo.call(this, element, container);\n\n            var elementOffset = element.offsetLeft,\n                elementOffsetDir = element.offsetWidth,\n                containerScroll = container.scrollLeft,\n                containerOffsetDir = container.clientWidth,\n                rightDistance = elementOffset + elementOffsetDir,\n                result = 0;\n\n                if (containerScroll > elementOffset) {\n                    result = elementOffset;\n                } else if (rightDistance > (containerScroll + containerOffsetDir)) {\n                    if (elementOffsetDir <= containerOffsetDir) {\n                        result = (rightDistance - containerOffsetDir);\n                    } else {\n                        result = elementOffset;\n                    }\n                } else {\n                    result = containerScroll;\n                }\n                container.scrollLeft = result;\n        },\n\n        _updateCurrentTimeMarker: function(currentTime) {\n            var options = this.options;\n\n            this.datesHeader.find(DOT + CURRENT_TIME_MARKER_CLASS).remove();\n            this.times.find(DOT + CURRENT_TIME_MARKER_CLASS).remove();\n            this.content.find(DOT + CURRENT_TIME_MARKER_CLASS).remove();\n\n            if (!this._isInDateSlot({ start: currentTime, end: currentTime })) {\n                return;\n            }\n\n            if (options.currentTimeMarker.useLocalTimezone === false) {\n                var timezone = options.dataSource.options.schema.timezone;\n\n                if (options.dataSource && timezone) {\n                    var timezoneOffset = kendo.timezone.offset(currentTime, timezone);\n                    currentTime = kendo.timezone.convert(currentTime, currentTime.getTimezoneOffset(), timezoneOffset);\n                }\n            }\n\n            var groupsCount = !options.group || options.group.orientation == \"vertical\" ? 1 : this.groups.length;\n\n            for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {\n                var currentGroup = this.groups[groupIndex];\n\n                if (!currentGroup) {\n                    return;\n                }\n\n                var utcCurrentTime = kendo.date.toUtcTime(currentTime);\n                var ranges = currentGroup.timeSlotRanges(utcCurrentTime, utcCurrentTime + 1);\n\n                if (ranges.length === 0) {\n                    return;\n                }\n\n                var collection = ranges[0].collection;\n                var slotElement = collection.slotByStartDate(currentTime);\n\n                if (slotElement) {\n\n                    if (this._isVerticallyGrouped()) {\n                        this._groupedView._updateCurrentVerticalTimeMarker(ranges,currentTime);\n                    } else {\n                        var elementHtml = \"<div class='\" + CURRENT_TIME_MARKER_CLASS + \"'></div>\";\n                        var headerWrap = this.datesHeader.find(DOT + SCHEDULER_HEADER_WRAP_CLASS);\n                        var left = Math.round(ranges[0].innerRect(currentTime, new Date(currentTime.getTime() + 1), false).left);\n                        var timesTableMarker = $(elementHtml)\n                                .prependTo(headerWrap)\n                                .addClass(CURRENT_TIME_MARKER_ARROW_CLASS + \"-down\");\n\n                        timesTableMarker.css({\n                            left: this._adjustLeftPosition(left - (outerWidth(timesTableMarker) * BORDER_SIZE_COEFF / 2)),\n                            top: headerWrap.find(\"tr\").last().prev().position().top\n                        });\n\n                        $(elementHtml).prependTo(this.content).css({\n                            left: this._adjustLeftPosition(left),\n                            width: \"1px\",\n                            height: this.content[0].scrollHeight - 1,\n                            top: 0\n                        });\n                    }\n                }\n            }\n        },\n\n        _adjustLeftPosition: function(left) {\n            return this._groupedView._adjustLeftPosition(left);\n        },\n\n        _currentTime: function(setUpdateTimer) {\n            var that = this;\n            var markerOptions = that.options.currentTimeMarker;\n\n            if (markerOptions !== false && markerOptions.updateInterval !== undefined$1) {\n                that._currentTimeMarkerUpdater();\n\n                if (setUpdateTimer) {\n                    that._currentTimeUpdateTimer = setInterval(this._currentTimeMarkerUpdater.bind(that), markerOptions.updateInterval);\n                }\n            }\n        },\n\n        _editable: function() {\n            if (this.options.editable) {\n                if (this._isMobile()) {\n                    this._touchEditable();\n                } else {\n                    this._mouseEditable();\n                }\n            }\n        },\n\n        _mouseEditable: function() {\n            var that = this;\n            that.element.on(\"click\" + NS, \".k-event a:has(.k-i-x),.k-event a:has(.k-svg-i-x)\", function(e) {\n                that.trigger(\"remove\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                e.preventDefault();\n            });\n\n            if (that.options.editable.create !== false) {\n                that.element.on(\"dblclick\" + NS, \".k-scheduler-content td\", function(e) {\n                    var slot = that._slotByPosition(e.pageX, e.pageY);\n\n                    if (slot) {\n                        var resourceInfo = that._resourceBySlot(slot);\n                        that.trigger(\"add\", { eventInfo: extend({ start: slot.startDate(), end: slot.endDate() }, resourceInfo) });\n                    }\n\n                    e.preventDefault();\n                });\n            }\n\n            if (that.options.editable.update !== false) {\n                that.element.on(\"dblclick\" + NS, \".k-event\", function(e) {\n                    that.trigger(\"edit\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                    e.preventDefault();\n                });\n            }\n        },\n\n        _touchEditable: function() {\n            var that = this;\n            var threshold = 0;\n\n            if (kendo.support.mobileOS.android) {\n                threshold = 5;\n            }\n\n            if (that.options.editable.create !== false) {\n                that._addUserEvents = new kendo.UserEvents(that.element, {\n                    threshold: threshold,\n                    useClickAsTap: !kendo.support.browser.edge,\n                    filter: \".k-scheduler-content td\",\n                    tap: function(e) {\n                        if (that._scrolling) {\n                            return;\n                        }\n                        var x = e.x.location !== undefined$1 ? e.x.location : e.x;\n                        var y = e.y.location !== undefined$1 ? e.y.location : e.y;\n                        var slot = that._slotByPosition(x, y);\n\n                        if (slot) {\n                            var resourceInfo = that._resourceBySlot(slot);\n                            that.trigger(\"add\", { eventInfo: extend({ start: slot.startDate(), end: slot.endDate() }, resourceInfo) });\n                        }\n\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            if (that.options.editable.update !== false) {\n                that._editUserEvents = new kendo.UserEvents(that.element, {\n                    threshold: threshold,\n                    useClickAsTap: !kendo.support.browser.edge,\n                    filter: \".k-event\",\n                    tap: function(e) {\n                        if (that._scrolling) {\n                            return;\n                        }\n                        var eventElement = $(e.target).closest(\".k-event\");\n                        var touchElement = $(e.touch.initialTouch);\n\n                        if (touchElement.is(\".k-i-x,.k-svg-i-x\")) {\n                            that.trigger(\"remove\", { uid: eventElement.attr(kendo.attr(\"uid\")) });\n                        } else if (!eventElement.hasClass(\"k-event-active\")) {\n                            that.trigger(\"edit\", { uid: eventElement.attr(kendo.attr(\"uid\")) });\n                        }\n\n                        e.preventDefault();\n                    }\n                });\n            }\n        },\n\n        _slotByPosition: function(x, y) {\n            var slot;\n            var content = this.content;\n            var offset = content.offset();\n            var groupIndex;\n\n            x -= offset.left;\n            y -= offset.top;\n\n            if (this._isRtl) {\n                var browser = kendo.support.browser;\n\n                if (browser.mozilla || (browser.webkit && browser.version >= 85)) {\n                     x += (content[0].scrollWidth - content[0].offsetWidth);\n                     x += content[0].scrollLeft;\n                } else if (browser.msie) {\n                     x -= kendo.scrollLeft(content);\n                     x += content[0].scrollWidth - content[0].offsetWidth;\n                } else if (browser.webkit) {\n                     x += content[0].scrollLeft;\n                }\n            } else {\n                x += content[0].scrollLeft;\n            }\n\n            y += content[0].scrollTop;\n\n            x = Math.ceil(x);\n            y = Math.ceil(y);\n\n            for (groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {\n\n                 slot = this._groupedView._getTimeSlotByPosition(x, y, groupIndex);\n\n                 if (slot) {\n                     return slot;\n                 }\n            }\n\n            return null;\n        },\n\n        options: {\n            name: \"TimelineView\",\n            title: \"Timeline\",\n            selectedDateFormat: \"{0:D}\",\n            selectedShortDateFormat: \"{0:d}\",\n            selectedMobileDateFormat: \"{0:MMM dd}\",\n            date: kendo.date.today(),\n            startTime: kendo.date.today(),\n            endTime: kendo.date.today(),\n            showWorkHours: false,\n            minorTickCount: 2,\n            editable: true,\n            workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n            workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n            workWeekStart: 1,\n            workWeekEnd: 5,\n            majorTick: 60,\n            eventHeight: 25,\n            eventMinWidth: 0,\n            columnWidth: 100,\n            groupHeaderTemplate: ({ text }) => text,\n            majorTimeHeaderTemplate: ({ date }) => kendo.toString(date, 't'),\n            slotTemplate: () => \"&nbsp;\",\n            eventTemplate: EVENT_TEMPLATE,\n            dateHeaderTemplate: DATA_HEADER_TEMPLATE,\n            footer: {\n                command: \"workDay\"\n            },\n            currentTimeMarker: {\n                updateInterval: 10000,\n                useLocalTimezone: true\n            },\n            ongoingEvents: {\n                cssClass: null,\n                enabled: true,\n                updateInterval: 60000\n            },\n            messages: {\n                defaultRowText: \"All events\",\n                showFullDay: \"Show full day\",\n                showWorkDay: \"Show business hours\"\n            }\n        },\n\n        events: [\"remove\", \"add\", \"edit\"],\n\n        _templates: function() {\n            var options = this.options,\n                settings = extend({}, kendo.Template, options.templateSettings);\n\n            this.eventTemplate = kendo.template(EVENT_WRAPPER_TEMPLATE);\n            this.majorTimeHeaderTemplate = kendo.template(options.majorTimeHeaderTemplate, settings);\n            this.dateHeaderTemplate = kendo.template(options.dateHeaderTemplate, settings);\n            this.slotTemplate = kendo.template(options.slotTemplate, settings);\n            this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);\n        },\n\n        _render: function(dates) {\n            var that = this;\n\n            dates = dates || [];\n\n            that._dates = dates;\n\n            that._startDate = dates[0];\n\n            that._endDate = dates[(dates.length - 1) || 0];\n\n            that._calculateSlotRanges();\n\n            that.createLayout(that._layout(dates));\n\n            that._content(dates);\n\n            that._footer();\n\n            that._setContentWidth();\n\n            that.refreshLayout();\n\n            that.datesHeader.on(\"click\" + NS, \".k-nav-day\", function(e) {\n                var th = $(e.currentTarget).closest(\"th\");\n\n                var slot = that._slotByPosition(th.offset().left, that.content.offset().top);\n\n                that.trigger(\"navigate\", { view: \"timeline\", date: slot.startDate() });\n            });\n\n            that._groupedView._hideHeaders();\n        },\n\n        _setContentWidth: function() {\n            var content = this.content;\n            var contentWidth = content.width();\n            var contentTable = this.content.find(\"table\");\n            var columnCount = contentTable.find(\"tr\").first().children().length;\n\n            var minWidth = 100;\n            var calculatedWidth = columnCount * this.options.columnWidth;\n\n            if (contentWidth < calculatedWidth) {\n                minWidth = Math.ceil((calculatedWidth / contentWidth) * 100);\n            }\n\n            contentTable.add(this.datesHeader.find(\"table\"))\n                .css(\"width\", minWidth + \"%\");\n        },\n\n        _calculateSlotRanges: function() {\n            var dates = this._dates;\n            var slotStartTime = this.startTime();\n            var slotEndTime = this.endTime();\n\n            slotEndTime = getMilliseconds(slotEndTime);\n            slotStartTime = getMilliseconds(slotStartTime);\n\n            if (slotEndTime === slotStartTime) {\n                slotEndTime += MS_PER_DAY - 1;\n            } else if (slotEndTime < slotStartTime) {\n                slotEndTime += MS_PER_DAY;\n            }\n\n            var slotRanges = [];\n            for (var i = 0; i < dates.length; i++) {\n                var rangeStart = getDate(dates[i]);\n                setTime(rangeStart, slotStartTime);\n\n                var rangeEnd = getDate(dates[i]);\n                setTime(rangeEnd, slotEndTime);\n\n                slotRanges.push({\n                    start: kendo.date.toUtcTime(rangeStart),\n                    end: kendo.date.toUtcTime(rangeEnd)\n                });\n            }\n\n            this._slotRanges = slotRanges;\n        },\n\n        _forTimeRange: function(min, max, action, verticalByDate, groupsCount) {\n            min = toInvariantTime(min); //convert the date to 1/2/1980 and sets the time\n            max = toInvariantTime(max);\n\n            var that = this,\n                msMin = getMilliseconds(min),\n                msMax = getMilliseconds(max),\n                minorTickCount = that.options.minorTickCount,\n                msMajorInterval = that.options.majorTick * MS_PER_MINUTE,\n                msInterval = msMajorInterval / minorTickCount || 1,\n                start = new Date(+min),\n                idx = 0, length,\n                html = \"\";\n\n            length = MS_PER_DAY / msInterval;\n\n            if (msMin != msMax) {\n                if (msMin > msMax) {\n                    msMax += MS_PER_DAY;\n                }\n\n                length = ((msMax - msMin) / msInterval);\n            }\n\n            length = verticalByDate ? 1 : Math.round(length);\n\n            if (groupsCount) {\n                length = length * groupsCount;\n            }\n\n            for (; idx < length; idx++) {\n                var majorTickDivider = idx % (msMajorInterval / msInterval);\n                var isMajorTickColumn = majorTickDivider === 0;\n                var isMiddleColumn = majorTickDivider < minorTickCount - 1;\n                var isLastSlotColumn = majorTickDivider === minorTickCount - 1;\n                var minorTickColumns = minorTickCount;\n\n                if (length % minorTickCount !== 0) {\n                    var isLastMajorSlot = (length - (idx + 1)) < minorTickCount;\n                    if (isMajorTickColumn && isLastMajorSlot) {\n                        minorTickColumns = length % minorTickCount;\n                    }\n                }\n\n                html += action(start, isMajorTickColumn, isMiddleColumn, isLastSlotColumn, minorTickColumns, idx % groupsCount);\n\n                if (!verticalByDate) {\n                    if (groupsCount) {\n                        if ((idx % groupsCount) === groupsCount - 1) {\n                            setTime(start, msInterval, false);\n                        }\n                    } else {\n                        setTime(start, msInterval, false);\n                    }\n                }\n            }\n\n            return html;\n        },\n\n        _layout: function(dates) {\n            var timeColumns = [];\n            var columns = [];\n            var that = this;\n            var rows = [{ text: that.options.messages.defaultRowText }];\n            var groupedView = that._groupedView;\n\n            var minorTickSlots = [];\n            for (var minorTickIndex = 0; minorTickIndex < that.options.minorTickCount; minorTickIndex++) {\n                minorTickSlots.push({\n                    text: \"&#8203;\",\n                    className: \"k-last\",\n                    minorTicks: true\n                });\n            }\n\n            this._forTimeRange(that.startTime(), that.endTime(), function(date, majorTick, middleColumn, lastSlotColumn, minorSlotsCount) {\n                var template = that.majorTimeHeaderTemplate;\n\n                if (majorTick) {\n                    var timeColumn = {\n                        text: template({ date: date }),\n                        className: lastSlotColumn ? \"k-slot-cell\" : \"\",\n                        columns: minorTickSlots.slice(0, minorSlotsCount)\n                    };\n\n                    groupedView._setColspan(timeColumn);\n\n                    timeColumns.push(timeColumn);\n                }\n            });\n\n            for (var idx = 0; idx < dates.length; idx++) {\n                columns.push({\n                    text: that.dateHeaderTemplate({ date: dates[idx] }),\n                    className: \"k-slot-cell\",\n                    columns: timeColumns.slice(0)\n                });\n            }\n\n            var resources = this.groupedResources;\n            if (resources.length) {\n                if (this._groupOrientation() === \"vertical\") {\n                    rows = groupedView._createRowsLayout(resources, null, this.groupHeaderTemplate, columns);\n                    columns = groupedView._createVerticalColumnsLayout(resources, null, this.groupHeaderTemplate, columns);\n\n                } else {\n                    columns = groupedView._createColumnsLayout(resources, columns, this.groupHeaderTemplate, columns);\n                }\n            }\n\n            return {\n                columns: columns,\n                rows: rows\n            };\n        },\n\n        _footerItems: function() {\n            var that = this,\n                items = [],\n                options = this.options,\n                command = options.footer.command;\n\n            if (that._isMobile()) {\n                items.push(that._defaultTools.todayMobile);\n            }\n\n            if (command && command === \"workDay\") {\n                if (that._isMobile()) {\n                    items.push(that._defaultTools.fulldayMobile);\n                } else {\n                    items.push(that._defaultTools.fulldayDesktop);\n                }\n            }\n\n            return items;\n        },\n\n        toggleFullDay: function() {\n            var options = this.options;\n\n            this.trigger(\"navigate\", { view: this.name || options.name, date: options.date, isWorkDay: !options.showWorkHours });\n        },\n\n        _columnCountForLevel: function(level) {\n            var columnLevel = this.columnLevels[level];\n            return columnLevel ? columnLevel.length : 0;\n        },\n\n        _rowCountForLevel: function(level) {\n            var rowLevel = this.rowLevels[level];\n            return rowLevel ? rowLevel.length : 0;\n        },\n\n        _isWorkDay: function(date) {\n            var day = date.getDay();\n            var workDays = this._workDays;\n\n            for (var i = 0; i < workDays.length; i++) {\n                if (workDays[i] === day) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        _content: function(dates) {\n            var that = this;\n            var start = that.startTime();\n            var end = this.endTime();\n            var groupsCount = 1;\n            var rowCount = 1;\n            var columnCount = dates.length;\n            var html = '';\n            var resources = this.groupedResources;\n            var slotTemplate = this.slotTemplate;\n            var isVerticalGrouped = false;\n\n            if (resources.length) {\n                isVerticalGrouped = that._groupOrientation() === \"vertical\";\n\n                if (isVerticalGrouped) {\n                    rowCount = that._groupedView._getRowCount(this.rowLevels.length - 1);\n                    groupsCount = that._groupedView._getGroupsCount();\n                } else {\n                    groupsCount = that._groupCount();\n                }\n            }\n\n            html += '<tbody>';\n            html += that._groupedView._addContent(dates, columnCount, groupsCount, rowCount, start, end, slotTemplate, isVerticalGrouped);\n            html += '</tbody>';\n\n            this.content.find(\"table\").append(html);\n        },\n\n        _groups: function() {\n            var groupCount = this._groupCount();\n            var dates = this._dates;\n            var columnCount = dates.length;\n\n            this.groups = [];\n\n            for (var idx = 0; idx < groupCount; idx++) {\n                var view = this._addResourceView(idx);\n\n                var start = dates[0];\n                var end = dates[(dates.length - 1) || 0];\n\n                var startTime = getMilliseconds(this.startTime());\n                var endTime = getMilliseconds(this.endTime());\n\n                if (startTime !== 0 && endTime <= startTime) {\n                    start = getDate(start);\n                    setTime(start, startTime);\n\n                    end = getDate(end);\n                    setTime(end, endTime);\n                }\n\n                view.addTimeSlotCollection(start, kendo.date.addDays(end, 1));\n            }\n\n            this._timeSlotGroups(groupCount, columnCount);\n        },\n\n        _isHorizontallyGrouped: function() {\n            return this.groupedResources.length && this._groupOrientation() === \"horizontal\";\n        },\n\n        _timeSlotGroups: function(groupCount, datesCount) {\n            var interval = this._timeSlotInterval();\n            var isVerticallyGrouped = this._isVerticallyGrouped();\n            var tableRows = this.content.find(\"tr\");\n\n            this._groupedView._addTimeSlotsCollections(groupCount, datesCount, tableRows, interval, isVerticallyGrouped);\n\n        },\n\n        _addTimeSlotToCollection: function(group, cells, cellIndex, cellOffset, dateIndex, time, interval) {\n              var cell = cells[cellIndex + cellOffset];\n              var collection = group.getTimeSlotCollection(0);\n              var currentDate = this._dates[dateIndex];\n              var currentTime = Date.UTC(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());\n              var start = currentTime + time;\n              var end = start + interval;\n\n              collection.addTimeSlot(cell, start, end, true);\n        },\n\n        startDate: function() {\n            return this._startDate;\n        },\n\n        endDate: function() {\n            return this._endDate;\n        },\n\n        visibleEndDate: function() {\n            var startTime = getMilliseconds(this.startTime());\n            var endTime = getMilliseconds(this.endTime());\n            var endDate = this.endDate();\n\n            if (startTime !== 0 && endTime <= startTime) {\n                endDate = kendo.date.addDays(endDate, 1);\n            }\n\n            return endDate;\n        },\n\n        startTime: function() {\n            var options = this.options;\n            return options.showWorkHours ? options.workDayStart : options.startTime;\n        },\n\n        endTime: function() {\n            var options = this.options;\n            return options.showWorkHours ? options.workDayEnd : options.endTime;\n        },\n\n        _timeSlotInterval: function() {\n            var options = this.options;\n            return (options.majorTick / options.minorTickCount) * MS_PER_MINUTE;\n        },\n\n        nextDate: function() {\n            return kendo.date.nextDay(this.endDate());\n        },\n\n        previousDate: function() {\n            return kendo.date.previousDay(this.startDate());\n        },\n\n        calculateDateRange: function() {\n            this._render([this.options.date]);\n        },\n\n        render: function(events) {\n            this._headerColumnCount = 0;\n\n            this._groups();\n\n            this.element.find(\".k-event\").remove();\n\n            events = new kendo.data.Query(events)\n                .sort([{ field: \"start\", dir: \"asc\" },{ field: \"end\", dir: \"desc\" }])\n                .toArray();\n\n            var eventsByResource = [];\n\n            this._eventsByResource(events, this.groupedResources, eventsByResource);\n\n            var eventGroups = [];\n            var maxRowCount = 0;\n\n            for (var groupIndex = 0; groupIndex < eventsByResource.length; groupIndex++) {\n                var eventGroup = {\n                    groupIndex: groupIndex,\n                    maxRowCount: 0,\n                    events: {}\n                };\n\n                eventGroups.push(eventGroup);\n\n                this._renderEvents(eventsByResource[groupIndex], groupIndex, eventGroup);\n\n                if (maxRowCount < eventGroup.maxRowCount) {\n                    maxRowCount = eventGroup.maxRowCount;\n                }\n            }\n\n            this._setRowsHeight(eventGroups, eventsByResource.length, maxRowCount);\n\n            this._positionEvents(eventGroups, eventsByResource.length);\n\n            this._currentTime(false);\n            this._ongoingEvents(events);\n\n            this.trigger(\"activate\");\n        },\n\n        _positionEvents: function(eventGroups, groupsCount) {\n            for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {\n                var eventsForGroup = eventGroups[groupIndex].events;\n                for (var eventUid in eventsForGroup) {\n                    var eventObject = eventsForGroup[eventUid];\n                    if (Array.isArray(eventObject)) {\n                        for (var eventIndex = 0; eventIndex < eventObject.length; eventIndex++) {\n                            this._positionEvent(eventObject[eventIndex]);\n                        }\n                    } else {\n                        this._positionEvent(eventObject);\n                    }\n                }\n            }\n        },\n\n        _setRowsHeight: function(eventGroups, groupsCount, maxRowCount) {\n            var eventHeight = this.options.eventHeight;\n            var eventBottomOffset = this._getBottomRowOffset();\n            var groupedView = this._groupedView;\n            var verticalGroupCount = groupedView._getVerticalGroupCount(groupsCount);\n\n            groupsCount = this._isVerticallyGrouped() ? verticalGroupCount : 1;\n\n            for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {\n                var rowsCount = groupedView._getVerticalRowCount(eventGroups, groupIndex, maxRowCount);\n\n                rowsCount = rowsCount ? rowsCount : 1;\n\n                var rowHeight = ((eventHeight + 2) * rowsCount) + eventBottomOffset;\n                var timesRow = $(this.times.find(\"tr\")[groupIndex]);\n                var row = $(this.content.find(\"tr\")[groupIndex]);\n\n                timesRow.height(rowHeight);\n                row.height(rowHeight);\n            }\n\n            this._setContentWidth();\n            this.refreshLayout();\n            this._refreshSlots();\n        },\n\n        _getBottomRowOffset: function() {\n            var eventBottomOffset = this.options.eventHeight * 0.50;\n            var isMobile = this._isMobile();\n            var minOffset;\n            var maxOffset;\n\n            if (isMobile) {\n                minOffset = 30;\n                maxOffset = 60;\n            } else {\n                minOffset = 15;\n                maxOffset = 30;\n            }\n\n            if (eventBottomOffset > maxOffset) {\n                eventBottomOffset = maxOffset;\n            } else if (eventBottomOffset < minOffset) {\n                eventBottomOffset = minOffset;\n            }\n\n            return eventBottomOffset;\n        },\n\n        _positionEvent: function(eventObject) {\n            var eventHeight = this.options.eventHeight;\n            var eventOffset = 2;\n            var rect = eventObject.slotRange.innerRect(eventObject.start, eventObject.end, false);\n            var left = this._adjustLeftPosition(rect.left);\n            var width = rect.right - rect.left;\n\n            if (width < 0) {\n                width = 0;\n            }\n\n            if (width < this.options.eventMinWidth) {\n                var slotsCollection = eventObject.slotRange.collection;\n                var lastSlot = slotsCollection._slots[slotsCollection._slots.length - 1];\n                var offsetRight = lastSlot.offsetLeft + lastSlot.offsetWidth;\n\n                width = this.options.eventMinWidth;\n\n                if (offsetRight < left + width) {\n                    width = offsetRight - rect.left;\n                }\n            }\n\n            eventObject.element.css({\n                top: eventObject.slotRange.start.offsetTop + eventObject.rowIndex * (eventHeight + eventOffset) + \"px\",\n                left: left,\n                width: width\n            });\n        },\n\n        _refreshSlots: function() {\n            for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {\n                this.groups[groupIndex].refresh();\n            }\n        },\n\n        _eventsByResource: function(events, resources, result, parentValue) {\n            var resource = resources[0];\n\n            if (resource) {\n                var view = resource.dataSource.view();\n\n                view = view.filter(function(item) {\n                    var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n\n                    return itemParentValue === null || itemParentValue === undefined$1 || itemParentValue === parentValue;\n                });\n\n                for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {\n                    var value = this._resourceValue(resource, view[itemIdx]);\n\n                    var eventsFilteredByResource = new kendo.data.Query(events).filter({ field: resource.field, operator: SchedulerView.groupEqFilter(value) }).toArray();\n\n                    if (resources.length > 1) {\n                        this._eventsByResource(eventsFilteredByResource, resources.slice(1), result, value);\n                    } else {\n                        result.push(eventsFilteredByResource);\n                    }\n                }\n            } else {\n                result.push(events);\n            }\n        },\n\n        _isInDateSlot: function(event) {\n            var startTime = event.start;\n            var endTime = event.end;\n            var rangeStart = getDate(this._startDate);\n            var rangeEnd = kendo.date.addDays(getDate(this.visibleEndDate()), 1);\n\n            if (startTime < rangeEnd && rangeStart <= endTime) {\n                return true;\n            }\n            return false;\n        },\n\n        _isInTimeSlot: function(event) {\n            var startTime = event._startTime || kendo.date.toUtcTime(event.start);\n            var endTime = event._endTime || kendo.date.toUtcTime(event.end);\n\n            var slotRanges = this._slotRanges;\n\n            if (startTime === endTime) {\n                endTime = endTime + 1;\n            }\n\n            for (var slotIndex = 0; slotIndex < slotRanges.length; slotIndex++) {\n                if (startTime < slotRanges[slotIndex].end && slotRanges[slotIndex].start < endTime) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        _adjustEvent: function(event) {\n            var start = event.start;\n            var end = event.end;\n            var eventStartTime = event._time(\"start\");\n            var eventEndTime = event._time(\"end\");\n            var startTime = getMilliseconds(this.startTime());\n            var endTime = getMilliseconds(this.endTime());\n            var adjustedStartDate = null;\n            var adjustedEndDate = null;\n            var occurrence;\n            var head = false;\n            var tail = false;\n\n            if (event.isAllDay) {\n                start = getDate(start);\n                eventStartTime = 0;\n\n                end = getDate(end);\n                eventEndTime = MS_PER_DAY;\n                adjustedEndDate = kendo.date.addDays(end, 1);\n            }\n\n            if (endTime === 0) {\n                endTime = MS_PER_DAY;\n            }\n\n            if (endTime <= startTime) {\n                if (eventStartTime < startTime && eventStartTime >= endTime) {\n                    adjustedStartDate = getDate(start);\n                    setTime(adjustedStartDate, startTime);\n                    tail = true;\n                }\n\n                if (eventEndTime > endTime && eventEndTime <= startTime) {\n                    adjustedEndDate = getDate(end);\n                    setTime(adjustedEndDate, endTime);\n                    head = true;\n                }\n            } else {\n                if (startTime > eventStartTime) {\n                    adjustedStartDate = getDate(start);\n                    setTime(adjustedStartDate, startTime);\n                    tail = true;\n                } else if (endTime <= eventStartTime) {\n                    adjustedStartDate = getDate(start);\n                    adjustedStartDate = kendo.date.addDays(adjustedStartDate, 1);\n                    setTime(adjustedStartDate, startTime);\n                    tail = true;\n                }\n\n                if (endTime < eventEndTime) {\n                    adjustedEndDate = getDate(end);\n                    setTime(adjustedEndDate, endTime);\n                    head = true;\n                } else if (startTime > eventEndTime) {\n                    adjustedEndDate = getDate(end);\n                    adjustedEndDate = kendo.date.addDays(adjustedEndDate,-1);\n                    setTime(adjustedEndDate, endTime);\n                    head = true;\n                }\n            }\n\n            occurrence = event.clone({\n                start: adjustedStartDate ? adjustedStartDate : start,\n                end: adjustedEndDate ? adjustedEndDate : end,\n                _startTime: adjustedStartDate ? kendo.date.toUtcTime(adjustedStartDate) : event._startTime,\n                _endTime: adjustedEndDate ? kendo.date.toUtcTime(adjustedEndDate) : event._endTime,\n                isAllDay: false\n            });\n\n            return {\n                occurrence: occurrence,\n                head: head,\n                tail: tail\n            };\n        },\n\n        _renderEvents: function(events, groupIndex, eventGroup) {\n            var event;\n            var idx;\n            var length;\n\n            for (idx = 0, length = events.length; idx < length; idx++) {\n                event = events[idx];\n\n                if (this._isInDateSlot(event)) {\n                    var isMultiDayEvent = event.isAllDay || event.duration() >= MS_PER_DAY;\n                    var container = this.content;\n\n                    if (isMultiDayEvent || this._isInTimeSlot(event)) {\n                        var adjustedEvent = this._adjustEvent(event);\n                        var group = this.groups[groupIndex];\n\n                        if (!group._continuousEvents) {\n                            group._continuousEvents = [];\n                        }\n\n                        if (this._isInTimeSlot(adjustedEvent.occurrence)) {\n                            var ranges = group.slotRanges(adjustedEvent.occurrence, false);\n                            var range = ranges[0];\n                            var startIndex = range.start.index;\n                            var endIndex = range.end.index;\n\n                            this._groupedView._renderEvent(eventGroup, event, adjustedEvent, group, range, container, startIndex, endIndex);\n                        }\n                    }\n                }\n            }\n        },\n\n        addContinuousEvent: function(group, range, element, isAllDay) {\n            var events = group._continuousEvents;\n\n            events.push({\n                element: element,\n                isAllDay: isAllDay,\n                uid: element.attr(kendo.attr(\"uid\")),\n                start: range.start,\n                end: range.end\n            });\n        },\n\n        _createEventElement: function(occurrence, event, head, tail) {\n            var template = this.eventTemplate;\n            var editable = this.options.editable;\n            var isMobile = this._isMobile();\n            var showDelete = editable && editable.destroy !== false && !isMobile;\n            var resizable = editable && editable.resize !== false;\n            var eventStartTime = event._time(\"start\");\n            var eventEndTime = event._time(\"end\");\n            var eventStartDate = event.start;\n            var eventEndDate = event.end;\n\n            var resources = this.eventResources(event);\n\n            if (event._startTime && eventStartTime !== kendo.date.getMilliseconds(event.start)) {\n                eventStartDate = new Date(eventStartTime);\n                eventStartDate = kendo.timezone.apply(eventStartDate, \"Etc/UTC\");\n            }\n\n            if (event._endTime && eventEndTime !== kendo.date.getMilliseconds(event.end)) {\n                eventEndDate = new Date(eventEndTime);\n                eventEndDate = kendo.timezone.apply(eventEndDate, \"Etc/UTC\");\n            }\n\n            var data = extend({}, {\n                ns: kendo.ns,\n                resizable: resizable,\n                showDelete: showDelete,\n                head: head,\n                tail: tail,\n                singleDay: this._dates.length == 1,\n                resources: resources,\n                inverseColor: false,\n                messages: this.options.messages,\n                ariaLabel: this._formatEventAriaLabel(event.title, eventStartDate, eventEndDate, event.isAllDay),\n                template: this.options.eventTemplate\n            }, event, {\n                start: eventStartDate,\n                end: eventEndDate\n            });\n\n            var element = $(template(data));\n            kendo.applyStylesFromKendoAttributes(element, [\"background-color\", \"border-color\"]);\n\n            return element;\n        },\n\n        _arrangeRows: function(eventObject, slotRange, eventGroup) {\n            var that = this;\n            var startIndex = slotRange.start.index;\n            var endIndex = slotRange.end.index;\n\n            var rect = eventObject.slotRange.innerRect(eventObject.start, eventObject.end, false);\n            var rectRight = rect.right + this.options.eventMinWidth;\n\n            var events = SchedulerView.collidingEvents(slotRange.events(), rect.left, rectRight);\n\n            slotRange.addEvent({\n                slotIndex: startIndex,\n                slotIndexEnd: endIndex,\n                start: rect.left,\n                end: rectRight,\n                zeroWidthEventOffset: that._zeroWidthEventOffset,\n                rectLeft: rect.left,\n                rectRight: rectRight,\n                element: eventObject.element,\n                uid: eventObject.uid\n            });\n\n            events.push({\n                slotIndex: startIndex,\n                slotIndexEnd: endIndex,\n                start: rect.left,\n                end: rectRight,\n                zeroWidthEventOffset: that._zeroWidthEventOffset,\n                uid: eventObject.uid\n            });\n\n            var rows = SchedulerView.createRows(events);\n\n            if (eventGroup.maxRowCount < rows.length) {\n                eventGroup.maxRowCount = rows.length;\n            }\n\n            for (var idx = 0, length = rows.length; idx < length; idx++) {\n                var rowEvents = rows[idx].events;\n                for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {\n                    eventGroup.events[rowEvents[j].uid].rowIndex = idx;\n                }\n            }\n        },\n\n        _groupCount: function() {\n            var resources = this.groupedResources;\n            var groupedView = this._groupedView;\n\n            if (resources.length) {\n                if (this._groupOrientation() === \"vertical\") {\n                    return groupedView._verticalCountForLevel(resources.length - 1);\n                } else {\n                    return groupedView._horizontalCountForLevel(resources.length - 1, this.columnLevels.length - 1);\n                }\n            }\n            return 1;\n        },\n\n        _updateEventForSelection: function(event) {\n            var adjustedEvent = this._adjustEvent(event.clone());\n            return adjustedEvent.occurrence;\n        },\n\n        _eventOptionsForMove: function(event) {\n            if (event.isAllDay) {\n                return { isAllDay: false };\n            }\n\n            return {};\n        },\n\n        _updateEventForResize: function(event) {\n            if (event.isAllDay) {\n                event.set(\"isAllDay\", false);\n            }\n        },\n\n        _updateMoveHint: function(event, groupIndex, distance) {\n            var group = this.groups[groupIndex];\n\n            var clonedEvent = event.clone({ start: event.start, end: event.end });\n\n            var eventDuraton = clonedEvent.duration();\n            clonedEvent.start = new Date(clonedEvent.start.getTime() + distance);\n            clonedEvent.end = new Date(+clonedEvent.start + eventDuraton);\n\n            this._removeMoveHint(event.uid);\n\n            if (this._isInDateSlot(clonedEvent)) {\n                if (clonedEvent.isAllDay || clonedEvent.duration() >= MS_PER_DAY || this._isInTimeSlot(clonedEvent)) {\n                    var adjustedEvent = this._adjustEvent(clonedEvent);\n                    var ranges = group.slotRanges(adjustedEvent.occurrence, false);\n\n                    for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                        this._groupedView._createMoveHint(ranges[rangeIndex], adjustedEvent);\n                    }\n                }\n            }\n        },\n\n       _appendMoveHint: function(hint) {\n            hint.appendTo(this.content);\n\n            this._moveHint = this._moveHint.add(hint);\n       },\n\n        _updateResizeHint: function(event, groupIndex, startTime, endTime) {\n            var group = this.groups[groupIndex];\n            var ranges = group.ranges(startTime, endTime, false, false);\n\n            this._removeResizeHint();\n\n            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                var range = ranges[rangeIndex];\n                var start = range.startSlot();\n\n                var startRect = range.innerRect(startTime, endTime, false);\n                startRect.top = start.offsetTop;\n\n                var width = startRect.right - startRect.left;\n\n                if (width < 0) {\n                    for (var i = 0; i < range.events().length; i++) {\n                        if (range.events()[i].uid === event.uid) {\n                            width = range.events()[i].rectRight - startRect.left;\n                            break;\n                        }\n                    }\n                }\n\n                var height = range.endSlot().offsetTop + start.offsetHeight - startRect.top;\n\n                var left = this._adjustLeftPosition(startRect.left);\n\n                var hint = SchedulerView.fn._createResizeHint.call(this,\n                    left,\n                    startRect.top,\n                    width,\n                    height\n                );\n\n                this._resizeHint = this._resizeHint.add(hint);\n            }\n\n            var format = \"t\";\n            var container = this.content;\n\n            this._resizeHint.appendTo(container);\n\n            this._resizeHint.find(\".k-label-top,.k-label-bottom\").text(\"\");\n\n            this._resizeHint.first().addClass(\"k-first\").find(\".k-label-top\").text(kendo.toString(kendo.timezone.toLocalDate(startTime), format));\n\n            this._resizeHint.last().addClass(\"k-last\").find(\".k-label-bottom\").text(kendo.toString(kendo.timezone.toLocalDate(endTime), format));\n        },\n\n        selectionByElement: function(cell) {\n            var offset = cell.offset();\n            return this._slotByPosition(offset.left, offset.top);\n        },\n\n        _updateDirection: function(selection, ranges, multiple, reverse, vertical) {\n\n            var startSlot = ranges[0].start;\n            var endSlot = ranges[ranges.length - 1].end;\n            if (multiple && !vertical) {\n                if (startSlot.index === endSlot.index &&\n                    startSlot.collectionIndex === endSlot.collectionIndex) {\n                    selection.backward = reverse;\n                }\n            }\n        },\n\n        _changeGroup: function(selection, previous) {\n            var method = previous ? \"prevGroupSlot\" : \"nextGroupSlot\";\n\n            var slot = this[method](selection.start, selection.groupIndex, false);\n\n            if (slot) {\n                selection.groupIndex += previous ? -1 : 1;\n            }\n\n            this._groupedView._changeGroup(selection, previous, slot);\n            return slot;\n        },\n\n        prevGroupSlot: function(date, groupIndex, isDay) {\n            var group = this.groups[groupIndex];\n            var slot = group.ranges(date, date, isDay, false)[0].start;\n\n            if (groupIndex <= 0) {\n                return;\n            }\n\n            return this._groupedView._prevGroupSlot(slot, group, isDay);\n        },\n\n        nextGroupSlot: function(date, groupIndex, isDay) {\n            var group = this.groups[groupIndex];\n            var slot = group.ranges(date, date, isDay, false)[0].start;\n\n            if (groupIndex >= this.groups.length - 1) {\n                return;\n            }\n\n            return this._groupedView._nextGroupSlot(slot, group, isDay);\n        },\n\n        _verticalSlots: function(selection, ranges, multiple, reverse) {\n            var groupedView = this._groupedView;\n            var method = groupedView._verticalMethod(reverse, multiple);\n            var startSlot = ranges[0].start;\n            var endSlot = ranges[ranges.length - 1].end;\n            var group = this.groups[selection.groupIndex];\n            var slot = groupedView._normalizeVerticalSelection(selection, ranges, reverse, multiple);\n\n            if (slot) {\n                startSlot = endSlot = slot;\n            }\n\n            startSlot = group[method](startSlot);\n            endSlot = group[method](endSlot);\n\n            if (!multiple && this._isVerticallyGrouped() && (!startSlot || !endSlot)) {\n                startSlot = endSlot = groupedView._verticalSlots(selection, reverse, slot);\n            }\n\n            return {\n                startSlot: startSlot,\n                endSlot: endSlot\n            };\n        },\n\n        _horizontalSlots: function(selection, ranges, multiple, reverse) {\n            var method = reverse ? \"upSlot\" : \"downSlot\";\n            var startSlot = ranges[0].start;\n            var endSlot = ranges[ranges.length - 1].end;\n            var group = this.groups[selection.groupIndex];\n            var result = {};\n\n            if (!multiple) {\n                result = this._groupedView._horizontalSlots(selection, group, method, startSlot, endSlot, multiple, reverse);\n            } else {\n                result.startSlot = group[method](startSlot);\n                result.endSlot = group[method](endSlot);\n\n                if (!multiple && this._isHorizontallyGrouped() && (!startSlot || !endSlot)) {\n                    result.startSlot = result.endSlot = this._changeGroup(selection, reverse);\n                }\n            }\n\n            return result;\n        },\n\n        _changeViewPeriod: function(selection, reverse) {\n            var date = reverse ? this.previousDate() : this.nextDate();\n            var start = selection.start;\n            var end = selection.end;\n            var newStart, newEnd;\n\n            newStart = new Date(date);\n            newEnd = new Date(date);\n\n            if (this._isInRange(newStart, newEnd)) {\n                return false;\n            }\n            selection.start = newStart;\n            selection.end = newEnd;\n\n            if (this._isHorizontallyGrouped()) {\n               selection.groupIndex = reverse ? this.groups.length - 1 : 0;\n            }\n\n            var duration = end - start;\n\n            if (reverse) {\n                end = getMilliseconds(this.endTime());\n                end = end === 0 ? MS_PER_DAY : end;\n\n                setTime(selection.start, end - duration);\n                setTime(selection.end, end);\n            } else {\n                start = getMilliseconds(this.startTime());\n\n                setTime(selection.start, start);\n                setTime(selection.end, start + duration);\n            }\n\n            selection.events = [];\n\n            return true;\n        },\n\n        move: function(selection, key, shift) {\n            var handled = false;\n            var group = this.groups[selection.groupIndex];\n            var keys = kendo.keys;\n            var groupedView = this._groupedView;\n            var ranges = group.ranges(selection.start, selection.end, false, false);\n            var startSlot, endSlot, reverse, slots;\n\n            if (key === keys.DOWN || key === keys.UP) {\n                handled = true;\n                reverse = key === keys.UP;\n\n                groupedView._updateDirection(selection, ranges, shift, reverse);\n\n                slots = this._verticalSlots(selection, ranges, shift, reverse);\n\n                if (groupedView._changeVerticalViewPeriod(slots, shift, selection, reverse)) {\n                    return handled;\n                }\n            } else if (key === keys.LEFT || key === keys.RIGHT) {\n                handled = true;\n                reverse = key === keys.LEFT;\n\n                this._updateDirection(selection, ranges, shift, reverse, false);\n\n                slots = this._horizontalSlots(selection, ranges, shift, reverse);\n\n                if (groupedView._changeHorizontalViewPeriod(slots, shift, selection, reverse)) {\n                     return handled;\n                }\n            }\n\n           if (handled) {\n               startSlot = slots.startSlot;\n               endSlot = slots.endSlot;\n\n               if (shift) {\n                   var backward = selection.backward;\n\n                   if (backward && startSlot) {\n                       selection.start = startSlot.startDate();\n                   } else if (!backward && endSlot) {\n                       selection.end = endSlot.endDate();\n                   }\n               } else if (startSlot && endSlot) {\n                   selection.start = startSlot.startDate();\n                   selection.end = endSlot.endDate();\n               }\n\n               selection.events = [];\n           }\n\n            return handled;\n        },\n\n        destroy: function() {\n            var that = this;\n\n            if (that.element) {\n                that.element.off(NS);\n            }\n\n            if (that._currentTimeUpdateTimer) {\n                clearInterval(that._currentTimeUpdateTimer);\n            }\n\n            SchedulerView.fn.destroy.call(this);\n\n            if (this._isMobile() && that.options.editable) {\n                if (that.options.editable.create !== false) {\n                    that._addUserEvents.destroy();\n                }\n\n                if (that.options.editable.update !== false) {\n                    that._editUserEvents.destroy();\n                }\n            }\n        },\n\n        _resourceBySlot: function(slot) {\n            var resources = this.groupedResources;\n            var result = {},\n            groupOptions = this.options.group;\n\n            if (resources.length && groupOptions.orientation === \"horizontal\" && groupOptions.date) {\n                var resourceIndex = slot.groupIndex,\n                    levels = this.columnLevels,\n                    groupLevel = levels[levels.length - 1],\n                    resource = resources[resources.length - 1],\n                    groupLevelMember = groupLevel[resourceIndex],\n                    passedChildren, numberOfChildren, j, i;\n\n                this._setResourceValue(groupLevelMember, resource, result);\n\n                for (j = levels.length - 2; j >= 3; j--) {\n                    groupLevel = levels[j];\n                    resource = resources[j - 3];\n                    passedChildren = 0;\n\n                    for (i = 0; i < groupLevel.length; i++) {\n                        groupLevelMember = groupLevel[i];\n                        numberOfChildren = groupLevelMember.columns.length;\n\n                        if (numberOfChildren > resourceIndex - passedChildren) {\n                            this._setResourceValue(groupLevelMember, resource, result);\n\n                            i = groupLevel.length;\n                        } else {\n                            passedChildren += numberOfChildren;\n                        }\n                    }\n                }\n\n                return result;\n            } else {\n                return SchedulerView.fn._resourceBySlot.call(this, slot);\n            }\n        }\n    });\n\n    extend(true, ui, {\n        TimelineView: TimelineView,\n        TimelineWeekView: TimelineView.extend({\n            options: {\n                name: \"TimelineWeekView\",\n                title: \"Timeline Week\",\n                selectedDateFormat: \"{0:D} - {1:D}\",\n                selectedShortDateFormat: \"{0:d} - {1:d}\",\n                selectedMobileDateFormat: \"{0:MMM dd} - {1:dd}\",\n                majorTick: 120\n            },\n            name: \"timelineWeek\",\n            calculateDateRange: function() {\n                var selectedDate = this.options.date,\n                    start = kendo.date.dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1),\n                    idx, length,\n                    dates = [];\n\n                for (idx = 0, length = 7; idx < length; idx++) {\n                    dates.push(start);\n                    start = kendo.date.nextDay(start);\n                }\n                this._render(dates);\n            }\n        }),\n        TimelineWorkWeekView: TimelineView.extend({\n            options: {\n                name: \"TimelineWorkWeekView\",\n                title: \"Timeline Work Week\",\n                selectedDateFormat: \"{0:D} - {1:D}\",\n                selectedShortDateFormat: \"{0:d} - {1:d}\",\n                selectedMobileDateFormat: \"{0:MMM dd} - {1:dd}\",\n                majorTick: 120\n            },\n            name: \"timelineWorkWeek\",\n            nextDate: function() {\n                var weekStart = kendo.date.dayOfWeek(kendo.date.nextDay(this.endDate()), this.calendarInfo().firstDay, 1);\n\n                return kendo.date.addDays(weekStart, this._workDays[0]);\n            },\n            previousDate: function() {\n                var weekStart = kendo.date.dayOfWeek(this.startDate(), this.calendarInfo().firstDay, -1);\n                var workDays = this._workDays;\n\n                return kendo.date.addDays(weekStart, workDays[workDays.length - 1] - 7);\n            },\n            calculateDateRange: function() {\n                var options = this.options,\n                    selectedDate = options.date,\n                    dayOfWeek = kendo.date.dayOfWeek,\n                    weekStart = dayOfWeek(selectedDate, this.calendarInfo().firstDay, -1),\n                    start = dayOfWeek(weekStart, options.workWeekStart, 1),\n                    end = dayOfWeek(start, options.workWeekEnd, 1),\n                    dates = [],\n                    workDays = (options.workDays && options.workDays.length) ? options.workDays.map(function(day) {\n                        return dayOfWeek(weekStart, day, 1).getTime();\n                    }) : null;\n\n                if (workDays) {\n                    start = weekStart;\n                    end = dayOfWeek(start, this.calendarInfo().firstDay + 6, 1);\n                }\n\n                while (start <= end) {\n                    if (workDays && workDays.indexOf(start.getTime()) > -1) {\n                        dates.push(start);\n                    } else if (!workDays) {\n                        dates.push(start);\n                    }\n\n                    start = kendo.date.nextDay(start);\n                }\n\n                this._render(dates);\n            }\n        }),\n        TimelineMonthView: TimelineView.extend({\n            options: {\n                name: \"TimelineMonthView\",\n                title: \"Timeline Month\",\n                selectedDateFormat: \"{0:D} - {1:D}\",\n                selectedShortDateFormat: \"{0:d} - {1:d}\",\n                workDayStart: new Date(1980, 1, 1, 0, 0, 0),\n                workDayEnd: new Date(1980, 1, 1, 23, 59, 59),\n                footer: false,\n                majorTick: 1440,\n                minorTickCount: 1\n            },\n            name: \"timelineMonth\",\n            calculateDateRange: function() {\n                var selectedDate = this.options.date,\n                    start = kendo.date.firstDayOfMonth(selectedDate),\n                    end = kendo.date.lastDayOfMonth(selectedDate),\n                    idx, length,\n                    dates = [];\n\n                for (idx = 0, length = end.getDate(); idx < length; idx++) {\n                    dates.push(start);\n                    start = kendo.date.nextDay(start);\n                }\n                this._render(dates);\n            }\n        })\n    });\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}