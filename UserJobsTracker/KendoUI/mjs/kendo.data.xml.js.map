{"version":3,"sources":["raw-mjs/kendo.data.xml.js"],"names":["__meta__","id","name","category","depends","hidden","$","undefined$1","kendo","window","isArray","Array","isPlainObject","map","each","extend","getter","XmlDataReader","Class","init","options","that","this","total","model","parse","errors","serialize","data","base","modelBase","Model","fields","field","value","isFunction","idField","xpathToMember","define","parseInt","modelInstance","result","evaluate","record","_parse","xmlParse","xml","call","length","parseDOM","element","parsedNode","node","nodeType","nodeName","member","attribute","idx","attributes","attributeCount","nodeValue","firstChild","nextSibling","push","expression","intermediateResult","members","split","shift","join","apply","documentElement","tree","parseXML","raw","replace","indexOf","readers","jQuery","kendo$1"],"mappings":"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","file":"kendo.data.xml.js","sourcesContent":["import './kendo.core.js';\n\nvar __meta__ = {\n    id: \"data.xml\",\n    name: \"XML\",\n    category: \"framework\",\n    depends: [ \"core\" ],\n    hidden: true\n};\n\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        isArray = Array.isArray,\n        isPlainObject = $.isPlainObject,\n        map = $.map,\n        each = $.each,\n        extend = $.extend,\n        getter = kendo.getter,\n        Class = kendo.Class;\n\n    var XmlDataReader = Class.extend({\n        init: function(options) {\n            var that = this,\n                total = options.total,\n                model = options.model,\n                parse = options.parse,\n                errors = options.errors,\n                serialize = options.serialize,\n                data = options.data;\n\n            if (model) {\n                if (isPlainObject(model)) {\n                    var base = options.modelBase || kendo.data.Model;\n\n                    if (model.fields) {\n                        each(model.fields, function(field, value) {\n                            if (isPlainObject(value) && value.field) {\n                                if (!kendo.isFunction(value.field)) {\n                                    value = extend(value, { field: that.getter(value.field) });\n                                }\n                            } else {\n                                value = { field: that.getter(value) };\n                            }\n                            model.fields[field] = value;\n                        });\n                    }\n\n                    var id = model.id;\n                    if (id) {\n                        var idField = {};\n\n                        idField[that.xpathToMember(id, true)] = { field: that.getter(id) };\n                        model.fields = extend(idField, model.fields);\n                        model.id = that.xpathToMember(id);\n                    }\n                    model = base.define(model);\n                }\n\n                that.model = model;\n            }\n\n            if (total) {\n                if (typeof total == \"string\") {\n                    total = that.getter(total);\n                    that.total = function(data) {\n                        return parseInt(total(data), 10);\n                    };\n                } else if (typeof total == \"function\") {\n                    that.total = total;\n                }\n            }\n\n            if (errors) {\n                if (typeof errors == \"string\") {\n                    errors = that.getter(errors);\n                    that.errors = function(data) {\n                        return errors(data) || null;\n                    };\n                } else if (typeof errors == \"function\") {\n                    that.errors = errors;\n                }\n            }\n\n            if (data) {\n                if (typeof data == \"string\") {\n                    data = that.xpathToMember(data);\n                    that.data = function(value) {\n                        var result = that.evaluate(value, data),\n                            modelInstance;\n\n                        result = isArray(result) ? result : [result];\n\n                        if (that.model && model.fields) {\n                            modelInstance = new that.model();\n\n                            return map(result, function(value) {\n                                if (value) {\n                                    var record = {}, field;\n\n                                    for (field in model.fields) {\n                                        record[field] = modelInstance._parse(field, model.fields[field].field(value));\n                                    }\n\n                                    return record;\n                                }\n                            });\n                        }\n\n                        return result;\n                    };\n                } else if (typeof data == \"function\") {\n                    that.data = data;\n                }\n            }\n\n            if (typeof parse == \"function\") {\n                var xmlParse = that.parse;\n\n                that.parse = function(data) {\n                    var xml = parse.call(that, data);\n                    return xmlParse.call(that, xml);\n                };\n            }\n\n            if (typeof serialize == \"function\") {\n                that.serialize = serialize;\n            }\n        },\n        total: function(result) {\n            return this.data(result).length;\n        },\n        errors: function(data) {\n            return data ? data.errors : null;\n        },\n        serialize: function(data) {\n            return data;\n        },\n        parseDOM: function(element) {\n            var result = {},\n                parsedNode,\n                node,\n                nodeType,\n                nodeName,\n                member,\n                attribute,\n                attributes = element.attributes,\n                attributeCount = attributes.length,\n                idx;\n\n            for (idx = 0; idx < attributeCount; idx++) {\n                attribute = attributes[idx];\n                result[\"@\" + attribute.nodeName] = attribute.nodeValue;\n            }\n\n            for (node = element.firstChild; node; node = node.nextSibling) {\n                nodeType = node.nodeType;\n\n                if (nodeType === 3 || nodeType === 4) {\n                    // text nodes or CDATA are stored as #text field\n                    result[\"#text\"] = node.nodeValue;\n                } else if (nodeType === 1) {\n                    // elements are stored as fields\n                    parsedNode = this.parseDOM(node);\n\n                    nodeName = node.nodeName;\n\n                    member = result[nodeName];\n\n                    if (isArray(member)) {\n                        // elements of same nodeName are stored as array\n                        member.push(parsedNode);\n                    } else if (member !== undefined$1) {\n                        member = [member, parsedNode];\n                    } else {\n                        member = parsedNode;\n                    }\n\n                    result[nodeName] = member;\n                }\n            }\n            return result;\n        },\n\n        evaluate: function(value, expression) {\n            var members = expression.split(\".\"),\n                member,\n                result,\n                length,\n                intermediateResult,\n                idx;\n\n            while (member = members.shift()) {\n                value = value[member];\n\n                if (isArray(value)) {\n                    result = [];\n                    expression = members.join(\".\");\n\n                    for (idx = 0, length = value.length; idx < length; idx++) {\n                        intermediateResult = this.evaluate(value[idx], expression);\n\n                        intermediateResult = isArray(intermediateResult) ? intermediateResult : [intermediateResult];\n\n                        result.push.apply(result, intermediateResult);\n                    }\n\n                    return result;\n                }\n            }\n\n            return value;\n        },\n\n        parse: function(xml) {\n            var documentElement,\n                tree,\n                result = {};\n\n            documentElement = xml.documentElement || $.parseXML(xml).documentElement;\n\n            tree = this.parseDOM(documentElement);\n\n            result[documentElement.nodeName] = tree;\n\n            return result;\n        },\n\n        xpathToMember: function(member, raw) {\n            if (!member) {\n                return \"\";\n            }\n\n            member = member.replace(/^\\//, \"\") // remove the first \"/\"\n                           .replace(/\\//g, \".\"); // replace all \"/\" with \".\"\n\n            if (member.indexOf(\"@\") >= 0) {\n                // replace @attribute with '[\"@attribute\"]'\n                return member.replace(/\\.?(@.*)/, raw ? '$1' : '[\"$1\"]');\n            }\n\n            if (member.indexOf(\"text()\") >= 0) {\n                // replace \".text()\" with '[\"#text\"]'\n                return member.replace(/(\\.?text\\(\\))/, raw ? '#text' : '[\"#text\"]');\n            }\n\n            return member;\n        },\n        getter: function(member) {\n            return getter(this.xpathToMember(member), true);\n        }\n    });\n\n    $.extend(true, kendo.data, {\n        XmlDataReader: XmlDataReader,\n        readers: {\n            xml: XmlDataReader\n        }\n    });\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}