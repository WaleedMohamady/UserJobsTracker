{"version":3,"sources":["raw-mjs/kendo.scheduler.view.js"],"names":["__meta__","id","name","category","description","depends","hidden","kendo","ui","scheduler","$","window","getDate","date","Widget","outerHeight","_outerHeight","keys","ONGOING_CLASS","math","Math","SPACE","levels","values","key","result","collect","depth","level","idx","length","push","table","tableRows","className","trim","join","scrollbarWidth","ResourceView","Class","extend","init","index","isRtl","enforceAllDaySlot","this","_index","_timeSlotCollections","_daySlotCollections","_isRtl","_enforceAllDaySlot","addTimeSlotCollection","startDate","endDate","_addCollection","addDaySlotCollection","collections","collection","SlotCollection","timeSlotCollectionCount","daySlotCollectionCount","_refreshSlotCollections","slotCollections","slotCollectionIndex","collectionIndex","refresh","daySlotByPosition","x","y","byDate","_slotByPosition","timeSlotByPosition","slotIndex","count","nextSlot","slot","at","width","offsetWidth","height","offsetHeight","horizontalEnd","offsetLeft","verticalEnd","offsetTop","timeSlotRanges","startTime","endTime","firstIndex","lastIndex","start","_startSlot","inRange","end","_endSlot","MS_PER_DAY","first","last","_continuousRange","TimeSlotRange","daySlotRanges","isAllDay","DaySlotRange","range","startSlot","endSlot","startIndex","endIndex","ranges","head","tail","slotRanges","event","isDay","_startTime","toUtcTime","_endTime","undefined","isMultiDay","_startCollection","startInRange","_endCollection","endInRange","_getCollections","continuousSlot","reverse","pad","isDaySlot","firstSlot","lastSlot","upSlot","keepCollection","groupByDateVertically","that","_verticalSlot","downSlot","leftSlot","_horizontalSlot","rightSlot","step","swapCollection","_collection","multiday","time","_start","slotByStartDate","slotByEndDate","getSlotCollection","getTimeSlotCollection","getDaySlotCollection","SlotRange","options","innerHeight","events","addEvent","outerRect","snap","_rect","property","top","bottom","left","right","support","element","startOffset","startSlotDuration","endOffset","endSlotDuration","round","innerRect","innerWidth","groupIndex","_slots","_events","_end","_groupIndex","_collectionIndex","allday","addTimeSlot","isHorizontal","TimeSlot","addDaySlot","eventCount","DaySlot","Slot","clientWidth","clientHeight","timezone","toLocalDate","fn","apply","arguments","offsetX","rtl","offset","difference","duration","floor","children","firstChild","firstChildHeight","firstChildTop","Date","rangeIndex","eventElement","slotIndexEnd","SchedulerView","call","_normalizeOptions","_initDefaultTools","_scrollbar","scrollbar","_resizeHint","_moveHint","_cellId","guid","_resourcesForGroups","_selectedSlots","attr","messages","ariaEventLabel","on","to","allDay","prefix","visibleEndDate","_defaultTools","todayMobile","type","fillMode","text","today","click","_footerTodayClickHandler","bind","attributes","class","fulldayDesktop","icon","showWorkHours","showFullDay","showWorkDay","toggleFullDay","noop","fulldayMobile","setMilliseconds","workDayStart","workDayEnd","_isMobile","mobile","mobileOS","_addResourceView","resourceView","groups","_refreshResourceViews","i","dateForTitle","format","selectedDateFormat","shortDateForTitle","selectedShortDateFormat","mobileDateForTitle","selectedMobileDateFormat","_changeGroup","selection","previous","_isGroupedByDate","_changeDate","group","_changeGroupContinuously","_changeViewPeriod","_isInRange","newStart","newEnd","min","max","_horizontalSlots","multiple","method","horizontalRange","isVertical","_isVerticallyGrouped","_normalizeHorizontalSelection","tempSlot","_getNextHorizontalRange","_continuousSlot","_verticalSlots","verticalRange","_normalizeVerticalSelection","_getNextVerticalRange","e","preventDefault","currentDate","timezoneOffset","convert","getTimezoneOffset","trigger","view","action","_footerItems","items","_footer","footer","html","appendTo","kendoToolBar","resizable","constrainSelection","move","shift","handled","verticalByDate","slots","DOWN","UP","_updateDirection","LEFT","RIGHT","backward","moveToEventInGroup","selectedEvents","prev","lastSelected","_continuousEvents","uid","inArray","moveToEvent","allEvents","_getAllEvents","uniqueAllEvents","_getUniqueEvents","sortedEvents","_getSortedEvents","eventIndex","_getNextEventIndexBySlot","_getStartIdx","_getSelectedSlot","current","candidate","_current","content","has","_scrollTo","select","clearSelection","_selectEvents","_selectSlots","tempIndex","slotStartDate","eventStartDate","getTime","selectedEventIndex","each","concat","exists","j","sort","second","firstStartDate","secondStartDate","cell","replace","selectedStateRegExp","groupEvent","found","groupEvents","add","indexOf","addClass","addDays","_resourceValue","resource","item","valuePrimitive","getter","dataValueField","_setResourceValue","groupLevelMember","value","setter","field","_resourceBySlot","resources","groupedResources","passedChildren","numberOfChildren","resourceIndex","groupOptions","nestedMember","orientation","rowLevels","columnLevels","dateGroupCompensation","groupLevel","_createResizeHint","css","_removeResizeHint","remove","_removeMoveHint","filter","container","elementOffset","elementOffsetDir","containerScroll","scrollTop","containerOffsetDir","bottomDistance","_inverseEventColor","eventColor","eventColorIsDark","Color","isDark","eventBackground","_eventTmpl","template","wrapper","settings","Template","templateSettings","paramName","state","storage","tmpl","eventResources","data","dataSource","eventResource","dataIndex","get","resourceColor","dataColorField","title","dataTextField","color","createLayout","layout","allDayIndex","rows","allDaySlot","splice","_isVirtualized","_trimRowLevels","rowCount","find","append","_topSection","_bottomSection","_updateDomRowLevels","_groupOrientation","_outerWidth","_scroller","virtual","levelMarker","lastGroup","cachedRowLevels","_hasContentToRender","stopAtLevel","parentLevel","parentValue","rowLevelIndex","stop","createNextLayout","trimmedRowLevels","clone","_height","_times","rowSpan","parseInt","_virtualContent","render","_cachedEvents","_tryRenderContent","bufferHeight","_isSchedulerHeightSet","initialHeight","el","style","groupCells","times","_rowLevelIndices","toArray","map","refreshLayout","toolbar","headerHeight","paddingDirection","eq","datesHeader","timesHeader","datesHeaderRows","contentDiv","kineticScrollNeeded","timesTable","removeClass","thElm","columnLevelCount","_datesHeader","dateGroup","closest","wrap","parent","scrollLeft","touchScroller","avoidScrolling","target","movable","_touchScroller","scrollElement","sender","groupIdx","groupLength","_createDateLayout","dates","inner","createDateLayoutConfiguration","_createColumnsLayout","createLayoutConfiguration","_createRowsLayout","selectionByElement","removeAttr","destroy","_ongoingTimer","clearInterval","getKendoToolBar","calendarInfo","getCulture","calendars","standard","prevGroupSlot","nextGroupSlot","_eventOptionsForMove","_updateEventForResize","_updateEventForSelection","_innerElements","countInner","innerCollection","innerSpan","innerEls","isMobile","rowIndex","Array","split","rowHeaderRows","rowsBefore","currentRow","rowspan","columnIndex","dateTableRows","columnLevelIndex","th","column","colspan","allDayTableRows","lastLevel","td","cellContent","applyStylesFromKendoAttributes","_formatEventAriaLabel","labelText","labelMessages","sameDate","toString","_ongoingEvents","interval","ongoingOptions","ongoingEvents","enabled","_ongoingUpdater","updateInterval","isNaN","setInterval","currentTime","ongoingClass","cssClass","_updateOngoing","useLocalTimezone","forEach","appointment","re","processor","parts","channels","formats","resolveColor","process","exec","r","g","b","normalizeByte","_createColumns","eventElements","columns","eventRange","zeroWidthEventOffset","columnLength","endOverlaps","configuration","obj","minorTicks","itemParentValue","dataParentValueField","htmlEncode","slice","prototype","charAt","substr","toLowerCase","namedColors","percBrightness","sqrt","aqua","azure","beige","black","blue","brown","coral","cyan","darkblue","darkcyan","darkgray","darkgreen","darkorange","darkred","dimgray","fuchsia","gold","goldenrod","gray","green","greenyellow","indigo","ivory","khaki","lightblue","lightgrey","lightgreen","lightpink","lightyellow","lime","limegreen","linen","magenta","maroon","mediumblue","navy","olive","orange","orangered","orchid","pink","plum","purple","red","royalblue","salmon","silver","skyblue","slateblue","slategray","snow","steelblue","tan","teal","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","createColumns","createRows","collidingEvents","elements","slotStart","slotEnd","eventsForSlot","groupEqFilter","isArray","ObservableArray","jQuery","kendo$1"],"mappings":"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","file":"kendo.scheduler.view.js","sourcesContent":["import './kendo.core.js';\nimport './kendo.toolbar.js';\n\nvar __meta__ = {\n    id: \"scheduler.view\",\n    name: \"Scheduler View\",\n    category: \"web\",\n    description: \"The Scheduler Common View\",\n    depends: [ \"core\", \"toolbar\" ],\n    hidden: true\n};\n    kendo.ui.scheduler = {};\n\n(function($) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        getDate = kendo.date.getDate,\n        Widget = ui.Widget,\n        outerHeight = kendo._outerHeight,\n        keys = kendo.keys,\n        NS = \".kendoSchedulerView\",\n        INVERSE_COLOR_CLASS = \"k-event-inverse\",\n        ONGOING_CLASS = \"k-event-ongoing\",\n        MIN_HORIZONTAL_SCROLL_SIZE = 1024,\n        math = Math,\n        SPACE = \" \",\n        DOT = \".\";\n\n    function levels(values, key) {\n        var result = [];\n\n        function collect(depth, values) {\n            values = values[key];\n\n            if (values) {\n                var level = result[depth] = result[depth] || [];\n\n                for (var idx = 0; idx < values.length; idx++) {\n                    level.push(values[idx]);\n                    collect(depth + 1, values[idx]);\n                }\n            }\n        }\n\n        collect(0, values);\n\n        return result;\n    }\n\n    function table(tableRows, className) {\n        if (!tableRows.length) {\n            return \"\";\n        }\n\n        return '<table role=\"presentation\" class=\"' + kendo.trim('k-scheduler-table ' + (className || \"\")) + '\">' +\n               '<tr>' +\n                    tableRows.join(\"</tr><tr>\") +\n               '</tr>' +\n               '</table>';\n    }\n\n    function allDayTable(tableRows, className) {\n        if (!tableRows.length) {\n            return \"\";\n        }\n\n        return `<div ${kendo.attr(\"style-position\")}=\"relative\">${table(tableRows, className)}</div>`;\n    }\n\n    function timesHeader(columnLevelCount, allDaySlot, rowCount) {\n        var tableRows = [];\n\n        if (rowCount > 0) {\n            for (var idx = 0; idx < columnLevelCount; idx++) {\n                tableRows.push(\"<th>&#8203;</th>\");\n            }\n        }\n\n        if (allDaySlot) {\n            tableRows.push('<th class=\"k-scheduler-times-all-day\">' + allDaySlot.text + '</th>');\n        }\n\n        if (rowCount < 1) {\n           return $();\n        }\n\n        return $('<div class=\"k-scheduler-times\">' + table(tableRows) + '</div>');\n    }\n\n    function content() {\n        return $(\n            '<div class=\"k-scheduler-content\">' +\n                '<table role=\"presentation\" class=\"k-scheduler-table\"></table>' +\n            '</div>'\n        );\n    }\n    var HINT = '<div class=\"k-marquee k-scheduler-marquee\">' +\n                    '<div class=\"k-marquee-color\"></div>' +\n                    '<div class=\"k-marquee-text\">' +\n                        '<div class=\"k-label-top\"></div>' +\n                        '<div class=\"k-label-bottom\"></div>' +\n                    '</div>' +\n                '</div>';\n\n\n    var ResourceView = kendo.Class.extend({\n        init: function(index, isRtl, enforceAllDaySlot) {\n            this._index = index;\n            this._timeSlotCollections = [];\n            this._daySlotCollections = [];\n            this._isRtl = isRtl;\n            this._enforceAllDaySlot = enforceAllDaySlot;\n        },\n\n        addTimeSlotCollection: function(startDate, endDate) {\n            return this._addCollection(startDate, endDate, this._timeSlotCollections);\n        },\n\n        addDaySlotCollection: function(startDate, endDate) {\n            return this._addCollection(startDate, endDate, this._daySlotCollections);\n        },\n\n        _addCollection: function(startDate, endDate, collections) {\n            var collection = new SlotCollection(startDate, endDate, this._index, collections.length);\n\n            collections.push(collection);\n\n            return collection;\n        },\n\n        timeSlotCollectionCount: function() {\n            return this._timeSlotCollections.length;\n        },\n\n        daySlotCollectionCount: function() {\n            return this._daySlotCollections.length;\n        },\n\n        _refreshSlotCollections: function() {\n            var slotCollections = [this._timeSlotCollections || [], this._daySlotCollections || []];\n\n            for (var slotCollectionIndex = 0; slotCollectionIndex < slotCollections.length; slotCollectionIndex++) {\n                var collections = slotCollections[slotCollectionIndex];\n                for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n                    var collection = collections[collectionIndex];\n                    collection.refresh();\n                }\n            }\n        },\n\n        daySlotByPosition: function(x, y, byDate) {\n            return this._slotByPosition(x, y, this._daySlotCollections, byDate);\n        },\n\n        timeSlotByPosition: function(x, y, byDate) {\n            return this._slotByPosition(x, y, this._timeSlotCollections, byDate);\n        },\n\n        _slotByPosition: function(x, y, collections, byDate) {\n            for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n                var collection = collections[collectionIndex];\n\n                for (var slotIndex = 0; slotIndex < collection.count(); slotIndex++) {\n                    var slot = collection.at(slotIndex);\n                    var width = slot.offsetWidth;\n                    var height = slot.offsetHeight;\n                    var nextSlot;\n\n                    var horizontalEnd = slot.offsetLeft + width;\n                    var verticalEnd = slot.offsetTop + height;\n\n                    if (!byDate) {\n                         nextSlot = collection.at(slotIndex + 1);\n                    }\n\n                    if (nextSlot) {\n                        if (nextSlot.offsetLeft != slot.offsetLeft) {\n                            if (this._isRtl) {\n                                horizontalEnd = slot.offsetLeft + (slot.offsetLeft - nextSlot.offsetLeft);\n                            } else {\n                                horizontalEnd = nextSlot.offsetLeft;\n                            }\n                        } else {\n                            verticalEnd = nextSlot.offsetTop;\n                        }\n                    }\n\n                    if (x >= slot.offsetLeft && x < horizontalEnd &&\n                        y >= slot.offsetTop && y < verticalEnd) {\n                        return slot;\n                    }\n                }\n            }\n         },\n\n        refresh: function() {\n            var collectionIndex;\n\n            for (collectionIndex = 0; collectionIndex < this._daySlotCollections.length; collectionIndex++) {\n                this._daySlotCollections[collectionIndex].refresh();\n            }\n\n            for (collectionIndex = 0; collectionIndex < this._timeSlotCollections.length; collectionIndex++) {\n                this._timeSlotCollections[collectionIndex].refresh();\n            }\n        },\n\n        timeSlotRanges: function(startTime, endTime) {\n            var collections = this._timeSlotCollections;\n            var start = this._startSlot(startTime, collections);\n            var firstIndex, lastIndex;\n\n            if (!start.inRange && startTime >= start.slot.end) {\n                firstIndex = start.slot.collectionIndex + 1;\n                start = null;\n            }\n\n            var end = start;\n\n            if (startTime < endTime) {\n                end = this._endSlot(endTime, collections);\n            }\n\n            if (end && !end.inRange && endTime <= end.slot.start) {\n                lastIndex = end.slot.collectionIndex;\n\n                if (endTime === end.slot.start && ((start && lastIndex > start.slot.collectionIndex) || (lastIndex > firstIndex))) {\n                    lastIndex -= 1;\n                }\n\n                end = null;\n            }\n\n            if (start === null && end === null) {\n                if (endTime - startTime < kendo.date.MS_PER_DAY) {\n                    return [];\n                } else {\n                    start = {\n                        inRange: true,\n                        slot: collections[firstIndex].first()\n                    };\n\n                    end = {\n                        inRange: true,\n                        slot: collections[lastIndex].last()\n                    };\n                }\n            }\n\n            if (start === null) {\n                if (end.slot.end <= startTime) {\n                    return [];\n                }\n\n                start = {\n                    inRange: true,\n                    slot: (collections[firstIndex] || collections[end.slot.collectionIndex]).first()\n                };\n            }\n\n            if (end === null) {\n                if (start.slot.start >= endTime) {\n                    return [];\n                }\n\n                end = {\n                    inRange: true,\n                    slot: (collections[lastIndex] || collections[start.slot.collectionIndex]).last()\n                };\n            }\n\n            return this._continuousRange(TimeSlotRange, collections, start, end);\n        },\n\n        daySlotRanges: function(startTime, endTime, isAllDay) {\n            var collections = this._daySlotCollections;\n\n            var start = this._startSlot(startTime, collections, isAllDay);\n\n            if (!start.inRange && startTime >= start.slot.end) {\n                start = null;\n            }\n\n            var end = start;\n\n            if (startTime < endTime) {\n                end = this._endSlot(endTime, collections, isAllDay);\n            }\n\n            if (end && !end.inRange && endTime <= end.slot.start) {\n                end = null;\n            }\n\n            if (start === null && end === null) {\n                return [];\n            }\n\n            if (start === null) {\n                if (end.slot.end <= startTime) {\n                    return [];\n                }\n\n                do {\n                    startTime += kendo.date.MS_PER_DAY;\n                    start = this._startSlot(startTime, collections, isAllDay);\n                } while (!start.inRange && startTime >= start.slot.end);\n            }\n\n            if (end === null) {\n                if (start.slot.start >= endTime) {\n                    return [];\n                }\n\n                do {\n                    endTime -= kendo.date.MS_PER_DAY;\n                    end = this._endSlot(endTime, collections, isAllDay);\n                } while (!end.inRange && endTime <= end.slot.start);\n            }\n\n            return this._continuousRange(DaySlotRange, collections, start, end);\n        },\n\n        _continuousRange: function(range, collections, start, end) {\n            var startSlot = start.slot;\n            var endSlot = end.slot;\n\n            var startIndex = startSlot.collectionIndex;\n            var endIndex = endSlot.collectionIndex;\n\n            var ranges = [];\n\n            for (var collectionIndex = startIndex; collectionIndex <= endIndex; collectionIndex++) {\n                var collection = collections[collectionIndex];\n\n                var first = collection.first();\n                var last = collection.last();\n                var head = false;\n                var tail = false;\n\n                if (collectionIndex == startIndex) {\n                    tail = !start.inRange;\n                }\n\n                if (collectionIndex == endIndex) {\n                    head = !end.inRange;\n                }\n\n                if (first.start < startSlot.start) {\n                    first = startSlot;\n                }\n\n                if (last.start > endSlot.start) {\n                    last = endSlot;\n                }\n\n                if (startIndex < endIndex) {\n                    if (collectionIndex == startIndex) {\n                        head = true;\n                    } else if (collectionIndex == endIndex) {\n                        tail = true;\n                    } else {\n                        head = tail = true;\n                    }\n                }\n\n                ranges.push(new range({\n                    start: first,\n                    end: last,\n                    collection: collection,\n                    head: head,\n                    tail: tail\n                }));\n            }\n\n            return ranges;\n        },\n\n        slotRanges: function(event, isDay) {\n            var startTime = event._startTime || kendo.date.toUtcTime(event.start);\n            var endTime = event._endTime || kendo.date.toUtcTime(event.end);\n\n            if (isDay === undefined) {\n                if (this._enforceAllDaySlot) {\n                    isDay = event.isMultiDay();\n                } else {\n                    isDay = event.isAllDay;\n                }\n            }\n\n            if (isDay) {\n                return this.daySlotRanges(startTime, endTime, event.isAllDay);\n            }\n\n            return this.timeSlotRanges(startTime, endTime);\n        },\n\n        ranges: function(startTime, endTime, isDay, isAllDay) {\n            if (typeof startTime != \"number\") {\n                startTime = kendo.date.toUtcTime(startTime);\n            }\n\n            if (typeof endTime != \"number\") {\n                endTime = kendo.date.toUtcTime(endTime);\n            }\n\n            if (isDay) {\n                return this.daySlotRanges(startTime, endTime, isAllDay);\n            }\n\n            return this.timeSlotRanges(startTime, endTime);\n        },\n\n        _startCollection: function(date, collections) {\n            for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n                var collection = collections[collectionIndex];\n\n                if (collection.startInRange(date)) {\n                    return collection;\n                }\n            }\n\n            return null;\n        },\n\n        _endCollection: function(date, collections, isAllDay) {\n            for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n                var collection = collections[collectionIndex];\n\n                if (collection.endInRange(date, isAllDay)) {\n                    return collection;\n                }\n            }\n\n            return null;\n        },\n\n        _getCollections: function(isDay) {\n            return isDay ? this._daySlotCollections : this._timeSlotCollections;\n        },\n\n        continuousSlot: function(slot, reverse) {\n            var pad = reverse ? -1 : 1;\n            var collections = this._getCollections(slot.isDaySlot);\n            var collection = collections[slot.collectionIndex + pad];\n\n            return collection ? collection[reverse ? \"last\" : \"first\"]() : undefined;\n        },\n\n        firstSlot: function() {\n            var collections = this._getCollections(this.daySlotCollectionCount());\n\n            return collections[0].first();\n        },\n\n        lastSlot: function() {\n            var collections = this._getCollections(this.daySlotCollectionCount());\n\n            return collections[collections.length - 1].last();\n        },\n\n        upSlot: function(slot, keepCollection, groupByDateVertically) {\n            var that = this;\n            var moveToDaySlot = function(isDaySlot, collectionIndex, index) {\n                var isFirstCell = index === 0;\n\n                if (!keepCollection && !isDaySlot && isFirstCell && that.daySlotCollectionCount()) {\n                    return that._daySlotCollections[0].at(collectionIndex);\n                }\n            };\n\n            if (!this.timeSlotCollectionCount()) {\n                keepCollection = true;\n            }\n\n            return this._verticalSlot(slot, -1, moveToDaySlot, groupByDateVertically);\n        },\n\n        downSlot: function(slot, keepCollection, groupByDateVertically) {\n            var that = this;\n            var moveToTimeSlot = function(isDaySlot, collectionIndex, index) {\n                if (!keepCollection && isDaySlot && that.timeSlotCollectionCount()) {\n                    return that._timeSlotCollections[index].at(0);\n                }\n            };\n\n            if (!this.timeSlotCollectionCount()) {\n                keepCollection = true;\n            }\n\n            return this._verticalSlot(slot, 1, moveToTimeSlot, groupByDateVertically);\n        },\n\n        leftSlot: function(slot, groupByDateVertically) {\n            return this._horizontalSlot(slot, -1, groupByDateVertically);\n        },\n\n        rightSlot: function(slot, groupByDateVertically) {\n            return this._horizontalSlot(slot, 1, groupByDateVertically);\n        },\n\n        _horizontalSlot: function(slot, step, groupByDateVertically) {\n            var index = slot.index;\n            var isDaySlot = slot.isDaySlot;\n            var collectionIndex = slot.collectionIndex;\n            var collections = this._getCollections(isDaySlot);\n\n            isDaySlot = groupByDateVertically ? false : isDaySlot;\n\n            if (isDaySlot) {\n                index += step;\n            } else {\n                collectionIndex += step;\n            }\n\n            var collection = collections[collectionIndex];\n\n            return collection ? collection.at(index) : undefined;\n        },\n\n        _verticalSlot: function(slot, step, swapCollection, groupByDateVertically) {\n            var index = slot.index;\n            var isDaySlot = slot.isDaySlot;\n            var collectionIndex = slot.collectionIndex;\n            var collections = this._getCollections(isDaySlot);\n\n            slot = swapCollection(isDaySlot, collectionIndex, index);\n            if (slot) {\n                return slot;\n            }\n\n            isDaySlot = groupByDateVertically ? false : isDaySlot;\n\n            if (isDaySlot) {\n                collectionIndex += step;\n            } else {\n                index += step;\n            }\n\n            var collection = collections[collectionIndex];\n\n            return collection ? collection.at(index) : undefined;\n        },\n\n        _collection: function(index, multiday) {\n            var collections = multiday ? this._daySlotCollections : this._timeSlotCollections;\n\n            return collections[index];\n        },\n\n        _startSlot: function(time, collections, isAllDay) {\n            var collection = this._startCollection(time, collections);\n            var inRange = true;\n            var index = 0;\n\n            if (!collection) {\n                collection = collections[index];\n\n                while (index < collections.length - 1 && collection._start < time) {\n                    index++;\n                    collection = collections[index];\n                }\n\n                inRange = false;\n            }\n\n            var slot = collection.slotByStartDate(time, isAllDay);\n\n            if (!slot) {\n                slot = collection.first();\n                inRange = false;\n            }\n\n            return {\n                slot: slot,\n                inRange: inRange\n            };\n        },\n\n        _endSlot: function(time, collections, isAllDay) {\n            var collection = this._endCollection(time, collections, isAllDay);\n            var inRange = true;\n            var index = collections.length - 1;\n\n            if (!collection) {\n                collection = collections[index];\n\n                while (index > 0 && collection._start > time) {\n                    index--;\n                    collection = collections[index];\n                }\n\n                inRange = false;\n            }\n\n            var slot = collection.slotByEndDate(time, isAllDay);\n\n            if (!slot) {\n                if (time <= collection.first().start) {\n                    slot = collection.first();\n                } else {\n                    slot = collection.last();\n                }\n\n                inRange = false;\n            }\n\n            return {\n                slot: slot,\n                inRange: inRange\n            };\n        },\n\n        getSlotCollection: function(index, isDay) {\n            return this[isDay ? \"getDaySlotCollection\" : \"getTimeSlotCollection\"](index);\n        },\n\n        getTimeSlotCollection: function(index) {\n            return this._timeSlotCollections[index];\n        },\n\n        getDaySlotCollection: function(index) {\n            return this._daySlotCollections[index];\n        }\n    });\n\n    var SlotRange = kendo.Class.extend({\n        init: function(options) {\n            $.extend(this, options);\n        },\n\n        innerHeight: function() {\n            var collection = this.collection;\n\n            var startIndex = this.start.index;\n\n            var endIndex = this.end.index;\n\n            var result = 0;\n\n            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n               result += collection.at(slotIndex).offsetHeight;\n            }\n\n            return result;\n        },\n\n        events: function() {\n            return this.collection.events();\n        },\n\n        addEvent: function(event) {\n            this.events().push(event);\n        },\n\n        startSlot: function() {\n            if (this.start.offsetLeft > this.end.offsetLeft) {\n                return this.end;\n            }\n            return this.start;\n        },\n\n        endSlot: function() {\n            if (this.start.offsetLeft > this.end.offsetLeft) {\n                return this.start;\n            }\n            return this.end;\n        }\n    });\n\n    var TimeSlotRange = SlotRange.extend({\n        innerHeight: function() {\n            var collection = this.collection;\n\n            var startIndex = this.start.index;\n\n            var endIndex = this.end.index;\n\n            var result = 0;\n\n            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n               result += collection.at(slotIndex).offsetHeight;\n            }\n\n            return result;\n        },\n\n        outerRect: function(start, end, snap) {\n            return this._rect(\"offset\", start, end, snap);\n        },\n\n        _rect: function(property, start, end, snap) {\n            var top;\n            var bottom;\n            var left;\n            var right;\n            var startSlot = this.start;\n            var endSlot = this.end;\n            var isRtl = kendo.support.isRtl(startSlot.element);\n\n            if (typeof start != \"number\") {\n                start = kendo.date.toUtcTime(start);\n            }\n\n            if (typeof end != \"number\") {\n                end = kendo.date.toUtcTime(end);\n            }\n\n            if (snap) {\n                top = startSlot.offsetTop;\n                bottom = endSlot.offsetTop + endSlot[property + \"Height\"];\n                if (isRtl) {\n                    left = endSlot.offsetLeft;\n                    right = startSlot.offsetLeft + startSlot[property + \"Width\"];\n                } else {\n                    left = startSlot.offsetLeft;\n                    right = endSlot.offsetLeft + endSlot[property + \"Width\"];\n                }\n            } else {\n                var startOffset = start - startSlot.start;\n\n                if (startOffset < 0) {\n                    startOffset = 0;\n                }\n\n                var startSlotDuration = startSlot.end - startSlot.start;\n\n                top = startSlot.offsetTop + startSlot[property + \"Height\"] * startOffset / startSlotDuration;\n\n                var endOffset = endSlot.end - end;\n\n                if (endOffset < 0) {\n                    endOffset = 0;\n                }\n\n                var endSlotDuration = endSlot.end - endSlot.start;\n\n                bottom = endSlot.offsetTop + endSlot[property + \"Height\"] - endSlot[property + \"Height\"] * endOffset / endSlotDuration;\n\n                if (isRtl) {\n                    left = Math.round(endSlot.offsetLeft + endSlot[property + \"Width\"] * endOffset / endSlotDuration);\n                    right = Math.round(startSlot.offsetLeft + startSlot[property + \"Width\"] - startSlot[property + \"Width\"] * startOffset / startSlotDuration);\n                } else {\n                    left = Math.round(startSlot.offsetLeft + startSlot[property + \"Width\"] * startOffset / startSlotDuration);\n                    right = Math.round(endSlot.offsetLeft + endSlot[property + \"Width\"] - endSlot[property + \"Width\"] * endOffset / endSlotDuration);\n                }\n            }\n\n            return {\n                top: top,\n                bottom: bottom,\n                //first column has no left border\n                left: left === 0 ? left : left + 1,\n                right: right\n            };\n        },\n\n        innerRect: function(start, end, snap) {\n            return this._rect(\"client\", start, end, snap);\n        }\n    });\n\n    var DaySlotRange = SlotRange.extend({\n        innerWidth: function() {\n            var collection = this.collection;\n\n            var startIndex = this.start.index;\n\n            var endIndex = this.end.index;\n\n            var result = 0;\n\n            var width = startIndex !== endIndex ? \"offsetWidth\" : \"clientWidth\";\n\n            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n               result += collection.at(slotIndex)[width];\n            }\n\n            return result;\n        }\n    });\n\n    var SlotCollection = kendo.Class.extend({\n        init: function(startDate, endDate, groupIndex, collectionIndex) {\n            this._slots = [];\n\n            this._events = [];\n\n            this._start = kendo.date.toUtcTime(startDate);\n\n            this._end = kendo.date.toUtcTime(endDate);\n\n            this._groupIndex = groupIndex;\n\n            this._collectionIndex = collectionIndex;\n        },\n        refresh: function() {\n            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n                this._slots[slotIndex].refresh();\n            }\n        },\n\n        startInRange: function(date) {\n            return this._start <= date && date < this._end;\n        },\n\n        endInRange: function(date, isAllDay) {\n            var end = isAllDay ? date < this._end : date <= this._end;\n            return this._start <= date && end;\n        },\n\n        slotByStartDate: function(date) {\n            var time = date;\n\n            if (typeof time != \"number\") {\n                time = kendo.date.toUtcTime(date);\n            }\n\n            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n                var slot = this._slots[slotIndex];\n\n                if (slot.startInRange(time)) {\n                    return slot;\n                }\n            }\n\n            return null;\n        },\n\n        slotByEndDate: function(date, allday) {\n            var time = date;\n\n            if (typeof time != \"number\") {\n                time = kendo.date.toUtcTime(date);\n            }\n\n            if (allday) {\n                return this.slotByStartDate(date, false);\n            }\n\n            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n                var slot = this._slots[slotIndex];\n\n                if (slot.endInRange(time)) {\n                    return slot;\n                }\n            }\n\n            return null;\n        },\n\n        count: function() {\n            return this._slots.length;\n        },\n        events: function() {\n            return this._events;\n        },\n        addTimeSlot: function(element, start, end, isHorizontal) {\n            var slot = new TimeSlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, isHorizontal);\n\n            this._slots.push(slot);\n        },\n        addDaySlot: function(element, start, end, eventCount) {\n            var slot = new DaySlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, eventCount);\n\n            this._slots.push(slot);\n        },\n        first: function() {\n            return this._slots[0];\n        },\n        last: function() {\n            return this._slots[this._slots.length - 1];\n        },\n        at: function(index) {\n            return this._slots[index];\n        }\n    });\n\n    var Slot = kendo.Class.extend({\n        init: function(element, start, end, groupIndex, collectionIndex, index) {\n            this.element = element;\n            this.clientWidth = element.clientWidth;\n            this.clientHeight = element.clientHeight;\n            this.offsetWidth = element.offsetWidth;\n            this.offsetHeight = element.offsetHeight;\n            this.offsetTop = element.offsetTop;\n            this.offsetLeft = element.offsetLeft;\n\n            this.start = start;\n            this.end = end;\n            this.element = element;\n            this.groupIndex = groupIndex;\n            this.collectionIndex = collectionIndex;\n            this.index = index;\n            this.isDaySlot = false;\n        },\n\n        refresh: function() {\n            var element = this.element;\n\n            this.clientWidth = element.clientWidth;\n            this.clientHeight = element.clientHeight;\n            this.offsetWidth = element.offsetWidth;\n            this.offsetHeight = element.offsetHeight;\n            this.offsetTop = element.offsetTop;\n            this.offsetLeft = element.offsetLeft;\n        },\n\n        startDate: function() {\n            return kendo.timezone.toLocalDate(this.start);\n        },\n\n        endDate: function() {\n            return kendo.timezone.toLocalDate(this.end);\n        },\n\n        startInRange: function(date) {\n            return this.start <= date && date < this.end;\n        },\n\n        endInRange: function(date) {\n            return this.start < date && date <= this.end;\n        },\n\n        startOffset: function() {\n           return this.start;\n        },\n\n        endOffset: function() {\n            return this.end;\n        }\n    });\n\n    var TimeSlot = Slot.extend({\n        init: function(element, start, end, groupIndex, collectionIndex, index, isHorizontal) {\n            Slot.fn.init.apply(this, arguments);\n\n            this.isHorizontal = isHorizontal ? true : false;\n        },\n\n        offsetX: function(rtl, offset) {\n            if (rtl) {\n                return this.offsetLeft + offset;\n            } else {\n                return this.offsetLeft + offset;\n            }\n        },\n\n        startInRange: function(date) {\n            return this.start <= date && date < this.end;\n        },\n\n        endInRange: function(date) {\n            return this.start < date && date <= this.end;\n        },\n\n        startOffset: function(x, y, snap) {\n            if (snap) {\n                return this.start;\n            }\n\n            var offset = $(this.element).offset();\n\n            var duration = this.end - this.start;\n            var difference;\n            var time;\n\n            if (this.isHorizontal) {\n                //need update\n                var isRtl = kendo.support.isRtl(this.element);\n                difference = x - offset.left;\n                time = Math.floor(duration * ( difference / this.offsetWidth));\n\n                if (isRtl) {\n                    return this.start + duration - time;\n                }\n            } else {\n                difference = y - offset.top;\n                time = Math.floor(duration * ( difference / this.offsetHeight));\n            }\n\n            return this.start + time;\n        },\n\n        endOffset: function(x, y, snap) {\n            if (snap) {\n                return this.end;\n            }\n\n            var offset = $(this.element).offset();\n\n            var duration = this.end - this.start;\n            var difference;\n            var time;\n\n            if (this.isHorizontal) {\n                //need update\n                var isRtl = kendo.support.isRtl(this.element);\n                difference = x - offset.left;\n                time = Math.floor(duration * ( difference / this.offsetWidth));\n\n                if (isRtl) {\n                    return this.start + duration - time;\n                }\n            } else {\n                difference = y - offset.top;\n                time = Math.floor(duration * ( difference / this.offsetHeight));\n            }\n\n            return this.start + time;\n        }\n    });\n\n    var DaySlot = Slot.extend({\n        init: function(element, start, end, groupIndex, collectionIndex, index, eventCount) {\n            Slot.fn.init.apply(this, arguments);\n\n            this.eventCount = eventCount;\n            this.isDaySlot = true;\n\n            if (this.element.children.length) {\n                var firstChild = this.element.children[0];\n\n                this.firstChildHeight = firstChild.offsetHeight;\n                this.firstChildTop = firstChild.offsetTop;\n            } else {\n                this.firstChildHeight = 3;\n                this.firstChildTop = 0;\n            }\n        },\n\n        startDate: function() {\n            var date = new Date(this.start);\n\n            return kendo.timezone.apply(date, \"Etc/UTC\");\n        },\n\n        endDate: function() {\n            var date = new Date(this.end);\n\n            return kendo.timezone.apply(date, \"Etc/UTC\");\n        },\n\n        startInRange: function(date) {\n            return this.start <= date && date < this.end;\n        },\n\n        endInRange: function(date) {\n            return this.start < date && date <= this.end;\n        }\n    });\n\n    var scrollbarWidth;\n    function scrollbar() {\n        scrollbarWidth = scrollbarWidth ? scrollbarWidth : kendo.support.scrollbar();\n        return scrollbarWidth;\n    }\n\n    kendo.ui.SchedulerView = Widget.extend({\n        init: function(element, options) {\n            Widget.fn.init.call(this, element, $.extend({}, this.options, options));\n\n            this._normalizeOptions();\n            this._initDefaultTools();\n            this._scrollbar = scrollbar();\n            this._isRtl = kendo.support.isRtl(element);\n            this._resizeHint = $();\n            this._moveHint = $();\n            this._cellId = kendo.guid();\n            this._resourcesForGroups();\n            this._selectedSlots = [];\n            this.element.attr(\"role\", \"application\");\n        },\n\n        options: {\n            messages: {\n                ariaEventLabel: {\n                    on: \"on\",\n                    at: \"at\",\n                    to: \"to\",\n                    allDay: \"(all day)\",\n                    prefix: \"\"\n                }\n            }\n        },\n\n        visibleEndDate: function() {\n            return this.endDate();\n        },\n\n        _initDefaultTools: function() {\n            this._defaultTools = {\n                todayMobile: {\n                    type: \"button\",\n                    fillMode: \"flat\",\n                    text: this.options.messages.today,\n                    click: this._footerTodayClickHandler.bind(this),\n                    attributes: {\n                        class: \"k-scheduler-today\"\n                    }\n                },\n                fulldayDesktop: {\n                    type: \"button\",\n                    icon: \"clock\",\n                    text: this.options.showWorkHours ? this.options.messages.showFullDay : this.options.messages.showWorkDay,\n                    click: this.toggleFullDay ? this.toggleFullDay.bind(this) : $.noop,\n                    attributes: {\n                        class: \"k-scheduler-fullday\"\n                    }\n                },\n                fulldayMobile: {\n                    type: \"button\",\n                    fillMode: \"flat\",\n                    text: this.options.showWorkHours ? this.options.messages.showFullDay : this.options.messages.showWorkDay,\n                    click: this.toggleFullDay ? this.toggleFullDay.bind(this) : $.noop,\n                    attributes: {\n                        class: \"k-scheduler-fullday\"\n                    }\n                }\n            };\n        },\n\n        _normalizeOptions: function() {\n            var options = this.options;\n\n            if (options.startTime) {\n                options.startTime.setMilliseconds(0);\n            }\n\n            if (options.endTime) {\n                options.endTime.setMilliseconds(0);\n            }\n\n            if (options.workDayStart) {\n                options.workDayStart.setMilliseconds(0);\n            }\n\n            if (options.workDayEnd) {\n                options.workDayEnd.setMilliseconds(0);\n            }\n        },\n\n        _isMobile: function() {\n            var options = this.options;\n            return (options.mobile === true && kendo.support.mobileOS) || options.mobile === \"phone\" || options.mobile === \"tablet\";\n        },\n\n        _addResourceView: function() {\n            var resourceView = new ResourceView(this.groups.length, this._isRtl, this.options.enforceAllDaySlot);\n\n            this.groups.push(resourceView);\n\n            return resourceView;\n        },\n\n        _refreshResourceViews: function() {\n            var groups = this.groups;\n\n            if (groups) {\n                for (var i = 0; i < groups.length; i++) {\n                    groups[i]._refreshSlotCollections();\n                }\n            }\n        },\n\n        dateForTitle: function() {\n            return kendo.format(this.options.selectedDateFormat, this.startDate(), this.endDate());\n        },\n\n        shortDateForTitle: function() {\n            return kendo.format(this.options.selectedShortDateFormat, this.startDate(), this.endDate());\n        },\n\n        mobileDateForTitle: function() {\n            return kendo.format(this.options.selectedMobileDateFormat || this.options.selectedShortDateFormat, this.startDate(), this.endDate());\n        },\n\n        _changeGroup: function(selection, previous) {\n            var method = previous ? \"prevGroupSlot\" : \"nextGroupSlot\";\n            var slot = this[method](selection.start, selection.groupIndex, selection.isAllDay);\n\n            if (slot) {\n                selection.groupIndex += previous ? -1 : 1;\n            }\n\n            if (this._isGroupedByDate() && !slot) {\n               selection.groupIndex = previous ? this.groups.length - 1 : 0;\n            }\n\n            return slot;\n        },\n\n        _changeDate: function(selection, slot, previous) {\n            var group = this.groups[selection.groupIndex];\n            var collections, index;\n\n            if (previous) {\n                  collections = group._getCollections(false);\n                  index = group.daySlotCollectionCount() ? slot.index - 1 : slot.collectionIndex - 1;\n\n                  if (index >= 0) {\n                      return collections[index]._slots[collections[index]._slots.length - 1];\n                  }\n              } else {\n                  collections = group._getCollections(group.daySlotCollectionCount());\n                  index = group.daySlotCollectionCount() ? 0 : slot.collectionIndex + 1;\n                  var slotIndex = group.daySlotCollectionCount() ? slot.collectionIndex + 1 : 0;\n\n                  if (collections[index] && collections[index]._slots[slotIndex]) {\n                      return collections[index]._slots[slotIndex];\n                  }\n               }\n        },\n\n        _changeGroupContinuously: function() {\n            return null;\n        },\n\n        _changeViewPeriod: function() {\n            return false;\n        },\n\n        _isInRange: function(newStart, newEnd) {\n            if (!newStart || !newEnd || !this.options.min || !this.options.max) {\n                return false;\n            }\n            return getDate(newStart) <= getDate(this.options.min) || getDate(newEnd) >= getDate(this.options.max);\n        },\n\n        _horizontalSlots: function(selection, ranges, multiple, reverse) {\n            var method = reverse ? \"leftSlot\" : \"rightSlot\";\n            var horizontalRange = {\n                 startSlot: ranges[0].start,\n                 endSlot: ranges[ranges.length - 1].end\n             };\n            var group = this.groups[selection.groupIndex];\n            var isVertical = this._isVerticallyGrouped();\n\n            if (!multiple) {\n                var slot = this._normalizeHorizontalSelection(selection, ranges, reverse);\n                if (slot) {\n                    horizontalRange.startSlot = horizontalRange.endSlot = slot;\n                }\n            }\n\n            if (this._isGroupedByDate() && !multiple) {\n                  var tempSlot = this._changeGroup(selection, reverse);\n\n                  if (!tempSlot)\n                  {\n                    horizontalRange = this._getNextHorizontalRange(group, method, horizontalRange);\n                  } else {\n                      horizontalRange.startSlot = horizontalRange.endSlot = tempSlot;\n                  }\n            } else {\n                  horizontalRange.startSlot = group[method](horizontalRange.startSlot);\n                  horizontalRange.endSlot = group[method](horizontalRange.endSlot);\n\n                  if (!multiple && !isVertical && (!horizontalRange.startSlot || !horizontalRange.endSlot)) {\n                        horizontalRange.startSlot = horizontalRange.endSlot = this._changeGroup(selection, reverse);\n                  }\n            }\n\n            var continuousSlot;\n\n            if ((!horizontalRange.startSlot || !horizontalRange.endSlot) && !this._isGroupedByDate()) {\n                continuousSlot = this._continuousSlot(selection, ranges, reverse);\n                continuousSlot = this._changeGroupContinuously(selection, continuousSlot, multiple, reverse);\n\n                if (continuousSlot) {\n                    horizontalRange.startSlot = horizontalRange.endSlot = continuousSlot;\n                }\n            }\n\n            return horizontalRange;\n        },\n\n         _getNextHorizontalRange: function(group, method, horizontalRange) {\n            if (!this._isVerticallyGrouped()) {\n                horizontalRange.startSlot = group[method](horizontalRange.startSlot);\n                horizontalRange.endSlot = group[method](horizontalRange.endSlot);\n            }\n\n             return horizontalRange;\n        },\n\n        _verticalSlots: function(selection, ranges, multiple, reverse) {\n            var group = this.groups[selection.groupIndex];\n            var slot;\n            var verticalRange = {\n                startSlot: ranges[0].start,\n                endSlot: ranges[ranges.length - 1].end\n            };\n\n            if (!multiple) {\n                slot = this._normalizeVerticalSelection(selection, ranges, reverse);\n                if (slot) {\n                    verticalRange.startSlot = verticalRange.endSlot = slot;\n                }\n            }\n\n            var method = reverse ? \"upSlot\" : \"downSlot\";\n\n            verticalRange = this._getNextVerticalRange(group, method, verticalRange, multiple);\n\n            if (!multiple && this._isVerticallyGrouped() && (!verticalRange.startSlot || !verticalRange.endSlot)) {\n                if (this._isGroupedByDate()) {\n                    verticalRange.startSlot = verticalRange.endSlot = this._changeDate(selection, slot, reverse);\n\n               } else {\n                    verticalRange.startSlot = verticalRange.endSlot = this._changeGroup(selection, reverse);\n               }\n            }\n\n            return verticalRange;\n        },\n\n        _getNextVerticalRange: function(group, method, verticalRange, multiple) {\n             verticalRange.startSlot = group[method](verticalRange.startSlot, multiple);\n             verticalRange.endSlot = group[method](verticalRange.endSlot, multiple);\n\n             return verticalRange;\n        },\n\n        _normalizeHorizontalSelection: function() {\n            return null;\n        },\n\n        _normalizeVerticalSelection: function(selection, ranges, reverse) {\n            var slot;\n\n            if (reverse) {\n                slot = ranges[0].start;\n            } else {\n                slot = ranges[ranges.length - 1].end;\n            }\n\n            return slot;\n        },\n\n        _continuousSlot: function() {\n            return null;\n        },\n\n        _footerTodayClickHandler: function(e) {\n            e.preventDefault();\n\n            var that = this;\n            var options = that.options;\n            var timezone = that.options.timezone;\n            var action = \"today\";\n            var currentDate = new Date();\n            var date;\n\n            if (timezone) {\n                var timezoneOffset = kendo.timezone.offset(currentDate, timezone);\n                date = kendo.timezone.convert(currentDate, currentDate.getTimezoneOffset(), timezoneOffset);\n            } else {\n                date = currentDate;\n            }\n\n            that.trigger(\"navigate\", { view: that.name || options.name, action: action, date: date });\n        },\n\n        _footerItems: function() {\n            var that = this,\n                items = [],\n                options = this.options;\n\n            if (that._isMobile()) {\n                items.push({\n                    type: \"button\",\n                    fillMode: \"flat\",\n                    text: options.messages.today,\n                    click: that._footerTodayClickHandler.bind(that),\n                    attributes: {\n                        class: \"k-scheduler-today\"\n                    }\n                });\n            }\n\n            return items;\n        },\n\n        _footer: function() {\n            if (this.options.footer === false) {\n                return;\n            }\n\n            var that = this,\n                items = that._footerItems();\n\n            if (items.length > 0) {\n                var html = $('<div class=\"k-scheduler-footer\">');\n\n                that.footer = html.appendTo(that.element);\n\n                that.footer.kendoToolBar({\n                    resizable: false,\n                    items: items\n                });\n            }\n        },\n\n        constrainSelection: function(selection) {\n            var group = this.groups[0];\n            var slot;\n\n            if (!this.inRange(selection)) {\n               slot = group.firstSlot();\n\n               selection.isAllDay = slot.isDaySlot;\n               selection.start = slot.startDate();\n               selection.end = slot.endDate();\n            } else {\n                if (!group.daySlotCollectionCount()) {\n                    selection.isAllDay = false;\n                } else if (!group.timeSlotCollectionCount()) {\n                    selection.isAllDay = true;\n                }\n           }\n\n            if (!this.groups[selection.groupIndex]) {\n                selection.groupIndex = 0;\n            }\n        },\n\n        move: function(selection, key, shift) {\n            var handled = false;\n            var group = this.groups[selection.groupIndex];\n            var verticalByDate = this._isGroupedByDate() && this._isVerticallyGrouped();\n\n            if (!group.timeSlotCollectionCount()) {\n                selection.isAllDay = true;\n            }\n\n            var ranges = group.ranges(selection.start, selection.end, selection.isAllDay, false);\n            var startSlot, endSlot, reverse, slots;\n\n            if (key === keys.DOWN || key === keys.UP) {\n                handled = true;\n                reverse = key === keys.UP;\n\n                this._updateDirection(selection, ranges, shift, reverse, true);\n\n                slots = this._verticalSlots(selection, ranges, shift, reverse);\n\n                if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, !verticalByDate)) {\n                    return handled;\n                }\n\n            } else if (key === keys.LEFT || key === keys.RIGHT) {\n                handled = true;\n                reverse = key === keys.LEFT;\n\n                this._updateDirection(selection, ranges, shift, reverse, false);\n\n                slots = this._horizontalSlots(selection, ranges, shift, reverse);\n\n                if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, verticalByDate)) {\n                    return handled;\n                }\n            }\n\n            if (handled) {\n                startSlot = slots.startSlot;\n                endSlot = slots.endSlot;\n\n                if (shift) {\n                    var backward = selection.backward;\n                    if (backward && startSlot) {\n                        selection.start = startSlot.startDate();\n                    } else if (!backward && endSlot) {\n                        selection.end = endSlot.endDate();\n                    }\n                } else if (startSlot && endSlot) {\n                    selection.isAllDay = startSlot.isDaySlot;\n                    selection.start = startSlot.startDate();\n                    selection.end = endSlot.endDate();\n                }\n\n                selection.events = [];\n            }\n\n            return handled;\n        },\n\n        moveToEventInGroup: function(group, slot, selectedEvents, prev) {\n            var events = group._continuousEvents || [];\n            var found, event;\n            var pad = prev ? -1 : 1;\n            var length = events.length;\n            var idx = prev ? length - 1 : 0;\n            var i, lastSelected;\n\n            if (selectedEvents.length) {\n                lastSelected = selectedEvents[selectedEvents.length - 1];\n\n                if (prev) {\n                    for (i = 0; i < events.length; i++) {\n                        if (events[i].uid === lastSelected) {\n                            idx = i + pad;\n                        }\n                    }\n                } else {\n                    for (i = events.length - 1; i > -1; i--) {\n                        if (events[i].uid === lastSelected) {\n                            idx = i + pad;\n                        }\n                    }\n                }\n            }\n\n            while (idx < length && idx > -1) {\n                event = events[idx];\n\n                if ( (!prev && event.start.startDate() >= slot.startDate()) ||\n                    (prev && event.start.startDate() <= slot.startDate()) ) {\n\n                    if (event && $.inArray(event.uid, selectedEvents) === -1) {\n                        found = !!event;\n                        break;\n                    }\n                }\n\n                idx += pad;\n            }\n\n            return event;\n        },\n\n        moveToEvent: function(selection, prev) {\n            var groupIndex = selection.groupIndex;\n\n            var group = this.groups[groupIndex];\n            var slot = group.ranges(selection.start, selection.end, this.name === \"month\" || selection.isAllDay, false)[0].start;\n\n            var length = this.groups.length;\n            var pad = prev ? -1 : 1;\n            var events = selection.events;\n            var event;\n\n            if (this._isGroupedByDate()) {\n                var allEvents = this._getAllEvents();\n                var uniqueAllEvents = this._getUniqueEvents(allEvents);\n                var sortedEvents = this._getSortedEvents(uniqueAllEvents);\n\n                if (events.length === 0) {\n                    var eventIndex = this._getNextEventIndexBySlot(slot, sortedEvents, groupIndex);\n\n                    if (prev) {\n                        eventIndex--;\n                    }\n\n                    event = sortedEvents[eventIndex];\n                } else {\n                     var idx = this._getStartIdx(events, sortedEvents);\n\n                    while (idx < sortedEvents.length && idx > -1) {\n                        if (events.length > 0) {\n                            slot = this._getSelectedSlot(slot, sortedEvents, event, idx, pad, prev);\n                        }\n\n                        if (!slot) {\n                            break;\n                        }\n\n                        if ( (!prev && sortedEvents[idx].start.startDate() >= slot.startDate()) ||\n                              (prev && sortedEvents[idx].start.startDate() <= slot.startDate())) {\n                             if (events[0] != sortedEvents[idx].uid) {\n                                 event = sortedEvents[idx];\n                                  break;\n                             }\n                        }\n                        idx += pad;\n                    }\n                }\n            } else {\n                  while (groupIndex < length && groupIndex > -1) {\n                    event = this.moveToEventInGroup(group, slot, events, prev);\n\n                    groupIndex += pad;\n                    group = this.groups[groupIndex];\n\n                    if (!group || event) {\n                        break;\n                    }\n\n                    events = [];\n                    if (prev) {\n                        slot = group.lastSlot();\n                    } else {\n                        slot = group.firstSlot(true);\n                    }\n                }\n            }\n\n            if (event) {\n                selection.events = [ event.uid ];\n                selection.start = event.start.startDate();\n                selection.end = event.end.endDate();\n                selection.isAllDay = event.start.isDaySlot;\n                selection.groupIndex = event.start.groupIndex;\n                selection.eventElement = event.element[0];\n            }\n\n            return !!event;\n        },\n\n        current: function(candidate) {\n            if (candidate !== undefined) {\n                this._current = candidate;\n                if (this.content.has(candidate)) {\n                    this._scrollTo(candidate, this.content[0]);\n                }\n            } else {\n                return this._current;\n            }\n        },\n\n        select: function(selection) {\n            this.clearSelection();\n\n            if (!this._selectEvents(selection)) {\n                this._selectSlots(selection);\n            }\n        },\n\n        _getNextEventIndexBySlot: function(slot, sortedEvents, groupIndex) {\n            var tempIndex = 0;\n            var slotStartDate = kendo.date.getDate(slot.startDate());\n\n            for (var i = 0; i < sortedEvents.length; i++) {\n                var eventStartDate = kendo.date.getDate(sortedEvents[i].start.startDate());\n                if (slotStartDate > eventStartDate) {\n                    tempIndex++;\n                    continue;\n                }\n\n                if (slotStartDate.getTime() === eventStartDate.getTime() && groupIndex > sortedEvents[i].start.groupIndex) {\n                      tempIndex++;\n                      continue;\n                }\n\n                if (slotStartDate.getTime() === eventStartDate.getTime() &&\n                    groupIndex >= sortedEvents[i].start.groupIndex &&\n                    slot.startDate() > sortedEvents[i].start.startDate()) {\n                    tempIndex++;\n                    continue;\n                 }\n\n                 break;\n            }\n            return tempIndex;\n        },\n\n        _getSelectedSlot: function(slot, sortedEvents, event, idx, pad, prev) {\n              if (sortedEvents[idx + pad] &&\n               sortedEvents[idx].start.groupIndex !== sortedEvents[idx + pad].start.groupIndex) {\n                    var groupIndex = sortedEvents[idx + pad].start.groupIndex;\n                    var group = this.groups[groupIndex];\n\n                    if (!group || event) {\n                       slot = null;\n                    }\n\n                    if (prev) {\n                        slot = group.lastSlot();\n                    } else {\n                        slot = group.firstSlot(true);\n                    }\n                }\n             return slot;\n        },\n\n        _getStartIdx: function(events, sortedEvents) {\n            var selectedEventIndex = 0;\n\n            $.each(sortedEvents, function() {\n                if (this.uid === events[0]) {\n                     return false;\n                }\n\n                selectedEventIndex++;\n            });\n\n            return selectedEventIndex;\n        },\n\n        _getAllEvents: function() {\n            var allEvents = [];\n            var groups = this.groups;\n\n            for (var idx = 0; idx < groups.length; idx++) {\n                if (groups[idx]._continuousEvents) {\n                    allEvents = allEvents.concat(groups[idx]._continuousEvents);\n                }\n            }\n\n            return allEvents;\n        },\n\n        _getUniqueEvents: function(allEvents) {\n            var uniqueAllEvents = [];\n\n            for (var i = 0; i < allEvents.length; i++) {\n                var exists = false;\n                for (var j = 0; j < uniqueAllEvents.length; j++) {\n                    if (allEvents[i].uid === uniqueAllEvents[j].uid) {\n                        exists = true;\n                        break;\n                    }\n                }\n\n                if (!exists) {\n                    uniqueAllEvents.push(allEvents[i]);\n                }\n            }\n\n            return uniqueAllEvents;\n        },\n\n        _getSortedEvents: function(uniqueAllEvents) {\n             return uniqueAllEvents.sort(function(first, second) {\n                var firstStartDate = first.start.startDate();\n                var secondStartDate = second.start.startDate();\n                var result = kendo.date.getDate(firstStartDate) - kendo.date.getDate(secondStartDate);\n\n                if (result === 0) {\n                    result = first.start.groupIndex - second.start.groupIndex;\n                }\n\n                if (result === 0) {\n                    result = firstStartDate.getTime() - secondStartDate.getTime();\n                }\n\n                if (result === 0) {\n                    if (first.start.isDaySlot && !second.start.isDaySlot) {\n                            result = -1;\n                    }\n\n                    if (!first.start.isDaySlot && second.start.isDaySlot) {\n                            result = 1;\n                    }\n                }\n\n                if (result === 0) {\n                    result = $(first.element).index() - $(second.element).index();\n                }\n\n                return result;\n            });\n        },\n\n        _selectSlots: function(selection) {\n            var isAllDay = selection.isAllDay;\n            var group = this.groups[selection.groupIndex];\n\n            if (!group.timeSlotCollectionCount()) {\n                isAllDay = true;\n            }\n\n            this._selectedSlots = [];\n\n            var ranges = group.ranges(selection.start, selection.end, isAllDay, false);\n            var element;\n            var slot;\n\n            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                var range = ranges[rangeIndex];\n                var collection = range.collection;\n\n                for (var slotIndex = range.start.index; slotIndex <= range.end.index; slotIndex++) {\n                    slot = collection.at(slotIndex);\n\n                    element = slot.element;\n                    addSelectedState(element);\n\n                    this._selectedSlots.push({\n                        start: slot.startDate(),\n                        end: slot.endDate(),\n                        element: element\n                    });\n                }\n            }\n\n            if (selection.backward) {\n                element = ranges[0].start.element;\n            }\n\n            this.current(element);\n        },\n\n        _selectEvents: function(selection) {\n            var found = false;\n            var events = selection.events;\n            var groupEvents = this._getAllEvents();\n            var idx, groupEvent, length = groupEvents.length;\n\n            if (!events[0] || !groupEvents[0]) {\n                return found;\n            }\n\n            var result = $();\n            selection.events = [];\n            for (idx = 0; idx < length; idx ++) {\n                if ($.inArray(groupEvents[idx].uid, events) > -1) {\n                    groupEvent = groupEvents[idx];\n                    result = result.add(groupEvent.element);\n                    if (selection.events.indexOf(groupEvent.uid) === -1) {\n                        selection.events.push(groupEvent.uid);\n                    }\n                }\n            }\n\n            if (result[0]) {\n                result.addClass(\"k-selected\");\n\n                if (selection.eventElement) {\n                    this.current(selection.eventElement);\n                } else {\n                    this.current(result.last()[0]);\n                }\n\n                this._selectedSlots = [];\n                found = true;\n            }\n\n            return found;\n        },\n\n        inRange: function(options) {\n            var startDate = this.startDate();\n            var endDate = kendo.date.addDays(this.endDate(), 1);\n            var start = options.start;\n            var end = options.end;\n\n            return startDate <= start && start < endDate && startDate < end && end <= endDate;\n        },\n\n        _resourceValue: function(resource, item) {\n            if (resource.valuePrimitive) {\n                item = kendo.getter(resource.dataValueField)(item);\n            }\n            return item;\n        },\n\n        _setResourceValue: function(groupLevelMember, resource, result) {\n            var value = groupLevelMember.value,\n                setter;\n\n            if (resource.multiple) {\n                value = [value];\n            }\n\n            setter = kendo.setter(resource.field);\n            setter(result, value);\n        },\n\n        _resourceBySlot: function(slot) {\n            var resources = this.groupedResources;\n            var result = {};\n\n            if (resources.length) {\n                var resourceIndex = slot.groupIndex,\n                    groupOptions = this.options.group,\n                    nestedMember = groupOptions.date || groupOptions.orientation === \"horizontal\" ? \"columns\" : \"rows\",\n                    levels = nestedMember === \"rows\" ? this.rowLevels : this.columnLevels,\n                    dateGroupCompensation = groupOptions.date && groupOptions.orientation === \"horizontal\" ? 1 : 0,\n                    groupLevel = levels[resources.length - 1 + dateGroupCompensation],\n                    resource = resources[resources.length - 1],\n                    groupLevelMember = groupLevel[resourceIndex],\n                    passedChildren, numberOfChildren, j, i;\n\n                this._setResourceValue(groupLevelMember, resource, result);\n\n                for (j = resources.length - 2; j >= 0; j--) {\n                    groupLevel = levels[j + dateGroupCompensation];\n                    resource = resources[j];\n                    passedChildren = 0;\n\n                    for (i = 0; i < groupLevel.length; i++) {\n                        groupLevelMember = groupLevel[i];\n                        numberOfChildren = groupLevelMember[nestedMember].length;\n\n                        if (numberOfChildren > resourceIndex - passedChildren) {\n                            this._setResourceValue(groupLevelMember, resource, result);\n\n                            i = groupLevel.length;\n                        } else {\n                            passedChildren += numberOfChildren;\n                        }\n                    }\n                }\n            }\n\n            return result;\n        },\n\n        _createResizeHint: function(left, top, width, height) {\n            return $(HINT).css({\n                left: left,\n                top: top,\n                width: width,\n                height: height\n            });\n        },\n\n        _removeResizeHint: function() {\n            this._resizeHint.remove();\n            this._resizeHint = $();\n        },\n\n        _removeMoveHint: function(uid) {\n            if (uid) {\n                this._moveHint.filter(\"[data-uid='\" + uid + \"']\").remove();\n\n                this._moveHint = this._moveHint.filter(\"[data-uid!='\" + uid + \"']\");\n            } else {\n                this._moveHint.remove();\n                this._moveHint = $();\n            }\n        },\n\n        _scrollTo: function(element, container) {\n            var elementOffset = element.offsetTop,\n                elementOffsetDir = element.offsetHeight,\n                containerScroll = container.scrollTop,\n                containerOffsetDir = container.clientHeight,\n                bottomDistance = elementOffset + elementOffsetDir,\n                result = 0;\n\n                if (containerScroll > elementOffset) {\n                    result = elementOffset;\n                } else if (bottomDistance > (containerScroll + containerOffsetDir)) {\n                    if (elementOffsetDir <= containerOffsetDir) {\n                        result = (bottomDistance - containerOffsetDir);\n                    } else {\n                        result = elementOffset;\n                    }\n                } else {\n                    result = containerScroll;\n                }\n                container.scrollTop = result;\n        },\n\n        _inverseEventColor: function(element) {\n            var eventColor = element.css(\"color\");\n            var eventColorIsDark = new Color(eventColor).isDark();\n            var eventBackground = element.css(\"background-color\");\n            var eventBackgroundIsDark = new Color(eventBackground).isDark();\n\n            if (eventColorIsDark == eventBackgroundIsDark) {\n                element.addClass(INVERSE_COLOR_CLASS);\n            }\n        },\n\n        // Possibly legacy code. Ensure clients do not use it before removing. Or throw warning.\n        // CSP: leave it as it is (for now).\n       _eventTmpl: function(template, wrapper) {\n           var options = this.options,\n               settings = $.extend({}, kendo.Template, options.templateSettings),\n               paramName = settings.paramName,\n               html = \"\",\n               type = typeof template,\n               state = { storage: {}, count: 0 };\n\n            if (type === \"function\") {\n                state.storage[\"tmpl\" + state.count] = template;\n                html += \"#=this.tmpl\" + state.count + \"(\" + paramName + \")#\";\n                state.count ++;\n            } else if (type === \"string\") {\n                html += template;\n            }\n\n            var tmpl = kendo.template(kendo.format(wrapper, html), settings);\n\n            if (state.count > 0) {\n                tmpl = tmpl.bind(state.storage);\n            }\n\n            return tmpl;\n       },\n\n        eventResources: function(event) {\n            var resources = [],\n                options = this.options;\n\n            if (!options.resources) {\n                return resources;\n            }\n\n            for (var idx = 0; idx < options.resources.length; idx++) {\n                var resource = options.resources[idx];\n                var field = resource.field;\n                var eventResources = kendo.getter(field)(event);\n\n                if (eventResources == null) {\n                    continue;\n                }\n\n                if (!resource.multiple) {\n                    eventResources = [eventResources];\n                }\n\n                var data = resource.dataSource.view();\n\n                for (var resourceIndex = 0; resourceIndex < eventResources.length; resourceIndex++) {\n                    var eventResource = null;\n\n                    var value = eventResources[resourceIndex];\n\n                    if (!resource.valuePrimitive) {\n                        value = kendo.getter(resource.dataValueField)(value);\n                    }\n\n                    for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                        if (data[dataIndex].get(resource.dataValueField) == value) {\n                            eventResource = data[dataIndex];\n                            break;\n                        }\n                    }\n\n                    if (eventResource !== null) {\n                        var resourceColor = kendo.getter(resource.dataColorField)(eventResource);\n                        resources.push({\n                            field: resource.field,\n                            title: resource.title,\n                            name: resource.name,\n                            text: kendo.getter(resource.dataTextField)(eventResource),\n                            value: value,\n                            color: resourceColor\n                        });\n                    }\n                }\n            }\n            return resources;\n        },\n\n        createLayout: function(layout) {\n            var allDayIndex = -1;\n\n            if (!layout.rows) {\n                layout.rows = [];\n            }\n\n            for (var idx = 0; idx < layout.rows.length; idx++) {\n                if (layout.rows[idx].allDay) {\n                    allDayIndex = idx;\n                    break;\n                }\n            }\n\n            var allDaySlot = layout.rows[allDayIndex];\n\n            if (allDayIndex >= 0) {\n                layout.rows.splice(allDayIndex, 1);\n            }\n\n            var columnLevels = this.columnLevels = levels(layout, \"columns\");\n            var rowLevels = this.rowLevels = levels(layout, \"rows\");\n\n            if (this._isVirtualized()) {\n                this._trimRowLevels(rowLevels);\n            }\n\n            this.table = $('<table role=\"presentation\" class=\"k-scheduler-layout k-scheduler-' + this.name + 'view\"><tbody></tbody></table>');\n\n            var rowCount = rowLevels[rowLevels.length - 1].length;\n\n            this.table.find(\"tbody\").first().append(this._topSection(columnLevels, allDaySlot, rowCount));\n            this.table.find(\"tbody\").first().append(this._bottomSection(columnLevels, rowLevels, rowCount));\n            this.element.append(this.table);\n\n            if (this._isVirtualized()) {\n                this._updateDomRowLevels();\n            }\n\n            // Enable horizontal scrolling when mobile, grouped and less than 1024px width\n            if (this._isMobile() &&\n                    columnLevels.length > 1 &&\n                    this._groupOrientation() === \"horizontal\" &&\n                    kendo._outerWidth($(window)) < MIN_HORIZONTAL_SCROLL_SIZE ) {\n\n                this.table.find(\".k-scheduler-content .k-scheduler-table\").width((columnLevels[columnLevels.length - 2].length * 100) + \"%\");\n                this.table.find(\".k-scheduler-header .k-scheduler-table\").width((columnLevels[columnLevels.length - 2].length * 100) + \"%\");\n            }\n\n            this._scroller();\n        },\n\n        _isVirtualized: function() {\n            return this.options.virtual && this.rowLevels.length > 1 && this._isVerticallyGrouped();\n        },\n\n        _trimRowLevels: function(rowLevels) {\n            var lastGroup = rowLevels[rowLevels.length - 2];\n            var cachedRowLevels = this.cachedRowLevels || [];\n            var levelMarker;\n\n            this._hasContentToRender = true;\n\n            var stopAtLevel = function(levels, index) {\n                var hasParent = levels[index - 1].length > 0,\n                parentLevel, parentValue;\n\n                if (hasParent) {\n                    parentLevel = levels[index - 1][0];\n                    parentValue = levels[index][0].parentValue;\n\n                    return parentLevel.value !== parentValue;\n                } else {\n                    return true;\n                }\n            };\n\n            for (var rowLevelIndex = rowLevels.length - 2; rowLevelIndex >= 0; rowLevelIndex--) {\n                var stop = false;\n                if (rowLevelIndex > 0 && stopAtLevel(rowLevels, rowLevelIndex)) {\n                    stop = true;\n                    levelMarker = rowLevelIndex;\n                }\n\n                cachedRowLevels[rowLevelIndex] = rowLevels[rowLevelIndex].splice(1);\n\n                if (rowLevelIndex < rowLevels.length - 2 && rowLevels[rowLevelIndex][0].rows.length != 1) {\n                    rowLevels[rowLevelIndex][0].rows = rowLevels[rowLevelIndex + 1];\n                }\n\n                if (stop) {\n                    break;\n                }\n            }\n\n            cachedRowLevels[rowLevels.length - 1] = rowLevels[rowLevels.length - 1].splice(lastGroup[0].rows.length);\n\n            this.cachedRowLevels = cachedRowLevels;\n\n            if (!cachedRowLevels[cachedRowLevels.length - 1].length) {\n                this._hasContentToRender = false;\n            }\n\n            return {\n                levelMarker: levelMarker || 0,\n                rowLevels: rowLevels\n            };\n        },\n\n        createNextLayout: function() {\n            var clone = [];\n            var trimmedRowLevels;\n            var rowLevels;\n            var levelMarker;\n            var rowCount;\n\n            for (var rowLevelIndex = 0; rowLevelIndex < this.cachedRowLevels.length; rowLevelIndex++) {\n                clone[rowLevelIndex] = this.cachedRowLevels[rowLevelIndex];\n            }\n\n            trimmedRowLevels = this._trimRowLevels(clone);\n            rowLevels = trimmedRowLevels.rowLevels.splice(trimmedRowLevels.levelMarker);\n            levelMarker = trimmedRowLevels.levelMarker;\n            rowCount = rowLevels[rowLevels.length - 1].length;\n\n            delete this._height;\n\n            for (var i = levelMarker; i < this.rowLevels.length; i++) {\n                this.rowLevels[i] = this.rowLevels[i].concat(rowLevels[i - levelMarker]);\n            }\n\n            this.table\n                .find(\".k-scheduler-times\").last().find(\"tbody\")\n                .append(this._times(rowLevels, rowCount, this._isMobile()).find(\"tr\"));\n\n            this._updateDomRowLevels();\n\n            if (levelMarker > 0) {\n                for (i = 0; i < levelMarker; i++) {\n                    var cell = this.table.find(\"[data-row-level=\" + i + \"]\").last();\n                    var rowSpan = parseInt(cell.attr(\"rowspan\"),10) + rowCount;\n                    cell.attr(\"rowspan\", rowSpan);\n                }\n            }\n\n            this._virtualContent(rowLevels, this.columnLevels);\n            this.render(this._cachedEvents);\n        },\n\n        _tryRenderContent: function() {\n            var that = this;\n            var bufferHeight = that.table.innerHeight();\n            var height = that.content.find(\"table\").innerHeight();\n            var scrollTop = that.content.scrollTop();\n\n            while (that._hasContentToRender && height - bufferHeight < scrollTop) {\n                that.createNextLayout();\n                height = that.content.find(\"table\").innerHeight();\n            }\n        },\n\n        _isSchedulerHeightSet: function() {\n            var el = this.element;\n            var initialHeight, newHeight;\n                if (el[0].style.height) {\n                    return true;\n                } else {\n                    initialHeight = el.height();\n                }\n\n                el.height(\"auto\");\n                newHeight = el.height();\n\n                if (initialHeight != newHeight) {\n                    el.height(\"\");\n                    return true;\n                }\n                el.height(\"\");\n                return false;\n        },\n\n        _updateDomRowLevels: function() {\n            var that = this;\n            var groupCells = that.times.find(\".k-scheduler-group-cell:not([data-row-level])\");\n\n            if (!this._rowLevelIndices) {\n                this._rowLevelIndices = groupCells.map(function(index, item) {\n                    $(item).attr(\"data-row-level\", index);\n                    return index;\n                }).toArray().reverse();\n                return;\n            }\n\n            groupCells = groupCells.toArray().reverse();\n\n            for (var i = 0; i <= groupCells.length; i++) {\n                $(groupCells[i]).attr(\"data-row-level\", this._rowLevelIndices[i]);\n            }\n        },\n\n        refreshLayout: function() {\n            var that = this,\n                toolbar = that.element.find(\"> .k-scheduler-toolbar\"),\n                height = that.element.innerHeight(),\n                scrollbar = this._scrollbar,\n                headerHeight = 0,\n                paddingDirection = this._isRtl ? \"left\" : \"right\";\n\n            for (var idx = 0; idx < toolbar.length; idx++) {\n                height -= outerHeight(toolbar.eq(idx));\n            }\n\n            if (that.datesHeader) {\n                headerHeight = outerHeight(that.datesHeader);\n            }\n\n            if (that.timesHeader && outerHeight(that.timesHeader) > headerHeight) {\n                headerHeight = outerHeight(that.timesHeader);\n            }\n\n            if (that.content) {\n                that.content.find(\".k-scheduler-table td\").addClass(\"k-scheduler-cell\");\n            }\n\n            if (that.datesHeader && that.timesHeader) {\n                var datesHeaderRows = that.datesHeader.find(\"table\").first().find(\"tr\");\n\n                that.timesHeader.find(\"tr\").height(function(index) {\n                    $(this).height(datesHeaderRows.eq(index).height());\n                });\n            }\n\n            if (headerHeight) {\n                height -= headerHeight;\n            }\n\n            if (that.footer) {\n                height -= outerHeight(that.footer);\n            }\n\n            var contentDiv = that.content[0],\n                scrollbarWidth = !kendo.support.kineticScrollNeeded ? scrollbar : 0;\n\n            if (this._isSchedulerHeightSet()) { // set content height only if needed\n\n                if (height > scrollbar * 2) { // do not set height if proper scrollbar cannot be displayed\n                    that.content.height(height);\n                } else {\n                    that.content.height(scrollbar * 2 + 1);\n                }\n\n                if (that.times) {\n                    that.times.height(contentDiv.clientHeight);\n\n                    var timesTable = that.times.find(\"table\");\n                    if (timesTable.length) {\n                        timesTable.height(that.content.find(\"table\")[0].clientHeight);\n                    }\n                }\n            }\n\n            if (that.table) {\n                if (contentDiv.offsetWidth - contentDiv.clientWidth > 0) {\n                    that.table.addClass(\"k-scrollbar-v\");\n                    that.datesHeader.css(\"padding-\" + paddingDirection, scrollbarWidth - parseInt(that.datesHeader.children().css(\"border-\" + paddingDirection + \"-width\"), 10));\n                } else {\n                    that.datesHeader.css(\"padding-\" + paddingDirection, \"0\");\n                }\n                if (contentDiv.offsetHeight - contentDiv.clientHeight > 0 || contentDiv.clientHeight > that.content.children(\".k-scheduler-table\").height()) {\n                    that.table.addClass(\"k-scrollbar-h\");\n                } else {\n                    that.table.removeClass(\"k-scrollbar-h\");\n                }\n            }\n\n            that._refreshResourceViews();\n        },\n\n        _topSection: function(columnLevels, allDaySlot, rowCount) {\n            var thElm = $(\"<tr class='k-scheduler-head'>\");\n\n            this.timesHeader = timesHeader(columnLevels.length, allDaySlot, rowCount);\n            this.datesHeader = this._datesHeader(columnLevels, allDaySlot);\n\n            var dateGroup = this.datesHeader.find(\".k-nav-day\");\n\n            if (dateGroup.length) {\n                dateGroup.closest(\"tr\").addClass(\"k-scheduler-date-group\");\n            }\n\n            if (this._isMobile()) {\n                thElm.addClass(\"k-mobile-header\");\n                thElm.addClass(\"k-mobile-\" + this._groupOrientation() + \"-header\");\n            }\n\n            return $(thElm).append(this.timesHeader.add(this.datesHeader).wrap(\"<td>\").parent());\n        },\n\n        _bottomSection: function(columnLevels, rowLevels, rowCount) {\n            this.times = this._times(rowLevels, rowCount, this._isMobile());\n\n            this.content = content(columnLevels[columnLevels.length - 1], rowLevels[rowLevels.length - 1]);\n\n            return $(\"<tr class='k-scheduler-body'>\").append(this.times.add(this.content).wrap(\"<td>\").parent());\n        },\n\n        _scroller: function() {\n            var that = this;\n\n            this.content.on(\"scroll\" + NS, function() {\n                kendo.scrollLeft(that.datesHeader.find(\">.k-scheduler-header-wrap\"), this.scrollLeft);\n                that.times.scrollTop(this.scrollTop);\n                if (that._isVirtualized()) {\n                    that._tryRenderContent();\n                }\n            });\n\n            var touchScroller = kendo.touchScroller(this.content, {\n                avoidScrolling: function(e) {\n                    return $(e.event.target).closest(\".k-event.k-event-active\").length > 0;\n                }\n            });\n\n            if (touchScroller && touchScroller.movable) {\n\n                this._touchScroller = touchScroller;\n\n                this.content = touchScroller.scrollElement;\n\n                touchScroller.movable.bind(\"change\", function(e) {\n                    kendo.scrollLeft(that.datesHeader.find(\">.k-scheduler-header-wrap\"), -e.sender.x);\n                    that.times.scrollTop(-e.sender.y);\n                    if (that._isVirtualized()) {\n                        that._tryRenderContent();\n                    }\n                });\n            }\n        },\n\n        _resourcesForGroups: function() {\n            var result = [];\n            var groups = this.options.group;\n            var resources = this.options.resources;\n\n            groups = groups && groups.resources ? groups.resources : [];\n\n            if (resources && groups.length) {\n                for (var idx = 0, length = resources.length; idx < length; idx++) {\n                    for (var groupIdx = 0, groupLength = groups.length; groupIdx < groupLength; groupIdx++) {\n                        if (resources[idx].name === groups[groupIdx]) {\n                            result.push(resources[idx]);\n                        }\n                    }\n                }\n            }\n\n            this.groupedResources = result;\n        },\n\n        _createDateLayout: function(dates, inner, times) {\n            return createDateLayoutConfiguration(\"rows\", dates, inner, times);\n        },\n\n        _createColumnsLayout: function(resources, inner, template, dates, times, parentValue) {\n            return createLayoutConfiguration(\"columns\", resources, inner, template, dates, times, parentValue);\n        },\n\n        _groupOrientation: function() {\n            var groups = this.options.group;\n            return groups && groups.resources ? groups.orientation : \"horizontal\";\n        },\n\n        _isGroupedByDate: function() {\n            return this.options.group && this.options.group.date;\n        },\n\n        _isVerticallyGrouped: function() {\n            return this.groupedResources.length && this._groupOrientation() === \"vertical\";\n        },\n\n        _createRowsLayout: function(resources, inner, template, dates) {\n            return createLayoutConfiguration(\"rows\", resources, inner, template, dates);\n        },\n\n        selectionByElement: function() {\n            return null;\n        },\n\n        clearSelection: function() {\n            this.content\n                .find(\".k-selected\")\n                .removeAttr(\"id\")\n                .removeClass(\"k-selected\");\n        },\n\n        destroy: function() {\n            var that = this;\n\n            Widget.fn.destroy.call(this);\n\n            if (that._ongoingTimer) {\n                clearInterval(that._ongoingTimer);\n                that._ongoingTimer = null;\n            }\n\n            if (that.table) {\n                kendo.destroy(that.table);\n                that.table.remove();\n            }\n\n            if (that.footer) {\n                that.footer.getKendoToolBar().destroy();\n                that.footer.remove();\n            }\n\n            that.groups = null;\n            that.table = null;\n            that.content = null;\n            that.times = null;\n            that.datesHeader = null;\n            that.timesHeader = null;\n            that.footer = null;\n            that._resizeHint = null;\n            that._moveHint = null;\n        },\n\n        calendarInfo: function() {\n            return kendo.getCulture().calendars.standard;\n        },\n\n        prevGroupSlot: function(date, groupIndex, isDay) {\n            var collection;\n            var group = this.groups[groupIndex];\n            var slot = group.ranges(date, date, isDay, false)[0].start;\n\n            if (groupIndex <= 0) {\n                return;\n            }\n\n            if (this._isGroupedByDate()) {\n               return slot;\n            }\n\n            if (this._isVerticallyGrouped()) {\n                if (!group.timeSlotCollectionCount()) {\n                    collection = group._collection(group.daySlotCollectionCount() - 1, true);\n                    return collection.at(slot.index);\n                } else {\n                    collection = group._collection(isDay ? slot.index : slot.collectionIndex, false);\n                    return collection.last();\n                }\n            } else {\n                if (!group.timeSlotCollectionCount()) {\n                    collection = group._collection(slot.collectionIndex, true);\n                    return collection.last();\n                } else {\n                    collection = group._collection(isDay ? 0 : group.timeSlotCollectionCount() - 1, isDay);\n                    return isDay ? collection.last() : collection.at(slot.index);\n                }\n            }\n        },\n\n        nextGroupSlot: function(date, groupIndex, isDay) {\n            var collection;\n            var group = this.groups[groupIndex];\n            var slot = group.ranges(date, date, isDay, false)[0].start;\n            var daySlotCollectionCount;\n\n            if (groupIndex >= this.groups.length - 1) {\n                return;\n            }\n\n            if (this._isGroupedByDate()) {\n               return slot;\n            }\n\n            if (this._isVerticallyGrouped()) {\n                if (!group.timeSlotCollectionCount()) {\n                    collection = group._collection(0, true);\n                    return collection.at(slot.index);\n                } else {\n                    daySlotCollectionCount = group.daySlotCollectionCount();\n                    collection = group._collection(daySlotCollectionCount ? 0 : slot.collectionIndex, daySlotCollectionCount);\n\n                    return isDay ? collection.first() : collection.at(slot.collectionIndex);\n                }\n            } else {\n                if (!group.timeSlotCollectionCount()) {\n                    collection = group._collection(slot.collectionIndex, true);\n                    return collection.first();\n                } else {\n                    collection = group._collection(0, isDay);\n                    return isDay ? collection.first() : collection.at(slot.index);\n                }\n            }\n        },\n\n        _eventOptionsForMove: function() {\n            return {};\n        },\n\n        _updateEventForResize: function() {\n            return;\n        },\n\n        _updateEventForSelection: function(event) {\n            return event;\n        },\n\n        _innerElements: function(element, type, inner) {\n            var count = 0,\n                countInner = function(el) {\n                    var innerSpan = el[inner],\n                        innerEls = el[type],\n                        current, innerCollection, i;\n\n                    if (innerSpan) {\n                        count += innerSpan;\n                        return;\n                    }\n\n                    if (!innerEls || innerEls.length === 0) {\n                        count += 1;\n                        return;\n                    }\n\n                    for (i = 0; i < innerEls.length; i++) {\n                        current = innerEls[i];\n                        innerCollection = current[type];\n\n                        if (innerCollection && innerCollection[0]) {\n                            if (!innerCollection[0][type] || innerCollection[0][type].length === 0) {\n                                count += innerCollection.length;\n                            } else {\n                                countInner(current);\n                            }\n                        } else {\n                            count += 1;\n                        }\n                    }\n                };\n\n            countInner(element);\n\n            return count;\n        },\n\n        _times: function(rowLevels, rowCount, isMobile) {\n            var that = this;\n            var rows = new Array(rowCount).join().split(\",\");\n            var rowHeaderRows = [];\n            var rowIndex;\n\n            for (var rowLevelIndex = 0; rowLevelIndex < rowLevels.length; rowLevelIndex++) {\n                var level = rowLevels[rowLevelIndex];\n                var rowsBefore = 0;\n\n                for (rowIndex = 0; rowIndex < level.length; rowIndex++) {\n                    var currentRow = level[rowIndex];\n                    var className = currentRow.className || \"\";\n                    var text = currentRow.text;\n                    var rowspan = that._innerElements(currentRow, \"rows\");\n\n                    rowsBefore += rowspan;\n\n                    if (currentRow.allDay) {\n                        className = \"k-scheduler-times-all-day\";\n                    }\n\n                    if (isMobile && className.indexOf(\"k-scheduler-group-cell\") !== -1) {\n                        text = '<span class=\"k-scheduler-group-text\">' + text + '</span>';\n                    }\n\n                    rows[rowsBefore - rowspan] += '<th class=\"k-scheduler-cell k-heading-cell ' + className + '\" rowspan=\"' + rowspan + '\">' + text + \"</th>\";\n                }\n            }\n\n            for (rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n                rowHeaderRows.push(rows[rowIndex]);\n            }\n\n            if (rowCount < 1) {\n                return $();\n            }\n\n            return $('<div class=\"k-scheduler-times\">' + table(rowHeaderRows) + '</div>');\n        },\n\n        _datesHeader: function(columnLevels, allDaySlot) {\n            var that = this;\n            var dateTableRows = [];\n            var columnIndex;\n            var result;\n\n            for (var columnLevelIndex = 0; columnLevelIndex < columnLevels.length; columnLevelIndex++) {\n                var level = columnLevels[columnLevelIndex];\n                var th = [];\n\n                for (columnIndex = 0; columnIndex < level.length; columnIndex ++) {\n                    var column = level[columnIndex];\n                    var colspan = that._innerElements(column, \"columns\", \"colspan\");\n\n                    th.push('<th colspan=\"' + (column.colspan || colspan) + '\" class=\"k-scheduler-cell k-heading-cell ' + (column.className || \"\") + '\">' + column.text + \"</th>\");\n                }\n\n                dateTableRows.push(th.join(\"\"));\n            }\n\n            var allDayTableRows = [];\n\n            if (allDaySlot) {\n                var lastLevel = columnLevels[columnLevels.length - 1];\n                var td = [];\n                var cellContent = allDaySlot.cellContent;\n\n                for (columnIndex = 0; columnIndex < lastLevel.length; columnIndex++) {\n                    td.push('<td class=\"k-scheduler-cell ' + (lastLevel[columnIndex].className || \"\") + '\">' + (cellContent ? cellContent(columnIndex) : '&nbsp;') + '</td>');\n                }\n\n                allDayTableRows.push(td.join(\"\"));\n            }\n\n            result = $(\n                '<div class=\"k-scheduler-header\">' +\n                    '<div class=\"k-scheduler-header-wrap\">' +\n                        table(dateTableRows) +\n                        allDayTable(allDayTableRows, \"k-scheduler-header-all-day\") +\n                    '</div>' +\n                '</div>'\n            );\n\n            kendo.applyStylesFromKendoAttributes(result, [\"position\"]);\n\n            return result;\n        },\n\n        _formatEventAriaLabel: function(title, start, end, isAllDay) {\n            var labelMessages = this.options.messages.ariaEventLabel,\n                sameDate = kendo.date.getDate(start).getTime() === kendo.date.getDate(end).getTime(),\n                labelText;\n\n            if (typeof(labelMessages) === \"string\") {\n                return kendo.format(labelMessages, title, start, start);\n            }\n\n            labelText = (labelMessages.prefix + SPACE + title + SPACE + labelMessages.on + SPACE + kendo.toString(start, \"D\")).trim();\n\n            if (isAllDay && sameDate) {\n                return labelText + SPACE + labelMessages.allDay;\n            } else if (isAllDay) {\n                return labelText + SPACE + labelMessages.to + SPACE + kendo.toString(end, \"D\") + SPACE + labelMessages.allDay;\n            } else {\n                labelText = labelText + SPACE + labelMessages.at + SPACE + kendo.toString(start, \"t\") + SPACE + labelMessages.to + SPACE;\n\n                if (sameDate) {\n                    return labelText + kendo.toString(end, \"t\");\n                } else {\n                    return labelText + kendo.toString(end, \"D\") + SPACE + labelMessages.at + SPACE + kendo.toString(end, \"t\");\n                }\n            }\n        },\n\n        _ongoingEvents: function(data) {\n            var that = this,\n                ongoingOptions = that.options.ongoingEvents,\n                shouldMarkOngoing = !!ongoingOptions && (ongoingOptions === true || ongoingOptions.enabled),\n                interval;\n\n            if (shouldMarkOngoing) {\n                that._ongoingUpdater(data);\n\n                interval = ongoingOptions.updateInterval || 60000;\n\n                if (that._ongoingTimer) {\n                    clearInterval(that._ongoingTimer);\n                    that._ongoingTimer = null;\n                }\n\n                if (!isNaN(interval)) {\n                    that._ongoingTimer = setInterval(this._ongoingUpdater.bind(that, data), interval);\n                }\n            }\n        },\n\n        _ongoingUpdater: function(data) {\n            var currentTime = new Date(),\n                ongoingClass = this.options.ongoingEvents.cssClass || ONGOING_CLASS;\n\n            this.content.find(DOT + ongoingClass).removeClass(ongoingClass);\n\n            if (this.groups && this.groups.length > 0) {\n                this._updateOngoing(currentTime, data);\n            }\n        },\n\n        _updateOngoing: function(currentTime, data) {\n            var that = this,\n                el = that.element,\n                ongoingOptions = that.options.ongoingEvents,\n                ongoingClass = ongoingOptions.cssClass || ONGOING_CLASS,\n                useLocalTimezone = ongoingOptions.useLocalTimezone,\n                timezone = that.options.timezone,\n                timezoneOffset, currentTime;\n\n            if (!data) {\n                return;\n            }\n\n            if (useLocalTimezone === false && !!timezone) {\n                timezoneOffset = kendo.timezone.offset(currentTime, timezone);\n                currentTime = kendo.timezone.convert(currentTime, currentTime.getTimezoneOffset(), timezoneOffset);\n            }\n\n            data.forEach((appointment) => {\n                var uid,\n                    start = appointment.start,\n                    end = appointment.end;\n\n                if (appointment.isAllDay) {\n                    end = new Date(end.getTime() + 1000 * 60 * 60 * 24 - 1);\n                }\n\n                if (start <= currentTime && end >= currentTime) {\n                    uid = appointment.uid;\n\n                    el.find(\"[data-uid=\" + uid + \"]\").addClass(ongoingClass);\n                }\n            });\n        }\n    });\n\n    function collidingEvents(elements, start, end) {\n        var idx,\n            index,\n            startIndex,\n            overlaps,\n            endIndex;\n\n        for (idx = elements.length - 1; idx >= 0; idx--) {\n            index = rangeIndex(elements[idx]);\n            startIndex = index.start;\n            endIndex = index.end;\n\n            overlaps = startIndex <= start && endIndex >= start;\n\n            if (overlaps || (startIndex >= start && endIndex <= end) || (start <= startIndex && end >= startIndex)) {\n                if (startIndex < start) {\n                    start = startIndex;\n                }\n\n                if (endIndex > end) {\n                    end = endIndex;\n                }\n            }\n        }\n\n        return eventsForSlot(elements, start, end);\n    }\n\n    function rangeIndex(eventElement) {\n        return {\n            start: eventElement.start,\n            end: eventElement.end,\n            slotIndex: eventElement.slotIndex,\n            slotIndexEnd: eventElement.slotIndexEnd\n        };\n    }\n\n    function eventsForSlot(elements, slotStart, slotEnd) {\n        var events = [];\n\n        for (var idx = 0; idx < elements.length; idx++) {\n            var event = rangeIndex(elements[idx]);\n\n            if ((event.start < slotStart && event.end > slotStart) || (event.start >= slotStart && event.end <= slotEnd)) {\n                events.push(elements[idx]);\n            }\n        }\n\n        return events;\n    }\n\n    function createColumns(eventElements) {\n        return _createColumns(eventElements);\n    }\n\n    function createRows(eventElements) {\n        return _createColumns(eventElements);\n    }\n\n    var Color = function(value) {\n        var color = this,\n            formats = Color.formats,\n            re,\n            processor,\n            parts,\n            i,\n            channels;\n\n        if (arguments.length === 1) {\n            value = color.resolveColor(value);\n\n            for (i = 0; i < formats.length; i++) {\n                re = formats[i].re;\n                processor = formats[i].process;\n                parts = re.exec(value);\n\n                if (parts) {\n                    channels = processor(parts);\n                    color.r = channels[0];\n                    color.g = channels[1];\n                    color.b = channels[2];\n                }\n            }\n        } else {\n            color.r = arguments[0];\n            color.g = arguments[1];\n            color.b = arguments[2];\n        }\n\n        color.r = color.normalizeByte(color.r);\n        color.g = color.normalizeByte(color.g);\n        color.b = color.normalizeByte(color.b);\n    };\n\n    Color.prototype = {\n        resolveColor: function(value) {\n            value = value || \"#000\";\n\n            if (value.charAt(0) == \"#\") {\n                value = value.substr(1, 6);\n            }\n\n            value = value.replace(/ /g, \"\");\n            value = value.toLowerCase();\n            value = Color.namedColors[value] || value;\n\n            return value;\n        },\n\n        normalizeByte: function(value) {\n            return (value < 0 || isNaN(value)) ? 0 : ((value > 255) ? 255 : value);\n        },\n\n        percBrightness: function() {\n            var color = this;\n            return math.sqrt(0.241 * color.r * color.r + 0.691 * color.g * color.g + 0.068 * color.b * color.b);\n        },\n\n        isDark: function() {\n            var color = this;\n            var brightnessValue = color.percBrightness();\n            return brightnessValue < 180;\n        }\n    };\n\n    Color.formats = [{\n            re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n            process: function(parts) {\n                return [\n                    parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)\n                ];\n            }\n        }, {\n            re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n            process: function(parts) {\n                return [\n                    parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)\n                ];\n            }\n        }, {\n            re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n            process: function(parts) {\n                return [\n                    parseInt(parts[1] + parts[1], 16),\n                    parseInt(parts[2] + parts[2], 16),\n                    parseInt(parts[3] + parts[3], 16)\n                ];\n            }\n        }\n    ];\n\n    Color.namedColors = {\n        aqua: \"00ffff\", azure: \"f0ffff\", beige: \"f5f5dc\",\n        black: \"000000\", blue: \"0000ff\", brown: \"a52a2a\",\n        coral: \"ff7f50\", cyan: \"00ffff\", darkblue: \"00008b\",\n        darkcyan: \"008b8b\", darkgray: \"a9a9a9\", darkgreen: \"006400\",\n        darkorange: \"ff8c00\", darkred: \"8b0000\", dimgray: \"696969\",\n        fuchsia: \"ff00ff\", gold: \"ffd700\", goldenrod: \"daa520\",\n        gray: \"808080\", green: \"008000\", greenyellow: \"adff2f\",\n        indigo: \"4b0082\", ivory: \"fffff0\", khaki: \"f0e68c\",\n        lightblue: \"add8e6\", lightgrey: \"d3d3d3\", lightgreen: \"90ee90\",\n        lightpink: \"ffb6c1\", lightyellow: \"ffffe0\", lime: \"00ff00\",\n        limegreen: \"32cd32\", linen: \"faf0e6\", magenta: \"ff00ff\",\n        maroon: \"800000\", mediumblue: \"0000cd\", navy: \"000080\",\n        olive: \"808000\", orange: \"ffa500\", orangered: \"ff4500\",\n        orchid: \"da70d6\", pink: \"ffc0cb\", plum: \"dda0dd\",\n        purple: \"800080\", red: \"ff0000\", royalblue: \"4169e1\",\n        salmon: \"fa8072\", silver: \"c0c0c0\", skyblue: \"87ceeb\",\n        slateblue: \"6a5acd\", slategray: \"708090\", snow: \"fffafa\",\n        steelblue: \"4682b4\", tan: \"d2b48c\", teal: \"008080\",\n        tomato: \"ff6347\", turquoise: \"40e0d0\", violet: \"ee82ee\",\n        wheat: \"f5deb3\", white: \"ffffff\", whitesmoke: \"f5f5f5\",\n        yellow: \"ffff00\", yellowgreen: \"9acd32\"\n    };\n\n    function _createColumns(eventElements) {\n        var columns = [];\n\n        for (var idx = 0; idx < eventElements.length; idx++) {\n            var event = eventElements[idx];\n            var eventRange = rangeIndex(event);\n            var column = null;\n\n            if (event.zeroWidthEventOffset && eventRange.end - eventRange.start < event.zeroWidthEventOffset) {\n                eventRange.end = eventRange.start + event.zeroWidthEventOffset;\n            }\n\n            for (var j = 0, columnLength = columns.length; j < columnLength; j++) {\n                var endOverlaps = (eventRange.start > columns[j].end) || (eventRange.slotIndex > columns[j].slotIndexEnd);\n\n                if (eventRange.start < columns[j].start || eventRange.slotIndex < columns[j].slotIndex || endOverlaps) {\n\n                    column = columns[j];\n\n                    if (column.end < eventRange.end) {\n                        column.end = eventRange.end;\n                    }\n\n                    if (column.slotIndexEnd < eventRange.slotIndexEnd) {\n                        column.slotIndexEnd = eventRange.slotIndexEnd;\n                    }\n\n                    break;\n                }\n            }\n\n            if (!column) {\n                column = { slotIndex: eventRange.slotIndex, slotIndexEnd: eventRange.slotIndexEnd, start: eventRange.start, end: eventRange.end, events: [] };\n                columns.push(column);\n            }\n\n            column.events.push(event);\n        }\n\n        return columns;\n    }\n\n    function createDateLayoutConfiguration(name, dates, inner, times) {\n         var configuration = [];\n\n         $.each(dates, function(index, item) {\n            var className = item.className ? \"k-slot-cell \" + item.className : \"k-slot-cell\";\n\n            var obj = {\n                text: item.text,\n                className: className\n            };\n\n            if (times && !item.minorTicks) {\n                obj[name] = createDateLayoutConfiguration(name, item.columns, inner, times);\n            } else {\n                obj[name] = inner;\n            }\n            configuration.push(obj);\n        });\n\n        return configuration;\n    }\n\n    function createLayoutConfiguration(name, resources, inner, template, dates, times, parentValue) {\n        var resource = resources[0];\n        var configuration = [];\n\n        if (resource) {\n            if (dates && inner) {\n                $.each(dates, function(index, item) {\n                    if (times && !item.minorTicks) {\n                        item[name] = createLayoutConfiguration(name, resources, item.columns, template, item.columns, times, parentValue);\n                    } else {\n                        item[name] = createLayoutConfiguration(name, resources, null, template, null, null, parentValue);\n                    }\n                });\n                configuration = dates;\n            } else {\n                var data = resource.dataSource.view();\n\n                data = data.filter(function(item) {\n                    var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n\n                    return itemParentValue === null || itemParentValue === undefined || itemParentValue === parentValue;\n                });\n\n                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                    var value = kendo.getter(resource.dataValueField)(data[dataIndex]);\n                    var obj = {\n                        text: template({\n                            text: kendo.htmlEncode(kendo.getter(resource.dataTextField)(data[dataIndex])),\n                            color: kendo.getter(resource.dataColorField)(data[dataIndex]),\n                            field: resource.field,\n                            title: resource.title,\n                            name: resource.name,\n                            value: value\n                        }),\n                        className: \"k-slot-cell k-scheduler-group-cell\",\n                        parentValue: parentValue,\n                        value: value\n                    };\n\n                    // filter-out those inner resources that are not relevant\n                    obj[name] = createLayoutConfiguration(name, resources.slice(1), inner, template, dates, times, value);\n\n                    configuration.push(obj);\n                }\n            }\n            return configuration;\n        }\n        return inner;\n    }\n\n    function groupEqFilter(value) {\n        return function(item) {\n            if (Array.isArray(item) || item instanceof kendo.data.ObservableArray) {\n                for (var idx = 0; idx < item.length; idx++) {\n                    if (item[idx] == value) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            return item == value;\n        };\n    }\n\n    var selectedStateRegExp = /\\s*k-selected/;\n    function addSelectedState(cell) {\n        cell.className = cell.className.replace(selectedStateRegExp, \"\") + \" k-selected\";\n    }\n\n    $.extend(ui.SchedulerView, {\n        createColumns: createColumns,\n        createRows: createRows,\n        rangeIndex: rangeIndex,\n        collidingEvents: collidingEvents,\n        groupEqFilter: groupEqFilter\n    });\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}