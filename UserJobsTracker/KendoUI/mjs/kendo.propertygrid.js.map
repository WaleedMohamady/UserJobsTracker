{"version":3,"sources":["raw-mjs/kendo.propertygrid.js"],"names":["$","undefined$1","kendo","window","TreeListContextMenu","ui","treelist","ContextMenu","extend","PropertyGridContextMenu","init","element","options","fn","call","this","defaultItems","separator","name","copy","text","icon","command","softRules","copyName","copyDeclaration","resize","rules","reset","expandItem","collapseItem","propertygrid","jQuery","Class","keys","Command","propertyGrid","CopyCommand","exec","that","target","closest","dataItem","selectedText","getSelection","getRangeAt","toString","navigator","clipboard","writeText","field","value","_objectFromNodes","tabDelimitedValue","JSON","stringify","description","filter","item","join","ResetCommand","dataSource","cancelChanges","trigger","type","model","container","_render","ResizeColumnCommand","_actionButtonsTemplate","apply","cancel","insertButtonIcon","cancelButtonIcon","html","renderButton","themeColor","dialog","form","tableColumnIndex","index","columnIndex","grouped","columnSelector","oldColumnWidth","table","find","outerWidth","dialogOptions","title","visible","resizable","minWidth","totalWidth","width","e","delta","wrapper","data","formData","columnsize","newColumnWidth","columns","children","eq","column","oldWidth","newWidth","close","preventDefault","destroy","component","colCount","length","widths","idx","push","each","col","adjustColWidths","appendTo","document","body","kendoWindow","_createForm","after","on","end","keyCode","ENTER","ESC","center","open","currentColumnWidth","kendoForm","validation","validateOnBlur","validaitonSummary","renderButtons","items","label","editor","editorOptions","min","ToggleItemCommand","expand","collapse","ToggleGroupLayout","removeClass","_refreshLayout","_updateDetails","ToggleDetails","visibleDetails","toggleClass","ExcelExport","saveAsExcel","PDFExport","saveAsPDF","PropertyGridCommand","commands","__meta__","id","category","depends","NS","kendoDom","dom","kendoDomElement","kendoHtmlElement","kendoTextElement","F10","Editable","TreeList","isArray","Array","isPlainObject","CHANGE","EXPAND","COLLAPSE","GROUP_EXPAND","GROUP_COLLAPSE","CARET_ALT_DOWN","GROUPING_ROW","TR","TD","defaultBodyContextMenu","defaultCommands","group","togglable","showText","commandName","attributes","overflow","details","sort","componentOptions","commandOn","dataTextField","dataValueField","class","search","prefixOptions","placeholder","spacer","excel","pdf","isNullorUndefined","isEditable","PropertyGridDataSource","TreeListDataSource","groupedItemsTree","currentChildren","_childrenMap","view","_defaultParentId","Query","toArray","filterGroupedItemsTree","expression","filterExpression","filters","logic","groups","filterItems","filtered","i","hasChildren","childNodes","filteredGroups","forEach","itm","DynamicInCellEditor","createEditable","fields","editable","clearContainer","change","off","empty","removeAttr","attr","PropertyGrid","_processOptions","_processedModel","_processModel","_createDataSource","_wrapper","_detailsBox","_groupable","notify","hasHeader","groupable","contextMenu","sortable","selectable","scrollable","showDetails","size","defaultTools","messages","defaultGroupName","events","defaultEditors","string","date","number","boolean","_groupContentTemplate","groupName","action","_detailsTemplate","_setEditable","editMode","toolbar","_extendColumnOptions","fieldColumn","valueColumn","_processSettings","obj","settings","flatData","_flatten","_setDefaults","Object","entries","map","x","serverGrouping","schema","parentId","expanded","appendNested","result","key","nestedKeys","nestedObject","collectionIdx","nestedKey","flattenObject","propType","collection","nested","flattenCollection","isDate","isComplexObject","tempId","parsed","parseDate","_setDefaultEditor","_createIncellEditor","cell","toJSON","parentColumn","fieldRenderer","_cellContent","bind","_createDirtyTemplate","templateSettings","_customTemplateSettings","template","columnTemplate","incellEditing","_isIncellEditable","isValueColumn","dirtyIndicator","dirty","get","dirtyIndicatorTemplate","format","_editableCellContent","bTag","content","_generateGroupRow","groupRowContent","tdElement","className","colSpan","role","uid","_generateDetailsBox","_renderRows","selected","childrenMap","viewChildrenMap","hasFooterTemplate","selectedRow","_selectedRowUid","rows","prepend","_groupedData","groupTr","concat","_trs","editedColumn","editedColumnIndex","aggregates","level","remove","_contentTree","render","_generateRowOptions","pageable","_renderedModelLevel","isAlt","_absoluteIndex","_renderRow","rowOptions","renderer","row","_tds","groupTdElement","splice","editCell","cellIndex","draggable","isColumnEditable","_editCell","css","addClass","_toolbar","toolbarOptions","_processToolbarItems","_verifyItems","kendoToolBar","navigateOnTab","navigatable","_attachToolbarHandlers","append","toolbarWidget","getKendoToolBar","sortElement","_toolbarClick","getKendoDropDownList","_sortItems","some","hasOwnProperty","findIndex","_getCommandType","toLowerCase","Error","imageClass","spriteCssClass","iconClass","menuButtons","buttons","click","origEvent","event","originalEvent","stopPropagation","_commandClick","currentTarget","ev","val","_action","dir","sender","refresh","_initContextMenu","tbodyContextMenu","mainOptions","tbody","states","_buildStates","isResizable","windowHasSelection","rangeCount","isDirty","isNotInEditMode","hasClass","isNotGroupColumn","isExpandable","isCollapsible","args","commandOptions","rootNodes","hashTable","create","node","childNode","guid","_groupableClickHandler","groupRow","is","_groupRowKeyDown","current","handled","focusElement","_setCurrent","_findCurrentCell","LEFT","RIGHT","altKey","_handleGroupRowExpandCollapse","parent","_toggleGroup","_search","input","clearTimeout","_searchTimeOut","setTimeout","searchFields","operator","select","_","detailsTemplate","detailsContainer","_clearDetails","setDataSource","selectItem","toggleItem","toggleGroup","toggleDetails","edit","saveState","saveChanges","resetState","setOptions","currentOptions","getOptions","_events","deepExtend","before","_setEvents","PropertyGridExcelExporter","ExcelExporter","_trimColumns","allColumns","_leafColumns","_prepareColumn","_visibleColumns","widget","hasGroups","hierarchy","hasGroupHeaderColumn","groupHeaderColumnTemplate","collapsible","_recursiveRows","this$1$1","_dataRow","_depth","itmIdx","_buildGroupedDataRows","groupItem","cells","background","color","_buildDataRows","parents","previousItemId","depth","itemLevel","itemId","hasFooter","_hasFooterTemplate","previousLevel","_hierarchyFooterRows","rootAggregate","_hierarchyFooter","_hierarchyRows","_prependHeaderRows","workbook","Deferred","d","fetch","then","_hierarchy","resolve","promise","PropertyGridExcelMixin","proto","proxyURL","filterable","fileName","exporter","allPages","book","ooxml","Workbook","skipCustomHeight","toDataURLAsync","dataURI","saveAs","forceProxy","_restoreExpandedState","prototype","cssProperties","propertyDictionary","registerPrefix","plugin","kendo$1"],"mappings":"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","file":"kendo.propertygrid.js","sourcesContent":["import './kendo.menu.js';\nimport './kendo.excel.js';\nimport './kendo.progressbar.js';\nimport './kendo.treelist.js';\nimport './kendo.dialog.js';\n\n(function($, undefined$1) {\n    const kendo = window.kendo,\n        ui = kendo.ui,\n        TreeListContextMenu = ui.treelist.ContextMenu,\n        extend = $.extend;\n\n    let PropertyGridContextMenu = TreeListContextMenu.extend({\n        init: function(element, options) {\n            const that = this;\n\n            TreeListContextMenu.fn.init.call(that, element, options);\n        },\n        defaultItems: {\n            \"separator\": { name: \"separator\", separator: true },\n            \"copy\": { name: \"copy\", text: \"Copy\", icon: \"copy\", command: \"CopyCommand\", softRules: \"windowHasSelection\",options: \"copy:selection\" },\n            \"copyName\": { name: \"copyName\", text: \"Copy Name\", icon: \"file-txt\", command: \"CopyCommand\", options: \"copy:name\" },\n            \"copyDeclaration\": { name: \"copyDeclatarion\", text: \"Copy Declaration\", icon: \"file-data\", command: \"CopyCommand\", options: \"copy:declaration\" },\n            \"resize\": { name: \"resize\", text: \"Resize Column\", icon: \"arrows-left-right\", rules: \"isResizable\", command: \"ResizeColumnCommand\",softRules: \"isNotGroupColumn\" },\n            \"reset\": { name: \"reset\", text: \"Reset\", icon: \"arrow-rotate-ccw\", command: \"ResetCommand\", rules: \"isEditable\", softRules: \"isDirty;isNotInEditMode\" },\n            \"expandItem\": { name: \"expandItem\", text: \"Expand Item\", icon: \"folder-open\", softRules: \"isExpandable\", command: \"ToggleItemCommand\", options: \"expand:true\" },\n            \"collapseItem\": { name: \"collapseItem\", text: \"Collapse Item\", icon: \"folder\", softRules: \"isCollapsible\", command: \"ToggleItemCommand\", options: \"expand:false\" }\n        }\n    });\n\n    kendo.ui.propertygrid = kendo.ui.propertygrid || {};\n\n    extend(kendo.ui.propertygrid, {\n        ContextMenu: PropertyGridContextMenu\n    });\n})(window.kendo.jQuery);\n\n(function($, undefined$1) {\n    let kendo = window.kendo,\n        extend = $.extend,\n        Class = kendo.Class,\n        keys = kendo.keys,\n        COLUMNSIZE = \"#columnsize\";\n\n    let Command = Class.extend({\n        init: function(options) {\n            this.options = options;\n            this.propertyGrid = options.propertyGrid;\n        }\n    });\n\n    let CopyCommand = Command.extend({\n        exec: function() {\n            const that = this,\n                options = that.options,\n                propertyGrid = that.propertyGrid,\n                target = that.options.target.closest(\"tr\"),\n                dataItem = propertyGrid.dataItem(target);\n            if (options.copy == \"selection\") {\n                let sel = window.getSelection();\n                let range = sel.getRangeAt(0);\n                let selectedText = range.toString();\n\n                navigator.clipboard.writeText(selectedText);\n            } else if (options.copy == \"name\") {\n                navigator.clipboard.writeText(dataItem.field);\n            } else if (options.copy == \"declaration\") {\n                let value = that.propertyGrid._objectFromNodes(dataItem);\n                let tabDelimitedValue = [dataItem.field, JSON.stringify(value[dataItem.field]), dataItem.description].filter(item => item !== undefined$1).join(\"\\t\");\n                navigator.clipboard.writeText(tabDelimitedValue);\n            }\n        }\n    });\n\n    let ResetCommand = Command.extend({\n        exec: function() {\n            let that = this,\n                propertyGrid = that.propertyGrid,\n                target = that.options.target.closest(\"tr\"),\n                dataItem = propertyGrid.dataItem(target);\n\n            propertyGrid.dataSource.cancelChanges(dataItem);\n            propertyGrid.trigger(\"cancel\", { type: \"cancel\", model: dataItem, container: that.options.target });\n            propertyGrid._render();\n        }\n    });\n\n    let ResizeColumnCommand = Command.extend({\n        _actionButtonsTemplate: function({ apply, cancel, insertButtonIcon, cancelButtonIcon }) {\n            return '<div class=\"k-actions k-actions-start k-actions-horizontal k-window-buttons\">' +\n            kendo.html.renderButton(`<button class=\"k-dialog-apply\">${apply}</button>`, { themeColor: \"primary\", icon: insertButtonIcon }) +\n            kendo.html.renderButton(`<button class=\"k-dialog-close\">${cancel}</button>`, { icon: cancelButtonIcon }) +\n        '</div>';\n        },\n\n        exec: function() {\n            let that = this, dialog, form,\n                propertyGrid = that.propertyGrid,\n                tableColumnIndex = that.options.target.index(),\n                columnIndex = propertyGrid.grouped ? tableColumnIndex - 1 : tableColumnIndex,\n                columnSelector = `tr:not(.k-table-group-row):first > td:nth-child(${tableColumnIndex + 1})`,\n                oldColumnWidth = propertyGrid.table.find(columnSelector).outerWidth(),\n                dialogOptions = {\n                    title: \"Resize Column\",\n                    visible: false,\n                    resizable: true,\n                    minWidth: 350\n                },\n                totalWidth = propertyGrid.table.width();\n\n                adjustColWidths(that.propertyGrid);\n                propertyGrid.table.width(totalWidth);\n\n                function apply(e) {\n                    let delta;\n                    let oldColumnWidth = dialog.wrapper.find(\".k-form\").data(\"kendoForm\").options.formData.columnsize;\n                    let newColumnWidth = dialog.wrapper.find(COLUMNSIZE).data(\"kendoNumericTextBox\").value();\n\n                    if (oldColumnWidth == newColumnWidth) {\n                        close(e);\n                        return;\n                    } else if (oldColumnWidth > newColumnWidth) {\n                        delta = oldColumnWidth - newColumnWidth;\n                        propertyGrid.table.width(totalWidth - delta);\n                    } else {\n                        delta = newColumnWidth - oldColumnWidth;\n                        propertyGrid.table.width(totalWidth + delta);\n                    }\n\n                    propertyGrid.columns[columnIndex].width = newColumnWidth;\n                    propertyGrid.table.children(\"colgroup\").find(\"col\").eq(tableColumnIndex).width(newColumnWidth);\n\n                    propertyGrid.trigger(\"columnResize\", {\n                        column: propertyGrid.columns[columnIndex],\n                        oldWidth: oldColumnWidth,\n                        newWidth: newColumnWidth\n                    });\n\n                    close(e);\n                }\n\n                function close(e) {\n                    e.preventDefault();\n                    form.destroy();\n                    dialog.destroy();\n                }\n\n                function keyDown(e) {\n                    if (e.keyCode == keys.ENTER) {\n                        apply(e);\n                    } else if (e.keyCode == keys.ESC) {\n                        close(e);\n                    }\n                }\n\n                function adjustColWidths(component) {\n                    const columnSelector = (columnIndex) => `tr:not(.k-table-group-row):first > td:nth-child(${columnIndex + 1})`,\n                    colCount = component.table.children(\"colgroup\").find(\"col\").length;\n                    let widths = [];\n                    for (let idx = 0; idx < colCount; idx++) {\n                        widths.push(component.table.find(columnSelector(idx)).outerWidth());\n                    }\n\n                    component.table.children(\"colgroup\").find(\"col\").each((idx,col) => {\n                        $(col).width(widths[idx]);\n                    });\n                }\n\n                dialogOptions.close = close;\n\n                dialog = $(\"<div/>\").appendTo(document.body).kendoWindow(dialogOptions).data(\"kendoWindow\");\n                form = that._createForm(dialog, oldColumnWidth);\n                dialog.element.after($(that._actionButtonsTemplate({ apply: \"Apply\", cancel: \"Cancel\" , insertButtonIcon: \"check\", cancelButtonIcon: \"cancel-outline\" })));\n\n                dialog.wrapper\n                    .find(\".k-dialog-apply\").on(\"click\", apply).end()\n                    .find(\".k-dialog-close\").on(\"click\", close).end()\n                    .find(\".k-form-field input\").on(\"keydown\", keyDown).end();\n\n                    dialog.center().open();\n        },\n\n        _createForm: function(dialog, currentColumnWidth) {\n            let formElement = $(\"<div/>\").appendTo(dialog.element);\n\n            return formElement.kendoForm({\n                formData: {\n                    columnsize: currentColumnWidth\n                },\n                validation: {\n                    validateOnBlur: false,\n                    validaitonSummary: false\n                },\n                renderButtons: false,\n                items: [\n                    {\n                        field: \"columnsize\",\n                        label: \"Set column Size\",\n                        editor: \"NumericTextBox\",\n                        editorOptions: {\n                            min: 0\n                        }\n                    }\n                ]\n            }).data(\"kendoForm\");\n        }\n    });\n\n    let ToggleItemCommand = Command.extend({\n        exec: function() {\n            let that = this,\n            propertyGrid = that.propertyGrid,\n                target = that.options.target,\n                options = that.options,\n                expand = options.expand === 'true';\n\n                if (expand) {\n                    propertyGrid.expand(target);\n                } else {\n                    propertyGrid.collapse(target);\n                }\n        }\n    });\n\n    let ToggleGroupLayout = Command.extend({\n        exec: function() {\n            let that = this,\n            propertyGrid = that.propertyGrid,\n            grouped = propertyGrid.grouped;\n\n            propertyGrid.grouped = !grouped;\n            if ( !propertyGrid.grouped) {\n                propertyGrid.wrapper.find(\"tr:not(.k-details-box)\").removeClass(\"k-hidden\");\n            }\n\n            propertyGrid._refreshLayout();\n            propertyGrid._updateDetails();\n        }\n    });\n\n    let ToggleDetails = Command.extend({\n        exec: function() {\n            let that = this,\n            propertyGrid = that.propertyGrid,\n            visible = propertyGrid.visibleDetails;\n\n            propertyGrid.visibleDetails = !visible;\n            if ( !propertyGrid.visible) {\n                propertyGrid.table.find(\"tr.k-details-box\").toggleClass(\"k-hidden\");\n            }\n        }\n    });\n\n    let ExcelExport = Command.extend({\n        exec: function() {\n            let that = this,\n            propertyGrid = that.propertyGrid;\n\n            propertyGrid.saveAsExcel();\n        }\n    });\n\n    let PDFExport = Command.extend({\n        exec: function() {\n            let that = this,\n            propertyGrid = that.propertyGrid;\n\n            propertyGrid.saveAsPDF();\n        }\n    });\n\n    kendo.ui.propertygrid = kendo.ui.propertygrid || {};\n\n    extend(kendo.ui.propertygrid, {\n        PropertyGridCommand: Command,\n        commands: {\n            ResetCommand: ResetCommand,\n            CopyCommand: CopyCommand,\n            ResizeColumnCommand: ResizeColumnCommand,\n            ToggleItemCommand: ToggleItemCommand,\n            ToggleGroupLayout: ToggleGroupLayout,\n            ToggleDetails: ToggleDetails,\n            ExcelExport: ExcelExport,\n            PDFExport: PDFExport,\n        }\n    });\n})(window.kendo.jQuery);\n\nlet __meta__ = {\n    id: \"propertygrid\",\n    name: \"PropertyGrid\",\n    category: \"web\",\n    description: \"The PropertyGrid widget displays objects as hierarchical structure and provides means to edit the properties and attributes of objects.\",\n    depends: [ \"excel\", \"menu\", \"treelist\" ]\n};\n\n(function($, undefined$1) {\n    const kendo = window.kendo,\n        ui = kendo.ui,\n        NS = \".kendoPropertyGrid\",\n        extend = $.extend,\n        kendoDom = kendo.dom,\n        kendoDomElement = kendoDom.element,\n        kendoHtmlElement = kendoDom.html,\n        kendoTextElement = kendoDom.text,\n        keys = $.extend({ F10: 121 }, kendo.keys),\n        Editable = ui.Editable,\n        TreeList = ui.TreeList,\n        isArray = Array.isArray,\n        isPlainObject = $.isPlainObject,\n        CHANGE = \"change\",\n        CLICK = \"click\",\n        EDIT = \"edit\",\n        EXPAND = \"expand\",\n        COLLAPSE = \"collapse\",\n        GROUP_EXPAND = \"groupExpand\",\n        GROUP_COLLAPSE = \"groupCollapse\",\n        COLUMNRESIZE = \"columnResize\",\n        CELL_CLOSE = \"cellClose\",\n        SAVE = \"save\",\n        CANCEL = \"cancel\",\n        BEFORE_EDIT = \"beforeEdit\",\n        PDF_EXPORT = \"pdfExport\",\n        CARET_ALT_DOWN = \"a[class*='-i-caret-alt-down']\",\n        CARET_ALT_RIGHT = \"a[class*='-i-caret-alt-right']\",\n        DOT = \".\",\n        GROUPING_ROW = \"k-grouping-row\",\n        TR = \"tr\",\n        TD = \"td\",\n        ARIA_LABEL = \"aria-label\",\n        COLLAPSE_ICON = \"caret-alt-down\",\n        EXPAND_ICON = \"caret-alt-right\";\n\n    const defaultBodyContextMenu = [\n        \"copy\",\n        \"copyName\",\n        \"copyDeclaration\",\n        \"separator\",\n        \"reset\",\n        \"separator\",\n        \"resize\",\n        \"separator\",\n        \"expandItem\",\n        \"collapseItem\",\n        \"separator\"\n    ];\n\n    const defaultCommands = {\n        group: {\n            name: \"group\",\n            type: \"button\",\n            text: 'Group Items',\n            togglable: true,\n            showText: \"overflow\",\n            icon: \"categorize\",\n            commandName: \"ToggleGroupLayout\",\n            attributes: {\n                title: \"Group Items\"\n            },\n            overflow: \"never\"\n        },\n        details: {\n            name: \"details\",\n            type: \"button\",\n            text: 'Toggle Info box',\n            togglable: true,\n            icon: \"info-circle\",\n            commandName: \"ToggleDetails\",\n            showText: \"overflow\",\n            attributes: {\n                title: \"Toggle Info box\"\n            },\n            overflow: \"never\"\n        },\n        sort: {\n            name: \"sort\",\n            component: \"DropDownList\",\n            componentOptions: {\n                commandOn: CHANGE,\n                dataTextField: \"text\",\n                dataValueField: \"value\",\n                dataSource: [\n                    { text: \"Default Sort\", value: \"none\" },\n                    { text: \"Sort A-Z\", value: \"asc\" },\n                    { text: \"Sort Z-A\", value: \"desc\" }\n                ],\n            },\n            attributes: {\n                class: \"k-property-grid-sort\",\n                title: \"Sort\"\n            },\n            overflow: \"never\"\n        },\n        search: {\n            name: \"search\",\n            component: \"TextBox\",\n            componentOptions: {\n                prefixOptions: {\n                    icon: \"search\"\n                },\n                placeholder: \"Search...\",\n            },\n            attributes: {\n                class: \"k-grid-search\"\n            },\n            overflow: \"never\"\n        },\n        separator: {\n            name: \"separator\",\n            type: \"separator\",\n        },\n        spacer: {\n            name: \"spacer\",\n            type: \"spacer\",\n        },\n        excel: {\n            name: \"excel\",\n            type: \"button\",\n            text: \"Export to Excel\",\n            showText: false,\n            icon: \"file-excel\",\n            commandName: \"ExcelExport\",\n            overflow: \"auto\"\n        },\n        pdf: {\n            name: \"excel\",\n            type: \"button\",\n            text: \"Export to PDF\",\n            showText: false,\n            icon: \"file-pdf\",\n            commandName: \"PDFExport\",\n            overflow: \"auto\"\n        },\n    };\n\n    function isNullorUndefined(value) {\n        return value === undefined$1 || value === null;\n    }\n\n    function isCollection(value) {\n        return typeof value === 'object' && isArray(value);\n    }\n\n    function isComplexObject(value) {\n        return typeof value === 'object' && !kendo.isDate(value);\n    }\n\n    function isEditable(value) {\n        return (kendo.type(value) != 'object' && kendo.type(value) != 'function');\n    }\n\n    function isColumnEditable(column, model) {\n        if (!column || !model || !column.field || column.selectable || column.command || column.draggable || (column.editable && !column.editable(model))) {\n            return false;\n        }\n\n        return (column.field && model.editable && model.editable(column.field));\n    }\n\n    function asArray(obj) {\n        return Object.entries(obj).map(x=>x[1]);\n    }\n\n    let PropertyGridDataSource = kendo.data.TreeListDataSource.extend({\n        groupedItemsTree: function(field) {\n            let map = this._childrenMap(this.view()),\n                defaultParentId = this._defaultParentId(),\n                currentChildren = map[defaultParentId] || [],\n                grouped = new kendo.data.Query(currentChildren).group({ field: field }).toArray();\n\n            return grouped;\n        },\n        filterGroupedItemsTree: function(expression, field) {\n            let dataSource = this;\n            let sort = this.sort() || {};\n            let filterExpression = expression || { filters: [], logic: \"or\" };\n            let map = this._childrenMap(this.data()),\n            defaultParentId = this._defaultParentId(),\n            currentChildren = map[defaultParentId] || [],\n            groups = new kendo.data.Query(currentChildren).sort(sort).group({ field: field }).toArray();\n            let filterItems = function(filterExpression, items) {\n                let filtered = [];\n                for (let i = 0; i < items.length; i++) {\n                    if (items[i].hasChildren && filterItems(filterExpression, dataSource.childNodes(items[i])).length > 0) {\n                        filtered.push(items[i]);\n                    }\n                }\n\n                return filtered.length != 0 ? filtered : new kendo.data.Query(items).sort(sort).filter(filterExpression).toArray();\n            };\n            let filteredGroups = [];\n            groups.forEach(function(itm) {\n                if (itm.items) {\n                    itm.items = filterItems(filterExpression,itm.items);\n                }\n                filteredGroups.push(itm);\n            });\n\n            return filteredGroups;\n        }\n    });\n\n    const DynamicInCellEditor = kendo.ui.treelist.editor.extend({\n        createEditable: function() {\n            let options = this.options;\n\n            this.fields[0].editor = options.model.editor;\n            this.fields[0].editorOptions = { ...options.model.editorOptions };\n\n            this.editable = new Editable(this.wrapper, {\n                fields: this.fields,\n                target: options.target,\n                clearContainer: options.clearContainer,\n                model: this.model,\n                change: options.change,\n            });\n\n        },\n        destroy: function() {\n            let that = this;\n\n            that.editable.destroy();\n\n            that.editable.element\n                .off()\n                .empty()\n                .removeAttr(kendo.attr(\"role\"));\n\n            that.model = that.wrapper = that.element = that.columns = that.editable = null;\n        }\n    });\n\n    const PropertyGrid = TreeList.extend({\n        init: function(element, options) {\n            const that = this;\n            that._processOptions(options);\n            that.options = extend(true, {}, that.options, options);\n            that._processedModel = that._processModel();\n            that._createDataSource();\n\n            TreeList.fn.init.call(that, element, that.options);\n            that._wrapper();\n            that._detailsBox();\n            that._groupable();\n\n            kendo.notify(that);\n        },\n\n        options: {\n            name: 'PropertyGrid',\n            model: {},\n            items: [],\n            columns: [{ field: \"field\" },{ field: \"value\", editable: function(e) { return isEditable(e.value); } }],\n            hasHeader: false,\n            groupable: true,\n            resizable: true,\n            contextMenu: false,\n            sortable: true,\n            selectable: true,\n            scrollable: true,\n            showDetails: true,\n            editable: \"incell\",\n            size: \"medium\",\n            defaultTools: [defaultCommands.search, defaultCommands.sort, defaultCommands.group, defaultCommands.details],\n            messages: {\n                defaultGroupName: \"Other\"\n            }\n        },\n\n        events: [\n            BEFORE_EDIT,\n            EDIT,\n            CHANGE,\n            EXPAND,\n            COLLAPSE,\n            COLUMNRESIZE,\n            GROUP_EXPAND,\n            GROUP_COLLAPSE,\n            CELL_CLOSE,\n            SAVE,\n            CANCEL,\n            PDF_EXPORT\n        ],\n\n        defaultEditors: {\n            string: \"TextBox\",\n            date: \"DatePicker\",\n            number: \"NumericTextBox\",\n            boolean: \"CheckBox\"\n        },\n\n        _groupContentTemplate: ({ groupName, action, icon }) => `<p class=\"k-reset\">${kendo.ui.icon($('<a href=\"#\" tabindex=\"-1\" ' + ARIA_LABEL + '=' + action + '></a>'), icon)}${groupName}</p>`,\n\n        _detailsTemplate: ({ description }) => `<span>${description || '&nbsp;'}</span>`,\n\n        _setEditable: function(value) {\n            const that = this;\n            that.options.editable = value;\n        },\n\n        _processOptions: function(options) {\n            const that = this;\n\n            kendo.type(options.editMode) === \"boolean\" && !options.editMode ? that._setEditable(false) : that._setEditable(\"incell\");\n            if (isNullorUndefined(options.toolbar)) {\n                options.toolbar = that.options.defaultTools;\n            }\n            that._extendColumnOptions(options);\n        },\n\n        _extendColumnOptions: function(options) {\n            const that = this;\n            if (!options.columns) {\n                return;\n            }\n            that.options.columns[0] = extend(true, options.columns.fieldColumn, that.options.columns[0]);\n            that.options.columns[1] = extend(true, options.columns.valueColumn, that.options.columns[1]);\n            delete options.columns;\n        },\n\n        _processSettings: function(obj, settings) {\n            const that = this;\n            settings.forEach((item) => {\n                if (obj[item.field]) {\n                    extend(obj[item.field], item);\n\n                    if (obj[item.field].items) {\n                        that._processSettings(obj[item.field].value, obj[item.field].items);\n                    }\n                }\n            });\n        },\n\n        _processModel: function() {\n            const that = this,\n            model = that.options.model,\n            options = that.options;\n\n            let flatData = that._flatten(model);\n            that._setDefaults(flatData);\n            that._processSettings(flatData, options.items );\n\n            return asArray(flatData);\n        },\n\n        _createDataSource: function() {\n            const that = this,\n            dataSource = new PropertyGridDataSource({\n                data: that._processedModel,\n                serverGrouping: false,\n                schema: {\n                    model: {\n                        id: \"id\",\n                        parentId: \"parentId\",\n                        expanded: true,\n                        fields: {\n                            field: { editable: false },\n                            value: { editable: true }\n                        }\n                    },\n                }\n            });\n\n            that.options.dataSource = dataSource;\n        },\n\n        _flatten: function(model) {\n            let id = 1;\n\n            function appendNested(result, key, nestedKeys, nestedObject, collectionIdx) {\n                if (!isNullorUndefined(collectionIdx)) {\n                    nestedKeys.forEach (nestedKey => {\n                        result[`${key}.${collectionIdx}.${nestedKey}`] = nestedObject[nestedKey];\n                        result[`${key}.${collectionIdx}.${nestedKey}`].parentId = result[`${key}.${collectionIdx}`].id;\n                    });\n                } else {\n                    nestedKeys.forEach (nestedKey => {\n                        result[`${key}.${nestedKey}`] = nestedObject[nestedKey];\n                    });\n                }\n            }\n\n            function flattenCollection(result, obj, key, parentId) {\n                const collection = obj[key];\n\n                result[key] = {\n                    id: id++,\n                    parentId: parentId,\n                    propType: \"Array\",\n                    field: key,\n                    value: collection,\n                };\n\n                for (let i = 0; i < collection.length; i++) {\n                    const nested = typeof collection[i] === \"object\" ?\n                        flattenObject(collection[i], result[key].id) :\n                        collection[i];\n\n                    result[`${key}.${i}`] = {\n                        id: id++,\n                        parentId: result[key].id,\n                        propType: typeof obj[key],\n                        field: `${key}[${i}]`,\n                        value: nested\n                    };\n\n                    if (typeof collection[i] === \"object\") {\n                        const nestedKeys = Object.keys(nested);\n                        appendNested(result, key, nestedKeys, nested, i);\n                    }\n                }\n            }\n\n            function flattenObject(obj, parentId) {\n                const result = {},\n                keys = Object.keys(obj || { } );\n\n                keys.forEach ((key) => {\n                    if (isNullorUndefined(obj[key])) {\n                        result[key] = {\n                            id: id++,\n                            parentId: parentId,\n                            propType: typeof obj[key],\n                            field: key,\n                            value: obj[key]\n                        };\n                    } else if (isCollection(obj[key])) {\n                        flattenCollection(result, obj, key, parentId);\n                    } else if (isComplexObject(obj[key])) {\n                        let tempId = id++;\n                        const nestedObject = flattenObject(obj[key], tempId);\n                        const nestedKeys = Object.keys(nestedObject);\n\n                        result[key] = {\n                            id: tempId,\n                            parentId: parentId,\n                            propType: typeof obj[key],\n                            field: key,\n                            value: nestedObject,\n                        };\n\n                        appendNested(result, key, nestedKeys, nestedObject);\n                    } else {\n                        let parsed = kendo.parseDate(obj[key].toString());\n                        result[key] = {\n                            id: id++,\n                            parentId: parentId,\n                            propType: parsed != null ? typeof parsed : typeof obj[key],\n                            field: key,\n                            value: parsed != null ? parsed : obj[key]\n                        };\n                    }\n                });\n\n                return result;\n            }\n\n            return flattenObject(model, null);\n        },\n\n        _setDefaults: function(obj) {\n            const that = this;\n\n            Object.keys(obj).forEach(key => {\n                if (that.options.groupable && !obj[key].group) {\n                    obj[key].group = that.options.messages.defaultGroupName;\n                }\n                that._setDefaultEditor(obj[key]);\n            });\n        },\n\n        _setDefaultEditor: function(obj) {\n            const that = this,\n            type = kendo.type(obj.value);\n            switch (type) {\n                case \"date\":\n                    obj.editor = that.defaultEditors.date;\n                    break;\n                case \"boolean\":\n                    obj.editor = that.defaultEditors.boolean;\n                    break;\n                case \"number\":\n                    obj.editor = that.defaultEditors.number;\n                    break;\n                default:\n                    obj.editor = that.defaultEditors.string;\n                    break;\n            }\n        },\n\n        _createIncellEditor: function(cell, options) {\n            const that = this;\n            let column = extend({}, options.columns[0]);\n            options.model.fields.value.validation = options.model.validation ? options.model.validation.toJSON() : {};\n            delete column.parentColumn;\n\n            return new DynamicInCellEditor(cell, extend({}, {\n                fieldRenderer: that._cellContent.bind(that),\n                appendTo: that.wrapper,\n                clearContainer: false,\n                target: that,\n                columns: [column],\n                model: options.model,\n                change: options.change\n            }));\n        },\n\n        _createDirtyTemplate: function(model) {\n            const that = this;\n            let templateSettings = that._customTemplateSettings();\n            let dirtyIndicator = function(data) {\n                    return '<span class=\"k-dirty\"></span>';\n                };\n            let templateFunction = function(data) {\n                return (dirtyIndicator() + kendo.template(model.template)(model));\n            };\n\n            return kendo.template(templateFunction, templateSettings).bind({ columnTemplate: model.template });\n        },\n\n        _cellContent: function(column, model) {\n            const that = this,\n            incellEditing = that._isIncellEditable(),\n            isValueColumn = column.field == \"value\";\n            let value, dirtyIndicator, template;\n\n            if (isValueColumn && model.template) {\n                template = model.dirty ? that._createDirtyTemplate(model) : kendo.template(model.template);\n                value = template(model);\n            } else if (column.field) {\n                value = model.get(column.field);\n                dirtyIndicator = incellEditing ? column.dirtyIndicatorTemplate(model) : \"\";\n                if (!isNullorUndefined(value)) {\n                    if (model.format) {\n                        value = kendo.format(model.format, value);\n                    }\n\n                    value = dirtyIndicator + value;\n                } else {\n                    value = dirtyIndicator;\n                }\n            } else if (isNullorUndefined(value)) {\n                value = \"\";\n            }\n\n            if (model.template) {\n                return kendoHtmlElement(value);\n            } else {\n                if (incellEditing) {\n                    return isEditable(model.value) && isValueColumn ? that._editableCellContent(value) : kendoHtmlElement(value);\n                } else {\n                    return kendoTextElement(value);\n                }\n            }\n        },\n\n        _editableCellContent: function(value) {\n            let bTag = kendoDomElement(\"b\");\n            let content = kendoHtmlElement(value);\n            bTag.children.push(content);\n            return bTag;\n        },\n\n        _generateGroupRow: function(item) {\n            const that = this;\n            let groupRowContent = (kendo.template(that._groupContentTemplate)({\n                groupName: item.value,\n                action: item.visible ? COLLAPSE : EXPAND,\n                icon: item.visible ? COLLAPSE_ICON : EXPAND_ICON\n            }));\n            let tdElement = kendoDomElement(TD, { className: \"k-table-td\", class: \"k-table-td\", colSpan: \"3\" , role: \"gridcell\", \"aria-expanded\": item.visible, visible: true }, [kendo.dom.html(groupRowContent)] );\n            let trElement = kendoDomElement(TR, { className: \"k-table-group-row k-grouping-row k-table-row\", role: \"row\" , \"data-uid\": item.uid }, [tdElement] );\n            return trElement;\n        },\n\n        _generateDetailsBox: function() {\n            const that = this;\n            let tdElement = kendoDomElement(TD, { className: \"k-table-td\", class: \"k-table-td\", colSpan: that.grouped ? 3 : 2 , role: \"gridcell\", visible: true }, [kendo.dom.html(\"<span>&nbsp;</span>\")] );\n            let trElement = kendoDomElement(TR, {\n                className: `k-details-box k-bottom k-sticky k-footer-template k-table-row ${!that.visibleDetails ? 'k-hidden' : ''}`,\n                role: \"row\"\n            }, [tdElement] );\n            return trElement;\n        },\n\n        _renderRows: function(options, data, columns, selected, childrenMap, viewChildrenMap, hasFooterTemplate) {\n            const that = this;\n            let selectedRow = selected.length ? selected : that._selectedRowUid;\n            let rows = [];\n            if (that.grouped) {\n                if (that.table.find(\">colgroup>col.k-group-col\").length === 0) {\n                    that.table.find(\">colgroup\").prepend('<col class=\"k-group-col\">');\n                }\n                that._groupedData.forEach(item => {\n                    let groupTr = that._generateGroupRow(item);\n\n                    rows.push(groupTr);\n                    rows = rows.concat(that._trs({\n                        columns: columns,\n                        editedColumn: options.editedColumn,\n                        editedColumnIndex: options.editedColumnIndex,\n                        aggregates: options.aggregates,\n                        selected: selectedRow,\n                        data: item.items,\n                        childrenMap: childrenMap,\n                        viewChildrenMap: viewChildrenMap,\n                        hasFooterTemplate: hasFooterTemplate,\n                        visible: item.visible,\n                        level: 0\n                    }));\n                });\n            } else {\n                that.table.find(\">colgroup>col.k-group-col\").remove();\n                rows = rows.concat(this._trs({\n                    columns: columns,\n                    editedColumn: options.editedColumn,\n                    editedColumnIndex: options.editedColumnIndex,\n                    aggregates: options.aggregates,\n                    selected: selectedRow,\n                    data: data,\n                    childrenMap: childrenMap,\n                    viewChildrenMap: viewChildrenMap,\n                    hasFooterTemplate: hasFooterTemplate,\n                    visible: true,\n                    level: 0\n                }));\n            }\n\n            if (that.options.showDetails) {\n                rows.push(that._generateDetailsBox());\n            }\n\n            that._contentTree.render(rows);\n        },\n\n        _generateRowOptions: function(model, attr, pageable, options, level, hasChildren) {\n            const that = this;\n\n            let rowOptions = {\n                model: model,\n                attr: attr,\n                level: pageable ? that._renderedModelLevel(model, options) : level,\n                editedColumn: options.editedColumn,\n                editedColumnIndex: options.editedColumnIndex,\n                hasChildren: hasChildren,\n                visible: options.visible,\n                isAlt: this._absoluteIndex % 2 === 0,\n                grouped: that.options.groupable && that.grouped\n            };\n            return rowOptions;\n        },\n\n        _renderRow: function(rowOptions, columns, renderer) {\n            let row = this._tds(rowOptions, columns, renderer);\n\n            if (rowOptions.grouped) {\n                let groupTdElement = kendoDomElement(TD, { class: \"k-table-td k-group-cell\", className: \"k-table-td k-group-cell\" });\n                row.children.splice(0,0,groupTdElement);\n            }\n            return row;\n        },\n\n        editCell: function(cell) {\n            const that = this;\n            let cellIndex;\n            cell = $(cell);\n            cellIndex = that.grouped ? that.cellIndex(cell) - 1 : that.cellIndex(cell);\n            let column = that.columns[cellIndex];\n            let model = that.dataItem(cell);\n\n            if (that._isIncellEditable() && model && isColumnEditable(column, model)) {\n                that._editCell(cell, column, model, cellIndex);\n            }\n        },\n\n        _wrapper: function() {\n            const that = this;\n            that.element.css(\"width\", this.options.width);\n            that.wrapper.addClass(\"k-property-grid\");\n        },\n\n        _toolbar: function() {\n            const that = this,\n            options = that.options;\n            let toolbarOptions = options.toolbar;\n            let toolbar = this.toolbar;\n\n\n            if (!toolbarOptions) {\n                return;\n            }\n\n            if (Array.isArray(toolbarOptions)) {\n                let items = that._processToolbarItems(toolbarOptions);\n                items = that._verifyItems(items);\n\n                toolbar.kendoToolBar({\n                    size: \"medium\",\n                    resizable: true,\n                    navigateOnTab: !options.navigatable,\n                    items: items,\n                });\n\n                toolbar.find(\".k-grid-search .k-input-inner\").attr({\n                    placeholder: options.messages.commands.search,\n                    title: options.messages.commands.search\n                });\n\n                that._attachToolbarHandlers();\n            } else {\n                toolbar.append(kendo.template(toolbarOptions)({}));\n            }\n\n        },\n\n        _attachToolbarHandlers: function() {\n            const that = this;\n            let toolbarWidget = that.toolbar.getKendoToolBar();\n            let sortElement = toolbarWidget.element.find('[data-command=\"sort\"] input');\n\n            toolbarWidget.bind(\"toggle\", that._toolbarClick.bind(that));\n            toolbarWidget.bind(\"click\", that._toolbarClick.bind(that));\n\n            if (sortElement.length > 0) {\n                sortElement.getKendoDropDownList().bind(\"change\", that._sortItems.bind(that));\n            }\n        },\n\n        _verifyItems: function(items) {\n            const that = this;\n            if ((!that.options.groupable || !that.options.items.some(x=>x.hasOwnProperty(\"group\")) )) {\n                items = items.filter(x=>x.name != \"group\");\n            }\n            if (!(that.options.showDetails && that.options.selectable) && items.findIndex(x=>x.name == \"details\") > 0) {\n                items = items.filter(x=>x.name != \"details\");\n            }\n            return items;\n        },\n\n        _getCommandType: function(command) {\n            if (command.type) {\n                return command.type;\n            }\n\n            if (command.template) {\n                return null;\n            }\n\n            return \"button\";\n        },\n\n        _processToolbarItems: function(commands) {\n            const that = this,\n            messages = that.options.messages.commands;\n            let items = [];\n\n            commands.map(command => {\n                let name = (isPlainObject(command) ? command.name || \"\" : command).toLowerCase();\n                let text = messages[name];\n\n                if (!name && !(isPlainObject(command) && command.template)) {\n                    throw new Error(\"Commands should have name specified\");\n                }\n\n                command = extend({}, defaultCommands[name], {\n                    name: name,\n                    text: text || (defaultCommands[name] || {}).text,\n                    type: that._getCommandType(defaultCommands[name] || {})\n                }, command);\n\n                if (command.imageClass) {\n                    command.spriteCssClass = command.imageClass;\n                    command.iconClass = command.imageClass;\n                }\n\n                if (!command.attributes) {\n                    command.attributes = {};\n                }\n\n                command.attributes[\"data-command\"] = command.commandName || name;\n\n                if (command.menuButtons || command.buttons) {\n                    delete command.name;\n                }\n\n                command.click = (e) => {\n                    let origEvent = e.event || e.originalEvent;\n                    if (origEvent) {\n                        origEvent.preventDefault();\n                        origEvent.stopPropagation();\n                    }\n\n                    that._commandClick({\n                        currentTarget: e.target\n                    });\n                };\n\n                if (command.className) {\n                    if (!command.attributes) {\n                        command.attributes = {};\n                    }\n\n                    command.attributes[\"class\"] = command.className;\n                }\n                command.attributes[\"title\"] = text || command.attributes[\"title\"];\n\n                items.push(command);\n            });\n\n            return items;\n        },\n\n        _toolbarClick: function(ev) {\n            let command = $(ev.target).data(\"command\"),\n                options = $(ev.target).data(\"options\");\n\n            if (!!$(ev.target).val()) {\n                options = extend({}, options, { value: $(ev.target).val() });\n            }\n\n            if (!command || !ui.propertygrid.commands[command] ) {\n                return;\n            }\n\n            this._action({\n                command: command,\n                options: options\n            });\n        },\n\n        _sortItems: function(e) {\n            const that = this,\n\n            dataSource = that.dataSource,\n            dir = e.sender.value();\n            let sort = dir === \"none\" ? {} : { field: \"field\", dir: dir };\n\n            dataSource.sort(sort);\n            that._groupedData = dataSource.filterGroupedItemsTree(dataSource.filter(),\"group\").map(itm => ({\n                ...itm,\n                visible: that._groupedData.filter(x=>x.value == itm.value)[0].visible,\n                uid: that._groupedData.filter(x=>x.value == itm.value)[0].uid\n            }));\n\n            if (that.grouped) {\n                that.refresh();\n            }\n        },\n\n        _initContextMenu: function() {\n            const that = this,\n            options = that.options;\n\n            if (!options.contextMenu) {\n                return;\n            }\n\n            let tbodyContextMenu = isPlainObject(options.contextMenu) && isArray(options.contextMenu.body) ? { items: options.contextMenu.body } : { items: defaultBodyContextMenu };\n\n            let mainOptions = isPlainObject(options.contextMenu) ? options.contextMenu : {};\n\n            tbodyContextMenu = extend({}, {\n                messages: options.messages,\n                target: that.tbody,\n                filter: \".k-table-row:not(.k-grouping-row,.k-details-box) > .k-table-td\",\n                action: that._action.bind(that),\n                states: that._buildStates()\n            }, mainOptions, tbodyContextMenu);\n\n            that.tbodyContextMenu = new ui.propertygrid.ContextMenu(\"<ul></ul>\", tbodyContextMenu);\n        },\n\n        _buildStates: function() {\n            const that = this;\n\n            return {\n                isResizable: that.options.resizable,\n                isEditable: that.options.editable,\n                windowHasSelection: () => (typeof window.getSelection != 'undefined' && window.getSelection().rangeCount != 0 && window.getSelection().getRangeAt(0).toString() != ''),\n                isDirty: (target)=> {\n                    let dataItem = this.dataItem(target);\n                    return dataItem.dirty;\n                },\n                isNotInEditMode: (target) => !target.closest(\"td\").hasClass(\"k-edit-cell\"),\n                isNotGroupColumn: (target) => !target.closest(\"td\").hasClass(\"k-group-cell\"),\n                isExpandable: (target) => {\n                    let dataItem = this.dataItem(target);\n                    return (dataItem && dataItem.hasChildren && !dataItem.expanded);\n                },\n                isCollapsible: (target) => {\n                    let dataItem = this.dataItem(target);\n                    return (dataItem && dataItem.hasChildren && dataItem.expanded);\n                }\n            };\n        },\n\n        _action: function(args) {\n            let commandName = args.command,\n                commandOptions = extend({ propertyGrid: this }, args.options),\n                command = new ui.propertygrid.commands[commandName](commandOptions);\n\n            return command.exec();\n        },\n\n        _objectFromNodes: function(rootNodes) {\n            const that = this,\n            hashTable = Object.create(null),\n            dataSource = that.dataSource;\n            rootNodes = isArray(rootNodes) ? rootNodes : [rootNodes];\n\n            rootNodes.forEach((node) => {\n                if (node.propType == \"Array\") {\n                    hashTable[node.field] = [];\n                    dataSource.childNodes(node).forEach((childNode) => {\n                        hashTable[node.field].push(childNode.hasChildren ? that._objectFromNodes(dataSource.childNodes(childNode)) : childNode.value);\n                    });\n                } else {\n                    hashTable[node.field] = node.hasChildren ? that._objectFromNodes(dataSource.childNodes(node)) : node.value;\n                }\n            });\n\n            return hashTable;\n        },\n\n        _groupable: function() {\n            const that = this;\n            that._groupedData = that.dataSource.groupedItemsTree(\"group\").map(itm => ({ ...itm, visible: true, uid: kendo.guid() }));\n            that._groupableClickHandler = function(e) {\n                let element = $(this),\n                groupRow = element.closest(TR);\n\n                let group = that._groupedData.filter(x=>x.value === groupRow.text())[0];\n                group.visible = !group.visible;\n\n                if (element.is(CARET_ALT_DOWN)) {\n                    if (!that.trigger(GROUP_COLLAPSE, { group: group.items, element: groupRow })) {\n                        that.refresh();\n                    }\n                } else {\n                    if (!that.trigger(GROUP_EXPAND, { group: group.items, element: groupRow })) {\n                        that.refresh();\n                    }\n                }\n                e.preventDefault();\n                e.stopPropagation();\n            };\n\n            that.table.on(CLICK + NS, \".k-grouping-row \" + CARET_ALT_RIGHT + \", .k-grouping-row \" + CARET_ALT_DOWN, that._groupableClickHandler)\n                .on(\"keydown\" + NS, that._groupRowKeyDown.bind(that));\n\n        },\n\n        _groupRowKeyDown: function(e) {\n            const that = this,\n            current = that.current();\n            let handled = false;\n\n            if (!that.options.navigatable) {\n                return;\n            }\n\n            if (e.keyCode == keys.ENTER) {\n                kendo.focusElement(that.table);\n                that._setCurrent(that._findCurrentCell());\n                handled = true;\n            }\n\n            if ((e.keyCode == keys.LEFT || e.keyCode == keys.RIGHT) && e.altKey) {\n                handled = this._handleGroupRowExpandCollapse(current, e.keyCode);\n            }\n\n            if (handled) {\n                e.preventDefault();\n                e.stopPropagation();\n            }\n        },\n\n        _handleGroupRowExpandCollapse: function(current, keyCode) {\n            const that = this,\n                row = current.parent();\n\n            if (row.is(DOT + GROUPING_ROW)) {\n                let visible = that._groupedData.filter(x=>x.value === row.text())[0].visible;\n\n                if (visible && keyCode == keys.LEFT || !visible && keyCode == keys.RIGHT) {\n                    that._toggleGroup(row);\n                    return true;\n                }\n\n            }\n        },\n\n        _toggleGroup: function(groupRow) {\n            const that = this;\n            let group = that._groupedData.filter(x=>x.value === groupRow.text())[0];\n                group.visible = !group.visible;\n                that.refresh();\n        },\n\n        _search: function(e) {\n            let that = this;\n            let input = e.currentTarget;\n            clearTimeout(that._searchTimeOut);\n            that._searchTimeOut = setTimeout(function() {\n                that._searchTimeOut = null;\n                let options = that.options,\n                searchFields = options.search ? options.search.fields : [\"field\",\"value\"],\n                expression = { filters: [], logic: \"or\" },\n                value = input.value;\n\n                if (value) {\n                    for (let i = 0; i < searchFields.length; i++) {\n                        expression.filters.push({ field: searchFields[i], operator: \"contains\", value: value });\n                    }\n                }\n\n                that._groupedData = that.dataSource.filterGroupedItemsTree(expression,\"group\").map(itm => ({ ...itm, visible: true, uid: that._groupedData.filter(x=>x.value == itm.value)[0].uid }));\n                that.dataSource.filter(expression);\n                that._refreshLayout();\n                that._updateDetails();\n            }, 300);\n        },\n\n        _refreshLayout: function() {\n            const that = this;\n            that._selectedRowUid = that.select().removeClass(\"k-selected\").map(function(_, row) {\n                return $(row).attr(\"data-uid\");\n            });\n            that._contentTree.render([]);\n            that._render();\n        },\n\n        _detailsBox: function() {\n            const that = this,\n            options = that.options;\n\n            that._detailsTemplate = options.detailsTemplate ? options.detailsTemplate : that._detailsTemplate;\n\n            if (!options.showDetails) {\n                return;\n            }\n\n            that.detailsContainer = that.wrapper.find(\"table > tr.k-details-box > td\");\n            that.bind(CHANGE, that._updateDetails);\n        },\n\n        _updateDetails: function() {\n            const that = this;\n            if (!that.options.selectable) {\n                return;\n            }\n            let dataItem = that.dataItem(that.select());\n\n            dataItem ? that.table.find(\"tr.k-details-box > td\").html(kendo.template(that._detailsTemplate)(dataItem)) : that._clearDetails();\n        },\n\n        _clearDetails: function() {\n            const that = this;\n            let content = '<span>&nbsp;</span>';\n            that.table.find(\"tr.k-details-box > td\").html(content);\n        },\n\n        model: function(model, items) {\n            const that = this;\n            if (!model) {\n                return that._objectFromNodes(that.dataSource.rootNodes());\n            }\n\n            that.options.model = model;\n            if (items) {\n                that.options.items = items;\n            }\n\n            that._processedModel = that._processModel();\n            that.setDataSource(new PropertyGridDataSource({\n                data: that._processedModel,\n                serverGrouping: false,\n                schema: {\n                    model: {\n                        id: \"id\",\n                        parentId: \"parentId\",\n                        expanded: true,\n                        fields: {\n                            field: { editable: false },\n                            value: { editable: true }\n                        }\n                    },\n                }\n            }));\n\n        },\n\n        selectItem: function(value) {\n            const that = this;\n            return that.select(value);\n        },\n\n        toggleItem: function(row) {\n            const that = this;\n            const dataItem = that.dataItem(row);\n\n            dataItem.expanded ? that.collapse(row) : that.expand(row);\n        },\n\n        toggleGroup: function(row) {\n            const that = this;\n            if (!$(row).is(DOT + GROUPING_ROW)) {\n                return;\n            }\n\n           that._toggleGroup(row);\n        },\n\n        toggleDetails: function() {\n            const that = this;\n            if (!that.options.showDetails) {\n                return;\n            }\n\n            that._action({ command: \"ToggleDetails\" });\n        },\n\n        edit: function(cell) {\n            const that = this;\n            that.editCell(cell);\n        },\n\n        saveState: function() {\n            const that = this;\n            that.saveChanges();\n        },\n\n        resetState: function() {\n            const that = this;\n            that.cancelChanges();\n        },\n\n        setOptions: function(options) {\n            const that = this;\n            let currentOptions = that.getOptions(),\n            wrapper = that.wrapper,\n            events = that._events,\n            element = that.element;\n\n            delete currentOptions.model;\n            kendo.deepExtend(currentOptions, options);\n            that.model = that.options.model = options.model || { };\n\n            that.destroy();\n\n            if (wrapper[0] !== element[0]) {\n                wrapper.before(element);\n                wrapper.remove();\n            }\n            element.empty();\n\n            that.init(element, currentOptions, events);\n            that._setEvents(currentOptions);\n        },\n\n        destroy: function() {\n            const that = this;\n            if (this.tbodyContextMenu) {\n                this.tbodyContextMenu.destroy();\n                this.tbodyContextMenu = null;\n            }\n\n            TreeList.fn.destroy.call(that);\n        },\n\n    });\n\n    let PropertyGridExcelExporter = kendo.excel.ExcelExporter.extend({\n        init: function(options) {\n            options.columns = this._trimColumns(options.columns || []);\n\n            this.allColumns = $.map(this._leafColumns(options.columns || []), this._prepareColumn);\n\n            this.columns = this._visibleColumns(this.allColumns);\n            this.widget = options.widget;\n            this.options = options;\n            this.data = options.data || [];\n            this.aggregates = options.aggregates || {};\n            this.groups = [].concat(options.groups || []);\n            this.hasGroups = this.groups.length > 0;\n            this.hierarchy = options.hierarchy;\n            this.hasGroupHeaderColumn = this.columns.some(function(column) { return column.groupHeaderColumnTemplate; });\n            this.collapsible = this.options.collapsible;\n        },\n\n        _recursiveRows: function(rows, item) {\n            let this$1$1 = this;\n            let level = this$1$1.widget.dataSource.level(item);\n            rows.push(...this$1$1._dataRow(item, level + 1, this._depth()));\n\n            if (item.hasChildren) {\n                let children = this$1$1.widget.dataSource.childNodes(item);\n                for (let itmIdx = 0; itmIdx < children.length; itmIdx++) {\n                    let item = children[itmIdx];\n\n                    this._recursiveRows(rows,item);\n                }\n            }\n        },\n\n        _buildGroupedDataRows: function(data, rows, colSpan) {\n            for (let idx = 0; idx < data.length; idx++) {\n                let groupItem = data[idx];\n                rows.push({\n                    type: \"group-header\",\n                    cells: [ {\n                        value: groupItem.value,\n                        colSpan: colSpan,\n                        background: \"#dfdfdf\",\n                        color: \"#333\",\n                    } ],\n                    level: null\n                });\n                for (let itmIdx = 0; itmIdx < groupItem.items.length; itmIdx++) {\n                    let item = groupItem.items[itmIdx];\n\n                    this._recursiveRows(rows,item);\n                }\n            }\n        },\n\n        _buildDataRows: function(data, rows, parents) {\n            let this$1$1 = this;\n            let depth = this._depth();\n            let itemLevel = this.hierarchy.itemLevel;\n            let itemId = this.hierarchy.itemId;\n            let hasFooter = this._hasFooterTemplate();\n            let previousLevel = 0;\n            let previousItemId;\n\n            for (let idx = 0; idx < data.length; idx++) {\n                let item = data[idx];\n                let level = itemLevel(item, idx);\n\n                if (hasFooter) {\n                    if (level > previousLevel) {\n                        parents.push({ id: previousItemId, level: previousLevel });\n                    } else if (level < previousLevel) {\n                        rows.push(...this$1$1._hierarchyFooterRows(parents, level, depth));\n                    }\n\n                    previousLevel = level;\n                    previousItemId = itemId(item, idx);\n                }\n\n                rows.push(...this$1$1._dataRow(item, level + 1, depth));\n            }\n\n            if (hasFooter) {\n                rows.push(...this._hierarchyFooterRows(parents, 0, depth));\n\n                let rootAggregate = data.length ? this.aggregates[data[0].parentId] : {};\n                rows.push(this._hierarchyFooter(rootAggregate, 0, depth));\n            }\n        },\n\n        _hierarchyRows: function() {\n            let this$1$1 = this;\n\n            let depth = this._depth();\n            let data = this.data;\n            let hasFooter = this._hasFooterTemplate();\n            let rows = [];\n            let parents = [];\n\n            if (!hasFooter) {\n                this.collapsible = false;\n            }\n\n            if (this$1$1.widget.grouped) {\n                data = this$1$1.widget.dataSource.groupedItemsTree(\"group\");\n                let colSpan = depth + this$1$1.widget.columns.length;\n                this$1$1._buildGroupedDataRows(data, rows, colSpan);\n            } else {\n                this$1$1._buildDataRows(data, rows, parents);\n            }\n            this._prependHeaderRows(rows);\n\n            return rows;\n        }\n    });\n\n    kendo.PropertyGridExcelExporter = kendo.ExcelExporter.extend({\n        workbook: function() {\n            return $.Deferred((function(d) {\n                this.dataSource.fetch()\n                    .then((function() {\n\n                        let workbook = new PropertyGridExcelExporter(extend({}, this.options, this._hierarchy(), {\n                            data: this.dataSource.view(),\n                            groups: this.dataSource.group(),\n                            aggregates: this.dataSource.aggregates()\n                        })).workbook();\n\n                        d.resolve(workbook, this.dataSource.view());\n                    }).bind(this));\n            }).bind(this)).promise();\n        }\n    });\n\n    let PropertyGridExcelMixin = {\n        extend: function(proto) {\n           proto.events.push(\"excelExport\");\n           proto.options.excel = $.extend(proto.options.excel, this.options);\n           proto.saveAsExcel = this.saveAsExcel;\n        },\n        options: {\n            proxyURL: \"\",\n            filterable: false,\n            fileName: \"Export.xlsx\"\n        },\n        saveAsExcel: function() {\n            let excel = this.options.excel || {};\n\n            let exporter = new kendo.PropertyGridExcelExporter({\n                widget: this,\n                columns: this.columns,\n                dataSource: this.dataSource,\n                data: this.dataSource.data(),\n                allPages: excel.allPages,\n                filterable: excel.filterable,\n                hierarchy: excel.hierarchy,\n                collapsible: excel.collapsible\n            });\n\n            exporter.workbook().then((function(book, data) {\n                if (!this.trigger(\"excelExport\", { workbook: book, data: data })) {\n                    let workbook = new kendo.ooxml.Workbook(book);\n\n                    if (!workbook.options) {\n                        workbook.options = {};\n                    }\n                    workbook.options.skipCustomHeight = true;\n\n                    workbook.toDataURLAsync().then(function(dataURI) {\n                        kendo.saveAs({\n                            dataURI: dataURI,\n                            fileName: book.fileName || excel.fileName,\n                            proxyURL: excel.proxyURL,\n                            forceProxy: excel.forceProxy\n                        });\n\n                        exporter._restoreExpandedState();\n                    });\n\n                }\n            }).bind(this));\n        },\n    };\n\n    kendo.PropertyGridExcelMixin = PropertyGridExcelMixin;\n\n    if (kendo.ooxml && kendo.ooxml.Workbook) {\n        PropertyGridExcelMixin.extend(PropertyGrid.prototype);\n    }\n\n    kendo.ui.propertygrid = kendo.ui.propertygrid || {};\n\n    extend(kendo.ui.propertygrid, {\n        defaultBodyContextMenu: defaultBodyContextMenu,\n    });\n\n    kendo.cssProperties.propertyDictionary[\"PropertyGrid\"] = kendo.cssProperties.propertyDictionary[\"TreeList\"];\n    kendo.cssProperties.registerPrefix(\"PropertyGrid\", \"k-property-grid-\");\n\n    kendo.ui.plugin(PropertyGrid);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}