{"version":3,"sources":["raw-mjs/kendo.html.icon.js"],"names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","extend","HTMLBase","html","KI_PREFFIX","KSVG_PREFFIX","FLIP_PREFIX","FLIP_HORIZONTAL","FLIP_VERTICAL","ICON_TYPES","svg","element","options","HTMLSvgIcon","font","HTMLFontIcon","FLIP_CLASSES","default","horizontal","vertical","both","HTMLBaseIcon","init","fn","call","this","_wrapper","size","themeColor","flip","iconClass","stylingOptions","_addClasses","that","previouslyAddedClasses","wrapper","data","map","option","cssProperties","getValidClass","widget","propName","value","prefix","fill","fillMode","removeClass","filter","x","_className","join","concat","addClass","icon","currentIconClass","className","split","find","includes","startsWith","empty","svgElm","regex","iconNameMatch","match","replace","isString","toUpperCase","ui","svgIcons","attr","isPlainObject","viewBox","focusable","xmlns","content","append","outerHTML","renderIcon","isPresent","type","defaults","iconType","isFunction","getIconRenderer","registerPrefix","registerValues","prop","values","sizeValues","jQuery","kendo$1"],"mappings":"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","file":"kendo.html.icon.js","sourcesContent":["import './kendo.html.base.js';\n\nvar __meta__ = {\n    id: \"html.icon\",\n    name: \"Html.Icon\",\n    category: \"web\",\n    description: \"HTML font icon rendering utility for Kendo UI for jQuery.\",\n    depends: [\"html.base\"]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        extend = $.extend,\n        HTMLBase = kendo.html.HTMLBase;\n\n    var KFONTICON = 'k-icon k-font-icon';\n    var KI_PREFFIX = 'k-i-';\n    var KSVGICON = 'k-icon k-svg-icon';\n    var KSVG_PREFFIX = 'k-svg-i-';\n\n    var FLIP_PREFIX = 'k-flip-';\n    var FLIP_HORIZONTAL = `${FLIP_PREFIX}h`;\n    var FLIP_VERTICAL = `${FLIP_PREFIX}v`;\n\n    var THEME_COLOR_PREFIX = 'k-color-';\n\n    var ICON_TYPES = {\n        'svg': (element, options) => new HTMLSvgIcon(element, options),\n        'font': (element, options) => new HTMLFontIcon(element, options)\n    };\n\n    var FLIP_CLASSES = {\n        default: '',\n        horizontal: FLIP_HORIZONTAL,\n        vertical: FLIP_VERTICAL,\n        both: `${FLIP_HORIZONTAL} ${FLIP_VERTICAL}`\n    };\n\n    var renderIcon = function(element, options) {\n        if (!element || $.isPlainObject(element) || kendo.isString(element)) {\n            options = element;\n            element = $(\"<span></span>\");\n        }\n\n        if (kendo.isString(options)) {\n            options = {\n                icon: options\n            };\n        }\n\n        if (!kendo.isPresent(options.type)) {\n            options.type = kendo.defaults.iconType ? kendo.defaults.iconType : 'svg';\n        }\n\n        if (kendo.isFunction(options.type)) {\n            return options.type(element, options);\n        }\n\n        if (!kendo.isFunction(ICON_TYPES[options.type])) {\n            return null;\n        }\n\n        return (ICON_TYPES[options.type](element, options)).html();\n    };\n\n    var HTMLBaseIcon = HTMLBase.extend({\n        init: function(element, options) {\n            var that = this;\n            HTMLBase.fn.init.call(that, element, options);\n            that._wrapper();\n        },\n        options: {\n            name: 'HTMLIcon',\n            size: 'none',\n            themeColor: 'none',\n            flip: 'default',\n            iconClass: '',\n            stylingOptions: [ 'size', 'themeColor', 'fill' ]\n        },\n        _wrapper: function() {\n            var that = this;\n\n            that._addClasses();\n        },\n        _addClasses: function() {\n            var that = this,\n                options = that.options,\n                stylingOptions = options.stylingOptions,\n                previouslyAddedClasses = that.wrapper.data(\"added-classes\");\n\n            stylingOptions = stylingOptions.map(function(option) {\n                if (option === 'themeColor') {\n                    return kendo.cssProperties.getValidClass({\n                        widget: options.name,\n                        propName: option,\n                        value: options[option],\n                        prefix: THEME_COLOR_PREFIX\n                    });\n                }\n\n                if (option === 'fill') {\n                    return FLIP_CLASSES[options.flip];\n                }\n\n                return kendo.cssProperties.getValidClass({\n                    widget: options.name,\n                    propName: option,\n                    value: options[option],\n                    fill: options.fillMode\n                });\n            });\n\n            if (previouslyAddedClasses) {\n                that.wrapper.removeClass(previouslyAddedClasses.filter(x => x !== that._className).join(\" \"));\n            }\n\n            that.wrapper.data(\"added-classes\", stylingOptions.concat([that._className]));\n            that.wrapper.addClass(stylingOptions.join(\" \"));\n        }\n    });\n\n    var HTMLFontIcon = HTMLBaseIcon.extend({\n        init: function(element, options) {\n            HTMLBaseIcon.fn.init.call(this, element, options);\n        },\n        options: extend({}, HTMLBaseIcon.fn.options, {\n            name: 'HTMLFontIcon',\n            icon: null\n        }),\n        _wrapper: function() {\n            var that = this,\n                // Find if there is an existing k-i- class appended to the element.\n                currentIconClass = that.element[0].className.split(\" \").find(x => x.includes(KI_PREFFIX)),\n                className = that.options.icon ? `${that.options.icon.startsWith(KI_PREFFIX) ? \"\" : KI_PREFFIX}${that.options.icon}` : \"\";\n\n            that._className = className;\n            that.wrapper = that.element\n                .addClass(KFONTICON)\n                .removeClass(currentIconClass) // Remove any existing icons.\n                .addClass(className)\n                .addClass(that.options.iconClass || '');\n\n            HTMLBaseIcon.fn._wrapper.call(this);\n        }\n    });\n\n    var HTMLSvgIcon = HTMLBaseIcon.extend({\n        init: function(element, options) {\n            // Ensure that the inner contents of the wrapping span element are always removed for re-rendering purposes.\n            element.empty();\n            HTMLBaseIcon.fn.init.call(this, element, options);\n        },\n        options: extend({}, HTMLBaseIcon.fn.options, {\n            name: 'HTMLSVGIcon',\n            icon: null\n        }),\n        _wrapper: function() {\n            var that = this,\n                icon = that.options.icon,\n                iconClass = that.options.iconClass,\n                // Find if there is an existing k-svg-i- class appended to the element.\n                currentIconClass = that.element[0].className.split(\" \").find(x => x.includes(KSVG_PREFFIX)),\n                svgElm = $('<svg></svg>'),\n                className;\n\n            if (!icon && iconClass) {\n                // match k-i-(some-icon-name)\n                const regex = /k-i-(\\w+(?:-\\w+)*)/;\n                let iconNameMatch = iconClass.match(regex);\n                if (iconNameMatch) {\n                    icon = iconNameMatch[1];\n                    iconClass = iconClass.replace(iconNameMatch[0], \"\");\n                }\n            }\n\n            if (kendo.isString(icon)) {\n                // remove k-i- and convert kebab-case-icon to camelCaseIcon\n                icon = icon.replace('k-i-', '').replace(/-./g, x=>x[1].toUpperCase());\n                icon = kendo.ui.svgIcons[icon] || kendo.ui.svgIcons[`${icon}Icon`];\n            }\n\n            className = icon && icon.name ? `${KSVG_PREFFIX}${icon.name}` : '';\n            that._className = className;\n\n            that.wrapper = that.element\n                .addClass(KSVGICON)\n                .removeClass(currentIconClass) // Remove any existing icons.\n                .addClass(className)\n                .addClass(iconClass || '')\n                .attr(\"aria-hidden\", true);\n\n            if ($.isPlainObject(icon)) {\n                svgElm.attr('viewBox', icon.viewBox || '')\n                    .attr({\n                        'viewBox': icon.viewBox || '',\n                        'focusable': 'false',\n                        'xmlns': 'http://www.w3.org/2000/svg'\n                    })\n                    .html(icon.content || '');\n\n                that.wrapper.append(svgElm[0].outerHTML);\n            }\n\n            HTMLBaseIcon.fn._wrapper.call(this);\n        }\n    });\n\n    $.extend(kendo.html, {\n        renderIcon: renderIcon,\n        HTMLFontIcon: HTMLFontIcon,\n        HTMLSvgIcon: HTMLSvgIcon,\n        getIconRenderer: (type) => ICON_TYPES[type]\n    });\n\n    kendo.cssProperties.registerPrefix(\"HTMLFontIcon\", \"k-icon-\");\n\n    kendo.cssProperties.registerValues(\"HTMLFontIcon\", [{\n        prop: \"size\",\n        values: kendo.cssProperties.sizeValues.concat([['xsmall', 'xs'], ['xlarge', 'xl'], ['xxlarge', 'xxl'], ['xxxlarge', 'xxxl']])\n    }, {\n        prop: \"themeColor\",\n        values: ['primary', 'secondary', 'tertiary', 'inherit', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse']\n    }]);\n\n    kendo.cssProperties.registerPrefix(\"HTMLSVGIcon\", \"k-icon-\");\n\n    kendo.cssProperties.registerValues(\"HTMLSVGIcon\", [{\n        prop: \"size\",\n        values: kendo.cssProperties.sizeValues.concat([['xsmall', 'xs'], ['xlarge', 'xl'], ['xxlarge', 'xxl'], ['xxxlarge', 'xxxl']])\n    }, {\n        prop: \"themeColor\",\n        values: ['primary', 'secondary', 'tertiary', 'inherit', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse']\n    }]);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}