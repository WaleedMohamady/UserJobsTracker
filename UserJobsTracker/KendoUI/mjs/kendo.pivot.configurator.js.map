{"version":3,"sources":["raw-mjs/kendo.pivot.configurator.js"],"names":["Navigation","constructor","options","this","tabIndex","root","eventHandlers","update","elements","Array","from","querySelectorAll","selectors","join","first","querySelector","last","all","length","current","find","el","matches","start","eventType","mouseEvents","ev","target","Element","closest","call","undefined","addEventListener","keyboardEvents","key","stop","removeEventListener","focusElement","element","previous","removeAttribute","classList","remove","setAttribute","String","focus","preventScroll","scrollableValuesSel","scrollableColumnHeaderSel","scrollableRowHeaderSel","emptyCellSel","tableSel","cellSel","scrollables","selectors$1","onEnter","nav","icon","index","indexOf","click","preventDefault","tryScrollLeft","scrollable","elToScroll","offsetLeft","scrollLeft","tryScrollRight","offsetWidth","tryScrollUp","scrollTop","offsetTop","tryScrollDown","offsetHeight","scrollTo","scrollFunc","forEach","scroll","tableMap","table","rows","colsCount","cells","map","c","colSpan","reduce","prev","cur","row","r","curColSpan","colSp","rowSp","rowSpan","ind","findIndex","val","curInd","navigationMap","columnHeader","rowHeader","values","emptyCell","emptyCellRow","fill","i","push","concat","getTargetPos","ctrlKey","metaKey","cellAt","pos","targetPos","nextPos","next","keyboardEvents$1","keydown","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","o","_target","_ev","nextElementSibling","HTMLElement","parentNode","setTimeout","confHeader","Enter","Space","Home","ro","Boolean","x","End","mouseEvents$1","hasAttribute","PivotGridNavigation","super","arguments","onEscape","pivot","previousElementSibling","confButton","pivotCell","navigate","dir","onDelete","Tab","shiftKey","Escape","Delete","Backspace","ConfiguratorNavigation","__meta__","id","name","category","depends","hidden","$","undefined$1","kendo","window","ui","encode","htmlEncode","Widget","common","pivotgrid","fetchDiscover","configuratorReducer","PIVOT_CONFIGURATOR_ACTION","ns","HOVER_EVENTS","SETTING_CONTAINER_TEMPLATE","addKPI","data","found","idx","type","splice","caption","defaultHierarchy","uniqueName","kpiNode","node","normalizeKPIs","settingTargetFromNode","PivotConfiguratorV2","extend","init","fn","_ariaId","attr","guid","addClass","role","_dataSource","navigatable","_initPivotGridConfiguratorNavigation","_layout","refresh","height","notify","events","orientation","filterable","sortable","messages","title","cancelButtonText","applyButtonText","measures","columns","setDataSource","dataSource","that","configuratorNavigation","firstCell","_refreshHandler","unbind","_errorHandler","_progressHandler","_error","bind","_requestStart","PivotDataSourceV2","create","horizontal","panel","append","headerTextId","SETTINGS_TEMPLATE","appendTo","formClass","ariaId","CONTENT_TEMPLATE","each","elm","html","renderChipList","_fields","cancelText","applyText","ACTIONS_TEMPLATE","_targets","on","_actions","e","currentTarget","_applyState","read","_cancelChanges","treeView","targetItemTemplate","menuenabled","chip","renderChip","TARGET_ITEM_TEMPLATE","fillMode","themeColor","rounded","removable","removeIcon","actions","_createTarget","template","connectWith","empty","fieldMenu","setting","PivotSettingTargetV2","hint","clone","item","wrapper","dataItem","getByUid","checked","container","kendoTreeView","checkboxes","checkChildren","result","hasChildren","aggregator","local","uid","dataTextField","autoBind","check","sender","action","toggleSelection","payload","state","columnAxes","_state","rowAxes","measureAxes","cubeSchema","restoreMeasure","items","_checkMembers","trigger","_redraw","_treeViewDataSource","off","_clickHandler","HierarchicalDataSource","schema","model","transport","fields","dsMeasures","catalog","cube","fetchOptions","url","members","isEmptyObject","dimensions","success","connection","restrictions","catalogName","cubeName","command","then","newFields","get","_getKPIOptions","buildKPImeasures","_loadFieldsCommand","newData","hash","field","dimensionUniqueName","hierarchyUniqueName","_progress","toggle","progress","destroy","fetch","plugin","PivotConfigurator","outerHeight","measuresLabel","columnsLabel","rowsLabel","fieldsLabel","PivotDataSource","kpi","schemaDimensions","done","cubeBuilder","fail","error","schemaKPIs","schemaMeasures","schemaLevels","schemaHierarchies","form","dragAndDrop","dragstart","sourceNode","measure","drag","status","dropTarget","validate","setStatusClass","drop","add","sortIcon","getIcons","PivotSettingTarget","emptyTemplate","columnsContainer","rowsContainer","measuresContainer","_toggleHover","toggleClass","_resize","_cube","_catalog","kpiMeasure","value","goal","trend","cssProperties","registerPrefix","registerValues","prop","roundedValues","jQuery","kendo$1"],"mappings":"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","file":"kendo.pivot.configurator.js","sourcesContent":["import './kendo.dom.js';\nimport './kendo.html.chip.js';\nimport './kendo.html.chiplist.js';\nimport './kendo.pivot.common.js';\nimport './kendo.icons.js';\n\nclass Navigation {\n    constructor(options) {\n        this.tabIndex = 0;\n        this.root = null;\n        this.eventHandlers = {};\n        this.update = () => { };\n        this.tabIndex = options.tabIndex;\n    }\n    get elements() {\n        return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(','))) : [];\n    }\n    get first() {\n        return (this.root && this.root.querySelector(this.selectors.join(','))) || null;\n    }\n    get last() {\n        const all = this.elements;\n        return all[all.length - 1] || null;\n    }\n    get current() {\n        return this.elements.find(el => el.matches(':focus'));\n    }\n    start(root) {\n        this.root = root;\n        for (const eventType in this.mouseEvents) {\n            if (this.mouseEvents[eventType]) {\n                this.eventHandlers[eventType] = (ev => {\n                    const target = ev.target instanceof Element && ev.target.closest(this.selectors.join(','));\n                    if (target) {\n                        this.mouseEvents[eventType].call(undefined, target, this, ev);\n                    }\n                });\n                root.addEventListener(eventType, this.eventHandlers[eventType]);\n            }\n        }\n        for (const eventType in this.keyboardEvents) {\n            if (this.keyboardEvents[eventType]) {\n                this.eventHandlers[eventType] = (ev => {\n                    const target = ev.target instanceof Element && ev.target.closest(this.selectors.join(','));\n                    const key = ev.key === ' ' ? 'Space' : ev.key;\n                    if (target && this.keyboardEvents[eventType][key]) {\n                        this.keyboardEvents[eventType][key].call(undefined, target, this, ev);\n                    }\n                });\n                root.addEventListener(eventType, this.eventHandlers[eventType]);\n            }\n        }\n    }\n    stop() {\n        if (this.root) {\n            for (const eventType in this.eventHandlers) {\n                if (this.eventHandlers[eventType]) {\n                    this.root.removeEventListener(eventType, this.eventHandlers[eventType]);\n                }\n            }\n        }\n        this.root = null;\n    }\n    focusElement(element, previous) {\n        if (element) {\n            if (previous) {\n                previous.removeAttribute('tabindex');\n                previous.classList.remove('k-focus');\n            }\n            element.setAttribute('tabindex', String(this.tabIndex));\n            element.focus({ preventScroll: true });\n        }\n    }\n}\n\nconst scrollableValuesSel = '.k-pivotgrid .k-pivotgrid-values';\nconst scrollableColumnHeaderSel = '.k-pivotgrid .k-pivotgrid-column-headers';\nconst scrollableRowHeaderSel = '.k-pivotgrid .k-pivotgrid-row-headers';\nconst emptyCellSel = '.k-pivotgrid > .k-pivotgrid-empty-cell';\nconst tableSel = 'table.k-pivotgrid-table';\nconst cellSel = '.k-pivotgrid-cell';\nconst scrollables = [scrollableValuesSel, scrollableColumnHeaderSel, scrollableRowHeaderSel].join(',');\nconst selectors$1 = [\n    emptyCellSel,\n    [scrollableColumnHeaderSel, tableSel, cellSel].join(' '),\n    [scrollableRowHeaderSel, tableSel, cellSel].join(' '),\n    [scrollableValuesSel, tableSel, cellSel].join(' ')\n];\nconst onEnter = (target, nav, ev) => {\n    const icon = target.querySelector('.k-icon, .k-svg-icon');\n    if (icon) {\n        const index = nav.elements.indexOf(target);\n        nav.update = () => {\n            nav.focusElement(nav.elements[index], null);\n            nav.update = () => { };\n        };\n        icon.click();\n        ev.preventDefault();\n    }\n};\nconst tryScrollLeft = (target, scrollable, elToScroll) => {\n    if (target.offsetLeft < scrollable.scrollLeft) {\n        elToScroll.scrollLeft = target.offsetLeft;\n    }\n};\nconst tryScrollRight = (target, scrollable, elToScroll) => {\n    if (target.offsetLeft + target.offsetWidth > scrollable.scrollLeft + scrollable.offsetWidth &&\n        target.offsetWidth < scrollable.offsetWidth) {\n        elToScroll.scrollLeft = target.offsetLeft + target.offsetWidth - scrollable.offsetWidth;\n    }\n};\nconst tryScrollUp = (target, scrollable, elToScroll) => {\n    if (scrollable.scrollTop && target.offsetTop < scrollable.scrollTop) {\n        elToScroll.scrollTop = target.offsetTop;\n    }\n};\nconst tryScrollDown = (target, scrollable, elToScroll) => {\n    if (target.offsetTop + target.offsetHeight > scrollable.scrollTop + scrollable.offsetHeight &&\n        target.offsetHeight < scrollable.offsetHeight) {\n        elToScroll.scrollTop = target.offsetTop + target.offsetHeight - scrollable.offsetHeight;\n    }\n};\nconst scrollTo = (target, root, scrollFunc) => {\n    const elToScroll = root.querySelector(scrollableValuesSel);\n    const scrollable = target && target.closest(scrollables);\n    if (!elToScroll || !scrollable || !target) {\n        return;\n    }\n    scrollFunc.forEach(scroll => scroll(target, scrollable, elToScroll));\n};\nconst tableMap = (table) => {\n    const rows = Array.from(table.rows);\n    const colsCount = Array.from((rows && rows[0] && rows[0].cells) || [])\n        .map(c => c.colSpan)\n        .reduce((prev, cur) => prev + cur, 0);\n    const map = rows.map(() => new Array(colsCount));\n    rows.forEach((row, r) => {\n        let curColSpan = 0;\n        Array.from(row.cells).forEach((c) => {\n            for (let colSp = 0; colSp < c.colSpan; colSp++) {\n                for (let rowSp = 0; rowSp < c.rowSpan; rowSp++) {\n                    const ind = map[r + rowSp].findIndex((val, curInd) => curInd >= curColSpan && !val);\n                    map[r + rowSp][ind] = c;\n                }\n                curColSpan++;\n            }\n        });\n    });\n    return map;\n};\nconst navigationMap = (root) => {\n    const columnHeader = tableMap(root.querySelector([scrollableColumnHeaderSel, tableSel].join(' ')));\n    const rowHeader = tableMap(root.querySelector([scrollableRowHeaderSel, tableSel].join(' ')));\n    const values = tableMap(root.querySelector([scrollableValuesSel, tableSel].join(' ')));\n    const emptyCell = root.querySelector(emptyCellSel);\n    const emptyCellRow = new Array(rowHeader[0].length).fill(emptyCell);\n    const map = [];\n    for (let i = 0; i < columnHeader.length; i++) {\n        map.push(emptyCellRow.concat(columnHeader[i]));\n    }\n    for (let i = 0; i < rowHeader.length; i++) {\n        map.push(rowHeader[i].concat(values[i]));\n    }\n    return map;\n};\nconst getTargetPos = (map, target) => {\n    for (let r = 0; r < map.length; r++) {\n        for (let c = 0; c < map[r].length; c++) {\n            if (map[r][c] === target) {\n                return [r, c];\n            }\n        }\n    }\n    return [-1, -1];\n};\nconst ctrlKey = (ev) => ev.ctrlKey || ev.metaKey;\nconst cellAt = (root, target, pos) => {\n    const map = navigationMap(root);\n    let targetPos = getTargetPos(map, target);\n    let nextPos = [targetPos[0] + pos[0], targetPos[1] + pos[1]];\n    let next = map[nextPos[0]] && map[nextPos[0]][nextPos[1]];\n    while (next && next === target) {\n        nextPos = [nextPos[0] + pos[0], nextPos[1] + pos[1]];\n        next = map[nextPos[0]] && map[nextPos[0]][nextPos[1]];\n    }\n    return next;\n};\nconst keyboardEvents$1 = {\n    keydown: {\n        ArrowLeft: (target, nav, ev) => {\n            ev.preventDefault();\n            const next = cellAt(nav.root, target, [0, -1]);\n            nav.focusElement(next, target);\n            scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n        },\n        ArrowRight: (target, nav, ev) => {\n            ev.preventDefault();\n            const next = cellAt(nav.root, target, [0, 1]);\n            nav.focusElement(next, target);\n            scrollTo(next, nav.root, [tryScrollLeft, tryScrollRight, tryScrollDown, tryScrollUp]);\n        },\n        ArrowUp: (target, nav, ev) => {\n            ev.preventDefault();\n            const next = cellAt(nav.root, target, [-1, 0]);\n            nav.focusElement(next, target);\n            scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n        },\n        ArrowDown: (target, nav, ev) => {\n            ev.preventDefault();\n            const next = cellAt(nav.root, target, [1, 0]);\n            nav.focusElement(next, target);\n            scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollUp, tryScrollDown]);\n        },\n        o: (_target, nav, _ev) => {\n            if (!nav.root) {\n                return;\n            }\n            // FIX: ADDED manually to fix an issue where depending on the order of the config element and button\n            // you either can open the configurator with Ctrl+O, or you can close the configurator with ESC\n            let next = nav.root.nextElementSibling;\n            if (!(next && next instanceof HTMLElement)) {\n                return;\n            }\n\n            if (!next.matches('div.k-pivotgrid-configurator-button')) {\n                next = next.nextElementSibling;\n            }\n\n            if (next && next instanceof HTMLElement && next.matches('div.k-pivotgrid-configurator-button')) {\n                if (!nav.root.parentNode || nav.root.parentNode.querySelector(\".k-pivotgrid-configurator.k-hidden\")) {\n                    next.click();\n                }\n\n                setTimeout(() => {\n                    if (nav.root.parentNode) {\n                        const confHeader = nav.root.parentNode.querySelector('.k-pivotgrid-configurator-content .k-form-field .k-fields-list-wrapper .k-treeview');\n                        if (confHeader instanceof HTMLElement) {\n                            confHeader.setAttribute('tabindex', String(nav.tabIndex));\n                            confHeader.focus();\n                        }\n                    }\n                }, 0);\n            }\n        },\n        Enter: onEnter,\n        Space: onEnter,\n        Home: (target, nav, ev) => {\n            const map = navigationMap(nav.root);\n            const ctrl = ctrlKey(ev);\n            let row = ctrl ? map[0] : (map.find(ro => Boolean(ro.find(x => x === target))) || []);\n            let next = row[0];\n            if (next) {\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n                ev.preventDefault();\n            }\n        },\n        End: (target, nav, ev) => {\n            const map = navigationMap(nav.root);\n            const ctrl = ctrlKey(ev);\n            let row = ctrl ? map[map.length - 1] : (map.find(ro => Boolean(ro.find(x => x === target))) || []);\n            let next = row && row[row.length - 1] || null;\n            if (next) {\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollLeft, tryScrollRight, tryScrollUp, tryScrollDown]);\n                ev.preventDefault();\n            }\n        }\n    }\n};\nconst mouseEvents$1 = {\n    click: (target, nav) => {\n        if (target && target instanceof HTMLElement) {\n            const prev = nav.elements.find(c => c.hasAttribute('tabindex')) || null;\n            nav.focusElement(target, prev);\n        }\n    }\n};\n/**\n * The PivotGrid keyboard navigation functionality.\n *\n * Usage:\n *\n * On Initialize\n * const navigation = new PivotGridNavigation({ tabindex: 0 });\n *\n * Turn on\n * navigation.start(rootDomElement);\n *\n * On After Update\n * navigation.update();\n *\n * On Destroy / Turn off\n * navigation.stop();\n */\nclass PivotGridNavigation extends Navigation {\n    constructor() {\n        super(...arguments);\n        this.selectors = selectors$1;\n        this.mouseEvents = mouseEvents$1;\n        this.keyboardEvents = keyboardEvents$1;\n    }\n}\n\nconst selectors = [\n    '.k-pivotgrid-configurator-content .k-form-field .k-fields-list-wrapper .k-treeview',\n    '.k-pivotgrid-configurator-content .k-chip',\n    '.k-pivotgrid-configurator-actions button'\n];\nconst onEscape = (_target, nav, ev) => {\n    if (ev.target instanceof HTMLElement) {\n        if (nav.root) {\n            const pivot = nav.root.previousElementSibling;\n            const confButton = nav.root.nextElementSibling;\n            const pivotCell = Array.from(pivot instanceof HTMLElement ? pivot.querySelectorAll('[tabindex]') : []).find((c) => c.tabIndex >= 0);\n            if (pivotCell instanceof HTMLElement) {\n                pivotCell.focus();\n                if (confButton instanceof HTMLElement) {\n                    confButton.click();\n                }\n            }\n        }\n    }\n};\nconst navigate = (target, nav, ev, dir) => {\n    ev.preventDefault();\n    const all = nav.elements;\n    let index = all.indexOf(target) + dir;\n    if (index < 0) {\n        index = all.length - 1;\n    }\n    nav.focusElement(all[index % all.length], target);\n};\nconst onDelete = (target, nav, ev) => {\n    if (ev.target instanceof HTMLElement) {\n        const deleteButton = ev.target.querySelector('.k-icon.k-i-x-circle, .k-svg-icon.k-svg-i-x-circle');\n        if (deleteButton instanceof HTMLElement) {\n            ev.preventDefault();\n            navigate(target, nav, ev, -1);\n        }\n    }\n};\nconst keyboardEvents = {\n    keydown: {\n        Tab: (target, nav, ev) => {\n            navigate(target, nav, ev, ev.shiftKey ? -1 : 1);\n        },\n        Escape: onEscape,\n        Delete: onDelete,\n        Backspace: onDelete\n    }\n};\nconst mouseEvents = {\n    click: (target, nav) => {\n        if (target && target instanceof HTMLElement) {\n            const prev = nav.elements.find((c) => c.hasAttribute('tabindex')) || null;\n            nav.focusElement(target, prev);\n        }\n    }\n};\n/**\n * The PivotGrid Configurator keyboard navigation functionality.\n *\n * Usage:\n *\n * On Initialize\n * const navigation = new ConfiguratorNavigation({ tabindex: 0 });\n *\n * Turn on\n * navigation.start(rootDomElement);\n *\n * On After Update\n * navigation.update();\n *\n * On Destroy / Turn off\n * navigation.stop();\n */\nclass ConfiguratorNavigation extends Navigation {\n    constructor() {\n        super(...arguments);\n        this.selectors = selectors;\n        this.mouseEvents = mouseEvents;\n        this.keyboardEvents = keyboardEvents;\n    }\n}\n\nvar __meta__ = {\n    id: \"pivot.configurator\",\n    name: \"PivotConfigurator\",\n    category: \"web\",\n    depends: [ \"dropdownlist\", \"treeview\", \"treeview.draganddrop\", \"pivot.fieldmenu\", \"html.chip\", \"html.chiplist\", \"pivot.common\", \"icons\" ],\n    hidden: true\n};\n\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        encode = kendo.htmlEncode,\n        Widget = ui.Widget,\n        common = window.kendo.pivotgrid.common,\n        fetchDiscover = common.fetchDiscover,\n        configuratorReducer = common.configuratorReducer,\n        PIVOT_CONFIGURATOR_ACTION = common.PIVOT_CONFIGURATOR_ACTION,\n        ns = \".kendoPivotConfigurator\",\n        HOVER_EVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns,\n        SETTINGS_TEMPLATE = ({ title, headerTextId }) => '<div class=\"k-pivotgrid-configurator-header\">' +\n                                            `<div class=\"k-pivotgrid-configurator-header-text\" id=\"${headerTextId}\">${encode(title)}</div>` +\n                                          '</div>',\n        CONTENT_TEMPLATE = ({ formClass, horizontal, ariaId }) => '<div class=\"k-pivotgrid-configurator-content\">' +\n            `<form class=\"${encode(formClass)}\">` +\n                `${horizontal ? '<div class=\"k-form-field-wrapper\">' : ''}` +\n                '<div class=\"k-form-field\">' +\n                    `<label class=\"k-label\" id=\"${ariaId}-configurator-fields\">Fields</label>` +\n                '</div>' +\n                '<div class=\"k-form-field\">' +\n                  '<div class=\"k-fields-list-wrapper\"></div>' +\n                '</div>' +\n                `${horizontal ? '</div><div class=\"k-form-field-wrapper\">' : ''}` +\n                '<div class=\"k-form-field\">' +\n                    `<label class=\"k-label\" id=\"${ariaId}-configurator-columns\">Columns</label>` +\n                '</div>' +\n                '<div class=\"k-chip-list k-column-fields\"></div>' +\n                '<div class=\"k-form-field\">' +\n                    `<label class=\"k-label\" id=\"${ariaId}-configurator-rows\">Rows</label>` +\n                '</div>' +\n                '<div class=\"k-chip-list k-row-fields\"></div>' +\n                `${horizontal ? '</div><div class=\"k-form-field-wrapper\">' : ''}` +\n                '<div class=\"k-form-field\">' +\n                    `<label class=\"k-label\" id=\"${ariaId}-configurator-values\">Values</label>` +\n                '</div>' +\n                '<div class=\"k-chip-list k-column-fields\"></div>' +\n                `${horizontal ? '</div>' : ''}` +\n            '</form>' +\n        '</div>',\n        TARGET_ITEM_TEMPLATE = ({ name }) => '<span>' +\n                `<span class=\"k-chip-label\">${encode(name)}</span>` +\n            '</span>',\n        ACTIONS_TEMPLATE = ({ cancelText, applyText }) =>\n                '<div class=\"k-pivotgrid-configurator-actions k-actions k-hstack k-justify-content-end\">' +\n                  '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\" aria-disabled=\"false\">' +\n                    `<span class=\"k-button-text\">${encode(cancelText)}</span>` +\n                  '</button>' +\n                  '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary\" aria-disabled=\"false\">' +\n                    `<span class=\"k-button-text\">${encode(applyText)}</span>` +\n                  '</button>' +\n                '</div>',\n        SETTING_CONTAINER_TEMPLATE = ({ name }) => `<div class=\"k-pivotgrid-target k-pivotgrid-configurator-section\"><strong>${encode(name)}</strong><div class=\"k-pivotgrid-target-wrap\"></div>`;\n\n    function addKPI(data) {\n        var found;\n        var idx = 0;\n        var length = data.length;\n\n        for (; idx < length; idx++) {\n            if (data[idx].type == 2) {\n                found = true;\n                break;\n            }\n        }\n\n        if (found) {\n            data.splice(idx + 1, 0, {\n                caption: \"KPIs\",\n                defaultHierarchy: \"[KPIs]\",\n                name: \"KPIs\",\n                uniqueName: \"[KPIs]\"\n            });\n        }\n    }\n\n    function kpiNode(node) {\n        return {\n            name: node.uniqueName,\n            type: node.type\n        };\n    }\n\n    function normalizeKPIs(data) {\n        for (var idx = 0, length = data.length; idx < length; idx++) {\n            data[idx].uniqueName = data[idx].name;\n            data[idx].type = \"kpi\";\n        }\n\n        return data;\n    }\n\n    function settingTargetFromNode(node) {\n        var target = $(node).closest(\".k-pivot-setting\");\n\n        if (target.length) {\n            return target.data(\"kendoPivotSettingTarget\");\n        }\n        return null;\n    }\n\n    function getIcons(sortIcon, options) {\n        var sortable = options.sortable;\n        var result = '';\n\n        if (sortable) {\n            result += sortIcon ? `<span class=\"k-chip-action\">${kendo.ui.icon(sortIcon + \"-sm\")}</span>` : '';\n        }\n\n        if (options.filterable || sortable) {\n            result += `<span class=\"k-setting-fieldmenu k-chip-action\">${kendo.ui.icon(\"more-vertical\")}</span>`;\n        }\n\n        result += `<span class=\"k-setting-delete k-chip-action\">${kendo.ui.icon(\"x\")}</span>`;\n\n        return result;\n    }\n\n    var PivotConfiguratorV2 = Widget.extend({\n        init: function(element, options) {\n            Widget.fn.init.call(this, element, options);\n\n            this._ariaId = this.element.attr(\"id\") || kendo.guid();\n            this.element.addClass(\"k-widget k-pivotgrid-configurator k-pos-relative\");\n            this.element.attr({\n                \"role\": \"dialog\",\n                \"aria-hidden\": true,\n                \"aria-labelledby\": `${this._ariaId}-configurator-header`\n            });\n\n            this._dataSource();\n\n            if (this.options.navigatable) {\n                this._initPivotGridConfiguratorNavigation();\n            }\n\n            this._layout();\n\n            this.refresh();\n\n            if (options.height) {\n                this.element.height(options.height);\n            }\n\n            kendo.notify(this);\n        },\n\n        events: [],\n\n        options: {\n            name: \"PivotConfiguratorV2\",\n            orientation: \"vertical\",\n            filterable: false,\n            sortable: false,\n            messages: {\n                title: \"Settings\",\n                cancelButtonText: \"Cancel\",\n                applyButtonText: \"Apply\",\n                measures: \"Select some fields to begin setup\",\n                columns: \"Select some fields to begin setup\",\n                rows: \"Select some fields to begin setup\"\n            }\n        },\n\n        setDataSource: function(dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._dataSource();\n\n            if (this.measures) {\n                this.measures.setDataSource(dataSource);\n            }\n\n            if (this.rows) {\n                this.rows.setDataSource(dataSource);\n            }\n\n            if (this.columns) {\n                this.columns.setDataSource(dataSource);\n            }\n\n            this.refresh();\n        },\n\n        _initPivotGridConfiguratorNavigation: function() {\n            var that = this;\n            that.configuratorNavigation = new ConfiguratorNavigation({ tabIndex: 0 });\n            that.configuratorNavigation.start(that.element[0]);\n\n            const firstCell = that.configuratorNavigation.first;\n\n            if (firstCell) {\n                firstCell.setAttribute('tabindex', '0');\n            }\n        },\n\n        _dataSource: function() {\n            var that = this;\n\n            if (that.dataSource && that._refreshHandler) {\n                that.dataSource.unbind(\"change\", that._refreshHandler)\n                               .unbind(\"error\", that._errorHandler)\n                               .unbind(\"progress\", that._progressHandler);\n            } else {\n                that._errorHandler = that._error.bind(that);\n                that._refreshHandler = that.refresh.bind(that);\n                that._progressHandler = that._requestStart.bind(that);\n            }\n\n            that.dataSource = kendo.data.PivotDataSourceV2.create(that.options.dataSource);\n            that.dataSource.bind(\"change\", that._refreshHandler)\n                           .bind(\"error\", that._errorHandler)\n                           .bind(\"progress\", that._progressHandler);\n        },\n\n        _layout: function() {\n\n            var that = this;\n            var options = that.options;\n            var messages = options.messages;\n            var horizontal = options.orientation == \"horizontal\";\n\n            var panel = $(\"<div class='k-pivotgrid-configurator-panel k-pivotgrid-configurator-push'></div>\");\n\n            panel.addClass(horizontal ? \"k-pivotgrid-configurator-horizontal\" : \"k-pivotgrid-configurator-vertical\");\n\n            that.element.append(panel);\n\n            that.panel = panel;\n\n            $(SETTINGS_TEMPLATE({ title: this.options.messages.title, headerTextId: `${that._ariaId}-configurator-header` })).appendTo(that.panel);\n\n            $(CONTENT_TEMPLATE({ formClass: horizontal ? \"k-form k-form-horizontal\" : \"k-form\", filterable: options.filterable, horizontal: horizontal, ariaId: that._ariaId }))\n                .appendTo(that.panel).find(\".k-chip-list\")\n                .each(function(index, elm) {\n                    kendo.html.renderChipList(elm, $.extend({}, options));\n                    $(elm).attr({\n                        \"role\": \"listbox\",\n                        \"aria-orientation\": \"horizontal\",\n                    });\n                });\n\n            that._fields();\n            $(ACTIONS_TEMPLATE({ cancelText: messages.cancelButtonText, applyText: messages.applyButtonText })).appendTo(that.panel);\n            that._targets();\n\n            that.element.on(\"click\" + ns, \".k-pivotgrid-configurator-actions > button\", that._actions.bind(that));\n        },\n\n        _actions: function(e) {\n            e.preventDefault();\n\n            var target = $(e.currentTarget).closest(\":not(path,svg)\");\n            if (target.index()) {\n                this.columns._applyState();\n                this.rows._applyState();\n                this.measures._applyState();\n                this.dataSource.read();\n            } else {\n                this.columns._cancelChanges();\n                this.rows._cancelChanges();\n                this.measures._cancelChanges();\n                this.treeView.dataSource.read();\n            }\n        },\n\n        _targets: function() {\n            var that = this;\n            var columns = that.panel.find(\".k-column-fields\").first();\n            var rows = that.panel.find(\".k-row-fields\");\n            var measures = that.panel.find(\".k-chip-list\").last();\n            var options = this.options;\n\n            var targetItemTemplate = ({ name, menuenabled }) => {\n                    var chip = kendo.html.renderChip(TARGET_ITEM_TEMPLATE({ name, menuenabled }), $.extend({}, options, {\n                        fillMode: \"solid\",\n                        themeColor: \"base\",\n                        rounded: \"full\",\n                        removable: true,\n                        removeIcon: \"x-circle\",\n                        actions: menuenabled ? [\n                            { icon: \"more-vertical\" }\n                        ] : null\n                    }));\n\n                    return chip;\n                };\n\n            this.columns = this._createTarget(columns, {\n                navigatable: options.navigatable,\n                filterable: options.filterable,\n                sortable: options.sortable,\n                template: targetItemTemplate,\n                connectWith: rows,\n                messages: {\n                    empty: options.messages.columns,\n                    fieldMenu: this.options.messages.fieldMenu\n                },\n                configuratorNavigation: that.configuratorNavigation\n            });\n            this.columns.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-columns`);\n\n            this.rows = this._createTarget(rows, {\n                navigatable: options.navigatable,\n                filterable: options.filterable,\n                sortable: options.sortable,\n                template: targetItemTemplate,\n                setting: \"rows\",\n                connectWith: columns,\n                messages: {\n                    empty: this.options.messages.rows,\n                    fieldMenu: this.options.messages.fieldMenu\n                },\n                configuratorNavigation: that.configuratorNavigation\n            });\n            this.rows.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-rows`);\n\n            this.measures = this._createTarget(measures, {\n                navigatable: options.navigatable,\n                filterable: false,\n                sortable: false,\n                setting: \"measures\",\n                template: targetItemTemplate,\n                messages: {\n                    empty: options.messages.measures,\n                    fieldMenu: this.options.messages.fieldMenu\n                },\n                configuratorNavigation: that.configuratorNavigation\n            });\n\n            this.measures.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-values`);\n\n            [this.columns, this.rows, this.measures].forEach(x=> x.element.find(\".k-chip\").attr(\"role\", \"option\"));\n        },\n\n        _createTarget: function(element, options) {\n            var that = this;\n            return new kendo.ui.PivotSettingTargetV2(element, $.extend({\n                dataSource: this.dataSource,\n                hint: function(element) {\n                    return element.clone();\n                },\n                remove: function(e) {\n                    var item = that.treeView.wrapper\n                        .find(\"[data-name='\" + e.name + \"']\")\n                        .closest(\"li\");\n                    var id = item.attr(kendo.attr(\"uid\"));\n                    var dataItem = that.treeView.dataSource.getByUid(id);\n\n                    if (dataItem) {\n                        dataItem.checked = false;\n                        item.find(\"input\").attr(\"checked\", false);\n                    }\n                },\n                template: options.template\n            }, options));\n        },\n\n        _fields: function() {\n            var that = this;\n            var container = that.element.find(\".k-fields-list-wrapper\");\n\n            this.treeView = $(`<div aria-labelledby=\"${this._ariaId}-configurator-header ${this._ariaId}-configurator-fields\" />`).appendTo(container)\n                .kendoTreeView({\n                    checkboxes: {\n                        checkChildren: true,\n                        template: ({ item }) => {\n                            var result = '';\n\n                            if ((item.hasChildren || item.aggregator || item.local) && item.uniqueName !== \"[KPIs]\" && item.uniqueName !== \"[Measures]\" && item.uniqueName !== \"Measures\") {\n                                result += `<input type=\"checkbox\" data-name=\"${encode(item.uniqueName)}\" ${item.checked ? \"checked\" : \"\"} class=\"k-checkbox k-checkbox-md k-rounded-md\" id=\"${encode(item.uid)}\" tabindex=\"-1\">`;\n                            }\n\n                            return result;\n                        }\n                    },\n                    dataTextField: \"caption\",\n                    autoBind: false,\n                    check: function(e) {\n                      var dataItem = e.sender.dataItem(e.node);\n                      var action = {\n                        type: PIVOT_CONFIGURATOR_ACTION.toggleSelection,\n                        payload: dataItem\n                      };\n                      var state = {\n                        columnAxes: that.columns._state(),\n                        rowAxes: that.rows._state(),\n                        measureAxes: that.measures._state()\n                      };\n                      var result = configuratorReducer(state, action);\n\n                      if (that.dataSource.cubeSchema && result.measureAxes && result.measureAxes.length &&\n                        result.measureAxes.length > state.measureAxes.length) {\n                          that.dataSource.cubeSchema.restoreMeasure(result.measureAxes, dataItem);\n                      }\n\n                      if (dataItem.defaultHierarchy && dataItem.items && dataItem.items.length) {\n                          that._checkMembers([{ name: dataItem.defaultHierarchy }], dataItem.items);\n                          dataItem.items.trigger(\"change\");\n                      }\n\n                      if (result.columnAxes) {\n                          that.columns._state(result.columnAxes);\n                          that.columns._redraw();\n                      }\n                      if (result.rowAxes) {\n                          that.rows._state(result.rowAxes);\n                          that.rows._redraw();\n                      }\n                      if (result.measureAxes) {\n                          that.measures._state(result.measureAxes);\n                          that.measures._redraw();\n                      }\n                    },\n                    dataSource: this._treeViewDataSource()\n                 })\n                .data(\"kendoTreeView\");\n\n            this.treeView.wrapper.off(\"click\", this.treeView._clickHandler);\n        },\n\n        _treeViewDataSource: function() {\n            var that = this;\n\n            return kendo.data.HierarchicalDataSource.create({\n                schema: {\n                    model: {\n                        id: \"uniqueName\",\n                        hasChildren: function(item) {\n                            if (that.dataSource.cubeSchema && item.uniqueName !== \"Measures\") {\n                                item.local = true;\n                                return false;\n                            }\n                            return !(\"hierarchyUniqueName\" in item) && !(\"aggregator\" in item);\n                        }\n                    }\n                },\n                transport: {\n                    read: function(options) {\n                        var node;\n                        var transport = that.dataSource.transport;\n                        var catalog = transport.catalog();\n                        var cube = transport.cube();\n                        var fetchOptions = {\n                            url: transport.options.read\n                        };\n                        var columns = that.columns._state();\n                        var rows = that.rows._state();\n                        var measures = that.measures._state();\n                        var members = columns.concat(rows).concat(measures);\n                        var fields;\n                        var dsMeasures;\n                        var fetchOpts;\n\n                        if ($.isEmptyObject(options.data)) {\n                            if (that.dataSource.cubeSchema) {\n                                fields = that.dataSource.cubeSchema.dimensions();\n                                that._checkMembers(members, fields);\n                                options.success(fields);\n                            } else {\n                                fetchOpts = {\n                                    connection: {\n                                        catalog: catalog,\n                                        cube: cube\n                                    },\n                                    restrictions: {\n                                        catalogName: catalog,\n                                        cubeName: cube\n                                    },\n                                    command: 'schemaDimensions'\n                                };\n\n                                fetchDiscover(fetchOptions, fetchOpts)\n                                    .then(function(newFields) {\n                                        that._checkMembers(members, newFields);\n                                        addKPI(newFields);\n                                        options.success(newFields);\n                                     });\n                            }\n                        } else {\n                            //Hack to get the actual node as the HierarchicalDataSource does not support passing it\n                            node = that.treeView.dataSource.get(options.data.uniqueName);\n\n                            if (that.dataSource.cubeSchema) {\n                                dsMeasures = that.dataSource.measures();\n                                that._checkMembers(members, dsMeasures);\n                                options.success(dsMeasures);\n                            } else {\n                                if (node.uniqueName === \"[KPIs]\") {\n                                    fetchDiscover(fetchOptions, that._getKPIOptions(catalog, cube))\n                                    .then(function(newFields) {\n                                        options.success(normalizeKPIs(newFields));\n                                    });\n                                } else if (node.type == \"kpi\") {\n                                    options.success(buildKPImeasures(node));\n                                } else {\n                                    fetchDiscover(fetchOptions ,that._loadFieldsCommand(node, catalog, cube))\n                                    .then(function(newFields) {\n                                        that._checkMembers(members, newFields);\n                                        options.success(newFields);\n                                    });\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n        },\n\n        _checkMembers: function(members, newData) {\n            var hash = {};\n            var index = 0;\n\n            for (index = 0; index < members.length; index++) {\n                hash[members[index].name] = true;\n            }\n\n            for (index = 0; index < newData.length; index++) {\n                if (hash[newData[index].uniqueName]) {\n                    newData[index].checked = true;\n                }\n            }\n        },\n\n        _getKPIOptions: function(catalog, cube) {\n            return {\n                connection: {\n                    catalog: catalog,\n                    cube: cube\n                },\n                restrictions: {\n                    catalogName: catalog,\n                    cubeName: cube\n                },\n                command: 'schemaKPIs'\n            };\n        },\n\n        _loadFieldsCommand: function(field, catalog, cube) {\n            var command;\n            var dimensionUniqueName;\n            var hierarchyUniqueName;\n\n            if (field.type === 2) {\n                command = 'schemaMeasures';\n            } else if (field.dimensionUniqueName) {\n                command = 'schemaLevels';\n                hierarchyUniqueName = field.uniqueName;\n            } else {\n                command = 'schemaHierarchies';\n                dimensionUniqueName = field.uniqueName;\n            }\n\n            var options = {\n                connection: {\n                    catalog: catalog,\n                    cube: cube\n                },\n                restrictions: {\n                    catalogName: catalog,\n                    cubeName: cube,\n                    hierarchyUniqueName: hierarchyUniqueName,\n                    dimensionUniqueName: dimensionUniqueName\n                },\n                command: command\n            };\n\n            return options;\n        },\n\n        _progress: function(toggle) {\n            kendo.ui.progress(this.element, toggle);\n        },\n\n        _error: function() {\n            this._progress(false);\n        },\n\n        _requestStart: function() {\n            this._progress(true);\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            this.dataSource.unbind(\"change\", this._refreshHandler);\n\n            this.element.off(ns);\n\n            this.rows.destroy();\n            this.columns.destroy();\n            this.measures.destroy();\n            this.treeView.destroy();\n\n            this.element = null;\n            this._refreshHandler = null;\n        },\n\n        refresh: function() {\n            if (this.treeView) {\n                this.treeView.dataSource.fetch();\n            }\n\n            this._progress(false);\n        }\n\n    });\n\n    ui.plugin(PivotConfiguratorV2);\n\n    var PivotConfigurator = Widget.extend({\n        init: function(element, options) {\n            Widget.fn.init.call(this, element, options);\n\n            this.element.addClass(\"k-pivotgrid-configurator-panel kendo-jquery\");\n\n            if (this.options.height) {\n                this.element.outerHeight(this.options.height);\n            }\n\n            this._dataSource();\n\n            this._layout();\n\n            this.refresh();\n\n            kendo.notify(this);\n        },\n\n        events: [],\n\n        options: {\n            name: \"PivotConfigurator\",\n            filterable: false,\n            sortable: false,\n            messages: {\n                measures: \"Drop Data Fields Here\",\n                columns: \"Drop Column Fields Here\",\n                rows: \"Drop Rows Fields Here\",\n                measuresLabel: \"Measures\",\n                columnsLabel: \"Columns\",\n                rowsLabel: \"Rows\",\n                fieldsLabel: \"Fields\"\n            }\n        },\n\n        _dataSource: function() {\n            var that = this;\n\n            if (that.dataSource && that._refreshHandler) {\n                that.dataSource.unbind(\"change\", that._refreshHandler)\n                               .unbind(\"error\", that._errorHandler)\n                               .unbind(\"progress\", that._progressHandler);\n            } else {\n                that._errorHandler = that._error.bind(that);\n                that._refreshHandler = that.refresh.bind(that);\n                that._progressHandler = that._requestStart.bind(that);\n            }\n\n            that.dataSource = kendo.data.PivotDataSource.create(that.options.dataSource);\n            that.dataSource.bind(\"change\", that._refreshHandler)\n                           .bind(\"error\", that._errorHandler)\n                           .bind(\"progress\", that._progressHandler);\n        },\n\n        setDataSource: function(dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._dataSource();\n\n            if (this.measures) {\n                this.measures.setDataSource(dataSource);\n            }\n\n            if (this.rows) {\n                this.rows.setDataSource(dataSource);\n            }\n\n            if (this.columns) {\n                this.columns.setDataSource(dataSource);\n            }\n\n            this.refresh();\n        },\n\n        _treeViewDataSource: function() {\n            var that = this;\n\n            return kendo.data.HierarchicalDataSource.create({\n                schema: {\n                    model: {\n                        id: \"uniqueName\",\n                        hasChildren: function(item) {\n                            return !(\"hierarchyUniqueName\" in item) && !(\"aggregator\" in item);\n                        }\n                    }\n                },\n                transport: {\n                    read: function(options) {\n                        var promise;\n                        var node;\n                        var kpi;\n\n                        if ($.isEmptyObject(options.data)) {\n                            promise = that.dataSource.schemaDimensions();\n\n                            promise.done(function(data) {\n                                        if (!that.dataSource.cubeBuilder) {\n                                            addKPI(data);\n                                        }\n                                        options.success(data);\n                                    })\n                                    .fail(options.error);\n                        } else {\n                            //Hack to get the actual node as the HierarchicalDataSource does not support passing it\n                            node = that.treeView.dataSource.get(options.data.uniqueName);\n\n                            if (node.uniqueName === \"[KPIs]\") {\n                                kpi = true;\n                                promise = that.dataSource.schemaKPIs();\n                                promise.done(function(data) {\n                                            options.success(normalizeKPIs(data));\n                                       })\n                                       .fail(options.error);\n                            } else if (node.type == \"kpi\") {\n                                kpi = true;\n                                options.success(buildKPImeasures(node));\n                            }\n\n                            if (!kpi) {\n                                if (node.type == 2) { //measure\n                                    promise = that.dataSource.schemaMeasures();\n                                } else if (node.dimensionUniqueName) { // hierarchy\n                                    promise = that.dataSource.schemaLevels(options.data.uniqueName);\n                                } else { // dimension\n                                    promise = that.dataSource.schemaHierarchies(options.data.uniqueName);\n                                }\n\n                                promise.done(options.success)\n                                        .fail(options.error);\n                            }\n                        }\n                    }\n                }\n            });\n        },\n\n        _progress: function(toggle) {\n            kendo.ui.progress(this.element, toggle);\n        },\n\n        _error: function() {\n            this._progress(false);\n        },\n\n        _requestStart: function() {\n            this._progress(true);\n        },\n\n        _layout: function() {\n            $('<div class=\"k-pivotgrid-configurator\"><div class=\"k-pivotgrid-configurator-content\"></div></div>').appendTo(this.element);\n            this.form = this.element.find('.k-pivotgrid-configurator-content');\n\n            this._fields();\n            this._targets();\n        },\n\n        _fields: function() {\n            var container = $('<div class=\"k-pivotgrid-fields k-pivotgrid-configurator-section\"><strong>' + encode(this.options.messages.fieldsLabel) + '</strong><div class=\"k-fields-list-wrapper\"></div></div>').appendTo(this.form);\n\n            var template = ({ item }) => {\n                var result = '';\n\n                if (item.type == 2 || item.uniqueName == \"[KPIs]\") {\n                    result += kendo.ui.icon(item.type == 2 ? \"sum\" : \"caret-alt-expand\"/* \"kpi\" */);\n                } else if (item.type && item.type !== \"kpi\") {\n                    result += kendo.ui.icon(\"arrows-axes\");\n                }\n\n                result += `${encode(item.caption || item.name)}`;\n\n                return result;\n            };\n\n            this.treeView = $(\"<div/>\").appendTo(container.find('.k-fields-list-wrapper'))\n                .kendoTreeView({\n                    template: template,\n                    dataTextField: \"caption\",\n                    dragAndDrop: true,\n                    autoBind: false,\n                    dataSource: this._treeViewDataSource(),\n                    dragstart: function(e) {\n                        var dataItem = this.dataItem(e.sourceNode);\n\n                        if ((!dataItem.hasChildren && !dataItem.aggregator && !dataItem.measure) || (dataItem.type == 2) || dataItem.uniqueName === \"[KPIs]\") {\n                            e.preventDefault();\n                        }\n                    },\n                    drag: function(e) {\n                        var status = \"cancel\";\n                        var setting = settingTargetFromNode(e.dropTarget);\n\n                        if (setting && setting.validate(this.dataItem(e.sourceNode))) {\n                            status = \"plus\";\n                        }\n\n                        e.setStatusClass(status);\n                    },\n                    drop: function(e) {\n                        e.preventDefault();\n\n                        var setting = settingTargetFromNode(e.dropTarget);\n                        var node = this.dataItem(e.sourceNode);\n                        var idx, length, measures;\n                        var name;\n\n                        if (setting && setting.validate(node)) {\n                            name = node.defaultHierarchy || node.uniqueName;\n\n                            if (node.type === \"kpi\") {\n                                measures = buildKPImeasures(node);\n                                length = measures.length;\n                                name = [];\n\n                                for (idx = 0; idx < length; idx++) {\n                                    name.push(kpiNode(measures[idx]));\n                                }\n                            } else if (node.kpi) {\n                                name = [kpiNode(node)];\n                            }\n\n                            setting.add(name);\n                        }\n                    }\n                 })\n                .data(\"kendoTreeView\");\n        },\n\n        _createTarget: function(element, options) {\n            var template;\n\n            template = ({ name, sortIcon }) => ''\n                + `<div class=\"k-chip k-chip-md k-rounded-full k-chip-solid k-chip-solid-base\" data-${kendo.ns}name=\"${name}\">`\n                    + '<span class=\"k-chip-content\">'\n                        + `<span class=\"k-chip-label\">${name}</span>`\n                    + '</span>'\n                    + '<span class=\"k-chip-actions k-field-actions\">'\n                    + getIcons(sortIcon, options)\n                    + '</span>'\n                + '</div>';\n\n            return new kendo.ui.PivotSettingTarget(element, $.extend({\n                dataSource: this.dataSource,\n                template: template,\n                emptyTemplate: (data) => `<span class=\"k-empty\">${data}</span>`\n            }, options));\n        },\n\n        _targets: function() {\n            var container = $('<div class=\"k-pivotgrid-targets\"/>').appendTo(this.form);\n\n            var columnsContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.columnsLabel, icon: \"columns\" })).appendTo(container);\n            var columns = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(columnsContainer.find('.k-pivotgrid-target-wrap'));\n\n            var rowsContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.rowsLabel, icon: \"rows\" })).appendTo(container);\n            var rows = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(rowsContainer.find('.k-pivotgrid-target-wrap'));\n\n            var measuresContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.measuresLabel, icon: \"sum\" })).appendTo(container);\n            var measures = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(measuresContainer.find('.k-pivotgrid-target-wrap'));\n\n            var options = this.options;\n\n            this.columns = this._createTarget(columns, {\n                filterable: options.filterable,\n                sortable: options.sortable,\n                connectWith: rows,\n                messages: {\n                    empty: options.messages.columns,\n                    fieldMenu: options.messages.fieldMenu\n                }\n            });\n\n            this.rows = this._createTarget(rows, {\n                filterable: options.filterable,\n                sortable: options.sortable,\n                setting: \"rows\",\n                connectWith: columns,\n                messages: {\n                    empty: this.options.messages.rows,\n                    fieldMenu: this.options.messages.fieldMenu\n                }\n            });\n\n            this.measures = this._createTarget(measures, {\n                setting: \"measures\",\n                messages: {\n                    empty: options.messages.measures\n                }\n            });\n\n            columns\n                .add(rows)\n                .add(measures)\n                .on(HOVER_EVENTS, \".k-item:not(.k-empty)\", this._toggleHover);\n        },\n\n        _toggleHover: function(e) {\n            $(e.currentTarget).closest(\":not(path,svg)\").toggleClass(\"k-hover\", e.type === \"mouseenter\");\n        },\n\n        _resize: function() {\n            var element = this.element;\n            var height = this.options.height;\n\n            if (!height) {\n                return;\n            }\n\n            element.outerHeight(height);\n        },\n\n        refresh: function() {\n            var dataSource = this.dataSource;\n\n            if (dataSource.cubeBuilder || this._cube !== dataSource.cube() || this._catalog !== dataSource.catalog()) {\n                this.treeView.dataSource.fetch();\n            }\n\n            this._catalog = this.dataSource.catalog();\n            this._cube = this.dataSource.cube();\n\n            this._resize();\n\n            this._progress(false);\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            this.dataSource.unbind(\"change\", this._refreshHandler);\n\n            this.form.find(\".k-pivot-setting\").off(ns);\n\n            this.rows.destroy();\n            this.columns.destroy();\n            this.measures.destroy();\n            this.treeView.destroy();\n\n            this.element = null;\n            this._refreshHandler = null;\n        }\n    });\n\n    function kpiMeasure(name, measure, type) {\n        return {\n            hierarchyUniqueName: name,\n            uniqueName: measure,\n            caption: measure,\n            measure: measure,\n            name: measure,\n            type: type,\n            kpi: true\n        };\n    }\n\n    function buildKPImeasures(node) {\n        var name = node.name;\n        return [\n            kpiMeasure(name, node.value, \"value\"),\n            kpiMeasure(name, node.goal, \"goal\"),\n            kpiMeasure(name, node.status, \"status\"),\n            kpiMeasure(name, node.trend, \"trend\")\n        ];\n    }\n\n    kendo.cssProperties.registerPrefix(\"HTMLChip\", \"k-chip-\");\n\n    kendo.cssProperties.registerValues(\"HTMLChip\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n\n    ui.plugin(PivotConfigurator);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}