{"version":3,"sources":["raw-mjs/kendo.treeview.draganddrop.js"],"names":["__meta__","id","name","category","depends","advanced","$","undefined$1","kendo","window","ui","extend","VISIBILITY","DRAG_STATUS","DRAG_STATUS_ELEMENT","KSTATEHOVER","HierarchicalDragAndDrop","Class","init","element","options","this","hovered","dragstart","noop","drag","drop","dragend","_draggable","Draggable","ignore","filter","autoScroll","cursorOffset","left","top","support","mobileOS","zoomLevel","hint","_hint","bind","dragcancel","hintDestroyed","holdToDrag","clickMoveClick","hintText","_removeTouchHover","touch","find","removeClass","_hintStatus","newStatus","statusElement","status","icon","replaceWith","e","dropHint","remove","source","currentTarget","closest","itemSelector","preventDefault","reorderable","css","appendTo","hoveredItem","itemHeight","itemTop","itemContent","delta","insertOnTop","insertOnBottom","addChild","itemData","position","target","dropTarget","eventTarget","container","allowedContainers","length","contains","hasClass","itemFromTarget","item","_outerHeight","content","getOffset","y","location","_lastHover","toggleClass","dropHintContainer","first","last","originalEvent","pageY","pageX","x","setStatus","value","indexOf","destination","eventArgs","dropPrevented","requireTarget","dropPositionFrom","valid","setValid","newValid","dropped","destroy","jQuery","kendo$1"],"mappings":"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","file":"kendo.treeview.draganddrop.js","sourcesContent":["import './kendo.data.js';\nimport './kendo.draganddrop.js';\n\nvar __meta__ = {\n    id: \"treeview.draganddrop\",\n    name: \"Hierarchical Drag & Drop\",\n    category: \"framework\",\n    depends: [ \"core\", \"draganddrop\" ],\n    advanced: true\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo;\n    var ui = kendo.ui;\n    var extend = $.extend;\n    var VISIBILITY = \"visibility\";\n    var DRAG_STATUS = \"k-drag-status\";\n    var DRAG_STATUS_ELEMENT = `<span class=\"${DRAG_STATUS}\"></span>`;\n    var KSTATEHOVER = \"k-hover\";\n    var INPUTSELECTOR = \"input,a:not(.k-treeview-leaf),textarea,.k-multiselect-wrap,select,button,a.k-button>.k-icon,.k-button>.k-button-text,button.k-button>.k-icon,span.k-toggle-icon,a.k-button>.k-svg-icon,button.k-button>.k-svg-icon,.k-button>.k-svg-icon>svg,.k-button>.k-svg-icon>svg>path\";\n    var DROPHINTTEMPLATE = \"<div class='k-drop-hint k-drop-hint-h'>\" +\n                                \"<div class='k-drop-hint-start'></div>\" +\n                                \"<div class='k-drop-hint-line'></div>\" +\n                            \"</div>\";\n\n    ui.HierarchicalDragAndDrop = kendo.Class.extend({\n        init: function(element, options) {\n            this.element = element;\n            this.hovered = element;\n            this.options = extend({\n                dragstart: $.noop, drag: $.noop, drop: $.noop, dragend: $.noop\n            }, options);\n\n            this._draggable = new ui.Draggable(element, {\n                ignore: INPUTSELECTOR,\n                filter: options.filter,\n                autoScroll: options.autoScroll,\n                cursorOffset: {\n                    left: 10,\n                    top: kendo.support.mobileOS ? -40 / kendo.support.zoomLevel() : 10\n                },\n                hint: this._hint.bind(this),\n                dragstart: this.dragstart.bind(this),\n                dragcancel: this.dragcancel.bind(this),\n                hintDestroyed: this.dragcancel.bind(this),\n                drag: this.drag.bind(this),\n                dragend: this.dragend.bind(this),\n                holdToDrag: options.holdToDrag,\n                clickMoveClick: options.clickMoveClick\n            });\n        },\n\n        _hint: function(element) {\n            return \"<div class='k-drag-clue'>\" +\n                        DRAG_STATUS_ELEMENT +\n                        this.options.hintText(element) +\n                    \"</div>\";\n        },\n\n        _removeTouchHover: function() {\n            if (kendo.support.touch && this.hovered) {\n                this.hovered.find(\".\" + KSTATEHOVER).removeClass(KSTATEHOVER);\n                this.hovered = false;\n            }\n        },\n\n        _hintStatus: function(newStatus) {\n            var statusElement = this._draggable.hint.find(`.${DRAG_STATUS}`);\n            if (newStatus) {\n                this.status = newStatus;\n                ui.icon(statusElement, {\n                    icon: newStatus\n                });\n            } else {\n                this.status = '';\n                statusElement.replaceWith(DRAG_STATUS_ELEMENT);\n            }\n        },\n\n        dragstart: function(e) {\n            if (this.dropHint) {\n                this.dropHint.remove();\n            }\n\n            this.source = e.currentTarget.closest(this.options.itemSelector);\n\n            if (this.options.dragstart(this.source)) {\n                e.preventDefault();\n            }\n\n            if (this.options.reorderable) {\n                this.dropHint = $(DROPHINTTEMPLATE)\n                    .css(VISIBILITY, \"hidden\")\n                    .appendTo(this.element);\n            } else {\n                this.dropHint = $();\n            }\n        },\n\n        drag: function(e) {\n            var options = this.options;\n            var source = this.source;\n            var target = this.dropTarget = $(kendo.eventTarget(e));\n            var container = target.closest(options.allowedContainers);\n            var hoveredItem, itemHeight, itemTop, itemContent, delta;\n            var insertOnTop, insertOnBottom, addChild;\n            var itemData, position, status;\n\n            if (!container.length) {\n                // dragging outside of allowed elements\n                status = \"cancel\";\n                this._removeTouchHover();\n            } else if (source[0] == target[0] || options.contains(source[0], target[0])) {\n                // dragging item within itself\n                status = \"cancel\";\n            } else if (e.clickMoveClick && e.currentTarget.hasClass(\"k-drag-cell\") && target.closest(\".k-drag-cell\").length === 0) {\n                // click-move-click interaction with drag cell\n                status = \"cancel\";\n            } else if (e.clickMoveClick && e.currentTarget.hasClass(\"k-treeview-leaf\") && target.closest(\".k-treeview-leaf\").length === 0) {\n                // click-move-click interaction with TreeView\n                status = \"cancel\";\n            } else {\n                // moving or reordering item\n                status = \"insert-middle\";\n\n                itemData = options.itemFromTarget(target);\n                hoveredItem = itemData.item;\n\n                if (hoveredItem.length) {\n                    this._removeTouchHover();\n                    itemHeight = kendo._outerHeight(hoveredItem);\n                    itemContent = itemData.content;\n\n                    if (options.reorderable) {\n                        delta = itemHeight / (itemContent.length > 0 ? 4 : 2);\n                        itemTop = kendo.getOffset(hoveredItem).top;\n\n                        insertOnTop = e.y.location < (itemTop + delta);\n                        insertOnBottom = (itemTop + itemHeight - delta) < e.y.location;\n                        addChild = itemContent.length && !insertOnTop && !insertOnBottom;\n                    } else {\n                        addChild = true;\n                        insertOnTop = false;\n                        insertOnBottom = false;\n                    }\n\n                    this.hovered = addChild ? container : false;\n\n                    this.dropHint.css(VISIBILITY, addChild ? \"hidden\" : \"visible\");\n\n                    if (this._lastHover && this._lastHover[0] != itemContent[0]) {\n                        this._lastHover.removeClass(KSTATEHOVER);\n                    }\n\n                    this._lastHover = itemContent.toggleClass(KSTATEHOVER, addChild);\n\n                    if (addChild) {\n                        status = \"plus\";\n                    } else {\n                        position = hoveredItem.position();\n                        position.top += insertOnTop ? 0 : itemHeight;\n\n                        this.dropHint.css(position)\n                            [insertOnTop ? \"prependTo\" : \"appendTo\"]\n                            (options.dropHintContainer(hoveredItem));\n\n                        if (insertOnTop && itemData.first) {\n                            status = \"insert-top\";\n                        }\n\n                        if (insertOnBottom && itemData.last) {\n                            status = \"insert-bottom\";\n                        }\n                    }\n                } else if (target[0] != this.dropHint[0]) {\n                    if (this._lastHover) {\n                        this._lastHover.removeClass(KSTATEHOVER);\n                    }\n\n                    if (!$.contains(this.element[0], container[0])) {\n                        // moving node to different element\n                        status = \"plus\";\n                    } else {\n                        status = \"cancel\";\n                    }\n                }\n            }\n\n            this.options.drag({\n                originalEvent: e.originalEvent,\n                source: source,\n                target: target,\n                pageY: e.y.location,\n                pageX: e.x.location,\n                status: status,\n                setStatus: function(value) {\n                    status = value;\n                }\n            });\n\n            if (status.indexOf(\"insert\") !== 0) {\n                this.dropHint.css(VISIBILITY, \"hidden\");\n            }\n\n            this._hintStatus(status);\n        },\n\n        dragcancel: function() {\n            if (this.dropHint) {\n                this.dropHint.remove();\n            }\n        },\n\n        dragend: function(e) {\n            var position = \"over\",\n                source = this.source,\n                destination,\n                dropHint = this.dropHint,\n                dropTarget = this.dropTarget || $(kendo.eventTarget(e)),\n                eventArgs, dropPrevented, requireTarget;\n\n            if (dropHint && dropHint.css(VISIBILITY) == \"visible\") {\n                position = this.options.dropPositionFrom(dropHint);\n                destination = dropHint.closest(this.options.itemSelector);\n                requireTarget = true;\n            } else if (dropTarget) {\n                destination = dropTarget.closest(this.options.itemSelector);\n\n                // moving node to root element\n                if (!destination.length) {\n                    destination = dropTarget.closest(this.options.allowedContainers);\n                }\n            }\n\n            if (requireTarget && !destination.length) {\n                this.dragcancel();\n                return;\n            }\n\n            eventArgs = {\n                originalEvent: e.originalEvent,\n                source: source[0],\n                destination: destination[0],\n                valid: this.status != \"cancel\",\n                setValid: function(newValid) {\n                    this.valid = newValid;\n                },\n                dropTarget: dropTarget[0],\n                position: position\n            };\n\n            dropPrevented = this.options.drop(eventArgs);\n\n            dropHint.remove();\n            this._removeTouchHover();\n            if (this._lastHover) {\n                this._lastHover.removeClass(KSTATEHOVER);\n            }\n\n            if (!eventArgs.valid || dropPrevented) {\n                this._draggable.dropped = eventArgs.valid;\n                return;\n            }\n\n            this._draggable.dropped = true;\n\n            this.options.dragend({\n                originalEvent: e.originalEvent,\n                source: source,\n                destination: destination,\n                position: position\n            });\n        },\n\n        destroy: function() {\n            this._lastHover = this.hovered = null;\n            this._draggable.destroy();\n        }\n    });\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}