{"version":3,"sources":["raw-mjs/kendo.timedurationpicker.js"],"names":["__meta__","id","name","category","description","docsCategory","depends","$","undefined$1","kendo","window","ui","Widget","html","map","extend","mediaQuery","OPEN","CLOSE","CHANGE","FOCUSED","ARIA_EXPANDED","HOVEREVENTS","NS","STATEDISABLED","ARIA_HIDDEN","ARIA_DISABLED","ARIA_READONLY","DISABLED","READONLY","STATEINVALID","MASKCHAR","caret","keys","defaultColumns","hours","format","divider","min","max","step","minutes","seconds","milliseconds","days","TimeDurationPicker","init","element","options","columns","that","this","fn","call","_columns","column","extended","selectorFormat","repeat","match","length","readonly","Boolean","attr","enable","is","parents","bigScreenMQL","adaptiveMode","onChange","_timeSelector","destroy","_popupView","_wrapper","_button","_applyCssClasses","_input","_buildMask","_validation","_editable","disable","_ariaLabel","_listsContainer","value","_old","_maskedInput","val","_canUpdateLast","notify","separator","shortcuts","size","fillMode","rounded","messages","set","cancel","events","wrapper","off","_value","parseInt","_updateValueFromTimeSelector","_toggleHover","e","currentTarget","toggleClass","type","add","addClass","removeClass","on","removeAttr","_attachHandlers","TimeSelector","anchor","mediaQueryList","matches","focus","trigger","_selectNearestSection","_lastCaret","close","preventDefault","open","change","_removeInvalidState","button","next","renderButton","icon","shape","insertAfter","role","part","toAdd","currentPartLength","_emtpyMask","_maskParts","i","replace","end","mask","symbolsLength","start","indexOf","numberEnd","lastIndexOf","numberStart","push","autocomplete","insertBefore","hide","wrap","parent","_keydown","bind","_inputHandler","_focus","_focusout","_paste","_mouseDown","_mouseUp","_click","_mouseOnInput","selection","_triggerChange","_lastValue","_updateValueFromInput","setTimeout","index","_getPartValue","startSeparator","lastSeparator","substring","_getEmptyPart","_fillParts","clipNumber","symbols","parts","split","join","_clearParts","endBoundary","_updatePart","oldValue","entered","emrtyPart","current","search","_replacePart","newPart","toggle","_switchPart","future","past","key","keyCode","_backward","BACKSPACE","LEFT","RIGHT","popup","visible","_scrollerKeyDownHandler","UP","DOWN","altKey","ENTER","partValue","masksToAdd","valueParts","rest","Math","floor","getTimeParts","_validationIcon","iconClass","_addInvalidState","colValue","values","valid","emptyPart","_isPasted","_pasted","clipboardData","originalEvent","getData","_replaceEntire","_activeElement","validEntry","updatedPart","endSubstring","startSubstring","deletedPart","canUpdate","restored","oldpartValue","nextSeparator","old","lengthDiff","test","cssProperties","registerPrefix","registerValues","prop","roundedValues","concat","plugin","jQuery","kendo$1"],"mappings":"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","file":"kendo.timedurationpicker.js","sourcesContent":["import './kendo.timeselector.js';\nimport './kendo.icons.js';\n\nvar __meta__ = {\n    id: \"timedurationpicker\",\n    name: \"TimeDurationPicker\",\n    category: \"web\",\n    description: \"The TimeDurationPicker widget allows the end user to select a time range stored in milliseconds.\",\n    docsCategory: \"editors\",\n    depends: [ \"timeselector\" ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        Widget = ui.Widget,\n        html = kendo.html,\n        map = $.map,\n        extend = $.extend,\n        mediaQuery = kendo.mediaQuery,\n        OPEN = \"open\",\n        FOCUS = \"focus\",\n        CLOSE = \"close\",\n        CHANGE = \"change\",\n        CLICK = \"click\",\n        SPAN = \"<span></span>\",\n        KEYDOWN = \"keydown\",\n        FOCUSOUT = \"focusout\",\n        FOCUSED = \"k-focus\",\n        MOUSEUP = \"mouseup\",\n        MOUSEDOWN = \"mousedown\",\n        PASTE = \"paste\",\n        NS = \".kendoTimeDurationPicker\",\n        ARIA_EXPANDED = \"aria-expanded\",\n        HOVEREVENTS = \"mouseenter\" + NS + \" mouseleave\" + NS,\n        STRING = \"string\",\n        INPUT = \"input\",\n        HOVER = \"k-hover\",\n        STATEDISABLED = \"k-disabled\",\n        ARIA_HIDDEN = \"aria-hidden\",\n        ARIA_DISABLED = \"aria-disabled\",\n        ARIA_READONLY = \"aria-readonly\",\n        ARIA_READONLY = \"aria-readonly\",\n        DISABLED = \"disabled\",\n        READONLY = \"readonly\",\n        STATEINVALID = \"k-invalid\",\n        MASKCHAR = \"_\",\n        caret = kendo.caret,\n        keys = kendo.keys,\n        NS = \".kendoTimeDurationPicker\";\n        html = kendo.html;\n\n    var defaultColumns = {\n        \"hours\": {\n            name: \"hours\",\n            format: \"## hours\",\n            divider: 3600000,\n            min: 0,\n            max: 23,\n            step: 1\n        },\n        \"minutes\": {\n            name: \"minutes\",\n            format: \"## mins\",\n            divider: 60000,\n            min: 0,\n            max: 59,\n            step: 1\n        },\n        \"seconds\": {\n            name: \"seconds\",\n            format: \"## sec\",\n            divider: 1000,\n            min: 0,\n            max: 59,\n            step: 1\n        },\n        \"milliseconds\": {\n            name: \"milliseconds\",\n            format: \"### msec\",\n            min: 0,\n            max: 999,\n            step: 1\n        },\n        \"days\": {\n            format: \"### days\",\n            name: \"days\",\n            divider: 86400000,\n            min: 0,\n            max: 365,\n            step: 1\n        }\n    };\n\n    function convertToMsec(value) {\n        return ((value.days || 0) * 86400000) + ((value.hours || 0) * 3600000) + ((value.minutes || 0) * 60000) + ((value.seconds || 0) * 1000) + (value.milliseconds || 0);\n    }\n\n    function getTimeParts(value) {\n        var rest;\n        var days = Math.floor(value / 86400000);\n        rest = value % 86400000;\n        var hours = Math.floor(rest / 3600000);\n        rest = value % 3600000;\n        var minutes = Math.floor(rest / 60000);\n        rest = value % 60000;\n        var seconds = Math.floor(rest / 1000);\n        rest = value % 1000;\n\n        return {\n            days: days,\n            hours: hours,\n            minutes: minutes,\n            seconds: seconds,\n            milliseconds: rest\n        };\n    }\n\n    function normalizeColumns(columns) {\n        return map(columns, function(column) {\n            column = typeof column === STRING ? { name: column } : column;\n            var extended = extend(true, {}, defaultColumns[column.name], column);\n            extended.selectorFormat = \"{0:\" + \"0\".repeat(extended.format.match(/#/g).length) + \"}\";\n            return extended;\n        });\n    }\n\n    var TimeDurationPicker = Widget.extend({\n        init: function(element, options) {\n            var that = this;\n\n            options = options || {};\n\n            Widget.fn.init.call(that, element, options);\n\n            that._columns = normalizeColumns(options.columns);\n            that.options.columns = that._columns;\n            that.options.readonly = options.readonly !== undefined$1 ? options.readonly : Boolean(that.element.attr(\"readonly\"));\n            that.options.enable = options.enable !== undefined$1 ? options.enable : !(Boolean(that.element.is(\"[disabled]\") || $(element).parents(\"fieldset\").is(':disabled')));\n\n            that.bigScreenMQL = mediaQuery(\"large\");\n            if (that.options.adaptiveMode == \"auto\") {\n                that.bigScreenMQL.onChange(()=> {\n                    if (that._timeSelector) {\n                        that._timeSelector.destroy();\n                        that._timeSelector = null;\n                    }\n\n                    that._popupView();\n                });\n            }\n\n            that._wrapper();\n            that._button();\n            that._applyCssClasses();\n            that._input();\n            that._popupView();\n\n            that._buildMask();\n            that._validation();\n            that._editable({\n                readonly: that.options.readonly,\n                disable: !that.options.enable\n            });\n            that._ariaLabel(that._timeSelector._listsContainer);\n            if (that.options.value) {\n                that.value(options.value);\n                that._old = that._maskedInput.val();\n            }\n            that._canUpdateLast = true;\n\n            kendo.notify(that);\n        },\n\n        options: {\n            name: \"TimeDurationPicker\",\n            columns: [],\n            separator: \",\",\n            shortcuts: [],\n            value: null,\n            adaptiveMode: \"none\",\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\",\n            messages: {\n                set: \"Set\",\n                cancel: \"Cancel\",\n                days: \"Days\",\n                hours: \"Hours\",\n                minutes: \"Minutes\",\n                milliseconds: \"Milliseconds\",\n                seconds: \"Seconds\"\n            }\n        },\n\n        events: [\n            OPEN,\n            CLOSE,\n            CHANGE\n        ],\n\n        destroy: function() {\n            var that = this;\n\n            that.wrapper.off(NS);\n            that._maskedInput.off(NS);\n            if (that._timeSelector) {\n                that._timeSelector.destroy();\n                that._timeSelector = null;\n            }\n\n\n            if (that.bigScreenMQL) {\n                that.bigScreenMQL.destroy();\n            }\n        },\n\n        value: function(value) {\n            var that = this;\n\n            if (value === undefined$1) {\n                return that._value;\n            }\n\n            if (typeof value === \"number\") {\n                value = parseInt(value);\n            } else {\n                value = null;\n            }\n\n            that._value = value;\n            that.element.val(that._value);\n            that._timeSelector._value = that._value;\n            that._updateValueFromTimeSelector();\n        },\n\n        _toggleHover: function(e) {\n            $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n        },\n\n        _editable: function(options) {\n            var that = this,\n                disable = options.disable,\n                readonly = options.readonly,\n                element = that._maskedInput.add(that.element).off(NS),\n                wrapper = that.wrapper.off(NS);\n\n            if (!readonly && !disable) {\n                wrapper\n                    .removeClass(STATEDISABLED)\n                    .on(HOVEREVENTS, that._toggleHover);\n\n                if (element && element.length) {\n                    element.removeAttr(DISABLED);\n                    element.removeAttr(READONLY);\n                }\n                element.attr(ARIA_DISABLED, false)\n                       .attr(ARIA_READONLY, false);\n\n                that._attachHandlers();\n            } else {\n                wrapper\n                    .addClass(disable ? STATEDISABLED : \"\")\n                    .removeClass(disable ? \"\" : STATEDISABLED);\n\n                element.attr(DISABLED, disable)\n                       .attr(READONLY, readonly)\n                       .attr(ARIA_DISABLED, disable)\n                       .attr(ARIA_READONLY, readonly);\n            }\n        },\n\n        readonly: function(readonly) {\n            this._editable({\n                readonly: readonly === undefined$1 ? true : readonly,\n                disable: false\n            });\n        },\n\n        enable: function(enable) {\n            this._editable({\n                readonly: false,\n                disable: !(enable = enable === undefined$1 ? true : enable)\n            });\n        },\n\n        _popupView: function() {\n            var that = this;\n            var options = that.options;\n\n            if (!that._timeSelector) {\n                that._timeSelector = new kendo.ui.TimeSelector(that._maskedInput, {\n                    id: that.element.attr(\"id\") + \"_timeSelector\",\n                    anchor: that.wrapper,\n                    adaptiveMode: options.adaptiveMode,\n                    columns: options.columns,\n                    shortcuts: options.shortcuts,\n                    value: options.value,\n                    size: options.adaptiveMode != \"auto\" || that.bigScreenMQL.mediaQueryList.matches ? options.size : \"large\",\n                    fillMode: options.fillMode,\n                    rounded: options.rounded,\n                    messages: options.messages,\n                    focus: function() {\n                        that._maskedInput.trigger(\"focus\");\n                        that._selectNearestSection(that._lastCaret || 0);\n                    },\n                    close: function(e) {\n                        if (that.trigger(CLOSE)) {\n                            e.preventDefault();\n                        } else {\n                            that._maskedInput.attr(ARIA_EXPANDED, false);\n                            that._timeSelector._listsContainer.attr(ARIA_HIDDEN, true);\n                        }\n                    },\n                    open: function(e) {\n                        if (that.trigger(OPEN)) {\n                            e.preventDefault();\n                        } else {\n                            that._maskedInput.attr(ARIA_EXPANDED, true);\n                            that._timeSelector._listsContainer.attr(ARIA_HIDDEN, false);\n                            that._lastCaret = caret(that._maskedInput)[0];\n                            if (that._lastCaret === that._maskedInput.val().length) {\n                                that._lastCaret = 0;\n                            }\n                        }\n                    },\n                    change: function(value) {\n                        that._value = value;\n                        that._updateValueFromTimeSelector();\n                        that._removeInvalidState();\n                        that.trigger(CHANGE);\n                    }\n                });\n            }\n        },\n\n        _button: function() {\n            var that = this,\n                element = that.element,\n                options = that.options,\n                button;\n\n            button = element.next(\"button.k-input-button\");\n\n            if (!button[0]) {\n                button = $(html.renderButton('<button unselectable=\"on\" tabindex=\"-1\" class=\"k-input-button\" aria-label=\"select\"></button>', {\n                    icon: \"clock-arrow-rotate\",\n                    size: options.size,\n                    fillMode: options.fillMode,\n                    shape: \"none\",\n                    rounded: \"none\"\n                })).insertAfter(element);\n            }\n\n            that._button = button.attr({\n                \"role\": \"button\"\n            });\n        },\n\n        _buildMask: function() {\n            var columns = this.options.columns;\n            var format;\n            var toAdd = \"\";\n            var part;\n            var currentPartLength = 0;\n\n            this._emtpyMask = \"\";\n            this._maskParts = [];\n\n            for (var i = 0; i < columns.length; i++) {\n                part = {};\n                format = columns[i].format;\n\n                if (i) {\n                    toAdd = this.options.separator;\n                }\n\n                toAdd += format.replace(/#/g, '_');\n                this._emtpyMask += toAdd;\n                part.end = this._emtpyMask.length - 1;\n                part.mask = format.replace(/#/g, '_');\n                part.symbolsLength = part.mask.match(/_/g).length;\n                part.start = this._emtpyMask.indexOf(part.mask, currentPartLength);\n                part.numberEnd = this._emtpyMask.lastIndexOf(MASKCHAR) + 1;\n                part.numberStart = this._emtpyMask.indexOf(MASKCHAR, part.start);\n\n                currentPartLength += part.mask.length;\n                this._maskParts.push(part);\n            }\n\n            this._old = this._emtpyMask;\n            this._maskedInput.val(this._emtpyMask);\n        },\n\n        _input: function() {\n            var that = this;\n\n            that._maskedInput = $(\"<input />\")\n                        .attr(kendo.attr(\"validate\"), false)\n                        .attr({\n                            \"role\": \"combobox\",\n                            \"aria-expanded\": false,\n                            \"aria-controls\": that.element.attr(\"id\") + \"_timeSelector\",\n                            \"autocomplete\": \"off\"\n                        })\n                        .addClass(\"k-input-inner\")\n                        .insertBefore(that.element);\n\n            that.element.hide();\n        },\n\n        _wrapper: function() {\n            var that = this,\n                element = that.element,\n                wrapper;\n\n            wrapper = element.parents(\".k-timedurationpicker\");\n\n            if (!wrapper[0]) {\n                wrapper = element.wrap(SPAN).parent();\n            }\n\n            that.wrapper = wrapper.addClass(\"k-timedurationpicker k-input\");\n        },\n\n        _attachHandlers: function() {\n            var that = this;\n\n            that._maskedInput\n                    .on(KEYDOWN + NS, that._keydown.bind(that))\n                    .on(INPUT + NS, that._inputHandler.bind(that))\n                    .on(FOCUS + NS, that._focus.bind(that))\n                    .on(FOCUSOUT + NS, that._focusout.bind(that))\n                    .on(PASTE + NS, that._paste.bind(that))\n                    .on(MOUSEDOWN + NS, that._mouseDown.bind(that))\n                    .on(MOUSEUP + NS, that._mouseUp.bind(that));\n\n            that.wrapper.on(CLICK + NS, \".k-input-button\", that._click.bind(that));\n        },\n\n        _mouseDown: function() {\n            this._mouseOnInput = true;\n        },\n\n        _mouseUp: function() {\n            var selection = caret(this._maskedInput[0]);\n            var value = this._maskedInput[0].value;\n            if (selection[0] === selection[1]) {\n                this._selectNearestSection(selection[1] == value.length ? value.length - 1 : selection[1]);\n            }\n        },\n\n        _triggerChange: function() {\n            if ((this._lastValue == undefined$1 && this._value) || this._lastValue != this._value) {\n                this._lastValue = this._value;\n                this.trigger(CHANGE);\n            }\n        },\n\n        _focusout: function() {\n            this._updateValueFromInput();\n            this._triggerChange();\n\n            this._canUpdateLast = true;\n            this.wrapper.removeClass(FOCUSED);\n        },\n\n        _focus: function() {\n            var that = this;\n            if (!that._mouseOnInput) {\n                setTimeout(function() {\n                    that._selectNearestSection(0);\n                }, 10);\n            }\n            that._mouseOnInput = false;\n            that.wrapper.addClass(FOCUSED);\n        },\n\n        _selectNearestSection: function(index) {\n            var part;\n\n            for (var i = 0; i < this._maskParts.length; i++ ) {\n                part = this._maskParts[i];\n                if (index >= part.start && index <= part.end) {\n                    caret(this._maskedInput[0], part.numberStart, part.numberEnd);\n                }\n            }\n        },\n\n        _getPartValue: function(value, index) {\n            var that = this;\n            var separator = that.options.separator;\n            var startSeparator = value.indexOf(separator,index);\n            var lastSeparator = value.lastIndexOf(separator,index);\n            return value.substring(lastSeparator < 0 ? 0 : lastSeparator + 1 , startSeparator < 0 ? value.length : startSeparator );\n        },\n\n        _getEmptyPart: function(index) {\n            return this._getPartValue(this._emtpyMask, index);\n        },\n\n        _fillParts: function(clipNumber) {\n            var parts = this._emtpyMask.split(this.options.separator);\n            var symbols;\n            clipNumber = clipNumber + \"\";\n\n            for (var i = 0; i < parts.length; i++) {\n                symbols = parts[i].match(/_/g).length;\n                if (symbols > clipNumber.length) {\n                    parts[i] = parts[i].replace(MASKCHAR.repeat(symbols), \"0\".repeat(symbols - clipNumber.length) + clipNumber);\n                } else {\n                    parts[i] = parts[i].replace(MASKCHAR.repeat(symbols), clipNumber.substring(0, symbols));\n                    clipNumber = clipNumber.substring(symbols, symbols.length);\n                }\n            }\n            return parts.join(this.options.separator);\n        },\n\n        _clearParts: function(value, start, end) {\n            var parts = value.split(this.options.separator);\n            var index = 0;\n            var endBoundary;\n\n            for (var i = 0; i < parts.length; i++) {\n                endBoundary = index + parts[i].length;\n                if ((index <= start && endBoundary >= start) || (index <= end && endBoundary >= end)) {\n                    parts[i] = this._getEmptyPart(index);\n                }\n                index += (parts[i].length + 1);\n            }\n            return parts.join(this.options.separator);\n        },\n\n        _updatePart: function(oldValue, entered) {\n            var emrtyPart = this._getEmptyPart(this._old.indexOf(oldValue));\n            var current = oldValue.substring(emrtyPart.indexOf(MASKCHAR), emrtyPart.lastIndexOf(MASKCHAR) + 1);\n            var format = \"{0:\" + \"0\".repeat(current.length) + \"}\";\n\n            if (current.indexOf(MASKCHAR) >= 0 || !(oldValue[oldValue.search(/[0-9]/)] === \"0\") || entered.length > 1) {\n                return oldValue.replace(current, kendo.format(format, parseInt(entered)));\n            } else {\n                return oldValue.replace(current, kendo.format(format, parseInt(current + entered)));\n            }\n        },\n\n        _replacePart: function(oldValue, newPart, index) {\n            return oldValue.replace(this._getPartValue(oldValue, index), newPart);\n        },\n\n        _click: function() {\n            var that = this;\n\n            if (!that._timeSelector) {\n                return;\n            }\n\n            that._timeSelector.toggle();\n        },\n\n        _switchPart: function(options) {\n            var separator = this.options.separator;\n            var selection = options.caret != undefined$1 ? options.caret : caret(this._maskedInput[0])[0];\n            var value = this._maskedInput.val();\n            var index;\n\n            if (options.next) {\n                index = value.indexOf(separator, selection);\n                if (index < 0) {\n                    index = value.length - 1;\n                } else {\n                    index++;\n                }\n            } else {\n                index = value.lastIndexOf(separator, selection);\n                if (index < 0 ) {\n                    index = 0;\n                } else {\n                    index--;\n                }\n            }\n            this._selectNearestSection(index);\n        },\n\n        _keydown: function(e) {\n            var key = e.keyCode;\n            var separator = this.options.separator;\n            var selection;\n            var value;\n            var index;\n            var future;\n            var past;\n\n            this._backward = key === keys.BACKSPACE;\n            if (key == keys.LEFT || key == keys.RIGHT) {\n                e.preventDefault();\n                selection = caret(this._maskedInput[0])[0];\n                value = this._maskedInput.val();\n                future = value.indexOf(separator, selection);\n                past = value.lastIndexOf(separator, selection);\n\n                if ((future < 0 && key == keys.RIGHT) || (past < 0 && key == keys.LEFT)) {\n                    return;\n                }\n\n                index = (key == keys.LEFT) ? (past - 1) : (future + 1);\n                this._selectNearestSection(index);\n                if (key == keys.LEFT) {\n                    this._canUpdateLast = true;\n                }\n            } else if (this._timeSelector.popup.visible()) {\n                this._timeSelector._scrollerKeyDownHandler(e);\n            } else if (key == keys.UP || key == keys.DOWN) {\n                e.preventDefault();\n                if (e.altKey) {\n                    this._timeSelector.toggle();\n                }\n            } else if (key == keys.ENTER) {\n                this._updateValueFromInput();\n                this._triggerChange();\n            }\n        },\n\n        _updateValueFromTimeSelector: function() {\n            var that = this;\n            var valueParts = getTimeParts(that._value);\n            var value = \"\";\n            var column = this._columns[i];\n            var part;\n            var partValue;\n            var masksToAdd;\n\n            for (var i = 0; i < this._columns.length; i++) {\n                column = this._columns[i];\n                partValue = valueParts[column.name] + '';\n                part = this._maskParts[i];\n\n                if (i) {\n                    value += that.options.separator;\n                }\n\n                if (!valueParts[column.name]) {\n                    value += part.mask;\n                    continue;\n                }\n\n                masksToAdd = part.symbolsLength - partValue.length;\n                value += part.mask.replace(MASKCHAR.repeat(part.symbolsLength), \"0\".repeat(masksToAdd < 0 ? 0 : masksToAdd) + partValue);\n            }\n\n            that._maskedInput.val(value);\n            that._old = value;\n        },\n\n        _validation: function() {\n            var that = this;\n            var element = that.element;\n\n            that._validationIcon = $(kendo.ui.icon({ icon: \"exclamation-circle\", iconClass: \"k-input-validation-icon k-hidden\" })).insertAfter(element);\n        },\n\n        _addInvalidState: function() {\n            this.wrapper.addClass(STATEINVALID);\n            this._validationIcon.removeClass('k-hidden');\n        },\n\n        _removeInvalidState: function() {\n            this.wrapper.removeClass(STATEINVALID);\n            this._validationIcon.addClass('k-hidden');\n        },\n\n        _updateValueFromInput: function() {\n            var val = this._maskedInput.val();\n            var values = {};\n            var valid = true;\n            var column;\n            var part;\n            var colValue;\n\n            for (var i = 0; i < this._columns.length; i++) {\n                column = this._columns[i];\n                part = this._maskParts[i];\n                colValue = val.substring(part.numberStart, part.numberEnd).replace(/_/g, \"\");\n                colValue = kendo.parseInt(colValue || 0);\n\n                if (colValue >= column.min && colValue <= column.max) {\n                    values[column.name] = colValue;\n                } else {\n                    valid = false;\n                    break;\n                }\n            }\n\n            if (valid) {\n                this._value = convertToMsec(values);\n                this.element.val(this._value || \"\");\n                this._timeSelector._value = this._value;\n                this._removeInvalidState();\n            } else {\n                this._addInvalidState();\n            }\n        },\n\n        _paste: function(e) {\n            this._isPasted = true;\n            this._pasted = (e.clipboardData || e.originalEvent.clipboardData).getData('Text');\n            var emptyPart;\n\n            var selection = caret(this._maskedInput);\n\n            if (this._maskedInput.val().length == selection[1] && !selection[0]) {\n                this._replaceEntire = true;\n            } else {\n                emptyPart = this._getEmptyPart(selection[0]);\n                this._pasted = this._pasted.substring(0, emptyPart.match(/_/g).length);\n            }\n        },\n\n        _inputHandler: function() {\n            if (kendo._activeElement() !== this._maskedInput[0]) {\n                return;\n            }\n\n            var that = this;\n            var old = that._old;\n            var separator = that.options.separator;\n            var value = that._maskedInput[0].value;\n            var selection = caret(that._maskedInput)[0];\n            var lengthDiff = old.length - value.length;\n            var entered;\n            var validEntry;\n            var updatedPart;\n            var endSubstring;\n            var startSubstring;\n            var deletedPart;\n            var emptyPart;\n            var canUpdate;\n            var restored;\n            var oldpartValue;\n            var nextSeparator;\n\n            entered = that._isPasted ? that._pasted : value.substring(selection - 1, selection);\n            validEntry = /\\d/.test(entered);\n\n            if (that._isPasted && that._replaceEntire && validEntry) {\n                that._old = that._fillParts(parseInt(entered));\n                that._maskedInput.val(that._old);\n                that._selectNearestSection(0);\n                that._isPasted = that._replaceEntire = false;\n                return;\n            }\n\n            if (that._isPasted) {\n                lengthDiff = 0;\n            }\n\n            that._isPasted = false;\n\n            if ((entered === separator && !that._backward)) {\n                that._maskedInput.val(that._old);\n                that._switchPart({ caret: selection, next: true });\n                return;\n            }\n\n            if (!value && that._backward) {\n                that._old = that._emtpyMask;\n                that._maskedInput.val(that._old);\n                that._selectNearestSection(selection);\n                return;\n            }\n\n            if ((!validEntry && !that._backward)) {\n                that._maskedInput.val(that._old);\n                that._selectNearestSection(selection);\n                return;\n            }\n\n            if (!lengthDiff || lengthDiff > 0) {\n                endSubstring = value.substring(selection, value.length);\n                startSubstring = value.substring(0, selection);\n                deletedPart = that._emtpyMask.substring(startSubstring.length, old.indexOf(endSubstring));\n\n                restored = startSubstring + deletedPart + endSubstring;\n                oldpartValue = that._getPartValue(that._old, selection);\n                nextSeparator = that._old.indexOf(separator, that._old.indexOf(oldpartValue) + 1);\n\n                if (that._backward) {\n                    // if multiple parts\n                    if (deletedPart.split(separator).length > 1) {\n                        that._old = this._clearParts(restored, selection, selection + deletedPart.length);\n                    } else {\n                        emptyPart = this._getEmptyPart(selection);\n                        if (emptyPart == oldpartValue) {\n                            that._maskedInput.val(that._old);\n                            that._switchPart({ caret: selection });\n                            return;\n                        }\n                        that._old = that._replacePart(restored, emptyPart, selection);\n                    }\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(selection);\n                    return;\n                }\n\n                if (nextSeparator < 0 && oldpartValue.indexOf(MASKCHAR) === -1 && !that._canUpdateLast) {\n                    that._maskedInput.val(that._old);\n                    that._selectNearestSection(selection);\n                    return;\n                }\n\n                if (validEntry) {\n                    updatedPart = that._updatePart(oldpartValue, entered);\n                    canUpdate = updatedPart[updatedPart.search(/[0-9]/)] === \"0\";\n                    restored = that._replacePart(restored, updatedPart, selection);\n                    that._maskedInput.val(restored);\n                    if (nextSeparator > 0 && !canUpdate) {\n                        that._selectNearestSection(nextSeparator + 1, true);\n                    } else {\n                        that._selectNearestSection(selection);\n                    }\n\n                    that._canUpdateLast = !(nextSeparator < 0 && !canUpdate);\n                }\n                that._old = restored;\n            } else if (lengthDiff < 0) {\n                that._maskedInput.val(that._old);\n                that._selectNearestSection(that._old.length - 1);\n            }\n        },\n\n    });\n\n    kendo.cssProperties.registerPrefix(\"TimeDurationPicker\", \"k-input-\");\n\n    kendo.cssProperties.registerValues(\"TimeDurationPicker\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n\n    ui.plugin(TimeDurationPicker);\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}