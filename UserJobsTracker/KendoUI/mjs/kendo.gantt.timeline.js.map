{"version":3,"sources":["raw-mjs/kendo.gantt.timeline.js"],"names":["__meta__","id","name","category","description","depends","hidden","$","Widget","kendo","ui","kendoDomElement","dom","element","kendoTextElement","text","kendoHtmlElement","html","isPlainObject","outerWidth","_outerWidth","outerHeight","_outerHeight","extend","isRtl","keys","Query","data","NS","CLICK","MOUSEMOVE","MOUSEENTER","MOUSELEAVE","DOT","DAY_HEADER_TEMPLATE","start","toString","WEEK_HEADER_TEMPLATE","end","date","addDays","MONTH_HEADER_TEMPLATE","RESIZE_TOOLTIP_TEMPLATE","styles","messages","format","tooltipWrapper","tooltipContent","htmlEncode","TASK_TOOLTIP_TEMPLATE","task","taskDetails","title","taskDetailsPercent","percentComplete","reset","SIZE_CALCULATION_TEMPLATE","attr","defaultViews","day","type","week","month","year","blurActiveElement","activeElement","_activeElement","nodeName","toLowerCase","trigger","GanttView","init","options","fn","call","this","header","find","gridHeader","content","gridContent","contentWidth","width","_workDays","workDays","dayIndex","workWeekStart","push","workWeekEnd","getWorkDays","_headerTree","headerTree","_taskTree","taskTree","_taskTemplate","taskTemplate","template","Template","templateSettings","_dependencyTree","dependencyTree","_taskCoordinates","_currentTime","destroy","clearTimeout","_tooltipTimeout","headerRow","_dragHint","_resizeHint","_resizeTooltip","_taskTooltip","_percentCompleteResizeTooltip","showWorkHours","showWorkDays","workDayStart","Date","workDayEnd","hourSpan","slotSize","currentTimeMarker","updateInterval","renderLayout","_slots","_createSlots","_tableWidth","_calculateTableWidth","createLayout","_layout","_slotDimensions","_adjustHeight","dependenciesWrapper","height","rows","headers","_headers","colgroup","_colgroup","tree","className","tbody","table","headerTable","style","role","render","first","last","slot","children","slots","_timeSlots","i","length","offsetLeft","offsetWidth","tasks","contentTable","totalHeight","taskCount","rowsTable","_rowsTable","columnsTable","_columnsTable","tasksTable","_tasksTable","calculatedSize","row","_contentHeight","_rowHeight","undefined","_renderCurrentTime","rowCount","attributes","tableRow","alt","tableCell","_createTable","slotSpan","cells","slotsCount","totalSpan","span","colspan","isNonWorking","nonWorking","cell","position","plannedPosition","resourcesPosition","resourceStyle","taskElement","rowIndex","taskLeft","taskRight","coordinates","size","_calculateMilestoneWidth","milestoneWidth","Math","round","resourcesField","resource","resourceAlt","resourcesMargin","_calculateResourcesMargin","taskBorderWidth","_calculateTaskBorderWidth","showPlannedTasks","l","_taskPosition","_taskPositionPlanned","borderWidth","_renderTask","navigatable","left","max","clientWidth","resourcesWrap","_renderResources","isMilestone","cols","currentSpan","maxSpan","boundingClientRect","taskMilestone","milestone","css","visibility","append","getBoundingClientRect","right","remove","margin","wrapper","parseInt","computedStyle","taskSingle","getComputedStyles","parseFloat","taskWrapper","progressHandleOffset","plannedElement","endTaskDotLeft","taskOffsetWrap","offsetElement","editable","wrapClassName","taskWrap","dragHandleStyle","taskWrapAttr","endTaskDotRight","taskFullWidth","_renderPlannedMilestone","_renderPlannedSingleTask","summary","_renderSummary","taskSummaryWrap","_renderMilestone","taskMilestoneWrap","_renderSingleTask","plannedStart","plannedEnd","taskOffset","resize","update","taskActions","link","taskDelete","href","icon","iconDelete","taskResizeHandle","taskResizeHandleWest","taskResizeHandleEast","taskInnerWrap","dependencyCreate","taskDot","taskDotStart","taskDotEnd","dragPercentComplete","taskDragHandle","progressWidth","taskContent","taskChildren","classes","widthExceptDelay","taskDelayed","taskAdvanced","taskComplete","uid","taskSummary","taskSummaryProgress","taskSummaryComplete","taskPlannedMoment","taskPlannedMomentLeft","taskPlannedDuration","taskPlanned","resources","color","get","reverse","startLeft","_offset","slotOffset","_slotIndex","field","value","middle","startIdx","endIdx","slice","ceil","_timeByPosition","x","snap","snapToEnd","_slotByPosition","offset","duration","getTime","slotIndex","_renderDependencies","dependencies","elements","apply","_renderDependency","dependency","predecessor","predecessorId","successor","successorId","_renderFF","from","to","lines","_dependencyFF","_arrow","_renderSS","_renderFS","_dependencyFS","_renderSF","delta","that","top","dir","rowHeight","fromTop","floor","toTop","addHorizontal","_line","line","lineHorizontal","addVertical","lineVertical","abs","minLineHeight","direction","arrowWest","arrowEast","count","j","_createDragHint","clone","addClass","dragHint","cursor","closest","_updateDragHint","_removeDragHint","_createResizeHint","tooltipTop","taskTop","marquee","marqueeColor","RESIZE_HINT","views","resizeTooltipFormat","_resizeTooltipWidth","_resizeTooltipTop","_updateResizeHint","resizeStart","tooltipLeft","tablesWidth","support","scrollbar","tooltipWidth","tableOffset","tasksWrapper","appendTo","_removeResizeHint","_updatePercentCompleteTooltip","_removePercentCompleteTooltip","tooltip","tooltipCallout","PERCENT_RESIZE_TOOLTIP_TEMPLATE","applyStylesFromKendoAttributes","tooltipMiddle","arrow","callout","arrowHeight","_updateDependencyDragHint","_removeDependencyDragHint","_creteDependencyDragHint","deltaX","deltaY","y","sqrt","angle","atan","PI","dependencyHint","transform","_createTaskTooltip","mouseLeft","contentOffset","contentScrollLeft","scrollLeft","parents","rowOffset","scrollTop","_adjustTooltipDimensions","_removeTaskTooltip","_createOffsetTooltip","hours","_offsetTooltip","offsetValue","plannedTasksMessages","plannedTasks","minutes","offsetText","days","offsetTooltipDelay","offsetPrefix","OFFSET_TOOLTIP_TEMPLATE","_removeOffsetTooltip","_createPlannedTooltip","_plannedTooltip","plannedTooltip","editorMessages","editor","startDate","endDate","PLANNED_TOOLTIP_TEMPLATE","_removePlannedTooltip","_scrollTo","elementLeft","elementWidth","elementRight","rowTop","rowBottom","contentTop","contentBottom","contentLeft","contentRight","scrollbarWidth","_scrollToDate","viewStart","viewEnd","columnLevels","level","column","headerText","levelIndex","levelCount","columnIndex","columnCount","_hours","slotEnd","isWorkHour","getHours","setHours","_days","isWorkDay","nextDay","_isWorkDay","_weeks","daySlots","firstDay","calendarInfo","dayOfWeek","_months","endMonth","firstDayOfMonth","setMonth","getMonth","_years","monthSpan","_slotHeaders","columns","getDay","getCulture","calendars","standard","currentTime","_getCurrentTime","timeOffset","viewStyles","tablesWrap","markerOptions","_currentTimeUpdateTimer","setInterval","bind","gridHeaderWrap","offsetTooltipAdvanced","GanttDayView","timeHeaderTemplate","dayHeaderTemplate","range","optionsRange","getDate","getMilliseconds","daySlot","hourSlots","GanttWeekView","weekHeaderTemplate","endDay","rangeEnd","setDate","GanttMonthView","monthHeaderTemplate","lastDayOfMonth","GanttYearView","yearHeaderTemplate","monthSlots","each","index","GanttTimeline","_wrapper","_domTrees","_views","_selectable","_draggable","_resizable","_percentResizeDraggable","_createDependencyDraggable","_attachEvents","_navigatable","_tooltip","selectable","clearInterval","_unbindView","_selectedView","_moveDraggable","_resizeDraggable","_percentDraggable","_dependencyDraggable","touch","off","_findNext","next","_findFirst","_findLast","_findPrev","prev","_scrollTasks","timelineWrapper","timelineScroll","on","e","newTask","target","handled","keyCode","HOME","END","DOWN","UP","focus","LEFT","altKey","hasClass","setTimeout","select","RIGHT","ENTER","stopPropagation","DELETE","preventDefault","calculatedRowHeight","calculatedCellHeight","gridContentWrap","_calculatedSize","Tree","view","isSettings","defaultView","selected","_selectedViewName","_selectView","action","_initializeView","_viewByIndex","getter","window","Error","newRange","newDate","prefix","_range","sort","toArray","_render","_tasks","_taskByUid","currentStart","startOffset","cleanUp","dragInProgress","move","Draggable","distance","filter","holdToDrag","mobileOS","ignore","currentTarget","parent","location","throttle","updateHintDate","userEvents","currentEnd","taskElementOffset","timelineOffset","originalPercentWidth","maxPercentWidth","currentPercentComplete","updateElement","siblings","initialDelta","currentWidth","min","originalHandle","startX","startY","hoveredHandle","hoveredTask","removeClass","hovered","origin","toggleHandles","toggleClass","elementOffset","tablesOffset","elementUnderCursor","currentX","currentY","fromStart","toStart","predecessorElement","successorElement","ctrlKey","document","elementFromPoint","clientX","clientY","click","selectDependency","clearSelection","taskWrapActive","selectedDependency","dependencyDestroy","kendoTouch","doubletap","currentMousePosition","tooltipOptions","mouseMoveHandler","visible","relatedTarget","currentPosition","client","_offsetTooltipTimeout","_plannedTooltipTimeout","_setPlanned","jQuery","kendo$1"],"mappings":"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","file":"kendo.gantt.timeline.js","sourcesContent":["import './kendo.dom.js';\nimport './kendo.touch.js';\nimport './kendo.draganddrop.js';\nimport './kendo.icons.js';\n\nvar __meta__ = {\n    id: \"gantt.timeline\",\n    name: \"Gantt Timeline\",\n    category: \"web\",\n    description: \"The Gantt Timeline\",\n    depends: [ \"dom\", \"touch\", \"draganddrop\", \"icons\" ],\n    hidden: true\n};\n\n(function($) {\n\n    var Widget = kendo.ui.Widget;\n    var kendoDomElement = kendo.dom.element;\n    var kendoTextElement = kendo.dom.text;\n    var kendoHtmlElement = kendo.dom.html;\n    var isPlainObject = $.isPlainObject;\n    var outerWidth = kendo._outerWidth;\n    var outerHeight = kendo._outerHeight;\n    var extend = $.extend;\n    var isRtl = false;\n    var keys = kendo.keys;\n    var Query = kendo.data.Query;\n    var STRING = \"string\";\n    var NS = \".kendoGanttTimeline\";\n    var CLICK = \"click\";\n    var DBLCLICK = \"dblclick\";\n    var MOUSEMOVE = \"mousemove\";\n    var MOUSEENTER = \"mouseenter\";\n    var MOUSELEAVE = \"mouseleave\";\n    var KEYDOWN = \"keydown\";\n    var DOT = \".\";\n    var TIME_HEADER_TEMPLATE = ({ start }) => kendo.toString(start, 't');\n    var DAY_HEADER_TEMPLATE = ({ start }) => kendo.toString(start, 'ddd M/dd');\n    var WEEK_HEADER_TEMPLATE = ({ start, end }) => `${kendo.toString(start, 'ddd M/dd')} - ${kendo.toString(kendo.date.addDays(end, -1), 'ddd M/dd')}`;\n    var MONTH_HEADER_TEMPLATE = ({ start }) => kendo.toString(start, 'MMM');\n    var YEAR_HEADER_TEMPLATE = ({ start }) => kendo.toString(start, 'yyyy');\n    var RESIZE_HINT = ({ styles }) => `<div class=\"${styles.marquee}\">` +\n                           `<div class=\"${styles.marqueeColor}\"></div>` +\n                       '</div>';\n    var RESIZE_TOOLTIP_TEMPLATE = ({ styles, messages, start, end, format }) => `<div class=\"${styles.tooltipWrapper} k-gantt-resize-hint\">` +\n                                   `<div class=\"${styles.tooltipContent}\">` +\n                                        `<div>${kendo.htmlEncode(messages.start)}: ${kendo.toString(start, format)}</div>` +\n                                        `<div>${kendo.htmlEncode(messages.end)}: ${kendo.toString(end, format)}</div>` +\n                                   '</div>' +\n                              '</div>';\n    var PERCENT_RESIZE_TOOLTIP_TEMPLATE = ({ styles, text }) => `<div ${kendo.attr(\"style-z-index\")}=\"100002\" class=\"${styles.tooltipWrapper}\" >` +\n                                   `<div class=\"${styles.tooltipContent}\">${text}%</div>` +\n                                   `<div class=\"${styles.tooltipCallout}\" ${kendo.attr(\"style-left\")}=\"13px\"></div>` +\n                              '</div>';\n    var TASK_TOOLTIP_TEMPLATE = ({ styles, task, messages }) => `<div class=\"${kendo.htmlEncode(styles.taskDetails)}\">` +\n                                    `<strong>${kendo.htmlEncode(task.title)}</strong>` +\n                                    `<div class=\"${styles.taskDetailsPercent}\">${kendo.toString(task.percentComplete, \"p0\")}</div>` +\n                                    `<ul class=\"${styles.reset}\">` +\n                                        `<li>${kendo.htmlEncode(messages.start)}: ${kendo.toString(task.start, \"h:mm tt ddd, MMM d\")}</li>` +\n                                        `<li>${kendo.htmlEncode(messages.end)}: ${kendo.toString(task.end, \"h:mm tt ddd, MMM d\")}</li>` +\n                                    '</ul>' +\n                                '</div>';\n    var OFFSET_TOOLTIP_TEMPLATE = ({ offsetPrefix, offsetText }) => `<span>${offsetPrefix}: ${offsetText}</span>`;\n    var PLANNED_TOOLTIP_TEMPLATE = ({ plannedStart, plannedEnd, startDate, endDate }) => '<div class=\"k-task-content\">' +\n            `<div>${plannedStart}: ${startDate}</div>` +\n            `<div>${plannedEnd}: ${endDate}</div>` +\n        '</div>';\n    var SIZE_CALCULATION_TEMPLATE = `<table ${kendo.attr(\"style-visibility\")}=\"hidden\">` +\n        \"<tbody>\" +\n            `<tr ${kendo.attr(\"style-height\")}=\"{0}\">` +\n                \"<td>&nbsp;</td>\" +\n            \"</tr>\" +\n        \"</tbody>\" +\n    \"</table>\";\n\n    var defaultViews = {\n        day: {\n            type: \"kendo.ui.GanttDayView\"\n        },\n        week: {\n            type: \"kendo.ui.GanttWeekView\"\n        },\n        month: {\n            type: \"kendo.ui.GanttMonthView\"\n        },\n        year: {\n            type: \"kendo.ui.GanttYearView\"\n        }\n    };\n\n    function trimOptions(options) {\n        delete options.name;\n        delete options.prefix;\n        delete options.views;\n\n        return options;\n    }\n\n    function getWorkDays(options) {\n        var workDays = [];\n        var dayIndex = options.workWeekStart;\n\n        workDays.push(dayIndex);\n\n        while (options.workWeekEnd != dayIndex) {\n            if (dayIndex > 6) {\n                dayIndex -= 7;\n            } else {\n                dayIndex++;\n            }\n            workDays.push(dayIndex);\n        }\n        return workDays;\n    }\n\n    function blurActiveElement() {\n        var activeElement = kendo._activeElement();\n\n        if (activeElement && activeElement.nodeName.toLowerCase() !== \"body\") {\n            $(activeElement).trigger(\"blur\");\n        }\n    }\n\n    var viewStyles = {\n        alt: \"k-alt k-table-row k-table-alt-row\",\n        reset: \"k-reset\",\n        nonWorking: \"k-nonwork-hour\",\n        header: \"k-header k-table-td\",\n        gridHeader: \"k-grid-header\",\n        gridHeaderWrap: \"k-grid-header-wrap\",\n        gridContent: \"k-grid-content\",\n        tasksWrapper: \"k-gantt-tables\",\n        rowsTable: \"k-gantt-rows\",\n        columnsTable: \"k-gantt-columns\",\n        tasksTable: \"k-gantt-tasks\",\n        dependenciesWrapper: \"k-gantt-dependencies\",\n        resource: \"k-resource\",\n        resourceAlt: \"k-resource k-alt\",\n        headerTable: \"k-grid-header-table k-table k-table-md\",\n        table: \"k-table k-table-md\",\n        tbody: \"k-table-tbody\",\n        tableRow: \"k-table-row\",\n        tableCell: \"k-table-td\",\n        task: \"k-task\",\n        taskSingle: \"k-task-single\",\n        taskMilestone: \"k-task-milestone\",\n        taskSummary: \"k-task-summary\",\n        taskWrap: \"k-task-wrap\",\n        taskMilestoneWrap: \"k-milestone-wrap\",\n        taskSummaryWrap: \"k-summary-wrap\",\n        taskPlanned: \"k-task-planned\",\n        taskPlannedMoment: \"k-task-moment\",\n        taskPlannedDuration: \"k-task-duration\",\n        taskPlannedMomentLeft: \"k-moment-left\",\n        taskAdvanced: \"k-task-advanced\",\n        taskDelayed: \"k-task-delayed\",\n        taskOffset: \"k-task-offset\",\n        taskOffsetWrap: \"k-task-offset-wrap\",\n        taskInnerWrap: \"k-task-inner-wrap\",\n        resourcesWrap: \"k-resources-wrap\",\n        taskDot: \"k-task-dot\",\n        taskDotStart: \"k-task-start\",\n        taskDotEnd: \"k-task-end\",\n        taskDragHandle: \"k-task-draghandle\",\n        taskContent: \"k-task-content\",\n        taskTemplate: \"k-task-template\",\n        taskActions: \"k-task-actions\",\n        taskDelete: \"k-task-delete\",\n        taskComplete: \"k-task-complete\",\n        taskDetails: \"k-task-details\",\n        taskDetailsPercent: \"k-task-pct\",\n        link: \"k-link\",\n        iconDelete: \"x\",\n        taskResizeHandle: \"k-resize-handle\",\n        taskResizeHandleWest: \"k-resize-w\",\n        taskResizeHandleEast: \"k-resize-e\",\n        taskSummaryProgress: \"k-task-summary-progress\",\n        taskSummaryComplete: \"k-task-summary-complete\",\n        line: \"k-gantt-line\",\n        lineHorizontal: \"k-gantt-line-h\",\n        lineVertical: \"k-gantt-line-v\",\n        arrowWest: \"k-arrow-w\",\n        arrowEast: \"k-arrow-e\",\n        dragHint: \"k-drag-hint\",\n        dependencyHint: \"k-gantt-dependency-hint\",\n        tooltipWrapper: \"k-tooltip\",\n        tooltipContent: \"k-tooltip-content\",\n        tooltipCallout: \"k-callout k-callout-s\",\n        callout: \"k-callout\",\n        marquee: \"k-marquee k-gantt-marquee\",\n        marqueeColor: \"k-marquee-color\",\n        offsetTooltipAdvanced: \"k-offset-tooltip-advanced\",\n        offsetTooltipDelay: \"k-offset-tooltip-delayed\",\n        plannedTooltip: \"k-planned-tooltip\"\n    };\n\n    var GanttView = kendo.ui.GanttView = Widget.extend({\n        init: function(element, options) {\n            Widget.fn.init.call(this, element, options);\n\n            this.title = this.options.title || this.options.name;\n\n            this.header = this.element.find(DOT + GanttView.styles.gridHeader);\n\n            this.content = this.element.find(DOT + GanttView.styles.gridContent);\n\n            this.contentWidth = this.content.width();\n\n            this._workDays = getWorkDays(this.options);\n\n            this._headerTree = options.headerTree;\n\n            this._taskTree = options.taskTree;\n\n            this._taskTemplate = options.taskTemplate ?\n                kendo.template(options.taskTemplate, extend({}, kendo.Template, options.templateSettings)) :\n                null;\n\n            this._dependencyTree = options.dependencyTree;\n\n            this._taskCoordinates = {};\n\n            this._currentTime();\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            clearTimeout(this._tooltipTimeout);\n\n            this.headerRow = null;\n            this.header = null;\n            this.content = null;\n\n            this._dragHint = null;\n            this._resizeHint = null;\n            this._resizeTooltip = null;\n            this._taskTooltip = null;\n            this._percentCompleteResizeTooltip = null;\n\n            this._headerTree = null;\n            this._taskTree = null;\n            this._dependencyTree = null;\n        },\n\n        options: {\n            showWorkHours: false,\n            showWorkDays: false,\n            workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n            workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n            workWeekStart: 1,\n            workWeekEnd: 5,\n            hourSpan: 1,\n            slotSize: 100,\n            currentTimeMarker: {\n                updateInterval: 10000\n            }\n        },\n\n        renderLayout: function() {\n            this._slots = this._createSlots();\n\n            this._tableWidth = this._calculateTableWidth();\n\n            this.createLayout(this._layout());\n\n            this._slotDimensions();\n\n            this._adjustHeight();\n\n            this.content.find(DOT + GanttView.styles.dependenciesWrapper).width(this._tableWidth);\n        },\n\n        _adjustHeight: function() {\n            if (this.content) {\n                this.content.height(this.element.height() - outerHeight(this.header));\n            }\n        },\n\n        createLayout: function(rows) {\n            var headers = this._headers(rows);\n            var colgroup = this._colgroup();\n            var tree = this._headerTree;\n            var header = kendoDomElement(\"tbody\", { className: GanttView.styles.tbody }, headers);\n            var table = kendoDomElement(\"table\", { className: GanttView.styles.headerTable, style: { width: this._tableWidth + \"px\" }, role: \"presentation\" }, [colgroup, header]);\n\n            tree.render([table]);\n\n            this.headerRow = this.header.find(\"table\").first().find(\"tr\").last();\n        },\n\n        _slotDimensions: function() {\n            var headers = this.headerRow[0].children;\n            var slots = this._timeSlots();\n            var slot;\n            var header;\n\n            for (var i = 0, length = headers.length; i < length; i++) {\n                header = headers[i];\n                slot = slots[i];\n\n                slot.offsetLeft = header.offsetLeft;\n                slot.offsetWidth = header.offsetWidth;\n            }\n        },\n\n        render: function(tasks) {\n            var taskCount = tasks.length;\n            var styles = GanttView.styles;\n            var contentTable;\n            var rowsTable = this._rowsTable(taskCount);\n            var columnsTable = this._columnsTable(taskCount);\n            var tasksTable = this._tasksTable(tasks);\n            var currentTimeMarker = this.options.currentTimeMarker;\n            var calculatedSize = this.options.calculatedSize;\n            var totalHeight;\n\n            this._taskTree.render([rowsTable, columnsTable, tasksTable]);\n\n            contentTable = this.content.find(DOT + styles.rowsTable);\n\n            if (calculatedSize) {\n                totalHeight = calculatedSize.row * tasks.length;\n                this.content.find(DOT + styles.tasksTable).height(totalHeight);\n                contentTable.height(totalHeight);\n            }\n\n            this._contentHeight = contentTable.height();\n            this._rowHeight = calculatedSize ? calculatedSize.row : this._contentHeight / contentTable.find(\"tr\").length;\n\n            this.content.find(DOT + styles.columnsTable).height(this._contentHeight);\n\n            if (currentTimeMarker !== false && currentTimeMarker.updateInterval !== undefined) {\n                this._renderCurrentTime();\n            }\n        },\n\n        _rowsTable: function(rowCount) {\n            var rows = [];\n            var row;\n            var styles = GanttView.styles;\n            var attributes = [{ className: styles.tableRow }, { className: styles.alt }];\n\n            for (var i = 0; i < rowCount; i++) {\n                row = kendoDomElement(\"tr\", attributes[i % 2], [\n                    kendoDomElement(\"td\", { className: styles.tableCell }, [\n                        kendoTextElement(\"\\u00a0\")\n                    ])\n                ]);\n\n                rows.push(row);\n            }\n\n            return this._createTable(1, rows, { className: styles.rowsTable + \" k-grid-table \" + styles.table });\n        },\n\n        _columnsTable: function() {\n            var cells = [];\n            var row;\n            var styles = GanttView.styles;\n            var slots = this._timeSlots();\n            var slotsCount = slots.length;\n            var slot;\n            var slotSpan;\n            var totalSpan = 0;\n            var attributes;\n\n            for (var i = 0; i < slotsCount; i++) {\n                slot = slots[i];\n\n                attributes = { className: styles.tableCell };\n\n                slotSpan = slot.span;\n\n                totalSpan += slotSpan;\n\n                if (slotSpan !== 1) {\n                    attributes.colspan = slotSpan;\n                }\n\n                if (slot.isNonWorking) {\n                    attributes.className += \" \" + styles.nonWorking;\n                }\n\n                cells.push(kendoDomElement(\"td\", attributes, [\n                    kendoTextElement(\"\\u00a0\")\n                ]));\n            }\n\n            row = kendoDomElement(\"tr\", { className: styles.tableRow }, cells);\n\n            return this._createTable(totalSpan, [row], { className: styles.columnsTable + \" \" + styles.table });\n        },\n\n        _tasksTable: function(tasks) {\n            var rows = [];\n            var row;\n            var cell;\n            var position;\n            var plannedPosition;\n            var task;\n            var styles = GanttView.styles;\n            var coordinates = this._taskCoordinates = {};\n            var size = this._calculateMilestoneWidth();\n            var milestoneWidth = Math.round(size.width);\n            var resourcesField = this.options.resourcesField;\n            var className = [styles.resource, styles.resourceAlt];\n            var calculatedSize = this.options.calculatedSize;\n            var resourcesPosition;\n            var resourcesMargin = this._calculateResourcesMargin();\n            var taskBorderWidth = this._calculateTaskBorderWidth();\n            var resourceStyle;\n            var showPlannedTasks = this.options.showPlannedTasks;\n            var attributes = [{ className: styles.tableRow }, { className: styles.alt }];\n            var taskElement;\n\n            var addCoordinates = function(rowIndex) {\n                var taskLeft;\n                var taskRight;\n\n                taskLeft = position.left;\n                taskRight = taskLeft + position.width;\n\n                if (task.isMilestone()) {\n                    taskLeft -= milestoneWidth / 2;\n                    taskRight = taskLeft + milestoneWidth;\n                }\n\n                coordinates[task.id] = {\n                    start: taskLeft,\n                    end: taskRight,\n                    rowIndex: rowIndex\n                };\n            };\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                task = tasks[i];\n\n                position = this._taskPosition(task);\n\n                if (showPlannedTasks) {\n                    plannedPosition = this._taskPositionPlanned(task);\n                    plannedPosition.borderWidth = taskBorderWidth;\n                }\n                position.borderWidth = taskBorderWidth;\n\n                row = kendoDomElement(\"tr\", attributes[i % 2]);\n                cell = kendoDomElement(\"td\", { className: styles.tableCell });\n\n                if (task.start <= this.end && task.end >= this.start) {\n                    taskElement = this._renderTask(tasks[i], position, plannedPosition);\n                    if (this.options.navigatable) {\n                        taskElement.children[0].attr[\"tabIndex\"] = i ? -1 : 0;\n                    }\n                    cell.children.push(taskElement);\n\n                    if (task[resourcesField] && task[resourcesField].length) {\n                        if (isRtl) {\n                            resourcesPosition = this._tableWidth - position.left;\n                        } else {\n                            resourcesPosition = Math.max((position.width || size.clientWidth), 0) + position.left;\n                        }\n\n                        resourceStyle = {\n                            width: (this._tableWidth - (resourcesPosition + resourcesMargin)) + \"px\"\n                        };\n\n                        resourceStyle[isRtl ? \"right\" : \"left\"] = resourcesPosition + \"px\";\n\n                        if (calculatedSize) {\n                            resourceStyle.height = calculatedSize.cell + \"px\";\n                        }\n\n                        cell.children.push(kendoDomElement(\"div\",\n                            {\n                                className: styles.resourcesWrap,\n                                style: resourceStyle\n                            },\n                            this._renderResources(task[resourcesField], className[i % 2]))\n                        );\n                    }\n\n                    addCoordinates(i);\n                }\n                row.children.push(cell);\n                rows.push(row);\n            }\n\n            return this._createTable(1, rows, { className: GanttView.styles.tasksTable + \" \" + styles.table });\n        },\n\n        _createTable: function(colspan, rows, styles) {\n            var cols = [];\n            var colgroup;\n            var tbody;\n\n            for (var i = 0; i < colspan; i++) {\n                cols.push(kendoDomElement(\"col\"));\n            }\n\n            colgroup = kendoDomElement(\"colgroup\", null, cols);\n\n            tbody = kendoDomElement(\"tbody\", { className: GanttView.styles.tbody }, rows);\n\n            if (!styles.style) {\n                styles.style = {};\n            }\n\n            styles.style.width = this._tableWidth + \"px\";\n            styles.role = \"presentation\";\n\n            return kendoDomElement(\"table\", styles, [colgroup, tbody]);\n        },\n\n        _calculateTableWidth: function() {\n            var slots = this._timeSlots();\n            var maxSpan = 0;\n            var totalSpan = 0;\n            var currentSpan;\n            var tableWidth;\n\n            for (var i = 0, length = slots.length; i < length; i++) {\n                currentSpan = slots[i].span;\n\n                totalSpan += currentSpan;\n\n                if (currentSpan > maxSpan) {\n                    maxSpan = currentSpan;\n                }\n            }\n\n            tableWidth = Math.round((totalSpan * this.options.slotSize) / maxSpan);\n\n            return tableWidth;\n        },\n\n        _calculateMilestoneWidth: function() {\n            var size;\n            var className = GanttView.styles.task + \" \" + GanttView.styles.taskMilestone;\n            var boundingClientRect;\n            var milestone = $(`<div class=\"${className}\">`).css({\n                visibility: \"hidden\",\n                position: \"absolute\"\n            });\n\n            this.content.append(milestone);\n\n            boundingClientRect = milestone[0].getBoundingClientRect();\n\n            size = {\n                \"width\": boundingClientRect.right - boundingClientRect.left,\n                \"clientWidth\": milestone[0].clientWidth\n            };\n\n            milestone.remove();\n\n            return size;\n        },\n\n        _calculateResourcesMargin: function() {\n            var margin;\n            var wrapper = $(`<div class=\"${GanttView.styles.resourcesWrap}\">`).css({\n                visibility: \"hidden\",\n                position: \"absolute\"\n            });\n\n            this.content.append(wrapper);\n\n            margin = parseInt(wrapper.css(isRtl ? \"margin-right\" : \"margin-left\"), 10);\n\n            wrapper.remove();\n\n            return margin;\n        },\n\n        _calculateTaskBorderWidth: function() {\n            var width;\n            var className = GanttView.styles.task + \" \" + GanttView.styles.taskSingle;\n            var computedStyle;\n            var task = $(`<div class=\"${className}\">`).css({\n                visibility: \"hidden\",\n                position: \"absolute\"\n            });\n\n            this.content.append(task);\n\n            computedStyle = kendo.getComputedStyles(task[0], [\"border-left-width\"]);\n\n            width = parseFloat(computedStyle[\"border-left-width\"], 10);\n\n            task.remove();\n\n            return width;\n        },\n\n        _renderTask: function(task, position, plannedPosition) {\n            var editable = this.options.editable;\n            var taskLeft = position.left;\n            var styles = GanttView.styles;\n            var wrapClassName = styles.taskWrap;\n            var calculatedSize = this.options.calculatedSize;\n            var dragHandleStyle = {};\n            var taskWrapAttr = {\n                className: wrapClassName,\n                style: { left: taskLeft + \"px\" }\n            };\n            var children = [];\n            var endTaskDotRight = 0;\n            var taskFullWidth = position.width;\n            var taskWrapper, taskElement, progressHandleOffset, plannedElement;\n            var endTaskDotLeft, taskOffsetWrap, offsetElement, offsetWidth;\n\n            if (calculatedSize) {\n                taskWrapAttr.style.height = calculatedSize.cell + \"px\";\n            }\n\n            if (plannedPosition) {\n                if (task.isMilestone()) {\n                    plannedElement = this._renderPlannedMilestone(position, plannedPosition);\n                } else {\n                    plannedElement = this._renderPlannedSingleTask(position, plannedPosition, task);\n                }\n\n                children.push(plannedElement);\n\n                if (isRtl && plannedPosition.left <= position.left) {\n                    taskWrapAttr.style.left = plannedPosition.left + \"px\";\n                }\n            }\n\n            if (task.summary) {\n                taskElement = this._renderSummary(task, position, plannedPosition);\n                taskWrapAttr.className += \" \" + styles.taskSummaryWrap;\n            } else if (task.isMilestone()) {\n                taskElement = this._renderMilestone(task, position);\n                taskWrapAttr.className += \" \" + styles.taskMilestoneWrap;\n            } else {\n                taskElement = this._renderSingleTask(task, position, plannedPosition);\n            }\n\n            if (plannedPosition && !task.isMilestone() && task.plannedStart < task.end && task.plannedEnd > task.start && task.plannedEnd < task.end) {\n                if (isRtl) {\n                    taskFullWidth = position.left + position.width - plannedPosition.left;\n                } else {\n                    taskFullWidth = plannedPosition.left + plannedPosition.width - position.left;\n                }\n\n                if (isRtl) {\n                    offsetWidth = plannedPosition.left - position.left;\n                } else {\n                    offsetWidth = position.left + position.width - (plannedPosition.left + plannedPosition.width);\n                }\n\n                offsetElement = kendoDomElement(\"div\", {\n                    className: styles.taskOffset,\n                    style: { width: offsetWidth - 2 * plannedPosition.borderWidth + \"px\" }\n                });\n\n                if (editable && editable.resize !== false && editable.update !== false && !task.summary) {\n                    if (editable.destroy !== false) {\n                        offsetElement.children.push(kendoDomElement(\"span\", { className: styles.taskActions, \"aria-hidden\": \"true\" }, [\n                            kendoDomElement(\"a\", { className: styles.link + \" \" + styles.taskDelete, href: \"#\", \"aria-label\": \"Delete\" }, [\n                                kendoDomElement($(kendo.ui.icon(styles.iconDelete))[0])\n                            ])\n                        ]));\n                    }\n\n                    if (isRtl) {\n                        offsetElement.children.push(kendoDomElement(\"span\", {\n                            className: styles.taskResizeHandle + \" \" + styles.taskResizeHandleWest,\n                            style: {\n                                right: position.width - 5 + \"px\"\n                            }\n                        }));\n                    } else {\n                        offsetElement.children.push(kendoDomElement(\"span\", {\n                            className: styles.taskResizeHandle + \" \" + styles.taskResizeHandleEast\n                        }));\n                    }\n                }\n\n                taskOffsetWrap = kendoDomElement(\"div\", {\n                    className: styles.taskOffsetWrap + \" \" + styles.taskInnerWrap\n                }, [ taskElement, offsetElement ]);\n\n                children.push(taskOffsetWrap);\n            } else if (plannedPosition) {\n                children.push(kendoDomElement(\"div\", {\n                    className: styles.taskInnerWrap\n                }, [ taskElement ]));\n            } else {\n                children.push(taskElement);\n            }\n\n            taskWrapper = kendoDomElement(\"div\", taskWrapAttr, children);\n\n            if (editable && editable.dependencyCreate !== false) {\n                if (plannedPosition && task.plannedEnd > task.end) {\n                    endTaskDotRight = plannedPosition.left + plannedPosition.width - position.left - position.width - 3 + \"px\";\n                }\n\n                taskWrapper.children.push(kendoDomElement(\"div\", {\n                    className: styles.taskDot + \" \" + styles.taskDotStart\n                }));\n\n                if (isRtl) {\n                    endTaskDotRight = \"auto\";\n                    if (plannedPosition && task.plannedEnd > task.end) {\n                        endTaskDotLeft = position.left - plannedPosition.left + \"px\";\n                    }\n                }\n\n                taskWrapper.children.push(kendoDomElement(\"div\", {\n                    className: styles.taskDot + \" \" + styles.taskDotEnd,\n                    style: { right: endTaskDotRight, left: endTaskDotLeft }\n                }));\n            }\n\n            if (!task.summary && !task.isMilestone() && editable && editable.dragPercentComplete !== false && editable.update !== false && this._taskTemplate === null) {\n                progressHandleOffset = Math.round(taskFullWidth * task.percentComplete);\n\n                dragHandleStyle[isRtl ? \"right\" : \"left\"] = progressHandleOffset + \"px\";\n                taskWrapper.children.push(kendoDomElement(\"div\", { className: styles.taskDragHandle, style: dragHandleStyle }));\n            }\n\n            return taskWrapper;\n        },\n\n        _renderSingleTask: function(task, position, plannedPosition) {\n            var styles = GanttView.styles;\n            var progressWidth;\n            var taskChildren = [];\n            var taskContent;\n            var editable = this.options.editable;\n            var classes = styles.task + \" \" + styles.taskSingle;\n            var widthExceptDelay = position.width;\n\n            if (plannedPosition) {\n                if (task.plannedEnd && task.plannedEnd <= task.start) {\n                    classes += \" \" + styles.taskDelayed;\n                } else if (task.plannedEnd && task.plannedEnd > task.end) {\n                    classes += \" \" + styles.taskAdvanced;\n                } else if (task.plannedEnd && task.plannedEnd < task.end) {\n                    if (!isRtl) {\n                        widthExceptDelay = widthExceptDelay - (position.left + position.width - plannedPosition.left - plannedPosition.width);\n                    } else {\n                        widthExceptDelay = widthExceptDelay + position.left - plannedPosition.left;\n                    }\n                }\n            }\n\n            progressWidth = Math.round(widthExceptDelay * task.percentComplete);\n\n            if (this._taskTemplate !== null) {\n                taskContent = kendoHtmlElement(this._taskTemplate(task));\n            } else {\n                taskContent = kendoTextElement(task.title);\n                taskChildren.push(kendoDomElement(\"div\", { className: styles.taskComplete, style: { width: progressWidth + \"px\" }, \"aria-hidden\": \"true\" }));\n            }\n\n            var content = kendoDomElement(\"div\", { className: styles.taskContent }, [\n                kendoDomElement(\"div\", { className: styles.taskTemplate }, [\n                    taskContent\n                ])\n            ]);\n\n            taskChildren.push(content);\n\n            if (editable) {\n                if (editable.destroy !== false && (!plannedPosition || !task.plannedEnd || (task.end <= task.plannedEnd || task.start >= task.plannedEnd))) {\n                    content.children.push(kendoDomElement(\"span\", { className: styles.taskActions, \"aria-hidden\": \"true\" }, [\n                        kendoDomElement(\"a\", { className: styles.link + \" \" + styles.taskDelete, href: \"#\", \"aria-label\": \"Delete\" }, [\n                            kendoDomElement($(kendo.ui.icon(styles.iconDelete))[0])\n                        ])\n                    ]));\n                }\n\n                if (editable.resize !== false && editable.update !== false) {\n                    content.children.push(kendoDomElement(\"span\", {\n                        className: styles.taskResizeHandle + \" \" + styles.taskResizeHandleWest\n                    }));\n                    content.children.push(kendoDomElement(\"span\", {\n                        className: styles.taskResizeHandle + \" \" + styles.taskResizeHandleEast\n                    }));\n                }\n            }\n\n            var element = kendoDomElement(\"div\", {\n                className: classes, \"data-uid\": task.uid, role: \"treeitem\", style:\n                    { width: Math.max((widthExceptDelay - position.borderWidth * 2), 0) + \"px\" }\n            }, taskChildren);\n\n            return element;\n        },\n\n        _renderMilestone: function(task) {\n            var styles = GanttView.styles;\n            var classes = styles.task + \" \" + styles.taskMilestone;\n            var showPlanned = this.options.showPlannedTasks;\n\n            if (showPlanned && task.plannedEnd && task.plannedEnd < task.start) {\n                classes += \" \" + styles.taskDelayed;\n            } else if (task.plannedStart && task.plannedStart > task.end) {\n                classes += \" \" + styles.taskAdvanced;\n            }\n\n            return kendoDomElement(\"div\", { className: classes, \"data-uid\": task.uid, role: \"treeitem\", \"aria-label\": task.title });\n        },\n\n        _renderSummary: function(task, position, plannedPosition) {\n            var styles = GanttView.styles;\n            var widthExceptDelay = position.width;\n            var progressWidth;\n            var classes = styles.task + \" \" + styles.taskSummary;\n\n            if (plannedPosition) {\n                if (task.plannedEnd && task.plannedEnd <= task.start) {\n                    classes += \" \" + styles.taskDelayed;\n                } else if (task.plannedEnd && task.plannedEnd > task.end) {\n                    classes += \" \" + styles.taskAdvanced;\n                } else if (task.plannedEnd && task.plannedEnd < task.end) {\n                    if (!isRtl) {\n                        widthExceptDelay = widthExceptDelay - (position.left + position.width - plannedPosition.left - plannedPosition.width);\n                    } else {\n                        widthExceptDelay = widthExceptDelay + position.left - plannedPosition.left;\n                    }\n                }\n            }\n\n            progressWidth = Math.round(widthExceptDelay * task.percentComplete);\n\n            var element = kendoDomElement(\"div\", { className: classes, \"data-uid\": task.uid, role: \"treeitem\", \"aria-label\": task.title, style: { width: widthExceptDelay + \"px\" } }, [\n                kendoDomElement(\"div\", { className: styles.taskSummaryProgress, style: { width: progressWidth + \"px\" } }, [\n                    kendoDomElement(\"div\", { className: styles.taskSummaryComplete, style: { width: position.width + \"px\" } })\n                ])\n            ]);\n\n            return element;\n        },\n\n        _renderPlannedSingleTask: function(position, plannedPosition, task) {\n            var styles = GanttView.styles;\n            var children = [];\n            var style = {};\n\n            if (task.plannedStart && task.plannedEnd) {\n                children.push(kendoDomElement(\"div\", { className: styles.taskPlannedMoment + \" \" + styles.taskPlannedMomentLeft }));\n                children.push(kendoDomElement(\"div\", {\n                    className: styles.taskPlannedDuration, style:\n                        { width: Math.max((plannedPosition.width - plannedPosition.borderWidth * 2 - 16), 0) + \"px\" }\n                }));\n                children.push(kendoDomElement(\"div\", { className: styles.taskPlannedMoment }));\n            } else if (task.plannedStart) {\n                children.push(kendoDomElement(\"div\", { className: styles.taskPlannedMoment + \" \" + styles.taskPlannedMomentLeft }));\n            } else if (task.plannedEnd) {\n                children.push(kendoDomElement(\"div\", { className: styles.taskPlannedMoment, style: { \"margin-left\": Math.max(plannedPosition.width - 5, 0) + \"px\" } }));\n            }\n\n            if (isRtl) {\n                style = {\n                    \"margin-right\": position.left - plannedPosition.left + position.width - plannedPosition.width + \"px\"\n                };\n            } else {\n                style = {\n                    \"margin-left\": plannedPosition.left - position.left + \"px\"\n                };\n            }\n\n            var element = kendoDomElement(\"div\", {\n                className: styles.taskPlanned,\n                style: style\n            }, children);\n\n            return element;\n        },\n\n        _renderPlannedMilestone: function(position, plannedPosition) {\n            var styles = GanttView.styles;\n            var style = {};\n            var element;\n\n            if (isRtl) {\n                style = {\n                    \"margin-right\": position.left - plannedPosition.left + \"px\"\n                };\n            } else {\n                style = {\n                    \"margin-left\": plannedPosition.left - position.left + \"px\"\n                };\n            }\n\n            element = kendoDomElement(\"div\", {\n                className: styles.taskPlanned,\n                style: style\n            }, [\n                kendoDomElement(\"div\", { className: styles.taskPlannedMoment })\n            ]);\n\n            return element;\n        },\n\n        _renderResources: function(resources, className) {\n            var children = [];\n            var resource;\n\n            for (var i = 0, length = resources.length; i < length; i++) {\n                resource = resources[i];\n                children.push(kendoDomElement(\"span\", {\n                    className: className,\n                    style: {\n                        \"color\": resource.get(\"color\")\n                    }\n                }, [kendoTextElement(resource.get(\"name\"))]));\n            }\n\n            if (isRtl) {\n                children.reverse();\n            }\n\n            return children;\n        },\n\n        _taskPosition: function(task) {\n            var round = Math.round;\n\n            var startLeft = round(this._offset(isRtl ? task.end : task.start));\n            var endLeft = round(this._offset(isRtl ? task.start : task.end));\n\n            return { left: startLeft, width: endLeft - startLeft };\n        },\n\n        _taskPositionPlanned: function(task) {\n            var round = Math.round;\n\n            var startLeft = round(this._offset(isRtl ? task.plannedEnd : task.plannedStart));\n            var endLeft = round(this._offset(isRtl ? task.plannedStart : task.plannedEnd));\n\n            return { left: startLeft, width: endLeft - startLeft };\n        },\n\n        _offset: function(date) {\n            var slots = this._timeSlots();\n            var slot;\n            var startOffset;\n            var slotDuration;\n            var slotOffset = 0;\n            var startIndex;\n\n            if (!slots.length) {\n                return 0;\n            }\n\n            startIndex = this._slotIndex(\"start\", date);\n\n            slot = slots[startIndex];\n\n            if (slot.end < date) {\n                slotOffset = slot.offsetWidth;\n            } else if (slot.start <= date) {\n                startOffset = date - slot.start;\n                slotDuration = slot.end - slot.start;\n                slotOffset = (startOffset / slotDuration) * slot.offsetWidth;\n            }\n\n            if (isRtl) {\n                slotOffset = (slot.offsetWidth + 1) - slotOffset; // Add one pixel for border\n            }\n\n            return slot.offsetLeft + slotOffset;\n        },\n\n        _slotIndex: function(field, value, reverse) {\n            var slots = this._timeSlots();\n            var startIdx = 0;\n            var endIdx = slots.length - 1;\n            var middle;\n\n            if (reverse) {\n                slots = [].slice.call(slots).reverse();\n            }\n\n            do {\n                middle = Math.ceil((endIdx + startIdx) / 2);\n\n                if (slots[middle][field] < value) {\n                    startIdx = middle;\n                } else {\n                    if (middle === endIdx) {\n                        middle--;\n                    }\n\n                    endIdx = middle;\n                }\n            } while (startIdx !== endIdx);\n\n            if (reverse) {\n                startIdx = (slots.length - 1) - startIdx;\n            }\n\n            return startIdx;\n        },\n\n        _timeByPosition: function(x, snap, snapToEnd) {\n            var slot = this._slotByPosition(x);\n\n            if (snap) {\n                return snapToEnd ? slot.end : slot.start;\n            }\n\n            var offsetLeft = x - this.element.find(DOT + GanttView.styles.tasksTable).offset().left;\n            var duration = slot.end - slot.start;\n            var slotOffset = offsetLeft - slot.offsetLeft;\n\n            if (isRtl) {\n                slotOffset = slot.offsetWidth - slotOffset;\n            }\n\n            return new Date(slot.start.getTime() + (duration * (slotOffset / slot.offsetWidth)));\n        },\n\n        _slotByPosition: function(x) {\n            var offsetLeft = x - this.element.find(DOT + GanttView.styles.tasksTable).offset().left;\n            var slotIndex = this._slotIndex(\"offsetLeft\", offsetLeft, isRtl);\n\n            return this._timeSlots()[slotIndex];\n        },\n\n        _renderDependencies: function(dependencies) {\n            var elements = [];\n            var tree = this._dependencyTree;\n\n            for (var i = 0, l = dependencies.length; i < l; i++) {\n                elements.push.apply(elements, this._renderDependency(dependencies[i]));\n            }\n\n            tree.render(elements);\n        },\n\n        _renderDependency: function(dependency) {\n            var predecessor = this._taskCoordinates[dependency.predecessorId];\n            var successor = this._taskCoordinates[dependency.successorId];\n            var elements;\n            var method;\n\n            if (!predecessor || !successor) {\n                return [];\n            }\n\n            method = \"_render\" + [\"FF\", \"FS\", \"SF\", \"SS\"][isRtl ? 3 - dependency.type : dependency.type];\n\n            elements = this[method](predecessor, successor);\n\n            for (var i = 0, length = elements.length; i < length; i++) {\n                elements[i].attr[\"data-uid\"] = dependency.uid;\n            }\n\n            return elements;\n        },\n\n        _renderFF: function(from, to) {\n            var lines = this._dependencyFF(from, to, false);\n\n            lines[lines.length - 1].children[0] = this._arrow(true);\n\n            return lines;\n        },\n\n        _renderSS: function(from, to) {\n            var lines = this._dependencyFF(to, from, true);\n\n            lines[0].children[0] = this._arrow(false);\n\n            return lines.reverse();\n        },\n\n        _renderFS: function(from, to) {\n            var lines = this._dependencyFS(from, to, false);\n\n            lines[lines.length - 1].children[0] = this._arrow(false);\n\n            return lines;\n        },\n\n        _renderSF: function(from, to) {\n            var lines = this._dependencyFS(to, from, true);\n\n            lines[0].children[0] = this._arrow(true);\n\n            return lines.reverse();\n        },\n\n        _dependencyFF: function(from, to, reverse) {\n            var that = this;\n            var lines = [];\n            var left = 0;\n            var top = 0;\n            var width = 0;\n            var height = 0;\n            var dir = reverse ? \"start\" : \"end\";\n            var delta;\n            var overlap = 2;\n            var arrowOverlap = 1;\n            var rowHeight = this._rowHeight;\n            var minLineWidth = 10;\n            var fromTop = from.rowIndex * rowHeight + Math.floor(rowHeight / 2) - 1;\n            var toTop = to.rowIndex * rowHeight + Math.floor(rowHeight / 2) - 1;\n            var styles = GanttView.styles;\n\n            var addHorizontal = function() {\n                lines.push(that._line(styles.line + \" \" + styles.lineHorizontal, { left: left + \"px\", top: top + \"px\", width: width + \"px\" }));\n            };\n            var addVertical = function() {\n                lines.push(that._line(styles.line + \" \" + styles.lineVertical, { left: left + \"px\", top: top + \"px\", height: height + \"px\" }));\n            };\n\n            left = from[dir];\n            top = fromTop;\n            width = minLineWidth;\n\n            delta = to[dir] - from[dir];\n\n            if ((delta) > 0 !== reverse) {\n                width = Math.abs(delta) + minLineWidth;\n            }\n\n            if (reverse) {\n                left -= width;\n                width -= arrowOverlap;\n                addHorizontal();\n            } else {\n                addHorizontal();\n                left += width - overlap;\n            }\n\n            if (toTop < top) {\n                height = top - toTop;\n                height += overlap;\n                top = toTop;\n                addVertical();\n            } else {\n                height = toTop - top;\n                height += overlap;\n                addVertical();\n                top += (height - overlap);\n            }\n\n            width = Math.abs(left - to[dir]);\n\n            if (!reverse) {\n                width -= arrowOverlap;\n                left -= width;\n            }\n\n            addHorizontal();\n\n            return lines;\n        },\n\n        _dependencyFS: function(from, to, reverse) {\n            var that = this;\n            var lines = [];\n            var left = 0;\n            var top = 0;\n            var width = 0;\n            var height = 0;\n            var rowHeight = this._rowHeight;\n            var minLineHeight = Math.floor(rowHeight / 2);\n            var minLineWidth = 10;\n            var minDistance = 2 * minLineWidth;\n            var delta = to.start - from.end;\n            var overlap = 2;\n            var arrowOverlap = 1;\n            var fromTop = from.rowIndex * rowHeight + Math.floor(rowHeight / 2) - 1;\n            var toTop = to.rowIndex * rowHeight + Math.floor(rowHeight / 2) - 1;\n            var styles = GanttView.styles;\n\n            var addHorizontal = function() {\n                lines.push(that._line(styles.line + \" \" + styles.lineHorizontal, { left: left + \"px\", top: top + \"px\", width: width + \"px\" }));\n            };\n            var addVertical = function() {\n                lines.push(that._line(styles.line + \" \" + styles.lineVertical, { left: left + \"px\", top: top + \"px\", height: height + \"px\" }));\n            };\n\n            left = from.end;\n            top = fromTop;\n            width = minLineWidth;\n\n            if (reverse) {\n                left += arrowOverlap;\n\n                if (delta > minDistance) {\n                    width = delta - (minLineWidth - overlap);\n                }\n\n                width -= arrowOverlap;\n            }\n\n            addHorizontal();\n            left += width - overlap;\n\n            if ((delta) <= minDistance) {\n                height = reverse ? Math.abs(toTop - fromTop) - minLineHeight : minLineHeight;\n\n                if (toTop < fromTop) {\n                    top -= height;\n\n                    height += overlap;\n\n                    addVertical();\n                } else {\n                    addVertical();\n                    top += height;\n                }\n\n                width = (from.end - to.start) + minDistance;\n\n                if (width < minLineWidth) {\n                    width = minLineWidth;\n                }\n\n                left -= width - overlap;\n\n                addHorizontal();\n            }\n\n            if (toTop < fromTop) {\n                height = top - toTop;\n                top = toTop;\n\n                height += overlap;\n\n                addVertical();\n            } else {\n                height = toTop - top;\n                addVertical();\n                top += height;\n            }\n\n            width = to.start - left;\n\n            if (!reverse) {\n                width -= arrowOverlap;\n            }\n\n            addHorizontal();\n\n            return lines;\n        },\n\n        _line: function(className, styles) {\n            return kendoDomElement(\"div\", { className: className, style: styles });\n        },\n\n        _arrow: function(direction) {\n            return kendoDomElement(\"span\", { className: direction ? GanttView.styles.arrowWest : GanttView.styles.arrowEast });\n        },\n\n        _colgroup: function() {\n            var slots = this._timeSlots();\n            var count = slots.length;\n            var cols = [];\n\n            for (var i = 0; i < count; i++) {\n                for (var j = 0, length = slots[i].span; j < length; j++) {\n                    cols.push(kendoDomElement(\"col\"));\n                }\n            }\n\n            return kendoDomElement(\"colgroup\", null, cols);\n        },\n\n        _createDragHint: function(element) {\n            var styles = GanttView.styles;\n            var plannedElement;\n\n            this._dragHint = element\n                .clone()\n                .addClass(styles.dragHint)\n                .css({\n                    \"cursor\": \"move\"\n                });\n\n            plannedElement = this._dragHint.find(DOT + styles.taskPlanned);\n\n            plannedElement.css({\n                \"visibility\": \"hidden\"\n            });\n\n            if (isRtl && element.find(DOT + styles.taskAdvanced).length > 0) {\n                plannedElement.css({\n                    \"margin-right\": \"auto\",\n                    \"width\": 0\n                });\n\n                this._dragHint.find(DOT + styles.taskDotEnd).css({\n                    \"left\": 0\n                });\n            }\n\n            element\n                .closest(\"td\")\n                .append(this._dragHint);\n        },\n\n        _updateDragHint: function(start) {\n            var left = this._offset(start);\n            this._dragHint\n                .css({\n                    \"left\": left\n                });\n        },\n\n        _removeDragHint: function() {\n            this._dragHint.remove();\n            this._dragHint = null;\n        },\n\n        _createResizeHint: function(task) {\n            var styles = GanttView.styles;\n            var taskTop = this._taskCoordinates[task.id].rowIndex * this._rowHeight;\n            var tooltipHeight;\n            var tooltipTop;\n            var options = this.options;\n            var messages = options.messages;\n\n            this._resizeHint = $(RESIZE_HINT({ styles: styles })).css({\n                \"top\": 0,\n                \"height\": this._contentHeight\n            });\n\n            this.content.append(this._resizeHint);\n\n            this._resizeTooltip = $(RESIZE_TOOLTIP_TEMPLATE({\n                styles: styles,\n                start: task.start,\n                end: task.end,\n                messages: messages.views,\n                format: options.resizeTooltipFormat\n            }))\n            .css({\n                \"z-index\": \"100002\",\n                \"top\": 0,\n                \"left\": 0\n            });\n\n            this.content.append(this._resizeTooltip);\n\n            this._resizeTooltipWidth = outerWidth(this._resizeTooltip);\n            tooltipHeight = outerHeight(this._resizeTooltip);\n\n            tooltipTop = taskTop - tooltipHeight;\n\n            if (tooltipTop < 0) {\n                tooltipTop = taskTop + this._rowHeight;\n            }\n\n            this._resizeTooltipTop = tooltipTop;\n        },\n\n        _updateResizeHint: function(start, end, resizeStart) {\n            var left = this._offset(isRtl ? end : start);\n            var right = this._offset(isRtl ? start : end);\n            var width = right - left;\n            var tooltipLeft = (resizeStart !== isRtl) ? left : right;\n            var tablesWidth = this._tableWidth - kendo.support.scrollbar();\n            var tooltipWidth = this._resizeTooltipWidth;\n            var options = this.options;\n            var messages = options.messages;\n            var tableOffset = this.element.find(DOT + GanttView.styles.tasksTable).offset().left - this.element.find(DOT + GanttView.styles.tasksWrapper).offset().left;\n\n            if (isRtl) {\n                left += tableOffset;\n            }\n\n            this._resizeHint\n                .css({\n                    \"left\": left,\n                    \"width\": width\n                });\n\n            if (this._resizeTooltip) {\n                this._resizeTooltip.remove();\n            }\n\n            tooltipLeft -= Math.round(tooltipWidth / 2);\n\n            if (tooltipLeft < 0) {\n                tooltipLeft = 0;\n            } else if (tooltipLeft + tooltipWidth > tablesWidth) {\n                tooltipLeft = tablesWidth - tooltipWidth;\n            }\n\n            if (isRtl) {\n                tooltipLeft += tableOffset;\n            }\n\n            this._resizeTooltip = $(RESIZE_TOOLTIP_TEMPLATE({\n                styles: GanttView.styles,\n                start: start,\n                end: end,\n                messages: messages.views,\n                format: options.resizeTooltipFormat\n            }))\n            .css({\n                \"z-index\": \"100002\",\n                \"top\": this._resizeTooltipTop,\n                \"left\": tooltipLeft,\n                \"min-width\": tooltipWidth\n            })\n            .appendTo(this.content);\n        },\n\n        _removeResizeHint: function() {\n            this._resizeHint.remove();\n            this._resizeHint = null;\n\n            this._resizeTooltip.remove();\n            this._resizeTooltip = null;\n        },\n\n        _updatePercentCompleteTooltip: function(top, left, text) {\n            this._removePercentCompleteTooltip();\n\n            var tooltip = this._percentCompleteResizeTooltip = $(PERCENT_RESIZE_TOOLTIP_TEMPLATE({ styles: GanttView.styles, text: text }));\n            kendo.applyStylesFromKendoAttributes(tooltip, [\"z-index\", \"left\"]);\n            tooltip.appendTo(this.element);\n\n            var tooltipMiddle = Math.round(outerWidth(tooltip) / 2);\n            var arrow = tooltip.find(DOT + GanttView.styles.callout);\n            var arrowHeight = Math.round(outerWidth(arrow) / 2);\n\n            tooltip.css({\n                \"top\": top - (outerHeight(tooltip) + arrowHeight),\n                \"left\": left - tooltipMiddle\n            });\n\n            arrow.css(\"left\", tooltipMiddle - arrowHeight);\n        },\n\n        _removePercentCompleteTooltip: function() {\n            if (this._percentCompleteResizeTooltip) {\n                this._percentCompleteResizeTooltip.remove();\n            }\n\n            this._percentCompleteResizeTooltip = null;\n        },\n\n        _updateDependencyDragHint: function(from, to) {\n            this._removeDependencyDragHint();\n\n            this._creteDependencyDragHint(from, to);\n        },\n\n        _creteDependencyDragHint: function(from, to) {\n            var styles = GanttView.styles;\n\n            var deltaX = to.x - from.x;\n            var deltaY = to.y - from.y;\n\n            var width = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n            var angle = Math.atan(deltaY / deltaX);\n\n            if (deltaX < 0) {\n                angle += Math.PI;\n            }\n\n            $(\"<div class='\" + styles.line + \" \" + styles.lineHorizontal + \" \" + styles.dependencyHint + \"'></div>\")\n                .css({\n                    \"top\": from.y,\n                    \"left\": from.x,\n                    \"width\": width,\n                    \"transform-origin\": \"0% 0\",\n                    \"-ms-transform-origin\": \"0% 0\",\n                    \"-webkit-transform-origin\": \"0% 0\",\n                    \"transform\": \"rotate(\" + angle + \"rad)\",\n                    \"-ms-transform\": \"rotate(\" + angle + \"rad)\",\n                    \"-webkit-transform\": \"rotate(\" + angle + \"rad)\"\n                })\n                .appendTo(this.content);\n        },\n\n        _removeDependencyDragHint: function() {\n            this.content.find(DOT + GanttView.styles.dependencyHint).remove();\n        },\n\n        _createTaskTooltip: function(task, element, mouseLeft) {\n            var styles = GanttView.styles;\n            var options = this.options;\n            var content = this.content;\n            var contentOffset = content.offset();\n            var contentScrollLeft = kendo.scrollLeft(content);\n            var row = $(element).parents(\"tr\").first();\n            var rowOffset = row.offset();\n            var template = (options.tooltip && options.tooltip.template) ? kendo.template(options.tooltip.template) : TASK_TOOLTIP_TEMPLATE;\n            var left = isRtl ? mouseLeft - (contentOffset.left + contentScrollLeft + kendo.support.scrollbar())\n                : mouseLeft - (contentOffset.left - contentScrollLeft);\n            var top = (rowOffset.top + outerHeight(row) - contentOffset.top) + content.scrollTop();\n            var tooltip = this._taskTooltip = $('<div class=\"' + styles.tooltipWrapper + '\" >' +\n                                   '<div class=\"' + styles.taskContent + '\"></div></div>');\n\n            tooltip\n                .css({\n                    \"z-index\": \"100002\",\n                    \"left\": left,\n                    \"top\": top\n                })\n                .appendTo(content)\n                .find(DOT + styles.taskContent)\n                .append(template({\n                    styles: styles,\n                    task: task,\n                    messages: options.messages.views\n                }));\n\n            this._adjustTooltipDimensions(tooltip, rowOffset, contentOffset, left, contentScrollLeft);\n        },\n\n        _removeTaskTooltip: function() {\n            if (this._taskTooltip) {\n                this._taskTooltip.remove();\n            }\n\n            this._taskTooltip = null;\n        },\n\n        _createOffsetTooltip: function(task, element, mouseLeft) {\n            var styles = GanttView.styles;\n            var content = this.content;\n            var contentOffset = content.offset();\n            var contentScrollLeft = kendo.scrollLeft(content);\n            var row = element.parents(\"tr\").first();\n            var rowOffset = row.offset();\n            var left = isRtl ? mouseLeft - (contentOffset.left + contentScrollLeft + kendo.support.scrollbar())\n                : mouseLeft - (contentOffset.left - contentScrollLeft);\n            var top = (rowOffset.top + outerHeight(row) - contentOffset.top) + content.scrollTop();\n            var tooltip = this._offsetTooltip = $('<div class=\"' + styles.tooltipWrapper + '\" ></div>');\n            var offsetValue = Math.round((task.end.getTime() - task.plannedEnd.getTime()) / 60000);\n            var plannedTasksMessages = this.options.messages.plannedTasks;\n            var minutes = offsetValue % 60;\n            var offsetText = minutes + \" \" + plannedTasksMessages.minutes;\n            var hours, days;\n\n            if (offsetValue >= 60) {\n                hours = offsetValue = Math.floor(offsetValue / 60);\n\n                offsetText = hours + \" \" + plannedTasksMessages.hours;\n\n                if (minutes !== 0) {\n                    offsetText += (\" \" + minutes + \" \" + plannedTasksMessages.minutes);\n                }\n\n                if (offsetValue >= 24) {\n                    hours = offsetValue % 24;\n                    days = offsetValue = Math.floor(offsetValue / 24);\n\n                    offsetText = days + \" \" + plannedTasksMessages.days;\n\n                    if (hours !== 0) {\n                        offsetText += (\" \" + hours + \" \" + plannedTasksMessages.hours);\n                    }\n                }\n            }\n\n            tooltip\n                .css({\n                    \"z-index\": \"100002\",\n                    \"left\": left,\n                    \"top\": top\n                })\n                .addClass(styles.offsetTooltipDelay)\n                .appendTo(content)\n                .append(OFFSET_TOOLTIP_TEMPLATE({\n                    offsetPrefix: plannedTasksMessages.offsetTooltipDelay,\n                    offsetText: offsetText\n                }));\n\n            this._adjustTooltipDimensions(tooltip, rowOffset, contentOffset, left, contentScrollLeft);\n        },\n\n        _removeOffsetTooltip: function() {\n            if (this._offsetTooltip) {\n                this._offsetTooltip.remove();\n            }\n\n            this._offsetTooltip = null;\n        },\n\n        _createPlannedTooltip: function(task, element, mouseLeft) {\n            var styles = GanttView.styles;\n            var content = this.content;\n            var contentOffset = content.offset();\n            var contentScrollLeft = kendo.scrollLeft(content);\n            var row = element.parents(\"tr\").first();\n            var rowOffset = row.offset();\n            var left = isRtl ? mouseLeft - (contentOffset.left + contentScrollLeft + kendo.support.scrollbar())\n                : mouseLeft - (contentOffset.left - contentScrollLeft);\n            var top = (rowOffset.top + outerHeight(row) - contentOffset.top) + content.scrollTop();\n            var tooltip = this._plannedTooltip = $('<div class=\"' + styles.tooltipWrapper + ' ' + styles.plannedTooltip + '\" ></div>');\n            var editorMessages = this.options.messages.editor;\n\n            tooltip\n                .css({\n                    \"z-index\": \"100002\",\n                    \"left\": left,\n                    \"top\": top\n                })\n                .appendTo(content)\n                .append(PLANNED_TOOLTIP_TEMPLATE({\n                    plannedStart: editorMessages.plannedStart,\n                    startDate: kendo.toString(task.plannedStart, \"H:mm tt ddd, MMM dd\"),\n                    plannedEnd: editorMessages.plannedEnd,\n                    endDate: kendo.toString(task.plannedEnd, \"H:mm tt ddd, MMM dd\")\n                }));\n\n            this._adjustTooltipDimensions(tooltip, rowOffset, contentOffset, left, contentScrollLeft);\n        },\n\n        _removePlannedTooltip: function() {\n            if (this._plannedTooltip) {\n                this._plannedTooltip.remove();\n            }\n\n            this._plannedTooltip = null;\n        },\n\n        _adjustTooltipDimensions: function(tooltip, rowOffset, contentOffset, left, contentScrollLeft) {\n            var content = this.content;\n            var contentWidth = content.width();\n            var tooltipWidth;\n\n            if (outerHeight(tooltip) < rowOffset.top - contentOffset.top) {\n                tooltip.css(\"top\", ((rowOffset.top - contentOffset.top) - outerHeight(tooltip)) + content.scrollTop());\n            }\n\n            tooltipWidth = outerWidth(tooltip);\n\n            if ((tooltipWidth + left) - contentScrollLeft > contentWidth) {\n                left -= tooltipWidth;\n\n                if (left < contentScrollLeft) {\n                    left = (contentScrollLeft + contentWidth) - (tooltipWidth + 17);\n                }\n\n                tooltip.css(\"left\", left);\n            }\n        },\n\n        _scrollTo: function(element) {\n            var elementLeft = element.offset().left;\n            var elementWidth = element.width();\n            var elementRight = elementLeft + elementWidth;\n\n            var row = element.closest(\"tr\");\n            var rowTop = row.offset().top;\n            var rowHeight = row.height();\n            var rowBottom = rowTop + rowHeight;\n\n            var content = this.content;\n            var contentOffset = content.offset();\n            var contentTop = contentOffset.top;\n            var contentHeight = content.height();\n            var contentBottom = contentTop + contentHeight;\n            var contentLeft = contentOffset.left;\n            var contentWidth = content.width();\n            var contentRight = contentLeft + contentWidth;\n\n            var scrollbarWidth = kendo.support.scrollbar();\n\n            if (rowTop < contentTop) {\n                content.scrollTop(content.scrollTop() + (rowTop - contentTop));\n            } else if (rowBottom > contentBottom) {\n                content.scrollTop(content.scrollTop() + (rowBottom + scrollbarWidth - contentBottom));\n            }\n\n            if (elementLeft < contentLeft && elementWidth > contentWidth && elementRight < contentRight ||\n                elementRight > contentRight && elementWidth < contentWidth) {\n                    kendo.scrollLeft(content, kendo.scrollLeft(content) + (elementRight + scrollbarWidth - contentRight));\n            } else if (elementRight > contentRight && elementWidth > contentWidth && elementLeft > contentLeft ||\n                elementLeft < contentLeft && elementWidth < contentWidth) {\n            kendo.scrollLeft(content, kendo.scrollLeft(content) + (elementLeft - contentLeft));\n            }\n        },\n\n        _scrollToDate: function(date) {\n            var viewStart = this.start;\n            var viewEnd = this.end;\n            var offset;\n\n            if (date >= viewStart && date < viewEnd) {\n                offset = this._offset(date);\n\n                if (kendo.support.isRtl(this.element)) {\n                    offset = this._tableWidth - offset;\n                }\n\n                kendo.scrollLeft(this.content, offset);\n            }\n        },\n\n        _timeSlots: function() {\n            if (!this._slots || !this._slots.length) {\n                return [];\n            }\n\n            return this._slots[this._slots.length - 1];\n        },\n\n        _headers: function(columnLevels) {\n            var rows = [];\n            var level;\n            var headers;\n            var column;\n            var headerText;\n            var styles = GanttView.styles;\n\n            for (var levelIndex = 0, levelCount = columnLevels.length; levelIndex < levelCount; levelIndex++) {\n                level = columnLevels[levelIndex];\n                headers = [];\n\n                for (var columnIndex = 0, columnCount = level.length; columnIndex < columnCount; columnIndex++) {\n                    column = level[columnIndex];\n\n                    headerText = kendoHtmlElement(column.text);\n                    headers.push(kendoDomElement(\"td\", { colspan: column.span, className: styles.header + (column.isNonWorking ? (\" \" + styles.nonWorking) : \"\") }, [headerText]));\n                }\n\n                rows.push(kendoDomElement(\"tr\", { className: styles.tableRow }, headers));\n            }\n\n            return rows;\n        },\n\n        _hours: function(start, end) {\n            var slotEnd;\n            var slots = [];\n            var options = this.options;\n            var workDayStart = options.workDayStart.getHours();\n            var workDayEnd = options.workDayEnd.getHours();\n            var isWorkHour;\n            var hours;\n            var hourSpan = options.hourSpan;\n\n            start = new Date(start);\n            end = new Date(end);\n\n            if (options.showWorkHours) {\n                start.setHours(workDayStart);\n            }\n\n            while (start < end) {\n                slotEnd = new Date(start);\n                hours = slotEnd.getHours();\n\n                isWorkHour = hours >= workDayStart && hours < workDayEnd;\n\n                slotEnd.setHours(slotEnd.getHours() + hourSpan);\n\n                if (hours == slotEnd.getHours()) {\n                    // Chrome DTS Fix\n                    slotEnd.setHours(slotEnd.getHours() + 2 * hourSpan);\n                }\n\n                if (!options.showWorkHours || isWorkHour) {\n                    slots.push({\n                        start: start,\n                        end: slotEnd,\n                        isNonWorking: !isWorkHour,\n                        span: 1\n                    });\n                }\n\n                start = slotEnd;\n            }\n\n            return slots;\n        },\n\n        _days: function(start, end) {\n            var slotEnd;\n            var slots = [];\n            var isWorkDay;\n\n            start = new Date(start);\n            end = new Date(end);\n\n            while (start < end) {\n                slotEnd = end < kendo.date.nextDay(start) ? end : kendo.date.nextDay(start);\n\n                isWorkDay = this._isWorkDay(start);\n\n                if (!this.options.showWorkDays || isWorkDay) {\n                    slots.push({\n                        start: start,\n                        end: slotEnd,\n                        isNonWorking: !isWorkDay,\n                        span: 1\n                    });\n                }\n\n                start = slotEnd;\n            }\n\n            return slots;\n        },\n\n        _weeks: function(start, end) {\n            var slotEnd;\n            var slots = [];\n            var firstDay = this.calendarInfo().firstDay;\n            var daySlots;\n            var span;\n\n            start = new Date(start);\n            end = new Date(end);\n\n            while (start < end) {\n                slotEnd = kendo.date.dayOfWeek(kendo.date.addDays(start, 1), firstDay, 1);\n\n                if (slotEnd > end) {\n                    slotEnd = end;\n                }\n\n                daySlots = this._days(start, slotEnd);\n                span = daySlots.length;\n\n                if (span > 0) {\n                    slots.push({\n                        start: daySlots[0].start,\n                        end: daySlots[span - 1].end,\n                        span: span\n                    });\n                }\n\n                start = slotEnd;\n            }\n\n            return slots;\n        },\n\n        _months: function(start, end) {\n            var slotEnd;\n            var endMonth;\n            var slots = [];\n            var daySlots;\n            var span;\n\n            start = new Date(start);\n            end = new Date(end);\n\n            while (start < end) {\n                slotEnd = new Date(start);\n                endMonth = kendo.date.firstDayOfMonth(new Date(slotEnd.setMonth(slotEnd.getMonth() + 1)));\n                slotEnd = end < endMonth ? end : endMonth;\n\n                daySlots = this._days(start, slotEnd);\n                span = daySlots.length;\n\n                if (span > 0) {\n                    slots.push({\n                        start: daySlots[0].start,\n                        end: daySlots[span - 1].end,\n                        span: span\n                    });\n                }\n\n                start = slotEnd;\n            }\n\n            return slots;\n        },\n\n        _years: function(start, end) {\n            var slotEnd;\n            var monthSpan;\n            var endMonth;\n            var slots = [];\n\n            start = new Date(start);\n            end = new Date(end);\n\n            while (start < end) {\n                slotEnd = new Date(start);\n                slotEnd = kendo.date.firstDayOfMonth(new Date(slotEnd.setMonth(12)));\n\n                if (slotEnd >= end) {\n                    slotEnd = end;\n                }\n\n                endMonth = slotEnd.getMonth() || 12;\n                monthSpan = endMonth - start.getMonth();\n\n                slots.push({\n                    start: start,\n                    end: slotEnd,\n                    span: monthSpan\n                });\n\n                start = slotEnd;\n            }\n\n            return slots;\n        },\n\n        _slotHeaders: function(slots, template) {\n            var columns = [];\n            var slot;\n\n            for (var i = 0, l = slots.length; i < l; i++) {\n                slot = slots[i];\n\n                columns.push({\n                    text: template(slot),\n                    isNonWorking: !!slot.isNonWorking,\n                    span: slot.span\n                });\n            }\n\n            return columns;\n        },\n\n        _isWorkDay: function(date) {\n            var day = date.getDay();\n            var workDays = this._workDays;\n\n            for (var i = 0, l = workDays.length; i < l; i++) {\n                if (workDays[i] === day) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        calendarInfo: function() {\n            return kendo.getCulture().calendars.standard;\n        },\n\n        _renderCurrentTime: function() {\n            var currentTime = this._getCurrentTime();\n            var timeOffset = this._offset(currentTime);\n            var element = $(\"<div class='k-current-time'></div>\");\n            var viewStyles = GanttView.styles;\n            var tablesWrap = this.element.find(DOT + viewStyles.tasksWrapper);\n            var tasksTable = this.element.find(DOT + viewStyles.tasksTable);\n            var slot;\n\n            if (!this.content || !this._timeSlots().length) {\n                return;\n            }\n\n            this.content.find(\".k-current-time\").remove();\n\n            slot = this._timeSlots()[this._slotIndex(\"start\", currentTime)];\n\n            if (currentTime < slot.start || currentTime > slot.end) {\n                return;\n            }\n\n            if (tablesWrap.length && tasksTable.length) {\n                timeOffset += tasksTable.offset().left - tablesWrap.offset().left;\n            }\n\n            element.css({\n                left: timeOffset + \"px\",\n                top: \"0px\",\n                width: \"1px\",\n                height: this._contentHeight + \"px\"\n            })\n            .appendTo(this.content);\n        },\n\n        _getCurrentTime: function() {\n            // Introduced for testing purposes\n            return new Date();\n        },\n\n        _currentTime: function() {\n            var markerOptions = this.options.currentTimeMarker;\n\n            if (markerOptions !== false && markerOptions.updateInterval !== undefined) {\n                this._renderCurrentTime();\n                this._currentTimeUpdateTimer = setInterval(this._renderCurrentTime.bind(this), markerOptions.updateInterval);\n            }\n        }\n    });\n\n    extend(true, GanttView, { styles: viewStyles });\n\n    kendo.ui.GanttDayView = GanttView.extend({\n        name: \"day\",\n\n        options: {\n            timeHeaderTemplate: TIME_HEADER_TEMPLATE,\n            dayHeaderTemplate: DAY_HEADER_TEMPLATE,\n            resizeTooltipFormat: \"h:mm tt ddd, MMM d\"\n        },\n\n        range: function(range) {\n            var optionsRange = this.options.range;\n            this.start = kendo.date.getDate(range.start);\n            this.end = kendo.date.getDate(range.end);\n\n            if (kendo.date.getMilliseconds(range.end) > 0 || this.end.getTime() === this.start.getTime()) {\n                this.end = kendo.date.addDays(this.end, 1);\n            }\n\n            if (optionsRange && optionsRange.start) {\n                this.start = kendo.date.getDate(optionsRange.start);\n                this.start.setHours(optionsRange.start.getHours());\n            }\n\n            if (optionsRange && optionsRange.end) {\n                this.end = kendo.date.getDate(optionsRange.end);\n                this.end.setHours(optionsRange.end.getHours());\n            }\n        },\n\n        _createSlots: function() {\n            var daySlots;\n            var daySlot;\n            var hourSlots;\n            var hours;\n            var slots = [];\n\n            daySlots = this._days(this.start, this.end);\n            hourSlots = [];\n\n            for (var i = 0, l = daySlots.length; i < l; i++) {\n                daySlot = daySlots[i];\n                hours = this._hours(daySlot.start, daySlot.end);\n\n                daySlot.span = hours.length;\n\n                hourSlots.push.apply(hourSlots, hours);\n            }\n\n            slots.push(daySlots);\n            slots.push(hourSlots);\n\n            return slots;\n        },\n\n        _layout: function() {\n            var rows = [];\n            var options = this.options;\n\n            rows.push(this._slotHeaders(this._slots[0], kendo.template(options.dayHeaderTemplate)));\n            rows.push(this._slotHeaders(this._slots[1], kendo.template(options.timeHeaderTemplate)));\n\n            return rows;\n        }\n    });\n\n    kendo.ui.GanttWeekView = GanttView.extend({\n        name: \"week\",\n\n        options: {\n            dayHeaderTemplate: DAY_HEADER_TEMPLATE,\n            weekHeaderTemplate: WEEK_HEADER_TEMPLATE,\n            resizeTooltipFormat: \"h:mm tt ddd, MMM d\"\n        },\n\n        range: function(range) {\n            var optionsRange = this.options.range;\n            var calendarInfo = this.calendarInfo();\n            var firstDay = calendarInfo.firstDay;\n            var rangeEnd = range.end;\n            var endDay;\n\n            if (firstDay === rangeEnd.getDay()) {\n                rangeEnd.setDate(rangeEnd.getDate() + 7);\n            }\n\n            this.start = kendo.date.getDate(kendo.date.dayOfWeek(range.start, firstDay, -1));\n            this.end = kendo.date.getDate(kendo.date.dayOfWeek(rangeEnd, firstDay, 1));\n\n            if (optionsRange && optionsRange.start) {\n                this.start = kendo.date.getDate(optionsRange.start);\n            }\n\n            if (optionsRange && optionsRange.end) {\n                endDay = new Date(optionsRange.end);\n\n                if (kendo.date.getDate(endDay) < optionsRange.end) {\n                    this.end = kendo.date.getDate(new Date(endDay.setDate(endDay.getDate() + 1)));\n                } else {\n                    this.end = kendo.date.getDate(endDay);\n                }\n            }\n        },\n\n        _createSlots: function() {\n            var slots = [];\n\n            slots.push(this._weeks(this.start, this.end));\n            slots.push(this._days(this.start, this.end));\n\n            return slots;\n        },\n\n        _layout: function() {\n            var rows = [];\n            var options = this.options;\n\n            rows.push(this._slotHeaders(this._slots[0], kendo.template(options.weekHeaderTemplate)));\n            rows.push(this._slotHeaders(this._slots[1], kendo.template(options.dayHeaderTemplate)));\n\n            return rows;\n        }\n    });\n\n    kendo.ui.GanttMonthView = GanttView.extend({\n        name: \"month\",\n\n        options: {\n            weekHeaderTemplate: WEEK_HEADER_TEMPLATE,\n            monthHeaderTemplate: MONTH_HEADER_TEMPLATE,\n            resizeTooltipFormat: \"dddd, MMM d, yyyy\"\n        },\n\n        range: function(range) {\n            var optionsRange = this.options.range;\n            var endDay;\n            this.start = kendo.date.firstDayOfMonth(range.start);\n            this.end = kendo.date.addDays(kendo.date.getDate(kendo.date.lastDayOfMonth(range.end)), 1);\n\n            if (optionsRange && optionsRange.start) {\n                this.start = kendo.date.getDate(optionsRange.start);\n            }\n\n            if (optionsRange && optionsRange.end) {\n                endDay = new Date(optionsRange.end);\n\n                if (kendo.date.getDate(endDay) < optionsRange.end) {\n                    this.end = kendo.date.getDate(new Date(endDay.setDate(endDay.getDate() + 1)));\n                } else {\n                    this.end = kendo.date.getDate(endDay);\n                }\n            }\n        },\n\n        _createSlots: function() {\n            var slots = [];\n\n            slots.push(this._months(this.start, this.end));\n            slots.push(this._weeks(this.start, this.end));\n\n            return slots;\n        },\n\n        _layout: function() {\n            var rows = [];\n            var options = this.options;\n\n            rows.push(this._slotHeaders(this._slots[0], kendo.template(options.monthHeaderTemplate)));\n            rows.push(this._slotHeaders(this._slots[1], kendo.template(options.weekHeaderTemplate)));\n\n            return rows;\n        }\n    });\n\n    kendo.ui.GanttYearView = GanttView.extend({\n        name: \"year\",\n\n        options: {\n            yearHeaderTemplate: YEAR_HEADER_TEMPLATE,\n            monthHeaderTemplate: MONTH_HEADER_TEMPLATE,\n            resizeTooltipFormat: \"dddd, MMM d, yyyy\"\n        },\n\n        range: function(range) {\n            var optionsRange = this.options.range;\n            var firstDayOfMonth;\n            this.start = kendo.date.firstDayOfMonth(new Date(range.start.setMonth(0)));\n            this.end = kendo.date.firstDayOfMonth(new Date(range.end.setMonth(12))); //set month to first month of next year\n\n            if (optionsRange && optionsRange.start) {\n                this.start = kendo.date.firstDayOfMonth(optionsRange.start);\n            }\n\n            if (optionsRange && optionsRange.end) {\n                firstDayOfMonth = kendo.date.firstDayOfMonth(optionsRange.end);\n\n                this.end = kendo.date.getDate(new Date(firstDayOfMonth.setMonth(firstDayOfMonth.getMonth() + 1)));\n            }\n        },\n\n        _createSlots: function() {\n            var slots = [];\n            var monthSlots = this._months(this.start, this.end);\n\n            $(monthSlots).each(function(index, slot) {\n                slot.span = 1;\n            });\n\n            slots.push(this._years(this.start, this.end));\n            slots.push(monthSlots);\n\n            return slots;\n        },\n\n        _layout: function() {\n            var rows = [];\n            var options = this.options;\n\n            rows.push(this._slotHeaders(this._slots[0], kendo.template(options.yearHeaderTemplate)));\n            rows.push(this._slotHeaders(this._slots[1], kendo.template(options.monthHeaderTemplate)));\n\n            return rows;\n        }\n    });\n\n    var timelineStyles = {\n        wrapper: \"k-gantt-timeline k-grid\",\n        gridHeader: \"k-grid-header\",\n        gridHeaderWrap: \"k-grid-header-wrap\",\n        gridContent: \"k-grid-content\",\n        gridContentWrap: \"k-grid-content\",\n        tasksWrapper: \"k-gantt-tables\",\n        dependenciesWrapper: \"k-gantt-dependencies\",\n        task: \"k-task\",\n        taskOffset: \"k-task-offset\",\n        taskOffsetWrap: \"k-task-offset-wrap\",\n        taskPlanned: \"k-task-planned\",\n        line: \"k-gantt-line\",\n        taskResizeHandle: \"k-resize-handle\",\n        taskResizeHandleWest: \"k-resize-w\",\n        taskDragHandle: \"k-task-draghandle\",\n        taskComplete: \"k-task-complete\",\n        taskDelete: \"k-task-delete\",\n        taskWrapActive: \"k-task-wrap-active\",\n        taskWrap: \"k-task-wrap\",\n        taskDot: \"k-task-dot\",\n        taskDotStart: \"k-task-start\",\n        taskDotEnd: \"k-task-end\",\n        hovered: \"k-hover\",\n        selected: \"k-selected\",\n        origin: \"k-origin\"\n    };\n\n    var GanttTimeline = kendo.ui.GanttTimeline = Widget.extend({\n        init: function(element, options) {\n\n            Widget.fn.init.call(this, element, options);\n\n            if (!this.options.views || !this.options.views.length) {\n                this.options.views = [\"day\", \"week\", \"month\"];\n            }\n\n            isRtl = kendo.support.isRtl(element);\n\n            this._wrapper();\n\n            this._domTrees();\n\n            this._views();\n\n            this._selectable();\n\n            this._draggable();\n\n            this._resizable();\n\n            this._percentResizeDraggable();\n\n            this._createDependencyDraggable();\n\n            this._attachEvents();\n\n            this._navigatable();\n\n            this._tooltip();\n        },\n\n        options: {\n            name: \"GanttTimeline\",\n            messages: {\n                views: {\n                    day: \"Day\",\n                    week: \"Week\",\n                    month: \"Month\",\n                    year: \"Year\",\n                    start: \"Start\",\n                    end: \"End\"\n                }\n            },\n            snap: true,\n            selectable: true,\n            editable: true\n        },\n\n        destroy: function() {\n            Widget.fn.destroy.call(this);\n\n            clearTimeout(this._tooltipTimeout);\n\n            if (this._currentTimeUpdateTimer) {\n                clearInterval(this._currentTimeUpdateTimer);\n            }\n\n            this._unbindView(this._selectedView);\n\n            if (this._moveDraggable) {\n                this._moveDraggable.destroy();\n            }\n\n            if (this._resizeDraggable) {\n                this._resizeDraggable.destroy();\n            }\n\n            if (this._percentDraggable) {\n                this._percentDraggable.destroy();\n            }\n\n            if (this._dependencyDraggable) {\n                this._dependencyDraggable.destroy();\n            }\n\n            if (this.touch) {\n                this.touch.destroy();\n            }\n\n            this._headerTree = null;\n            this._taskTree = null;\n            this._dependencyTree = null;\n\n            this.wrapper.off(NS);\n\n            kendo.destroy(this.wrapper);\n        },\n\n        _findNext: function(row) {\n            return row.next().find(\".k-task\");\n        },\n\n        _findFirst: function(row) {\n            return row.closest(\".k-table-tbody\").find(\".k-task\").first();\n        },\n\n        _findLast: function(row) {\n            return row.closest(\".k-table-tbody\").find(\".k-task\").last();\n        },\n\n        _findPrev: function(row) {\n            return row.prev().find(\".k-task\");\n        },\n\n        _scrollTasks: function(dir) {\n            var that = this;\n            var timelineWrapper = that.wrapper;\n            var timelineScroll = kendo.scrollLeft(timelineWrapper.find(\".k-grid-content\"));\n\n            kendo.scrollLeft(timelineWrapper.find(\".k-grid-content\"), (timelineScroll + (20 * dir)));\n        },\n\n        _navigatable: function() {\n            var that = this;\n            if (!that.options.navigatable) {\n                return;\n            }\n\n            that.wrapper.on(\"keydown\" + NS, \".k-gantt-tables .k-gantt-tasks .k-task\", function(e) {\n                var target = $(e.target);\n                var row = target.closest(\".k-table-row\");\n                var handled = false;\n                var newTask;\n\n                if (e.keyCode == keys.HOME) {\n                    newTask = that._findFirst(row);\n                }\n\n                if (e.keyCode == keys.END) {\n                    newTask = that._findLast(row);\n                }\n\n                if (e.keyCode == keys.DOWN) {\n                    newTask = that._findNext(row);\n                }\n\n                if (e.keyCode == keys.UP) {\n                    newTask = that._findPrev(row);\n                }\n\n                if (newTask) {\n                    handled = true;\n                    if (newTask[0] !== target[0]) {\n                        target.closest(\".k-gantt-tasks\").find(\".k-task\").attr(\"tabindex\", -1);\n                        newTask.attr(\"tabindex\", 0);\n                        newTask.focus();\n                    }\n                }\n\n                if (e.keyCode == keys.LEFT) {\n                    if (e.altKey) {\n                        if (target.hasClass(\"k-task-summary\")) {\n                            that.trigger(\"collapse\", { uid: target.attr(\"data-uid\") });\n                            setTimeout(function() {\n                                that.select().focus();\n                            }, 1);\n                        }\n                    } else {\n                        that._scrollTasks(-1);\n                    }\n                    handled = true;\n                }\n\n                if (e.keyCode == keys.RIGHT) {\n                    if (e.altKey) {\n                        if (target.hasClass(\"k-task-summary\")) {\n                            that.trigger(\"expand\", { uid: target.attr(\"data-uid\") });\n                            setTimeout(function() {\n                                that.select().focus();\n                            }, 1);\n                        }\n                    } else {\n                        that._scrollTasks(1);\n                    }\n                    handled = true;\n                }\n\n                if (e.keyCode == keys.ENTER) {\n                    handled = true;\n                    if (that.options.editable.update !== false) {\n                        that.trigger(\"editTask\", { uid: target.attr(\"data-uid\") });\n                        e.stopPropagation();\n                    }\n                }\n\n                if (e.keyCode == keys.DELETE) {\n                    handled = true;\n                    if (that.options.editable.update !== false) {\n                        that.trigger(\"removeTask\", { uid: target.attr(\"data-uid\") });\n                        e.stopPropagation();\n                    }\n                }\n\n                if (handled) {\n                    e.preventDefault();\n                }\n            })\n            .on(CLICK + NS, DOT + GanttTimeline.styles.task , function(e) {\n                e.preventDefault();\n                var task = $(this);\n\n                that.wrapper.find(DOT + GanttTimeline.styles.task).attr(\"tabindex\", \"-1\");\n\n                task.attr(\"tabindex\", \"0\").focus();\n            });\n        },\n\n\n        _wrapper: function() {\n            var styles = GanttTimeline.styles;\n            var that = this;\n            var options = this.options;\n            var calculateSize = function() {\n                var rowHeight = typeof options.rowHeight === STRING ? options.rowHeight :\n                    options.rowHeight + \"px\";\n                var table = $(kendo.format(SIZE_CALCULATION_TEMPLATE, rowHeight));\n                var calculatedRowHeight;\n                var calculatedCellHeight;\n                var content = that.wrapper.find(DOT + styles.tasksWrapper);\n\n                kendo.applyStylesFromKendoAttributes(table, [\"height\", \"visibility\"]);\n                content.append(table);\n\n                calculatedRowHeight = outerHeight(table.find(\"tr\"));\n                calculatedCellHeight = table.find(\"td\").height();\n\n                table.remove();\n\n                return {\n                    \"row\": calculatedRowHeight,\n                    \"cell\": calculatedCellHeight\n                };\n            };\n\n            this.wrapper = this.element\n                .addClass(styles.wrapper)\n                .append(\"<div class='\" + styles.gridHeader + \"'><div class='\" + styles.gridHeaderWrap + \"'></div></div>\")\n                .append(\"<div role='tree' class='\" + styles.gridContentWrap + \"'><div class='\" + styles.tasksWrapper + \"'></div><div class='\" + styles.dependenciesWrapper + \"'></div></div>\");\n\n            if (options.rowHeight) {\n                this._calculatedSize = calculateSize();\n            }\n        },\n\n        _domTrees: function() {\n            var styles = GanttTimeline.styles;\n            var tree = kendo.dom.Tree;\n            var wrapper = this.wrapper;\n\n            this._headerTree = new tree(wrapper.find(DOT + styles.gridHeaderWrap)[0]);\n\n            this._taskTree = new tree(wrapper.find(DOT + styles.tasksWrapper)[0]);\n\n            this._dependencyTree = new tree(wrapper.find(DOT + styles.dependenciesWrapper)[0]);\n        },\n\n        _views: function() {\n            var views = this.options.views;\n            var view;\n            var isSettings;\n            var name;\n            var defaultView;\n            var selected;\n\n            this.views = {};\n\n            for (var i = 0, l = views.length; i < l; i++) {\n                view = views[i];\n\n                isSettings = isPlainObject(view);\n\n                if (isSettings && view.selectable === false) {\n                    continue;\n                }\n\n                name = isSettings ? ((typeof view.type !== \"string\") ? view.title : view.type) : view;\n\n                defaultView = defaultViews[name];\n\n                if (defaultView) {\n                    if (isSettings) {\n                        view.type = defaultView.type;\n                    }\n\n                    defaultView.title = this.options.messages.views[name];\n                }\n\n                view = extend({ title: name }, defaultView, isSettings ? view : {});\n\n                if (name) {\n                    this.views[name] = view;\n\n                    if (!selected || view.selected) {\n                        selected = name;\n                    }\n                }\n            }\n\n            if (selected) {\n                this._selectedViewName = selected;\n            }\n        },\n\n        view: function(name) {\n            if (name) {\n                this._selectView(name);\n\n                this.trigger(\"navigate\", { view: name, action: \"changeView\" });\n            }\n\n            return this._selectedView;\n        },\n\n        _selectView: function(name) {\n            if (name && this.views[name]) {\n                if (this._selectedView) {\n                    this._unbindView(this._selectedView);\n                }\n\n                this._selectedView = this._initializeView(name);\n                this._selectedViewName = name;\n            }\n        },\n\n        _viewByIndex: function(index) {\n            var view;\n            var views = this.views;\n\n            for (view in views) {\n                if (!index) {\n                    return view;\n                }\n\n                index--;\n            }\n        },\n\n        _initializeView: function(name) {\n            var view = this.views[name];\n\n            if (view) {\n                var type = view.type;\n\n                if (typeof type === \"string\") {\n                    type = kendo.getter(view.type)(window);\n                }\n\n                if (type) {\n                    var newRange = {};\n                    extend(newRange, this.options.range, view.range);\n\n                    var newDate = view.date || this.options.date;\n\n                    view = new type(this.wrapper, trimOptions(extend(true, {\n                        headerTree: this._headerTree,\n                        taskTree: this._taskTree,\n                        dependencyTree: this._dependencyTree,\n                        calculatedSize: this._calculatedSize\n                    }, view, this.options, {\n                        date: newDate,\n                        range: newRange\n                    })));\n                } else {\n                    throw new Error(\"There is no such view\");\n                }\n            }\n\n            return view;\n        },\n\n        _unbindView: function(view) {\n            if (view) {\n                view.destroy();\n            }\n        },\n\n        _range: function(tasks) {\n            var startOrder = {\n                field: \"start\",\n                dir: \"asc\"\n            };\n            var endOrder = {\n                field: \"end\",\n                dir: \"desc\"\n            };\n\n            if (!tasks || !tasks.length) {\n                return { start: new Date(), end: new Date() };\n            }\n\n            var start = new Query(tasks).sort(startOrder).toArray()[0].start || new Date();\n            var end = new Query(tasks).sort(endOrder).toArray()[0].end || new Date();\n\n            return {\n                start: new Date(start),\n                end: new Date(end)\n            };\n        },\n\n        _render: function(tasks) {\n            var view = this.view();\n            var range = this._range(tasks);\n            var date = view.options.date;\n\n            this._tasks = tasks;\n\n            view.range(range);\n\n            view.renderLayout();\n\n            view.render(tasks);\n\n            if (date) {\n                view._scrollToDate(date);\n            }\n        },\n\n        _renderDependencies: function(dependencies) {\n            this.view()._renderDependencies(dependencies);\n        },\n\n        _taskByUid: function(uid) {\n            var tasks = this._tasks;\n            var length = tasks.length;\n            var task;\n\n            for (var i = 0; i < length; i++) {\n                task = tasks[i];\n\n                if (task.uid === uid) {\n                    return task;\n                }\n            }\n        },\n\n        _draggable: function() {\n            var that = this;\n            var element;\n            var task;\n            var currentStart;\n            var startOffset;\n            var snap = this.options.snap;\n            var styles = GanttTimeline.styles;\n            var editable = this.options.editable;\n\n            var cleanUp = function() {\n                that.view()._removeDragHint();\n\n                if (element) {\n                    element.css(\"opacity\", 1);\n                }\n\n                element = null;\n                task = null;\n                that.dragInProgress = false;\n            };\n\n            if (!editable || editable.move === false || editable.update === false) {\n                return;\n            }\n\n            this._moveDraggable = new kendo.ui.Draggable(this.wrapper, {\n                distance: 0,\n                filter: DOT + styles.task + \",\" + DOT + styles.taskOffset,\n                holdToDrag: kendo.support.mobileOS,\n                ignore: DOT + styles.taskResizeHandle\n            });\n\n            this._moveDraggable\n                .bind(\"dragstart\", function(e) {\n                    var view = that.view();\n                    element = e.currentTarget.closest(DOT + styles.taskWrap);\n                    task = that._taskByUid(e.currentTarget.parent().find(DOT + styles.task).attr(\"data-uid\"));\n\n                    if (that.trigger(\"moveStart\", { task: task })) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    currentStart = task.start;\n                    startOffset = view._timeByPosition(e.x.location, snap) - currentStart;\n\n                    view._createDragHint(element);\n\n                    element.css(\"opacity\", 0.5);\n\n                    clearTimeout(that._tooltipTimeout);\n                    that.dragInProgress = true;\n                })\n                .bind(\"drag\", kendo.throttle(function(e) {\n                    if (!that.dragInProgress) {\n                        return;\n                    }\n\n                    var view = that.view();\n                    var date = new Date(view._timeByPosition(e.x.location, snap) - startOffset);\n                    var updateHintDate = date;\n\n                    if (!that.trigger(\"move\", { task: task, start: date })) {\n                        currentStart = date;\n\n                        if (isRtl) {\n                            updateHintDate = new Date(currentStart.getTime() + task.duration());\n                        }\n\n                        view._updateDragHint(updateHintDate);\n                    }\n                }, 15))\n                .bind(\"dragend\", function() {\n                    that.trigger(\"moveEnd\", { task: task, start: currentStart });\n\n                    cleanUp();\n                })\n                .bind(\"dragcancel\", function() {\n                    cleanUp();\n                })\n                .userEvents.bind(\"select\", function() {\n                    blurActiveElement();\n                });\n        },\n\n        _resizable: function() {\n            var that = this;\n            var element;\n            var task;\n            var currentStart;\n            var currentEnd;\n            var resizeStart;\n            var snap = this.options.snap;\n            var styles = GanttTimeline.styles;\n            var editable = this.options.editable;\n\n            var cleanUp = function() {\n                that.view()._removeResizeHint();\n                element = null;\n                task = null;\n                that.dragInProgress = false;\n            };\n\n            if (!editable || editable.resize === false || editable.update === false) {\n                return;\n            }\n\n            this._resizeDraggable = new kendo.ui.Draggable(this.wrapper, {\n                distance: 0,\n                filter: DOT + styles.taskResizeHandle,\n                holdToDrag: false\n            });\n\n            this._resizeDraggable\n                .bind(\"dragstart\", function(e) {\n                    resizeStart = e.currentTarget.hasClass(styles.taskResizeHandleWest);\n\n                    if (isRtl) {\n                        resizeStart = !resizeStart;\n                    }\n\n                    element = e.currentTarget.closest(DOT + styles.taskWrap).find(DOT + styles.task);\n\n                    task = that._taskByUid(element.attr(\"data-uid\"));\n\n                    if (that.trigger(\"resizeStart\", { task: task })) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    currentStart = task.start;\n                    currentEnd = task.end;\n\n                    that.view()._createResizeHint(task);\n\n                    clearTimeout(that._tooltipTimeout);\n                    that.dragInProgress = true;\n                })\n                .bind(\"drag\", kendo.throttle(function(e) {\n                    if (!that.dragInProgress) {\n                        return;\n                    }\n\n                    var view = that.view();\n                    var date = view._timeByPosition(e.x.location, snap, !resizeStart);\n\n                    if (resizeStart) {\n                        if (date < currentEnd) {\n                            currentStart = date;\n                        } else {\n                            currentStart = currentEnd;\n                        }\n                    } else {\n                        if (date > currentStart) {\n                            currentEnd = date;\n                        } else {\n                            currentEnd = currentStart;\n                        }\n                    }\n\n                    if (!that.trigger(\"resize\", { task: task, start: currentStart, end: currentEnd })) {\n                        view._updateResizeHint(currentStart, currentEnd, resizeStart);\n                    }\n                }, 15))\n                .bind(\"dragend\", function() {\n                    that.trigger(\"resizeEnd\", { task: task, resizeStart: resizeStart, start: currentStart, end: currentEnd });\n\n                    cleanUp();\n                })\n                .bind(\"dragcancel\", function() {\n                    cleanUp();\n                })\n                .userEvents.bind(\"select\", function() {\n                    blurActiveElement();\n                });\n        },\n\n        _percentResizeDraggable: function() {\n            var that = this;\n            var task;\n            var taskElement;\n            var taskElementOffset;\n            var timelineOffset;\n            var originalPercentWidth;\n            var maxPercentWidth;\n            var currentPercentComplete;\n            var tooltipTop;\n            var tooltipLeft;\n            var styles = GanttTimeline.styles;\n            var delta;\n            var editable = this.options.editable;\n\n            var cleanUp = function() {\n                that.view()._removePercentCompleteTooltip();\n                taskElement = null;\n                task = null;\n                that.dragInProgress = false;\n            };\n\n            var updateElement = function(width) {\n                var taskDragHandle = taskElement.siblings(DOT + styles.taskDragHandle);\n\n                if (!taskDragHandle.length) {\n                    taskDragHandle = taskElement.closest(DOT + styles.taskWrap).find(DOT + styles.taskDragHandle);\n                }\n\n                taskDragHandle.css(isRtl ? \"right\" : \"left\", width);\n\n                taskElement\n                    .find(DOT + styles.taskComplete)\n                    .width(width);\n            };\n\n            if (!editable || editable.dragPercentComplete === false || editable.update === false) {\n                return;\n            }\n\n            this._percentDraggable = new kendo.ui.Draggable(this.wrapper, {\n                distance: 0,\n                filter: DOT + styles.taskDragHandle,\n                holdToDrag: false\n            });\n\n            this._percentDraggable\n                .bind(\"dragstart\", function(e) {\n                    if (that.trigger(\"percentResizeStart\")) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    taskElement = e.currentTarget.siblings(DOT + styles.task);\n\n                    if (!taskElement.length) {\n                        taskElement = e.currentTarget.closest(DOT + styles.taskWrap).find(DOT + styles.task);\n                    }\n\n                    task = that._taskByUid(taskElement.attr(\"data-uid\"));\n\n                    currentPercentComplete = task.percentComplete;\n\n                    taskElementOffset = taskElement.offset();\n                    timelineOffset = this.element.offset();\n\n                    originalPercentWidth = taskElement.find(DOT + styles.taskComplete).width();\n                    maxPercentWidth = outerWidth(taskElement);\n\n                    clearTimeout(that._tooltipTimeout);\n                    that.dragInProgress = true;\n                })\n                .bind(\"drag\", kendo.throttle(function(e) {\n                    if (!that.dragInProgress) {\n                        return;\n                    }\n\n                    delta = isRtl ? -e.x.initialDelta : e.x.initialDelta;\n\n                    var currentWidth = Math.max(0, Math.min(maxPercentWidth, originalPercentWidth + delta));\n\n                    currentPercentComplete = Math.round((currentWidth / maxPercentWidth) * 100);\n\n                    updateElement(currentWidth);\n\n                    tooltipTop = taskElementOffset.top - timelineOffset.top;\n                    tooltipLeft = taskElementOffset.left + currentWidth - timelineOffset.left;\n\n                    if (isRtl) {\n                        tooltipLeft += (maxPercentWidth - 2 * currentWidth);\n                    }\n\n                    that.view()._updatePercentCompleteTooltip(tooltipTop, tooltipLeft, currentPercentComplete);\n                }, 15))\n                .bind(\"dragend\", function() {\n                    that.trigger(\"percentResizeEnd\", { task: task, percentComplete: currentPercentComplete / 100 });\n\n                    cleanUp();\n                })\n                .bind(\"dragcancel\", function() {\n                    updateElement(originalPercentWidth);\n\n                    cleanUp();\n                })\n                .userEvents.bind(\"select\", function() {\n                    blurActiveElement();\n                });\n        },\n\n        _createDependencyDraggable: function() {\n            var that = this;\n            var originalHandle;\n            var hoveredHandle = $();\n            var hoveredTask = $();\n            var startX;\n            var startY;\n            var styles = GanttTimeline.styles;\n            var editable = this.options.editable;\n\n            var cleanUp = function() {\n                originalHandle\n                    .css(\"display\", \"\")\n                    .removeClass(styles.hovered);\n\n                originalHandle.parent().removeClass(styles.origin);\n                originalHandle = null;\n\n                toggleHandles(false);\n\n                hoveredTask = $();\n                hoveredHandle = $();\n\n                that.view()._removeDependencyDragHint();\n\n                that.dragInProgress = false;\n            };\n\n            var toggleHandles = function(value) {\n                if (!hoveredTask.hasClass(styles.origin)) {\n                    hoveredTask.find(DOT + styles.taskDot).css(\"display\", value ? \"block\" : \"\");\n                    hoveredHandle.toggleClass(styles.hovered, value);\n                }\n            };\n\n            if (!editable || editable.dependencyCreate === false) {\n                return;\n            }\n\n            this._dependencyDraggable = new kendo.ui.Draggable(this.wrapper, {\n                distance: 0,\n                filter: DOT + styles.taskDot,\n                holdToDrag: false\n            });\n\n            this._dependencyDraggable\n                .bind(\"dragstart\", function(e) {\n                    if (that.trigger(\"dependencyDragStart\")) {\n                        e.preventDefault();\n                        return;\n                    }\n\n                    originalHandle = e.currentTarget\n                        .css(\"display\", \"block\")\n                        .addClass(styles.hovered);\n\n                    originalHandle.parent().addClass(styles.origin);\n\n                    var elementOffset = originalHandle.offset();\n                    var tablesOffset = that.wrapper.find(DOT + styles.tasksWrapper).offset();\n\n                    startX = Math.round(elementOffset.left - tablesOffset.left + (outerHeight(originalHandle) / 2));\n                    startY = Math.round(elementOffset.top - tablesOffset.top + (outerWidth(originalHandle) / 2));\n\n                    clearTimeout(that._tooltipTimeout);\n                    that.dragInProgress = true;\n                })\n                .bind(\"drag\", kendo.throttle(function(e) {\n                    if (!that.dragInProgress) {\n                        return;\n                    }\n\n                    that.view()._removeDependencyDragHint();\n\n                    var target = $(kendo.elementUnderCursor(e));\n                    var tablesOffset = that.wrapper.find(DOT + styles.tasksWrapper).offset();\n                    var currentX = e.x.location - tablesOffset.left;\n                    var currentY = e.y.location - tablesOffset.top;\n\n                    that.view()._updateDependencyDragHint({ x: startX, y: startY }, { x: currentX, y: currentY });\n\n                    toggleHandles(false);\n\n                    hoveredHandle = (target.hasClass(styles.taskDot)) ? target : $();\n                    hoveredTask = target.closest(DOT + styles.taskWrap);\n\n                    toggleHandles(true);\n                }, 15))\n                .bind(\"dragend\", function() {\n                    if (hoveredHandle.length) {\n                        var fromStart = originalHandle.hasClass(styles.taskDotStart);\n                        var toStart = hoveredHandle.hasClass(styles.taskDotStart);\n\n                        var type = fromStart ? (toStart ? 3 : 2) : (toStart ? 1 : 0);\n\n                        var predecessorElement = originalHandle.siblings(DOT + styles.task);\n                        if (!predecessorElement.length) {\n                            predecessorElement = originalHandle.closest(DOT + styles.taskWrap).find(DOT + styles.task);\n                        }\n                        var predecessor = that._taskByUid(predecessorElement.attr(\"data-uid\"));\n\n                        var successorElement = hoveredHandle.siblings(DOT + styles.task);\n                        if (!successorElement.length) {\n                            successorElement = hoveredHandle.closest(DOT + styles.taskWrap).find(DOT + styles.task);\n                        }\n                        var successor = that._taskByUid(successorElement.attr(\"data-uid\"));\n\n                        if (predecessor !== successor) {\n                            that.trigger(\"dependencyDragEnd\", { type: type, predecessor: predecessor, successor: successor });\n                        }\n                    }\n\n                    cleanUp();\n                })\n                .bind(\"dragcancel\", function() {\n                    cleanUp();\n                })\n                .userEvents.bind(\"select\", function() {\n                    blurActiveElement();\n                });\n        },\n\n        _selectable: function() {\n            var that = this;\n            var styles = GanttTimeline.styles;\n\n            if (this.options.selectable) {\n                this.wrapper\n                    .on(CLICK + NS, DOT + styles.task + \",\" + DOT + styles.taskOffset, function(e) {\n                        e.stopPropagation();\n\n                        var uid = $(this).attr(\"data-uid\");\n\n                        if (!uid) {\n                            uid = $(this).closest(DOT + styles.taskWrap).find(DOT + styles.task).data(\"uid\");\n                        }\n\n                        if (!e.ctrlKey) {\n                            that.trigger(\"select\", { uid: uid });\n                        } else {\n                            that.trigger(\"clear\");\n                        }\n                    })\n                    .on(CLICK + NS, DOT + styles.taskWrap, function(e) {\n                        e.stopPropagation();\n\n                        // Decrease z-index of wrap so the we can get to the\n                        // dependency line underneath, if there is any\n                        $(this).css(\"z-index\", \"0\");\n\n                        var target = $(document.elementFromPoint(e.clientX, e.clientY));\n\n                        if (target.hasClass(styles.line)) {\n                            target.click();\n                        }\n\n                        $(this).css(\"z-index\", \"\");\n                    })\n                    .on(CLICK + NS, DOT + styles.tasksWrapper, function() {\n                        if (that.selectDependency().length > 0) {\n                            that.clearSelection();\n                        } else {\n                            that.trigger(\"clear\");\n                        }\n                    })\n                    .on(CLICK + NS, DOT + styles.line, function(e) {\n                        e.stopPropagation();\n\n                        that.selectDependency(this);\n                    });\n            }\n        },\n\n        select: function(value) {\n            var element = this.wrapper.find(value);\n            var styles = GanttTimeline.styles;\n\n            if (element.length) {\n                this.clearSelection();\n\n                element.addClass(styles.selected);\n\n                if (kendo.support.mobileOS) {\n                    element.parent().addClass(styles.taskWrapActive);\n                }\n\n                return;\n            }\n\n            return this.wrapper.find(DOT + styles.task + DOT + styles.selected);\n        },\n\n        selectDependency: function(value) {\n            var element = this.wrapper.find(value);\n            var uid;\n            var styles = GanttTimeline.styles;\n\n            if (element.length) {\n                this.clearSelection();\n                this.trigger(\"clear\");\n\n                uid = $(element).attr(\"data-uid\");\n\n                this.wrapper.find(DOT + styles.line + \"[data-uid='\" + uid + \"']\").addClass(styles.selected);\n\n                return;\n            }\n\n            return this.wrapper.find(DOT + styles.line + DOT + styles.selected);\n        },\n\n        clearSelection: function() {\n            var styles = GanttTimeline.styles;\n\n            this.wrapper\n                .find(DOT + styles.selected)\n                .removeClass(styles.selected);\n\n            if (kendo.support.mobileOS) {\n                this.wrapper\n                    .find(DOT + styles.taskWrapActive)\n                    .removeClass(styles.taskWrapActive);\n            }\n        },\n\n        _attachEvents: function() {\n            var that = this;\n            var styles = GanttTimeline.styles;\n            var editable = this.options.editable;\n\n            if (editable) {\n\n                this.wrapper\n                    .on(CLICK + NS, DOT + styles.taskDelete, function(e) {\n                        that.trigger(\"removeTask\", { uid: $(this).closest(DOT + styles.taskWrap).find(DOT + styles.task).attr(\"data-uid\") });\n                        e.stopPropagation();\n                        e.preventDefault();\n                    })\n                    .on(KEYDOWN + NS, function(e) {\n                        var selectedDependency;\n                        var editable = that.options.editable;\n\n                        if (e.keyCode === keys.DELETE && editable && editable.dependencyDestroy !== false) {\n                            selectedDependency = that.selectDependency();\n\n                            if (selectedDependency.length) {\n                                that.trigger(\"removeDependency\", { uid: selectedDependency.attr(\"data-uid\") });\n                                that.clearSelection();\n                            }\n                        }\n                    });\n\n                if (!kendo.support.mobileOS) {\n                    this.wrapper\n                        .on(DBLCLICK + NS, DOT + styles.task + \",\" + DOT + styles.taskOffset, function(e) {\n                            if (that.options.editable.update !== false) {\n                                that.trigger(\"editTask\", { uid: $(this).closest(DOT + styles.taskWrap).find(DOT + styles.task).attr(\"data-uid\") });\n\n                                e.stopPropagation();\n                                e.preventDefault();\n                            }\n                        });\n                } else {\n                    this.touch = this.wrapper\n                        .kendoTouch({\n                            filter: DOT + styles.task + \",\" + DOT + styles.taskOffset,\n                            doubletap: function(e) {\n                                if (that.options.editable.update !== false) {\n                                    that.trigger(\"editTask\", { uid: $(e.touch.currentTarget).closest(DOT + styles.taskWrap).find(DOT + styles.task).attr(\"data-uid\") });\n                                }\n                            }\n                        }).data(\"kendoTouch\");\n                }\n            }\n        },\n\n        _tooltip: function() {\n            var that = this;\n            var tooltipOptions = this.options.tooltip;\n            var styles = GanttTimeline.styles;\n            var currentMousePosition;\n            var mouseMoveHandler = function(e) {\n                currentMousePosition = e.clientX;\n            };\n\n            if (tooltipOptions && tooltipOptions.visible === false) {\n                return;\n            }\n\n            if (!kendo.support.mobileOS) {\n                this.wrapper\n                        .on(MOUSEENTER + NS, DOT + styles.task, function() {\n                            var element = this;\n                            var task = that._taskByUid($(this).attr(\"data-uid\"));\n\n                            if (that.dragInProgress) {\n                                return;\n                            }\n\n                            that._tooltipTimeout = setTimeout(function() {\n                                that.view()._createTaskTooltip(task, element, currentMousePosition);\n                            }, 800);\n\n                            $(this).on(MOUSEMOVE, mouseMoveHandler);\n                        })\n                        .on(MOUSELEAVE + NS, DOT + styles.task, function() {\n                            clearTimeout(that._tooltipTimeout);\n\n                            that.view()._removeTaskTooltip();\n\n                            $(this).off(MOUSEMOVE, mouseMoveHandler);\n                        })\n                        .on(MOUSEENTER + NS, DOT + styles.taskOffset, function() {\n                            var taskElement = $(this).closest(DOT + styles.taskWrap).find(DOT + styles.task);\n                            var task = that._taskByUid(taskElement.attr(\"data-uid\"));\n\n                            if (that.dragInProgress) {\n                                return;\n                            }\n\n                            that._offsetTooltipTimeout = setTimeout(function() {\n                                that.view()._createOffsetTooltip(task, taskElement, currentMousePosition);\n                            }, 800);\n\n                            $(this).on(MOUSEMOVE, mouseMoveHandler);\n                        })\n                        .on(MOUSELEAVE + NS, DOT + styles.taskOffset, function() {\n                            clearTimeout(that._offsetTooltipTimeout);\n\n                            that.view()._removeOffsetTooltip();\n\n                            $(this).off(MOUSEMOVE, mouseMoveHandler);\n                        })\n                        .on(MOUSEENTER + NS, DOT + styles.taskPlanned, function() {\n                            var taskElement = $(this).closest(DOT + styles.taskWrap).find(DOT + styles.task);\n                            var task = that._taskByUid(taskElement.attr(\"data-uid\"));\n\n                            that._plannedTooltipTimeout = setTimeout(function() {\n                                that.view()._createPlannedTooltip(task, taskElement, currentMousePosition);\n                            }, 800);\n\n                            $(this).on(MOUSEMOVE, mouseMoveHandler);\n                        })\n                        .on(MOUSELEAVE + NS, DOT + styles.taskPlanned, function() {\n                            clearTimeout(that._plannedTooltipTimeout);\n\n                            that.view()._removePlannedTooltip();\n\n                            $(this).off(MOUSEMOVE, mouseMoveHandler);\n                        });\n            } else {\n                this.wrapper\n                    .on(CLICK + NS, DOT + styles.taskDelete, function(e) {\n                        e.stopPropagation();\n                        that.view()._removeTaskTooltip();\n                    })\n                    .on(MOUSELEAVE + NS, DOT + styles.task, function(e) {\n                        var parents = $(e.relatedTarget).parents(DOT + styles.taskWrap, DOT + styles.task);\n\n                        if (parents.length === 0) {\n                            that.view()._removeTaskTooltip();\n                        }\n                    })\n                    .on(MOUSELEAVE + NS, DOT + styles.taskOffset, function(e) {\n                        var parents = $(e.relatedTarget).parents(DOT + styles.taskWrap, DOT + styles.task);\n\n                        if (parents.length === 0) {\n                            that.view()._removeOffsetTooltip();\n                        }\n                    })\n                    .on(MOUSELEAVE + NS, DOT + styles.taskPlanned, function(e) {\n                        var parents = $(e.relatedTarget).parents(DOT + styles.taskWrap, DOT + styles.task);\n\n                        if (parents.length === 0) {\n                            that.view()._removePlannedTooltip();\n                        }\n                    });\n\n                if (this.touch) {\n                    this.touch\n                        .bind(\"tap\", function(e) {\n                            var element = $(e.touch.target);\n                            var currentPosition = e.touch.x.client;\n                            var task;\n\n                            if (!element.hasClass(styles.task)) {\n                                task = that._taskByUid(element.closest(DOT + styles.taskWrap).find(DOT + styles.task).attr(\"data-uid\"));\n                                if (that.view()._offsetTooltip) {\n                                    that.view()._removeOffsetTooltip();\n                                }\n\n                                that.view()._createOffsetTooltip(task, element, currentPosition);\n                            } else {\n                                task = that._taskByUid(element.attr(\"data-uid\"));\n                                if (that.view()._taskTooltip) {\n                                    that.view()._removeTaskTooltip();\n                                }\n\n                                that.view()._createTaskTooltip(task, element, currentPosition);\n                            }\n                        })\n                        .bind(\"doubletap\", function() {\n                            that.view()._removeTaskTooltip();\n                            that.view()._removeOffsetTooltip();\n                        });\n                }\n            }\n        },\n        _setPlanned: function(value) {\n            this.options.showPlannedTasks = value;\n            this.view().options.showPlannedTasks = value;\n        }\n    });\n\n    extend(true, GanttTimeline, { styles: timelineStyles });\n\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}